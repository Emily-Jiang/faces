= Contents

[#50638854_pgfId-1002062]## 

=== [#50638879_pgfId-1326488]##

image:JSF-1.gif[image]

Contents

image:JSF-2.gif[image]

======= [#50638879_pgfId-1381352]##link:JSF.htm#50638856_pgfId-24335[Preface 1]

======= [#50638879_pgfId-1381354]##link:JSF.htm#50638856_pgfId-32210[Changes between 2.2 and 2.3 1]

{empty}[#50638879_pgfId-1381356]##link:JSF.htm#50638856_pgfId-32212[Big
Ticket Features 1]

{empty}[#50638879_pgfId-1381358]##link:JSF.htm#50638856_pgfId-32237[Other
Features, by Functional Area 2]

{empty}[#50638879_pgfId-1381360]##link:JSF.htm#50638856_pgfId-36313[Components/Renderers
2]

{empty}[#50638879_pgfId-1381362]##link:JSF.htm#50638856_pgfId-32264[Lifecycle
3]

{empty}[#50638879_pgfId-1381364]##link:JSF.htm#50638856_pgfId-42776[Platform
Integration 4]

{empty}[#50638879_pgfId-1381366]##link:JSF.htm#50638856_pgfId-34248[Facelets/VDL
4]

{empty}[#50638879_pgfId-1381368]##link:JSF.htm#50638856_pgfId-42756[Spec
Clarifications 5]

{empty}[#50638879_pgfId-1381370]##link:JSF.htm#50638856_pgfId-39251[Resources
6]

{empty}[#50638879_pgfId-1381372]##link:JSF.htm#50638856_pgfId-32405[Expression
Language. 6]

{empty}[#50638879_pgfId-1381374]##link:JSF.htm#50638856_pgfId-32417[Configuration
and Bootstrapping 6]

{empty}[#50638879_pgfId-1381376]##link:JSF.htm#50638856_pgfId-42643[Miscellaneous
6]

{empty}[#50638879_pgfId-1381378]##link:JSF.htm#50638856_pgfId-33475[Backward
Compatibility with Previous Versions 6]

{empty}[#50638879_pgfId-1381380]##link:JSF.htm#50638856_pgfId-33477[Breakages
in Backward Compatibility 7]

======= [#50638879_pgfId-1381382]##link:JSF.htm#50638856_pgfId-33478[Related Technologies 7]

{empty}[#50638879_pgfId-1381384]##link:JSF.htm#50638856_pgfId-14707[Other
Java™ Platform Specifications 7]

{empty}[#50638879_pgfId-1381386]##link:JSF.htm#50638856_pgfId-13951[Related
Documents and Specifications 7]

{empty}[#50638879_pgfId-1381388]##link:JSF.htm#50638856_pgfId-13961[Terminology
8]

{empty}[#50638879_pgfId-1381390]##link:JSF.htm#50638856_pgfId-13964[Providing
Feedback 8]

{empty}[#50638879_pgfId-1381392]##link:JSF.htm#50638856_pgfId-13967[Acknowledgements
8]

======= [#50638879_pgfId-1381394]##link:JSF.htm#50638858_pgfId-1001156[Overview 1–11]

{empty}[#50638879_pgfId-1381396]##link:JSF.htm#50638858_pgfId-1000653[1.1
Solving Practical Problems of the Web 1–11]

{empty}[#50638879_pgfId-1381398]##link:JSF.htm#50638858_pgfId-1000663[1.2
Specification Audience 1–12]

{empty}[#50638879_pgfId-1381400]##link:JSF.htm#50638858_pgfId-1000668[1.2.1
Page Authors 1–12]

{empty}[#50638879_pgfId-1381402]##link:JSF.htm#50638858_pgfId-1000672[1.2.2
Component Writers 1–12]

{empty}[#50638879_pgfId-1381404]##link:JSF.htm#50638858_pgfId-1000691[1.2.3
Application Developers 1–13]

{empty}[#50638879_pgfId-1381406]##link:JSF.htm#50638858_pgfId-1000707[1.2.4
Tool Providers 1–13]

{empty}[#50638879_pgfId-1381408]##link:JSF.htm#50638858_pgfId-1000716[1.2.5
JSF Implementors 1–14]

{empty}[#50638879_pgfId-1381410]##link:JSF.htm#50638858_pgfId-1000719[1.3
Introduction to JSF APIs 1–14]

[#50638879_pgfId-1381412]##link:JSF.htm#50638858_pgfId-1000721[1.3.1
package] _javax.faces_ 1–14

[#50638879_pgfId-1381414]##link:JSF.htm#50638858_pgfId-1000727[1.3.2
package] _javax.faces.application_ 1–14

[#50638879_pgfId-1381416]##link:JSF.htm#50638858_pgfId-1000733[1.3.3
package] _javax.faces.component_ 1–14

[#50638879_pgfId-1381418]##link:JSF.htm#50638858_pgfId-1000739[1.3.4
package] _javax.faces.component.html_ 1–15

[#50638879_pgfId-1381420]##link:JSF.htm#50638858_pgfId-1000741[1.3.5
package] _javax.faces.context_ 1–15

[#50638879_pgfId-1381422]##link:JSF.htm#50638858_pgfId-1000747[1.3.6
package] _javax.faces.convert_ 1–15

[#50638879_pgfId-1381424]##link:JSF.htm#50638858_pgfId-1000753[1.3.7
package] _javax.faces.el_ 1–15

[#50638879_pgfId-1381426]##link:JSF.htm#50638858_pgfId-1001196[1.3.8
package] _javax.faces.flow_ and _javax.faces.flow.builder_ 1–15

[#50638879_pgfId-1381428]##link:JSF.htm#50638858_pgfId-1000759[1.3.9
package] _javax.faces.lifecycle_ 1–15

[#50638879_pgfId-1381430]##link:JSF.htm#50638858_pgfId-1000765[1.3.10
package] _javax.faces.event_ 1–15

[#50638879_pgfId-1381432]##link:JSF.htm#50638858_pgfId-1000771[1.3.11
package] _javax.faces.render_ 1–16

[#50638879_pgfId-1381434]##link:JSF.htm#50638858_pgfId-1000777[1.3.12
package] _javax.faces.validator_ 1–16

[#50638879_pgfId-1381436]##link:JSF.htm#50638858_pgfId-1000783[1.3.13
package] _javax.faces.webapp_ 1–16

======= [#50638879_pgfId-1381438]##link:JSF.htm#50638877_pgfId-1013467[Request Processing Lifecycle 2–1]

{empty}[#50638879_pgfId-1381440]##link:JSF.htm#50638877_pgfId-1006973[2.1
Request Processing Lifecycle Scenarios 2–2]

{empty}[#50638879_pgfId-1381442]##link:JSF.htm#50638877_pgfId-1006975[2.1.1
Non-Faces Request Generates Faces Response 2–2]

{empty}[#50638879_pgfId-1381444]##link:JSF.htm#50638877_pgfId-1006987[2.1.2
Faces Request Generates Faces Response 2–2]

{empty}[#50638879_pgfId-1381446]##link:JSF.htm#50638877_pgfId-1007002[2.1.3
Faces Request Generates Non-Faces Response 2–3]

{empty}[#50638879_pgfId-1381448]##link:JSF.htm#50638877_pgfId-1007008[2.2
Standard Request Processing Lifecycle Phases 2–4]

{empty}[#50638879_pgfId-1381450]##link:JSF.htm#50638877_pgfId-1007011[2.2.1
Restore View 2–4]

{empty}[#50638879_pgfId-1381452]##link:JSF.htm#50638877_pgfId-1008432[2.2.2
Apply Request Values 2–5]

{empty}[#50638879_pgfId-1381454]##link:JSF.htm#50638877_pgfId-1011818[2.2.2.1
Apply Request Values Partial Processing 2–6]

{empty}[#50638879_pgfId-1381456]##link:JSF.htm#50638877_pgfId-1011821[2.2.3
Process Validations 2–6]

{empty}[#50638879_pgfId-1381458]##link:JSF.htm#50638877_pgfId-1011809[2.2.3.1
Partial Validations Partial Processing 2–7]

{empty}[#50638879_pgfId-1381460]##link:JSF.htm#50638877_pgfId-1007263[2.2.4
Update Model Values 2–7]

{empty}[#50638879_pgfId-1381462]##link:JSF.htm#50638877_pgfId-1012141[2.2.4.1
Update Model Values Partial Processing 2–8]

{empty}[#50638879_pgfId-1381464]##link:JSF.htm#50638877_pgfId-1012144[2.2.5
Invoke Application 2–8]

{empty}[#50638879_pgfId-1381466]##link:JSF.htm#50638877_pgfId-1007423[2.2.6
Render Response 2–8]

{empty}[#50638879_pgfId-1381468]##link:JSF.htm#50638877_pgfId-1014487[2.2.6.1
Render Response Partial Processing 2–9]

{empty}[#50638879_pgfId-1381470]##link:JSF.htm#50638877_pgfId-1007498[2.3
Common Event Processing 2–10]

{empty}[#50638879_pgfId-1381472]##link:JSF.htm#50638877_pgfId-1007581[2.4
Common Application Activities 2–11]

{empty}[#50638879_pgfId-1381474]##link:JSF.htm#50638877_pgfId-1007587[2.4.1
Acquire Faces Object References 2–11]

{empty}[#50638879_pgfId-1381476]##link:JSF.htm#50638877_pgfId-1007589[2.4.1.1
Acquire and Configure Lifecycle Reference 2–11]

{empty}[#50638879_pgfId-1381478]##link:JSF.htm#50638877_pgfId-1007634[2.4.1.2
Acquire and Configure FacesContext Reference 2–12]

{empty}[#50638879_pgfId-1381480]##link:JSF.htm#50638877_pgfId-1007682[2.4.2
Create And Configure A New View 2–12]

{empty}[#50638879_pgfId-1381482]##link:JSF.htm#50638877_pgfId-1007685[2.4.2.1
Create A New View 2–12]

{empty}[#50638879_pgfId-1381484]##link:JSF.htm#50638877_pgfId-1007767[2.4.2.2
Configure the Desired RenderKit 2–13]

{empty}[#50638879_pgfId-1381486]##link:JSF.htm#50638877_pgfId-1007858[2.4.2.3
Configure The View’s Components 2–13]

{empty}[#50638879_pgfId-1381488]##link:JSF.htm#50638877_pgfId-1007864[2.4.2.4
Store the new View in the FacesContext 2–13]

{empty}[#50638879_pgfId-1381490]##link:JSF.htm#50638877_pgfId-1007888[2.5
Concepts that impact several lifecycle phases 2–13]

{empty}[#50638879_pgfId-1381492]##link:JSF.htm#50638877_pgfId-1003637[2.5.1
Value Handling 2–14]

{empty}[#50638879_pgfId-1381494]##link:JSF.htm#50638877_pgfId-1003648[2.5.1.1
Apply Request Values Phase 2–14]

{empty}[#50638879_pgfId-1381496]##link:JSF.htm#50638877_pgfId-1003650[2.5.1.2
Process Validators Phase 2–14]

{empty}[#50638879_pgfId-1381498]##link:JSF.htm#50638877_pgfId-1003652[2.5.1.3
Executing Validation 2–14]

{empty}[#50638879_pgfId-1381500]##link:JSF.htm#50638877_pgfId-1003654[2.5.1.4
Update Model Values Phase 2–14]

{empty}[#50638879_pgfId-1381502]##link:JSF.htm#50638877_pgfId-1007908[2.5.2
Localization and Internationalization (L10N/I18N) 2–14]

[#50638879_pgfId-1381504]##link:JSF.htm#50638877_pgfId-1007910[2.5.2.1
Determining the active] _Locale_ 2–15

{empty}[#50638879_pgfId-1381506]##link:JSF.htm#50638877_pgfId-1007984[2.5.2.2
Determining the Character Encoding 2–15]

{empty}[#50638879_pgfId-1381508]##link:JSF.htm#50638877_pgfId-1008061[2.5.2.3
Localized Text 2–16]

{empty}[#50638879_pgfId-1381510]##link:JSF.htm#50638877_pgfId-1008069[2.5.2.4
Localized Application Messages 2–16]

{empty}[#50638879_pgfId-1381512]##link:JSF.htm#50638877_pgfId-1008231[2.5.3
State Management 2–19]

{empty}[#50638879_pgfId-1381514]##link:JSF.htm#50638877_pgfId-1008233[2.5.3.1
State Management Considerations for the Custom Component Author 2–19]

{empty}[#50638879_pgfId-1381516]##link:JSF.htm#50638877_pgfId-1008343[2.5.3.2
State Management Considerations for the JSF Implementor 2–20]

{empty}[#50638879_pgfId-1381518]##link:JSF.htm#50638877_pgfId-1012449[2.5.4
Resource Handling 2–21]

{empty}[#50638879_pgfId-1381520]##link:JSF.htm#50638877_pgfId-1012556[2.5.5
View Parameters 2–21]

{empty}[#50638879_pgfId-1381522]##link:JSF.htm#50638877_pgfId-1012711[2.5.6
Bookmarkability 2–22]

{empty}[#50638879_pgfId-1381524]##link:JSF.htm#50638877_pgfId-1012715[2.5.7
JSR 303 Bean Validation 2–22]

{empty}[#50638879_pgfId-1381526]##link:JSF.htm#50638877_pgfId-1012754[2.5.8
Ajax 2–23]

{empty}[#50638879_pgfId-1381528]##link:JSF.htm#50638877_pgfId-1012864[2.5.9
Component Behaviors 2–23]

{empty}[#50638879_pgfId-1381530]##link:JSF.htm#50638877_pgfId-1013096[2.5.10
System Events 2–24]

{empty}[#50638879_pgfId-1381532]##link:JSF.htm#50638877_pgfId-1012639[2.6
Resource Handling 2–25]

{empty}[#50638879_pgfId-1381534]##link:JSF.htm#50638877_pgfId-1009004[2.6.1
Packaging Resources 2–25]

{empty}[#50638879_pgfId-1381536]##link:JSF.htm#50638877_pgfId-1010110[2.6.1.1
Packaging Resources into the Web Application Root 2–25]

{empty}[#50638879_pgfId-1381538]##link:JSF.htm#50638877_pgfId-1010121[2.6.1.2
Packaging Resources into the Classpath 2–25]

{empty}[#50638879_pgfId-1381540]##link:JSF.htm#50638877_pgfId-1010153[2.6.1.3
Resource Identifiers 2–25]

{empty}[#50638879_pgfId-1381542]##link:JSF.htm#50638877_pgfId-1009724[2.6.1.4
Libraries of Localized and Versioned Resources 2–27]

{empty}[#50638879_pgfId-1381544]##link:JSF.htm#50638877_pgfId-1010754[2.6.2
Rendering Resources 2–30]

{empty}[#50638879_pgfId-1381546]##link:JSF.htm#50638877_pgfId-1010845[2.6.2.1
Relocatable Resources 2–30]

{empty}[#50638879_pgfId-1381548]##link:JSF.htm#50638877_pgfId-1011253[2.6.2.2
Resource Rendering Using Annotations 2–31]

{empty}[#50638879_pgfId-1381550]##link:JSF.htm#50638877_pgfId-1017874[2.7
Resource Library Contracts 2–31]

======= [#50638879_pgfId-1381552]##link:JSF.htm#50638851_pgfId-1029729[User Interface Component Model 3–1]

{empty}[#50638879_pgfId-1381554]##link:JSF.htm#50638851_pgfId-1022118[3.1
UIComponent and UIComponentBase 3–1]

{empty}[#50638879_pgfId-1381556]##link:JSF.htm#50638851_pgfId-1022131[3.1.1
Component Identifiers 3–2]

{empty}[#50638879_pgfId-1381558]##link:JSF.htm#50638851_pgfId-1022137[3.1.2
Component Type 3–2]

{empty}[#50638879_pgfId-1381560]##link:JSF.htm#50638851_pgfId-1022146[3.1.3
Component Family 3–2]

{empty}[#50638879_pgfId-1381562]##link:JSF.htm#50638851_pgfId-1022150[3.1.4
ValueExpression properties 3–2]

{empty}[#50638879_pgfId-1381564]##link:JSF.htm#50638851_pgfId-1022170[3.1.5
Component Bindings 3–3]

{empty}[#50638879_pgfId-1381566]##link:JSF.htm#50638851_pgfId-1022183[3.1.6
Client Identifiers 3–4]

{empty}[#50638879_pgfId-1381568]##link:JSF.htm#50638851_pgfId-1022201[3.1.7
Component Tree Manipulation 3–4]

{empty}[#50638879_pgfId-1381570]##link:JSF.htm#50638851_pgfId-1022215[3.1.8
Component Tree Navigation 3–5]

{empty}[#50638879_pgfId-1381572]##link:JSF.htm#50638851_pgfId-1028988[3.1.9
Facet Management 3–6]

{empty}[#50638879_pgfId-1381574]##link:JSF.htm#50638851_pgfId-1027505[3.1.10
Managing Component Behavior 3–7]

{empty}[#50638879_pgfId-1381576]##link:JSF.htm#50638851_pgfId-1027602[3.1.11
Generic Attributes 3–7]

{empty}[#50638879_pgfId-1381578]##link:JSF.htm#50638851_pgfId-1023566[3.1.11.1
Special Attributes 3–8]

{empty}[#50638879_pgfId-1381580]##link:JSF.htm#50638851_pgfId-1022285[3.1.12
Render-Independent Properties 3–9]

{empty}[#50638879_pgfId-1381582]##link:JSF.htm#50638851_pgfId-1022352[3.1.13
Component Specialization Methods 3–10]

{empty}[#50638879_pgfId-1381584]##link:JSF.htm#50638851_pgfId-1022385[3.1.14
Lifecycle Management Methods 3–11]

{empty}[#50638879_pgfId-1381586]##link:JSF.htm#50638851_pgfId-1022419[3.1.15
Utility Methods 3–12]

{empty}[#50638879_pgfId-1381588]##link:JSF.htm#50638851_pgfId-1022432[3.2
Component Behavioral Interfaces 3–12]

{empty}[#50638879_pgfId-1381590]##link:JSF.htm#50638851_pgfId-1022435[3.2.1
ActionSource 3–12]

{empty}[#50638879_pgfId-1381592]##link:JSF.htm#50638851_pgfId-1022444[3.2.1.1
Properties 3–13]

{empty}[#50638879_pgfId-1381594]##link:JSF.htm#50638851_pgfId-1022492[3.2.1.2
Methods 3–13]

{empty}[#50638879_pgfId-1381596]##link:JSF.htm#50638851_pgfId-1022494[3.2.1.3
Events 3–13]

{empty}[#50638879_pgfId-1381598]##link:JSF.htm#50638851_pgfId-1022516[3.2.2
ActionSource2 3–14]

{empty}[#50638879_pgfId-1381600]##link:JSF.htm#50638851_pgfId-1022518[3.2.2.1
Properties 3–14]

{empty}[#50638879_pgfId-1381602]##link:JSF.htm#50638851_pgfId-1022547[3.2.2.2
Methods 3–14]

{empty}[#50638879_pgfId-1381604]##link:JSF.htm#50638851_pgfId-1022549[3.2.2.3
Events 3–14]

{empty}[#50638879_pgfId-1381606]##link:JSF.htm#50638851_pgfId-1022553[3.2.3
NamingContainer 3–15]

{empty}[#50638879_pgfId-1381608]##link:JSF.htm#50638851_pgfId-1022567[3.2.4
StateHolder 3–15]

{empty}[#50638879_pgfId-1381610]##link:JSF.htm#50638851_pgfId-1022569[3.2.4.1
Properties 3–15]

{empty}[#50638879_pgfId-1381612]##link:JSF.htm#50638851_pgfId-1022590[3.2.4.2
Methods 3–15]

{empty}[#50638879_pgfId-1381614]##link:JSF.htm#50638851_pgfId-1022605[3.2.4.3
Events 3–16]

{empty}[#50638879_pgfId-1381616]##link:JSF.htm#50638851_pgfId-1029211[3.2.5
PartialStateHolder 3–16]

{empty}[#50638879_pgfId-1381618]##link:JSF.htm#50638851_pgfId-1029570[3.2.5.1
Properties 3–16]

{empty}[#50638879_pgfId-1381620]##link:JSF.htm#50638851_pgfId-1029578[3.2.5.2
Methods 3–16]

{empty}[#50638879_pgfId-1381622]##link:JSF.htm#50638851_pgfId-1029599[3.2.5.3
Events 3–17]

{empty}[#50638879_pgfId-1381624]##link:JSF.htm#50638851_pgfId-1022608[3.2.6
ValueHolder 3–17]

{empty}[#50638879_pgfId-1381626]##link:JSF.htm#50638851_pgfId-1022610[3.2.6.1
Properties 3–17]

{empty}[#50638879_pgfId-1381628]##link:JSF.htm#50638851_pgfId-1022650[3.2.6.2
Methods 3–17]

{empty}[#50638879_pgfId-1381630]##link:JSF.htm#50638851_pgfId-1022652[3.2.6.3
Events 3–17]

{empty}[#50638879_pgfId-1381632]##link:JSF.htm#50638851_pgfId-1022655[3.2.7
EditableValueHolder 3–18]

{empty}[#50638879_pgfId-1381634]##link:JSF.htm#50638851_pgfId-1022660[3.2.7.1
Properties 3–18]

{empty}[#50638879_pgfId-1381636]##link:JSF.htm#50638851_pgfId-1022727[3.2.7.2
Methods 3–18]

{empty}[#50638879_pgfId-1381638]##link:JSF.htm#50638851_pgfId-1022736[3.2.7.3
Events 3–19]

{empty}[#50638879_pgfId-1381640]##link:JSF.htm#50638851_pgfId-1022747[3.2.8
SystemEventListenerHolder 3–19]

{empty}[#50638879_pgfId-1381642]##link:JSF.htm#50638851_pgfId-1022749[3.2.8.1
Properties 3–19]

{empty}[#50638879_pgfId-1381644]##link:JSF.htm#50638851_pgfId-1022751[3.2.8.2
Methods 3–19]

{empty}[#50638879_pgfId-1381646]##link:JSF.htm#50638851_pgfId-1022757[3.2.8.3
Events 3–20]

{empty}[#50638879_pgfId-1381648]##link:JSF.htm#50638851_pgfId-1028012[3.2.9
ClientBehaviorHolder 3–20]

{empty}[#50638879_pgfId-1381650]##link:JSF.htm#50638851_pgfId-1022763[3.3
Conversion Model 3–21]

{empty}[#50638879_pgfId-1381652]##link:JSF.htm#50638851_pgfId-1022765[3.3.1
Overview 3–21]

{empty}[#50638879_pgfId-1381654]##link:JSF.htm#50638851_pgfId-1022774[3.3.2
Converter 3–21]

{empty}[#50638879_pgfId-1381656]##link:JSF.htm#50638851_pgfId-1023899[3.3.3
Standard Converter Implementations 3–22]

{empty}[#50638879_pgfId-1381658]##link:JSF.htm#50638851_pgfId-1022826[3.4
Event and Listener Model 3–24]

{empty}[#50638879_pgfId-1381660]##link:JSF.htm#50638851_pgfId-1022829[3.4.1
Overview 3–24]

{empty}[#50638879_pgfId-1381662]##link:JSF.htm#50638851_pgfId-1023289[3.4.2
Application Events 3–26]

{empty}[#50638879_pgfId-1381664]##link:JSF.htm#50638851_pgfId-1026896[3.4.2.1
Event Classes 3–26]

{empty}[#50638879_pgfId-1381666]##link:JSF.htm#50638851_pgfId-1022870[3.4.2.2
Listener Classes 3–27]

{empty}[#50638879_pgfId-1381668]##link:JSF.htm#50638851_pgfId-1022877[3.4.2.3
Phase Identifiers 3–27]

{empty}[#50638879_pgfId-1381670]##link:JSF.htm#50638851_pgfId-1022882[3.4.2.4
Listener Registration 3–27]

{empty}[#50638879_pgfId-1381672]##link:JSF.htm#50638851_pgfId-1022896[3.4.2.5
Event Queueing 3–28]

{empty}[#50638879_pgfId-1381674]##link:JSF.htm#50638851_pgfId-1022903[3.4.2.6
Event Broadcasting 3–28]

{empty}[#50638879_pgfId-1381676]##link:JSF.htm#50638851_pgfId-1022916[3.4.3
System Events 3–28]

{empty}[#50638879_pgfId-1381678]##link:JSF.htm#50638851_pgfId-1022918[3.4.3.1
Event Classes 3–28]

{empty}[#50638879_pgfId-1381680]##link:JSF.htm#50638851_pgfId-1025532[3.4.3.2
Listener Classes 3–29]

{empty}[#50638879_pgfId-1381682]##link:JSF.htm#50638851_pgfId-1022922[3.4.3.3
Programmatic Listener Registration 3–30]

{empty}[#50638879_pgfId-1381684]##link:JSF.htm#50638851_pgfId-1025537[3.4.3.4
Declarative Listener Registration 3–30]

{empty}[#50638879_pgfId-1381686]##link:JSF.htm#50638851_pgfId-1023976[3.4.3.5
Listener Registration By Annotation 3–30]

{empty}[#50638879_pgfId-1381688]##link:JSF.htm#50638851_pgfId-1028472[3.4.3.6
Listener Registration By Application Configuration Resources 3–31]

{empty}[#50638879_pgfId-1381690]##link:JSF.htm#50638851_pgfId-1023977[3.4.3.7
Event Broadcasting 3–31]

{empty}[#50638879_pgfId-1381692]##link:JSF.htm#50638851_pgfId-1023983[3.5
Validation Model 3–32]

{empty}[#50638879_pgfId-1381694]##link:JSF.htm#50638851_pgfId-1022927[3.5.1
Overview 3–32]

{empty}[#50638879_pgfId-1381696]##link:JSF.htm#50638851_pgfId-1022930[3.5.2
Validator Classes 3–32]

{empty}[#50638879_pgfId-1381698]##link:JSF.htm#50638851_pgfId-1022936[3.5.3
Validation Registration 3–32]

{empty}[#50638879_pgfId-1381700]##link:JSF.htm#50638851_pgfId-1022942[3.5.4
Validation Processing 3–33]

{empty}[#50638879_pgfId-1381702]##link:JSF.htm#50638851_pgfId-1022958[3.5.5
Standard Validator Implementations 3–34]

{empty}[#50638879_pgfId-1381704]##link:JSF.htm#50638851_pgfId-1028223[3.5.6
Bean Validation Integration 3–34]

{empty}[#50638879_pgfId-1381706]##link:JSF.htm#50638851_pgfId-1028306[3.5.6.1
Bean Validator Activation 3–35]

{empty}[#50638879_pgfId-1381708]##link:JSF.htm#50638851_pgfId-1028339[3.5.6.2
Obtaining a ValidatorFactory 3–35]

{empty}[#50638879_pgfId-1381710]##link:JSF.htm#50638851_pgfId-1030998[3.5.6.3
Class-Level Validation 3–35]

{empty}[#50638879_pgfId-1381712]##link:JSF.htm#50638851_pgfId-1028347[3.5.6.4
Localization of Bean Validation Messages 3–36]

{empty}[#50638879_pgfId-1381714]##link:JSF.htm#50638851_pgfId-1024075[3.6
Composite User Interface Components 3–37]

{empty}[#50638879_pgfId-1381716]##link:JSF.htm#50638851_pgfId-1024078[3.6.1
Non-normative Background 3–37]

{empty}[#50638879_pgfId-1381718]##link:JSF.htm#50638851_pgfId-1024080[3.6.1.1
What does it mean to be a JSF User Interface component? 3–37]

{empty}[#50638879_pgfId-1381720]##link:JSF.htm#50638851_pgfId-1024095[3.6.1.2
How does one make a custom JSF User Interface component (JSF 1.2 and
earlier)? 3–38]

{empty}[#50638879_pgfId-1381722]##link:JSF.htm#50638851_pgfId-1024108[3.6.1.3
How does one make a composite component? 3–38]

{empty}[#50638879_pgfId-1381724]##link:JSF.htm#50638851_pgfId-1024123[3.6.1.4
A simple composite component example 3–39]

{empty}[#50638879_pgfId-1381726]##link:JSF.htm#50638851_pgfId-1024292[3.6.1.5
Walk through of the run-time for the simple composite component example
3–40]

{empty}[#50638879_pgfId-1381728]##link:JSF.htm#50638851_pgfId-1024614[3.6.1.6
Composite Component Terms 3–41]

{empty}[#50638879_pgfId-1381730]##link:JSF.htm#50638851_pgfId-1024796[3.6.2
Normative Requirements 3–42]

{empty}[#50638879_pgfId-1381732]##link:JSF.htm#50638851_pgfId-1025035[3.6.2.1
Composite Component Metadata 3–43]

{empty}[#50638879_pgfId-1381734]##link:JSF.htm#50638851_pgfId-1026035[3.7
Component Behavior Model 3–44]

{empty}[#50638879_pgfId-1381736]##link:JSF.htm#50638851_pgfId-1026043[3.7.1
Overview 3–44]

{empty}[#50638879_pgfId-1381738]##link:JSF.htm#50638851_pgfId-1028683[3.7.2
Behavior Interface 3–45]

{empty}[#50638879_pgfId-1381740]##link:JSF.htm#50638851_pgfId-1028733[3.7.3
BehaviorBase 3–45]

{empty}[#50638879_pgfId-1381742]##link:JSF.htm#50638851_pgfId-1028782[3.7.4
The Client Behavior Contract 3–45]

{empty}[#50638879_pgfId-1381744]##link:JSF.htm#50638851_pgfId-1028574[3.7.5
ClientBehaviorHolder 3–46]

{empty}[#50638879_pgfId-1381746]##link:JSF.htm#50638851_pgfId-1028578[3.7.6
ClientBehaviorRenderer 3–46]

{empty}[#50638879_pgfId-1381748]##link:JSF.htm#50638851_pgfId-1028584[3.7.7
ClientBehaviorContext 3–46]

{empty}[#50638879_pgfId-1381750]##link:JSF.htm#50638851_pgfId-1028621[3.7.8
ClientBehaviorHint 3–47]

{empty}[#50638879_pgfId-1381752]##link:JSF.htm#50638851_pgfId-1027759[3.7.9
ClientBehaviorBase 3–47]

{empty}[#50638879_pgfId-1381754]##link:JSF.htm#50638851_pgfId-1026855[3.7.10
Behavior Event / Listener Model 3–48]

{empty}[#50638879_pgfId-1381756]##link:JSF.htm#50638851_pgfId-1026873[3.7.10.1
Event Classes 3–48]

{empty}[#50638879_pgfId-1381758]##link:JSF.htm#50638851_pgfId-1027106[3.7.10.2
Listener Classes 3–48]

{empty}[#50638879_pgfId-1381760]##link:JSF.htm#50638851_pgfId-1027194[3.7.10.3
Listener Registration 3–48]

{empty}[#50638879_pgfId-1381762]##link:JSF.htm#50638851_pgfId-1027909[3.7.11
Ajax Behavior 3–48]

{empty}[#50638879_pgfId-1381764]##link:JSF.htm#50638851_pgfId-1027913[3.7.11.1
AjaxBehavior 3–48]

{empty}[#50638879_pgfId-1381766]##link:JSF.htm#50638851_pgfId-1027943[3.7.11.2
Ajax Behavior Event / Listener Model 3–49]

{empty}[#50638879_pgfId-1381768]##link:JSF.htm#50638851_pgfId-1026619[3.7.12
Adding Behavior To Components 3–49]

{empty}[#50638879_pgfId-1381770]##link:JSF.htm#50638851_pgfId-1026058[3.7.13
Behavior Registration 3–50]

{empty}[#50638879_pgfId-1381772]##link:JSF.htm#50638851_pgfId-1026261[3.7.13.1
XML Registration 3–50]

{empty}[#50638879_pgfId-1381774]##link:JSF.htm#50638851_pgfId-1027254[3.7.13.2
Registration By Annotation 3–50]

======= [#50638879_pgfId-1381776]##link:JSF.htm#50638853_pgfId-1031795[Standard User Interface Components 4–1]

{empty}[#50638879_pgfId-1381778]##link:JSF.htm#50638853_pgfId-1031800[4.1
Standard User Interface Components 4–1]

{empty}[#50638879_pgfId-1381780]##link:JSF.htm#50638853_pgfId-1031815[4.1.1
UIColumn 4–3]

{empty}[#50638879_pgfId-1381782]##link:JSF.htm#50638853_pgfId-1031817[4.1.1.1
Component Type 4–3]

{empty}[#50638879_pgfId-1381784]##link:JSF.htm#50638853_pgfId-1031819[4.1.1.2
Properties 4–3]

{empty}[#50638879_pgfId-1381786]##link:JSF.htm#50638853_pgfId-1031850[4.1.1.3
Methods 4–3]

{empty}[#50638879_pgfId-1381788]##link:JSF.htm#50638853_pgfId-1031852[4.1.1.4
Events 4–3]

{empty}[#50638879_pgfId-1381790]##link:JSF.htm#50638853_pgfId-1031855[4.1.2
UICommand 4–4]

{empty}[#50638879_pgfId-1381792]##link:JSF.htm#50638853_pgfId-1031857[4.1.2.1
Component Type 4–4]

{empty}[#50638879_pgfId-1381794]##link:JSF.htm#50638853_pgfId-1031859[4.1.2.2
Properties 4–4]

{empty}[#50638879_pgfId-1381796]##link:JSF.htm#50638853_pgfId-1031885[4.1.2.3
Methods 4–4]

{empty}[#50638879_pgfId-1381798]##link:JSF.htm#50638853_pgfId-1031890[4.1.2.4
Events 4–4]

{empty}[#50638879_pgfId-1381800]##link:JSF.htm#50638853_pgfId-1031896[4.1.3
UIData 4–5]

{empty}[#50638879_pgfId-1381802]##link:JSF.htm#50638853_pgfId-1031901[4.1.3.1
Component Type 4–5]

{empty}[#50638879_pgfId-1381804]##link:JSF.htm#50638853_pgfId-1031904[4.1.3.2
Properties 4–5]

{empty}[#50638879_pgfId-1381806]##link:JSF.htm#50638853_pgfId-1032021[4.1.3.3
Methods 4–6]

{empty}[#50638879_pgfId-1381808]##link:JSF.htm#50638853_pgfId-1032033[4.1.3.4
Events 4–6]

{empty}[#50638879_pgfId-1381810]##link:JSF.htm#50638853_pgfId-1032039[4.1.4
UIForm 4–7]

{empty}[#50638879_pgfId-1381812]##link:JSF.htm#50638853_pgfId-1032043[4.1.4.1
Component Type 4–7]

{empty}[#50638879_pgfId-1381814]##link:JSF.htm#50638853_pgfId-1032045[4.1.4.2
Properties 4–7]

{empty}[#50638879_pgfId-1381816]##link:JSF.htm#50638853_pgfId-1032072[4.1.4.3
Methods. 4–7]

{empty}[#50638879_pgfId-1381818]##link:JSF.htm#50638853_pgfId-1032092[4.1.4.4
Events 4–8]

{empty}[#50638879_pgfId-1381820]##link:JSF.htm#50638853_pgfId-1032095[4.1.5
UIGraphic 4–9]

{empty}[#50638879_pgfId-1381822]##link:JSF.htm#50638853_pgfId-1032097[4.1.5.1
Component Type 4–9]

{empty}[#50638879_pgfId-1381824]##link:JSF.htm#50638853_pgfId-1032099[4.1.5.2
Properties 4–9]

{empty}[#50638879_pgfId-1381826]##link:JSF.htm#50638853_pgfId-1032129[4.1.5.3
Methods 4–9]

{empty}[#50638879_pgfId-1381828]##link:JSF.htm#50638853_pgfId-1032131[4.1.5.4
Events 4–9]

{empty}[#50638879_pgfId-1381830]##link:JSF.htm#50638853_pgfId-1032134[4.1.6
UIInput 4–10]

{empty}[#50638879_pgfId-1381832]##link:JSF.htm#50638853_pgfId-1032136[4.1.6.1
Component Type 4–10]

{empty}[#50638879_pgfId-1381834]##link:JSF.htm#50638853_pgfId-1032138[4.1.6.2
Properties 4–10]

{empty}[#50638879_pgfId-1381836]##link:JSF.htm#50638853_pgfId-1032184[4.1.6.3
Methods 4–11]

{empty}[#50638879_pgfId-1381838]##link:JSF.htm#50638853_pgfId-1032202[4.1.6.4
Events 4–11]

{empty}[#50638879_pgfId-1381840]##link:JSF.htm#50638853_pgfId-1032207[4.1.7
UIMessage 4–12]

{empty}[#50638879_pgfId-1381842]##link:JSF.htm#50638853_pgfId-1032209[4.1.7.1
Component Type 4–12]

{empty}[#50638879_pgfId-1381844]##link:JSF.htm#50638853_pgfId-1032211[4.1.7.2
Properties 4–12]

{empty}[#50638879_pgfId-1381846]##link:JSF.htm#50638853_pgfId-1032249[4.1.7.3
Methods. 4–12]

{empty}[#50638879_pgfId-1381848]##link:JSF.htm#50638853_pgfId-1032251[4.1.7.4
Events 4–12]

{empty}[#50638879_pgfId-1381850]##link:JSF.htm#50638853_pgfId-1032253[4.1.8
UIMessages 4–13]

{empty}[#50638879_pgfId-1381852]##link:JSF.htm#50638853_pgfId-1032255[4.1.8.1
Component Type 4–13]

{empty}[#50638879_pgfId-1381854]##link:JSF.htm#50638853_pgfId-1032257[4.1.8.2
Properties 4–13]

{empty}[#50638879_pgfId-1381856]##link:JSF.htm#50638853_pgfId-1032295[4.1.8.3
Methods. 4–13]

{empty}[#50638879_pgfId-1381858]##link:JSF.htm#50638853_pgfId-1032297[4.1.8.4
Events 4–13]

{empty}[#50638879_pgfId-1381860]##link:JSF.htm#50638853_pgfId-1032300[4.1.9
UIOutcomeTarget 4–14]

{empty}[#50638879_pgfId-1381862]##link:JSF.htm#50638853_pgfId-1037301[4.1.9.1
Component Type 4–14]

{empty}[#50638879_pgfId-1381864]##link:JSF.htm#50638853_pgfId-1037310[4.1.9.2
Properties 4–14]

{empty}[#50638879_pgfId-1381866]##link:JSF.htm#50638853_pgfId-1037401[4.1.9.3
Methods 4–14]

{empty}[#50638879_pgfId-1381868]##link:JSF.htm#50638853_pgfId-1037413[4.1.9.4
Events 4–14]

{empty}[#50638879_pgfId-1381870]##link:JSF.htm#50638853_pgfId-1037231[4.1.10
UIOutput 4–15]

{empty}[#50638879_pgfId-1381872]##link:JSF.htm#50638853_pgfId-1032305[4.1.10.1
Component Type 4–15]

{empty}[#50638879_pgfId-1381874]##link:JSF.htm#50638853_pgfId-1032307[4.1.10.2
Properties 4–15]

{empty}[#50638879_pgfId-1381876]##link:JSF.htm#50638853_pgfId-1032315[4.1.10.3
Methods 4–15]

{empty}[#50638879_pgfId-1381878]##link:JSF.htm#50638853_pgfId-1032320[4.1.10.4
Events 4–15]

{empty}[#50638879_pgfId-1381880]##link:JSF.htm#50638853_pgfId-1032326[4.1.11
UIPanel 4–16]

{empty}[#50638879_pgfId-1381882]##link:JSF.htm#50638853_pgfId-1032328[4.1.11.1
Component Type 4–16]

{empty}[#50638879_pgfId-1381884]##link:JSF.htm#50638853_pgfId-1032330[4.1.11.2
Properties 4–16]

{empty}[#50638879_pgfId-1381886]##link:JSF.htm#50638853_pgfId-1032335[4.1.11.3
Methods 4–16]

{empty}[#50638879_pgfId-1381888]##link:JSF.htm#50638853_pgfId-1032337[4.1.11.4
Events 4–16]

{empty}[#50638879_pgfId-1381890]##link:JSF.htm#50638853_pgfId-1032339[4.1.12
UIParameter 4–17]

{empty}[#50638879_pgfId-1381892]##link:JSF.htm#50638853_pgfId-1032341[4.1.12.1
Component Type 4–17]

{empty}[#50638879_pgfId-1381894]##link:JSF.htm#50638853_pgfId-1032343[4.1.12.2
Properties 4–17]

{empty}[#50638879_pgfId-1381896]##link:JSF.htm#50638853_pgfId-1032373[4.1.12.3
Methods 4–17]

{empty}[#50638879_pgfId-1381898]##link:JSF.htm#50638853_pgfId-1032375[4.1.12.4
Events 4–17]

{empty}[#50638879_pgfId-1381900]##link:JSF.htm#50638853_pgfId-1032378[4.1.13
UISelectBoolean 4–18]

{empty}[#50638879_pgfId-1381902]##link:JSF.htm#50638853_pgfId-1032380[4.1.13.1
Component Type 4–18]

{empty}[#50638879_pgfId-1381904]##link:JSF.htm#50638853_pgfId-1032382[4.1.13.2
Properties 4–18]

{empty}[#50638879_pgfId-1381906]##link:JSF.htm#50638853_pgfId-1032404[4.1.13.3
Methods 4–18]

{empty}[#50638879_pgfId-1381908]##link:JSF.htm#50638853_pgfId-1032406[4.1.13.4
Events 4–18]

{empty}[#50638879_pgfId-1381910]##link:JSF.htm#50638853_pgfId-1032409[4.1.14
UISelectItem 4–19]

{empty}[#50638879_pgfId-1381912]##link:JSF.htm#50638853_pgfId-1032411[4.1.14.1
Component Type 4–19]

{empty}[#50638879_pgfId-1381914]##link:JSF.htm#50638853_pgfId-1032413[4.1.14.2
Properties 4–19]

{empty}[#50638879_pgfId-1381916]##link:JSF.htm#50638853_pgfId-1032470[4.1.14.3
Methods 4–19]

{empty}[#50638879_pgfId-1381918]##link:JSF.htm#50638853_pgfId-1032472[4.1.14.4
Events 4–19]

{empty}[#50638879_pgfId-1381920]##link:JSF.htm#50638853_pgfId-1032475[4.1.15
UISelectItems 4–20]

{empty}[#50638879_pgfId-1381922]##link:JSF.htm#50638853_pgfId-1032477[4.1.15.1
Component Type 4–20]

{empty}[#50638879_pgfId-1381924]##link:JSF.htm#50638853_pgfId-1032479[4.1.15.2
Properties 4–20]

{empty}[#50638879_pgfId-1381926]##link:JSF.htm#50638853_pgfId-1032502[4.1.15.3
Methods 4–20]

{empty}[#50638879_pgfId-1381928]##link:JSF.htm#50638853_pgfId-1032504[4.1.15.4
Events 4–20]

{empty}[#50638879_pgfId-1381930]##link:JSF.htm#50638853_pgfId-1032507[4.1.16
UISelectMany 4–21]

{empty}[#50638879_pgfId-1381932]##link:JSF.htm#50638853_pgfId-1032509[4.1.16.1
Component Type 4–21]

{empty}[#50638879_pgfId-1381934]##link:JSF.htm#50638853_pgfId-1032511[4.1.16.2
Properties 4–21]

{empty}[#50638879_pgfId-1381936]##link:JSF.htm#50638853_pgfId-1032534[4.1.16.3
Methods 4–21]

{empty}[#50638879_pgfId-1381938]##link:JSF.htm#50638853_pgfId-1032536[4.1.16.4
Events 4–21]

{empty}[#50638879_pgfId-1381940]##link:JSF.htm#50638853_pgfId-1032539[4.1.17
UISelectOne 4–22]

{empty}[#50638879_pgfId-1381942]##link:JSF.htm#50638853_pgfId-1032541[4.1.17.1
Component Type 4–22]

{empty}[#50638879_pgfId-1381944]##link:JSF.htm#50638853_pgfId-1032543[4.1.17.2
Properties 4–22]

{empty}[#50638879_pgfId-1381946]##link:JSF.htm#50638853_pgfId-1032548[4.1.17.3
Methods 4–22]

{empty}[#50638879_pgfId-1381948]##link:JSF.htm#50638853_pgfId-1032550[4.1.17.4
Events 4–22]

{empty}[#50638879_pgfId-1381950]##link:JSF.htm#50638853_pgfId-1037495[4.1.18
UIViewParameter 4–23]

{empty}[#50638879_pgfId-1381952]##link:JSF.htm#50638853_pgfId-1032553[4.1.19
UIViewRoot 4–24]

{empty}[#50638879_pgfId-1381954]##link:JSF.htm#50638853_pgfId-1032556[4.1.19.1
Component Type 4–24]

{empty}[#50638879_pgfId-1381956]##link:JSF.htm#50638853_pgfId-1032558[4.1.19.2
Properties 4–24]

{empty}[#50638879_pgfId-1381958]##link:JSF.htm#50638853_pgfId-1032821[4.1.19.3
Methods 4–25]

{empty}[#50638879_pgfId-1381960]##link:JSF.htm#50638853_pgfId-1032628[4.1.19.4
Events 4–25]

{empty}[#50638879_pgfId-1381962]##link:JSF.htm#50638853_pgfId-1036579[4.1.19.5
Partial Processing 4–26]

{empty}[#50638879_pgfId-1381964]##link:JSF.htm#50638853_pgfId-1036851[4.2
Standard UIComponent Model Beans 4–27]

{empty}[#50638879_pgfId-1381966]##link:JSF.htm#50638853_pgfId-1032644[4.2.1
DataModel 4–27]

{empty}[#50638879_pgfId-1381968]##link:JSF.htm#50638853_pgfId-1032646[4.2.1.1
Properties 4–27]

{empty}[#50638879_pgfId-1381970]##link:JSF.htm#50638853_pgfId-1032697[4.2.1.2
Methods 4–27]

{empty}[#50638879_pgfId-1381972]##link:JSF.htm#50638853_pgfId-1032699[4.2.1.3
Events 4–27]

{empty}[#50638879_pgfId-1381974]##link:JSF.htm#50638853_pgfId-1032702[4.2.1.4
Concrete Implementations 4–27]

{empty}[#50638879_pgfId-1381976]##link:JSF.htm#50638853_pgfId-1032710[4.2.2
SelectItem 4–29]

{empty}[#50638879_pgfId-1381978]##link:JSF.htm#50638853_pgfId-1032712[4.2.2.1
Properties 4–29]

{empty}[#50638879_pgfId-1381980]##link:JSF.htm#50638853_pgfId-1032755[4.2.2.2
Methods 4–29]

{empty}[#50638879_pgfId-1381982]##link:JSF.htm#50638853_pgfId-1032757[4.2.2.3
Events 4–29]

{empty}[#50638879_pgfId-1381984]##link:JSF.htm#50638853_pgfId-1032759[4.2.3
SelectItemGroup 4–30]

{empty}[#50638879_pgfId-1381986]##link:JSF.htm#50638853_pgfId-1032761[4.2.3.1
Properties 4–30]

{empty}[#50638879_pgfId-1381988]##link:JSF.htm#50638853_pgfId-1032781[4.2.3.2
Methods 4–30]

{empty}[#50638879_pgfId-1381990]##link:JSF.htm#50638853_pgfId-1032783[4.2.3.3
Events 4–30]

======= [#50638879_pgfId-1381992]##link:JSF.htm#50638862_pgfId-1019089[Expression Language and Managed Bean Facility 5–1]

{empty}[#50638879_pgfId-1381994]##link:JSF.htm#50638862_pgfId-1014095[5.1
Value Expressions 5–1]

{empty}[#50638879_pgfId-1381996]##link:JSF.htm#50638862_pgfId-1014096[5.1.1
Overview 5–1]

{empty}[#50638879_pgfId-1381998]##link:JSF.htm#50638862_pgfId-1012618[5.1.2
Value Expression Syntax and Semantics 5–2]

{empty}[#50638879_pgfId-1382000]##link:JSF.htm#50638862_pgfId-1014112[5.2
MethodExpressions 5–2]

{empty}[#50638879_pgfId-1382002]##link:JSF.htm#50638862_pgfId-1014155[5.2.1
MethodExpression Syntax and Semantics 5–4]

{empty}[#50638879_pgfId-1382004]##link:JSF.htm#50638862_pgfId-1006457[5.3
The Managed Bean Facility 5–4]

{empty}[#50638879_pgfId-1382006]##link:JSF.htm#50638862_pgfId-1014437[5.3.1
Managed Bean Configuration Example 5–7]

{empty}[#50638879_pgfId-1382008]##link:JSF.htm#50638862_pgfId-1017552[5.4
Managed Bean Annotations 5–9]

{empty}[#50638879_pgfId-1382010]##link:JSF.htm#50638862_pgfId-1017587[5.4.1
JSF Managed Classes and Java EE Annotations 5–9]

{empty}[#50638879_pgfId-1382012]##link:JSF.htm#50638862_pgfId-1013148[5.4.2
Managed Bean Lifecycle Annotations 5–11]

{empty}[#50638879_pgfId-1382014]##link:JSF.htm#50638862_pgfId-1014586[5.5
How Faces Leverages the Unified EL 5–12]

{empty}[#50638879_pgfId-1382016]##link:JSF.htm#50638862_pgfId-1008660[5.5.1
ELContext 5–12]

{empty}[#50638879_pgfId-1382018]##link:JSF.htm#50638862_pgfId-1008699[5.5.1.1
Lifetime, Ownership and Cardinality 5–12]

{empty}[#50638879_pgfId-1382020]##link:JSF.htm#50638862_pgfId-1014622[5.5.1.2
Properties 5–13]

{empty}[#50638879_pgfId-1382022]##link:JSF.htm#50638862_pgfId-1014623[5.5.1.3
Methods 5–13]

{empty}[#50638879_pgfId-1382024]##link:JSF.htm#50638862_pgfId-1008915[5.5.1.4
Events 5–13]

{empty}[#50638879_pgfId-1382026]##link:JSF.htm#50638862_pgfId-1008886[5.5.2
ELResolver 5–13]

{empty}[#50638879_pgfId-1382028]##link:JSF.htm#50638862_pgfId-1008945[5.5.2.1
Lifetime, Ownership, and Cardinality 5–14]

{empty}[#50638879_pgfId-1382030]##link:JSF.htm#50638862_pgfId-1008973[5.5.2.2
Properties 5–14]

{empty}[#50638879_pgfId-1382032]##link:JSF.htm#50638862_pgfId-1009074[5.5.2.3
Methods 5–14]

{empty}[#50638879_pgfId-1382034]##link:JSF.htm#50638862_pgfId-1009149[5.5.2.4
Events 5–14]

{empty}[#50638879_pgfId-1382036]##link:JSF.htm#50638862_pgfId-1009164[5.5.3
ExpressionFactory 5–14]

{empty}[#50638879_pgfId-1382038]##link:JSF.htm#50638862_pgfId-1009163[5.5.3.1
Lifetime, Ownership, and Cardinality 5–14]

{empty}[#50638879_pgfId-1382040]##link:JSF.htm#50638862_pgfId-1009220[5.5.3.2
Properties 5–15]

{empty}[#50638879_pgfId-1382042]##link:JSF.htm#50638862_pgfId-1009251[5.5.3.3
Methods 5–15]

{empty}[#50638879_pgfId-1382044]##link:JSF.htm#50638862_pgfId-1011327[5.5.3.4
Events 5–15]

{empty}[#50638879_pgfId-1382046]##link:JSF.htm#50638862_pgfId-1008583[5.6
ELResolver Instances Provided by Faces 5–15]

{empty}[#50638879_pgfId-1382048]##link:JSF.htm#50638862_pgfId-1009413[5.6.1
Faces ELResolver for JSP Pages 5–15]

{empty}[#50638879_pgfId-1382050]##link:JSF.htm#50638862_pgfId-1015714[5.6.1.1
Faces Implicit Object ELResolver For JSP 5–16]

{empty}[#50638879_pgfId-1382052]##link:JSF.htm#50638862_pgfId-1009765[5.6.1.2
ManagedBean ELResolver 5–18]

{empty}[#50638879_pgfId-1382054]##link:JSF.htm#50638862_pgfId-1012808[5.6.1.3
Resource ELResolver 5–20]

{empty}[#50638879_pgfId-1382056]##link:JSF.htm#50638862_pgfId-1015315[5.6.1.4
ResourceBundle ELResolver for JSP Pages 5–20]

{empty}[#50638879_pgfId-1382058]##link:JSF.htm#50638862_pgfId-1012799[5.6.1.5
ELResolvers in the application configuration resources 5–22]

{empty}[#50638879_pgfId-1382060]##link:JSF.htm#50638862_pgfId-1011125[5.6.1.6
VariableResolver Chain Wrapper 5–22]

{empty}[#50638879_pgfId-1382062]##link:JSF.htm#50638862_pgfId-1010196[5.6.1.7
PropertyResolver Chain Wrapper 5–23]

{empty}[#50638879_pgfId-1382064]##link:JSF.htm#50638862_pgfId-1010345[5.6.1.8
ELResolvers from Application.addELResolver() 5–24]

{empty}[#50638879_pgfId-1382066]##link:JSF.htm#50638862_pgfId-1009719[5.6.2
ELResolver for Facelets and Programmatic Access 5–24]

{empty}[#50638879_pgfId-1382068]##link:JSF.htm#50638862_pgfId-1010630[5.6.2.1
Implicit Object ELResolver for Facelets and Programmatic Access 5–25]

{empty}[#50638879_pgfId-1382070]##link:JSF.htm#50638862_pgfId-1010625[5.6.2.2
Composite Component Attributes ELResolver 5–29]

{empty}[#50638879_pgfId-1382072]##link:JSF.htm#50638862_pgfId-1015976[5.6.2.3
The CompositeELResolver 5–31]

{empty}[#50638879_pgfId-1382074]##link:JSF.htm#50638862_pgfId-1010952[5.6.2.4
ManagedBean ELResolver 5–31]

{empty}[#50638879_pgfId-1382076]##link:JSF.htm#50638862_pgfId-1015060[5.6.2.5
Resource ELResolver 5–31]

{empty}[#50638879_pgfId-1382078]##link:JSF.htm#50638862_pgfId-1012949[5.6.2.6
el.ResourceBundleELResolver 5–33]

{empty}[#50638879_pgfId-1382080]##link:JSF.htm#50638862_pgfId-1012957[5.6.2.7
ResourceBundle ELResolver for Programmatic Access 5–33]

{empty}[#50638879_pgfId-1382082]##link:JSF.htm#50638862_pgfId-1010990[5.6.2.8
Stream, StaticField, Map, List, Array, and Bean ELResolvers 5–33]

{empty}[#50638879_pgfId-1382084]##link:JSF.htm#50638862_pgfId-1010995[5.6.2.9
ScopedAttribute ELResolver 5–33]

{empty}[#50638879_pgfId-1382086]##link:JSF.htm#50638862_pgfId-1011002[5.6.3
CDI for EL Resolution 5–35]

{empty}[#50638879_pgfId-1382088]##link:JSF.htm#50638862_pgfId-1014685[5.7
Current Expression Evaluation APIs 5–35]

{empty}[#50638879_pgfId-1382090]##link:JSF.htm#50638862_pgfId-1011167[5.7.1
ELResolver 5–35]

{empty}[#50638879_pgfId-1382092]##link:JSF.htm#50638862_pgfId-1011171[5.7.2
ValueExpression 5–35]

{empty}[#50638879_pgfId-1382094]##link:JSF.htm#50638862_pgfId-1022848[5.7.3
MethodExpression 5–36]

{empty}[#50638879_pgfId-1382096]##link:JSF.htm#50638862_pgfId-1011179[5.7.4
Expression Evaluation Exceptions 5–36]

{empty}[#50638879_pgfId-1382098]##link:JSF.htm#50638862_pgfId-1011132[5.8
Deprecated Expression Evaluation APIs 5–36]

{empty}[#50638879_pgfId-1382100]##link:JSF.htm#50638862_pgfId-1014705[5.8.1
VariableResolver and the Default VariableResolver 5–36]

{empty}[#50638879_pgfId-1382102]##link:JSF.htm#50638862_pgfId-1014726[5.8.2
PropertyResolver and the Default PropertyResolver 5–36]

{empty}[#50638879_pgfId-1382104]##link:JSF.htm#50638862_pgfId-1014747[5.8.3
ValueBinding 5–37]

{empty}[#50638879_pgfId-1382106]##link:JSF.htm#50638862_pgfId-1014773[5.8.4
MethodBinding 5–37]

{empty}[#50638879_pgfId-1382108]##link:JSF.htm#50638862_pgfId-1014793[5.8.5
Expression Evaluation Exceptions 5–38]

{empty}[#50638879_pgfId-1382110]##link:JSF.htm#50638862_pgfId-1020122[5.9
CDI Integration 5–38]

{empty}[#50638879_pgfId-1382112]##link:JSF.htm#50638862_pgfId-1020656[5.9.1
JSF Objects Valid for @Inject Injection 5–38]

{empty}[#50638879_pgfId-1382114]##link:JSF.htm#50638862_pgfId-1021959[5.9.2
EL Resolution 5–39]

======= [#50638879_pgfId-1382116]##link:JSF.htm#50638857_pgfId-1010960[Per-Request State Information 6–1]

{empty}[#50638879_pgfId-1382118]##link:JSF.htm#50638857_pgfId-1008042[6.1
FacesContext 6–1]

{empty}[#50638879_pgfId-1382120]##link:JSF.htm#50638857_pgfId-1008052[6.1.1
Application 6–1]

{empty}[#50638879_pgfId-1382122]##link:JSF.htm#50638857_pgfId-1009156[6.1.2
Attributes 6–1]

{empty}[#50638879_pgfId-1382124]##link:JSF.htm#50638857_pgfId-1008096[6.1.3
ELContext 6–2]

{empty}[#50638879_pgfId-1382126]##link:JSF.htm#50638857_pgfId-1008127[6.1.4
ExternalContext 6–2]

{empty}[#50638879_pgfId-1382128]##link:JSF.htm#50638857_pgfId-1010821[6.1.4.1
Flash 6–4]

{empty}[#50638879_pgfId-1382130]##link:JSF.htm#50638857_pgfId-1008891[6.1.5
ViewRoot 6–4]

{empty}[#50638879_pgfId-1382132]##link:JSF.htm#50638857_pgfId-1008478[6.1.6
Message Queue 6–4]

{empty}[#50638879_pgfId-1382134]##link:JSF.htm#50638857_pgfId-1008519[6.1.7
RenderKit 6–5]

{empty}[#50638879_pgfId-1382136]##link:JSF.htm#50638857_pgfId-1008532[6.1.8
ResponseStream and ResponseWriter 6–5]

{empty}[#50638879_pgfId-1382138]##link:JSF.htm#50638857_pgfId-1008549[6.1.9
Flow Control Methods 6–5]

{empty}[#50638879_pgfId-1382140]##link:JSF.htm#50638857_pgfId-1009219[6.1.10
Partial Processing Methods 6–6]

{empty}[#50638879_pgfId-1382142]##link:JSF.htm#50638857_pgfId-1010171[6.1.11
Partial View Context 6–6]

{empty}[#50638879_pgfId-1382144]##link:JSF.htm#50638857_pgfId-1008600[6.1.12
Access To The Current FacesContext Instance 6–6]

{empty}[#50638879_pgfId-1382146]##link:JSF.htm#50638857_pgfId-1008901[6.1.13
CurrentPhaseId 6–7]

{empty}[#50638879_pgfId-1382148]##link:JSF.htm#50638857_pgfId-1008639[6.1.14
ExceptionHandler 6–7]

{empty}[#50638879_pgfId-1382150]##link:JSF.htm#50638857_pgfId-1010216[6.2
ExceptionHandler 6–7]

{empty}[#50638879_pgfId-1382152]##link:JSF.htm#50638857_pgfId-1010339[6.2.1
Default ExceptionHandler implementation 6–8]

{empty}[#50638879_pgfId-1382154]##link:JSF.htm#50638857_pgfId-1010594[6.2.2
Backwards Compatible ExceptionHandler 6–9]

{empty}[#50638879_pgfId-1382156]##link:JSF.htm#50638857_pgfId-1010667[6.2.3
Default Error Page 6–9]

{empty}[#50638879_pgfId-1382158]##link:JSF.htm#50638857_pgfId-1010374[6.3
FacesMessage 6–10]

{empty}[#50638879_pgfId-1382160]##link:JSF.htm#50638857_pgfId-1008663[6.4
ResponseStream 6–10]

{empty}[#50638879_pgfId-1382162]##link:JSF.htm#50638857_pgfId-1008666[6.5
ResponseWriter 6–11]

{empty}[#50638879_pgfId-1382164]##link:JSF.htm#50638857_pgfId-1008726[6.6
FacesContextFactory 6–13]

{empty}[#50638879_pgfId-1382166]##link:JSF.htm#50638857_pgfId-1009851[6.7
ExceptionHandlerFactory 6–13]

{empty}[#50638879_pgfId-1382168]##link:JSF.htm#50638857_pgfId-1009833[6.8
ExternalContextFactory 6–14]

======= [#50638879_pgfId-1382170]##link:JSF.htm#50638861_pgfId-1015881[Application Integration 7–1]

{empty}[#50638879_pgfId-1382172]##link:JSF.htm#50638861_pgfId-1015885[7.1
Application 7–1]

{empty}[#50638879_pgfId-1382174]##link:JSF.htm#50638861_pgfId-1015896[7.1.1
ActionListener Property 7–1]

{empty}[#50638879_pgfId-1382176]##link:JSF.htm#50638861_pgfId-1015951[7.1.2
DefaultRenderKitId Property 7–2]

{empty}[#50638879_pgfId-1382178]##link:JSF.htm#50638861_pgfId-1025230[7.1.3
FlowHandler Property 7–2]

{empty}[#50638879_pgfId-1382180]##link:JSF.htm#50638861_pgfId-1015987[7.1.4
NavigationHandler Property 7–3]

{empty}[#50638879_pgfId-1382182]##link:JSF.htm#50638861_pgfId-1016000[7.1.5
StateManager Property 7–3]

{empty}[#50638879_pgfId-1382184]##link:JSF.htm#50638861_pgfId-1012135[7.1.6
ELResolver Property 7–3]

{empty}[#50638879_pgfId-1382186]##link:JSF.htm#50638861_pgfId-1012280[7.1.7
ELContextListener Property 7–3]

{empty}[#50638879_pgfId-1382188]##link:JSF.htm#50638861_pgfId-1016097[7.1.8
ViewHandler Property 7–4]

{empty}[#50638879_pgfId-1382190]##link:JSF.htm#50638861_pgfId-1017748[7.1.9
ProjectStage Property 7–4]

{empty}[#50638879_pgfId-1382192]##link:JSF.htm#50638861_pgfId-1011873[7.1.10
Acquiring ExpressionFactory Instance 7–4]

{empty}[#50638879_pgfId-1382194]##link:JSF.htm#50638861_pgfId-1016171[7.1.11
Programmatically Evaluating Expressions 7–5]

{empty}[#50638879_pgfId-1382196]##link:JSF.htm#50638861_pgfId-1016177[7.1.12
Object Factories 7–5]

{empty}[#50638879_pgfId-1382198]##link:JSF.htm#50638861_pgfId-1020609[7.1.12.1
Default Validator Ids 7–6]

{empty}[#50638879_pgfId-1382200]##link:JSF.htm#50638861_pgfId-1016244[7.1.13
Internationalization Support 7–7]

{empty}[#50638879_pgfId-1382202]##link:JSF.htm#50638861_pgfId-1017785[7.1.14
System Event Methods 7–7]

{empty}[#50638879_pgfId-1382204]##link:JSF.htm#50638861_pgfId-1017828[7.1.14.1
Subscribing to system events 7–7]

{empty}[#50638879_pgfId-1382206]##link:JSF.htm#50638861_pgfId-1017854[7.1.14.2
Unsubscribing from system events 7–8]

{empty}[#50638879_pgfId-1382208]##link:JSF.htm#50638861_pgfId-1017838[7.2
ApplicationFactory 7–8]

{empty}[#50638879_pgfId-1382210]##link:JSF.htm#50638861_pgfId-1016281[7.3
Application Actions 7–8]

{empty}[#50638879_pgfId-1382212]##link:JSF.htm#50638861_pgfId-1016292[7.4
NavigationHandler 7–9]

{empty}[#50638879_pgfId-1382214]##link:JSF.htm#50638861_pgfId-1016293[7.4.1
Overview 7–9]

{empty}[#50638879_pgfId-1382216]##link:JSF.htm#50638861_pgfId-1016304[7.4.2
Default NavigationHandler Algorithm 7–10]

{empty}[#50638879_pgfId-1382218]##link:JSF.htm#50638861_pgfId-1041143[7.4.2.1
Requirements for Explicit Navigation in Faces Flow Call Nodes other than
ViewNodes 7–13]

{empty}[#50638879_pgfId-1382220]##link:JSF.htm#50638861_pgfId-1042573[7.4.2.2
Requirements for Entering a Flow 7–14]

{empty}[#50638879_pgfId-1382222]##link:JSF.htm#50638861_pgfId-1042935[7.4.2.3
Requirements for Exiting a Flow 7–14]

{empty}[#50638879_pgfId-1382224]##link:JSF.htm#50638861_pgfId-1043833[7.4.2.4
Requirements for Calling A Flow from the Current Flow 7–14]

{empty}[#50638879_pgfId-1382226]##link:JSF.htm#50638861_pgfId-1020331[7.4.3
Example NavigationHandler Configuration 7–15]

{empty}[#50638879_pgfId-1382228]##link:JSF.htm#50638861_pgfId-1021966[7.5
FlowHandler 7–19]

{empty}[#50638879_pgfId-1382230]##link:JSF.htm#50638861_pgfId-1025667[7.5.1
Non-normative example 7–20]

{empty}[#50638879_pgfId-1382232]##link:JSF.htm#50638861_pgfId-1031882[7.5.2
Non-normative Feature Overview 7–21]

{empty}[#50638879_pgfId-1382234]##link:JSF.htm#50638861_pgfId-1021975[7.6
ViewHandler 7–22]

{empty}[#50638879_pgfId-1382236]##link:JSF.htm#50638861_pgfId-1016503[7.6.1
Overview 7–22]

{empty}[#50638879_pgfId-1382238]##link:JSF.htm#50638861_pgfId-1016547[7.6.2
Default ViewHandler Implementation 7–24]

{empty}[#50638879_pgfId-1382240]##link:JSF.htm#50638861_pgfId-1021369[7.6.2.1
ViewHandler Methods that Derive Information From the Incoming Request
7–24]

{empty}[#50638879_pgfId-1382242]##link:JSF.htm#50638861_pgfId-1021373[7.6.2.2
ViewHandler Methods that are Called to Fill a Specific Role in the
Lifecycle 7–26]

{empty}[#50638879_pgfId-1382244]##link:JSF.htm#50638861_pgfId-1021392[7.6.2.3
ViewHandler Methods Relating to Navigation 7–26]

{empty}[#50638879_pgfId-1382246]##link:JSF.htm#50638861_pgfId-1044245[7.6.2.4
ViewHandler Methods that relate to View Protection 7–28]

{empty}[#50638879_pgfId-1382248]##link:JSF.htm#50638861_pgfId-1018561[7.7
ViewDeclarationLanguage 7–28]

{empty}[#50638879_pgfId-1382250]##link:JSF.htm#50638861_pgfId-1018678[7.7.1
ViewDeclarationLanguageFactory 7–28]

{empty}[#50638879_pgfId-1382252]##link:JSF.htm#50638861_pgfId-1018755[7.7.2
Default ViewDeclarationLanguage Implementation 7–29]

{empty}[#50638879_pgfId-1382254]##link:JSF.htm#50638861_pgfId-1020809[7.7.2.1
ViewDeclarationLanguage.createView() 7–29]

{empty}[#50638879_pgfId-1382256]##link:JSF.htm#50638861_pgfId-1022679[7.7.2.2
ViewDeclarationLanguage.calculateResourceLibraryContracts() 7–30]

{empty}[#50638879_pgfId-1382258]##link:JSF.htm#50638861_pgfId-1022684[7.7.2.3
ViewDeclarationLanguage.buildView() 7–30]

{empty}[#50638879_pgfId-1382260]##link:JSF.htm#50638861_pgfId-1019203[7.7.2.4
ViewDeclarationLanguage.getComponentMetadata() 7–30]

{empty}[#50638879_pgfId-1382262]##link:JSF.htm#50638861_pgfId-1020410[7.7.2.5
ViewDeclarationLanguage.getViewMetadata() and getViewParameters() 7–31]

{empty}[#50638879_pgfId-1382264]##link:JSF.htm#50638861_pgfId-1019265[7.7.2.6
ViewDeclarationLanguage.getScriptComponentResource() 7–32]

{empty}[#50638879_pgfId-1382266]##link:JSF.htm#50638861_pgfId-1019190[7.7.2.7
ViewDeclarationLanguage.renderView() 7–32]

{empty}[#50638879_pgfId-1382268]##link:JSF.htm#50638861_pgfId-1019197[7.7.2.8
ViewDeclarationLanguage.restoreView() 7–33]

{empty}[#50638879_pgfId-1382270]##link:JSF.htm#50638861_pgfId-1018744[7.8
StateManager 7–33]

{empty}[#50638879_pgfId-1382272]##link:JSF.htm#50638861_pgfId-1016875[7.8.1
Overview 7–34]

{empty}[#50638879_pgfId-1382274]##link:JSF.htm#50638861_pgfId-1048396[7.8.1.1
Stateless Views 7–34]

{empty}[#50638879_pgfId-1382276]##link:JSF.htm#50638861_pgfId-1016892[7.8.2
State Saving Alternatives and Implications 7–34]

{empty}[#50638879_pgfId-1382278]##link:JSF.htm#50638861_pgfId-1016904[7.8.3
State Saving Methods. 7–35]

{empty}[#50638879_pgfId-1382280]##link:JSF.htm#50638861_pgfId-1016954[7.8.4
State Restoring Methods 7–35]

{empty}[#50638879_pgfId-1382282]##link:JSF.htm#50638861_pgfId-1016960[7.8.5
Convenience Methods 7–36]

{empty}[#50638879_pgfId-1382284]##link:JSF.htm#50638861_pgfId-1018117[7.9
ResourceHandler 7–36]

{empty}[#50638879_pgfId-1382286]##link:JSF.htm#50638861_pgfId-1013148[7.10
Deprecated APIs 7–36]

{empty}[#50638879_pgfId-1382288]##link:JSF.htm#50638861_pgfId-1017004[7.10.1
PropertyResolver Property 7–36]

{empty}[#50638879_pgfId-1382290]##link:JSF.htm#50638861_pgfId-1017075[7.10.2
VariableResolver Property 7–37]

{empty}[#50638879_pgfId-1382292]##link:JSF.htm#50638861_pgfId-1017145[7.10.3
Acquiring ValueBinding Instances 7–37]

{empty}[#50638879_pgfId-1382294]##link:JSF.htm#50638861_pgfId-1017175[7.10.4
Acquiring MethodBinding Instances 7–37]

{empty}[#50638879_pgfId-1382296]##link:JSF.htm#50638861_pgfId-1012972[7.10.5
Object Factories 7–38]

{empty}[#50638879_pgfId-1382298]##link:JSF.htm#50638861_pgfId-1017225[7.10.6
StateManager 7–38]

{empty}[#50638879_pgfId-1382300]##link:JSF.htm#50638861_pgfId-1013023[7.10.7
ResponseStateManager 7–38]

======= [#50638879_pgfId-1382302]##link:JSF.htm#50638855_pgfId-1015689[Rendering Model 8–1]

{empty}[#50638879_pgfId-1382304]##link:JSF.htm#50638855_pgfId-1015693[8.1
RenderKit 8–1]

{empty}[#50638879_pgfId-1382306]##link:JSF.htm#50638855_pgfId-1015787[8.2
Renderer 8–3]

{empty}[#50638879_pgfId-1382308]##link:JSF.htm#50638855_pgfId-1017024[8.3
ClientBehaviorRenderer 8–4]

{empty}[#50638879_pgfId-1382310]##link:JSF.htm#50638855_pgfId-1016999[8.3.1
ClientBehaviorRenderer Registration 8–4]

{empty}[#50638879_pgfId-1382312]##link:JSF.htm#50638855_pgfId-1016974[8.4
ResponseStateManager 8–5]

{empty}[#50638879_pgfId-1382314]##link:JSF.htm#50638855_pgfId-1015955[8.5
RenderKitFactory 8–5]

{empty}[#50638879_pgfId-1382316]##link:JSF.htm#50638855_pgfId-1016070[8.6
Standard HTML RenderKit Implementation 8–6]

{empty}[#50638879_pgfId-1382318]##link:JSF.htm#50638855_pgfId-1016090[8.7
The Concrete HTML Component Classes 8–6]

======= [#50638879_pgfId-1382320]##link:JSF.htm#50638860_pgfId-1032084[Integration with JSP 9–1]

{empty}[#50638879_pgfId-1382322]##link:JSF.htm#50638860_pgfId-1032091[9.1
UIComponent Custom Actions 9–1]

{empty}[#50638879_pgfId-1382324]##link:JSF.htm#50638860_pgfId-1032155[9.2
Using UIComponent Custom Actions in JSP Pages 9–2]

{empty}[#50638879_pgfId-1382326]##link:JSF.htm#50638860_pgfId-1032157[9.2.1
Declaring the Tag Libraries 9–2]

{empty}[#50638879_pgfId-1382328]##link:JSF.htm#50638860_pgfId-1032170[9.2.2
Including Components in a Page 9–3]

{empty}[#50638879_pgfId-1382330]##link:JSF.htm#50638860_pgfId-1032188[9.2.3
Creating Components and Overriding Attributes 9–3]

{empty}[#50638879_pgfId-1382332]##link:JSF.htm#50638860_pgfId-1032200[9.2.4
Deleting Components on Redisplay 9–4]

{empty}[#50638879_pgfId-1382334]##link:JSF.htm#50638860_pgfId-1032202[9.2.5
Representing Component Hierarchies 9–5]

{empty}[#50638879_pgfId-1382336]##link:JSF.htm#50638860_pgfId-1032223[9.2.6
Registering Converters, Event Listeners, and Validators 9–5]

{empty}[#50638879_pgfId-1382338]##link:JSF.htm#50638860_pgfId-1032248[9.2.7
Using Facets 9–6]

{empty}[#50638879_pgfId-1382340]##link:JSF.htm#50638860_pgfId-1032271[9.2.8
Interoperability with JSP Template Text and Other Tag Libraries 9–6]

{empty}[#50638879_pgfId-1382342]##link:JSF.htm#50638860_pgfId-1032279[9.2.9
Composing Pages from Multiple Sources 9–7]

{empty}[#50638879_pgfId-1382344]##link:JSF.htm#50638860_pgfId-1032287[9.3
UIComponent Custom Action Implementation Requirements 9–7]

{empty}[#50638879_pgfId-1382346]##link:JSF.htm#50638860_pgfId-1025111[9.3.1
Considerations for Custom Actions written for JavaServer Faces 1.1 and
1.0 9–9]

{empty}[#50638879_pgfId-1382348]##link:JSF.htm#50638860_pgfId-1025124[9.3.1.1
Past and Present Tag constraints 9–10]

{empty}[#50638879_pgfId-1382350]##link:JSF.htm#50638860_pgfId-1025211[9.3.1.2
Faces 1.0 and 1.1 Taglib migration story 9–10]

{empty}[#50638879_pgfId-1382352]##link:JSF.htm#50638860_pgfId-1032357[9.4
JSF Core Tag Library 9–11]

{empty}[#50638879_pgfId-1382354]##link:JSF.htm#50638860_pgfId-1032450[9.4.1
<f:actionListener> 9–12]

{empty}[#50638879_pgfId-1382356]##link:JSF.htm#50638860_pgfId-1032452[Syntax
9–12]

{empty}[#50638879_pgfId-1382358]##link:JSF.htm#50638860_pgfId-1032454[Body
Content 9–12]

{empty}[#50638879_pgfId-1382360]##link:JSF.htm#50638860_pgfId-1032481[Attributes
9–12]

{empty}[#50638879_pgfId-1382362]##link:JSF.htm#50638860_pgfId-1032482[Constraints
9–12]

{empty}[#50638879_pgfId-1382364]##link:JSF.htm#50638860_pgfId-1032546[Description
9–12]

{empty}[#50638879_pgfId-1382366]##link:JSF.htm#50638860_pgfId-1032604[9.4.2
<f:attribute> 9–13]

{empty}[#50638879_pgfId-1382368]##link:JSF.htm#50638860_pgfId-1032606[Syntax
9–13]

{empty}[#50638879_pgfId-1382370]##link:JSF.htm#50638860_pgfId-1032608[Body
Content 9–13]

{empty}[#50638879_pgfId-1382372]##link:JSF.htm#50638860_pgfId-1032635[Attributes
9–13]

{empty}[#50638879_pgfId-1382374]##link:JSF.htm#50638860_pgfId-1032636[Constraints
9–13]

{empty}[#50638879_pgfId-1382376]##link:JSF.htm#50638860_pgfId-1032638[Description
9–13]

{empty}[#50638879_pgfId-1382378]##link:JSF.htm#50638860_pgfId-1032642[9.4.3
<f:convertDateTime> 9–14]

{empty}[#50638879_pgfId-1382380]##link:JSF.htm#50638860_pgfId-1032644[Syntax
9–14]

{empty}[#50638879_pgfId-1382382]##link:JSF.htm#50638860_pgfId-1032653[Body
Content 9–14]

{empty}[#50638879_pgfId-1382384]##link:JSF.htm#50638860_pgfId-1032720[Attributes
9–15]

{empty}[#50638879_pgfId-1382386]##link:JSF.htm#50638860_pgfId-1032721[Constraints
9–16]

{empty}[#50638879_pgfId-1382388]##link:JSF.htm#50638860_pgfId-1032775[Description
9–16]

{empty}[#50638879_pgfId-1382390]##link:JSF.htm#50638860_pgfId-1032841[9.4.4
<f:convertNumber> 9–18]

{empty}[#50638879_pgfId-1382392]##link:JSF.htm#50638860_pgfId-1032843[Syntax
9–18]

{empty}[#50638879_pgfId-1382394]##link:JSF.htm#50638860_pgfId-1032857[Body
Content 9–18]

{empty}[#50638879_pgfId-1382396]##link:JSF.htm#50638860_pgfId-1032964[Attributes
9–19]

{empty}[#50638879_pgfId-1382398]##link:JSF.htm#50638860_pgfId-1032965[Constraints
9–19]

{empty}[#50638879_pgfId-1382400]##link:JSF.htm#50638860_pgfId-1033019[Description
9–20]

{empty}[#50638879_pgfId-1382402]##link:JSF.htm#50638860_pgfId-1033073[9.4.5
<f:converter> 9–21]

{empty}[#50638879_pgfId-1382404]##link:JSF.htm#50638860_pgfId-1033075[Syntax
9–21]

{empty}[#50638879_pgfId-1382406]##link:JSF.htm#50638860_pgfId-1033077[Body
Content 9–21]

{empty}[#50638879_pgfId-1382408]##link:JSF.htm#50638860_pgfId-1033104[Attributes
9–21]

{empty}[#50638879_pgfId-1382410]##link:JSF.htm#50638860_pgfId-1033105[Constraints
9–21]

{empty}[#50638879_pgfId-1382412]##link:JSF.htm#50638860_pgfId-1033170[Description
9–21]

{empty}[#50638879_pgfId-1382414]##link:JSF.htm#50638860_pgfId-1033239[9.4.6
<f:facet> 9–22]

{empty}[#50638879_pgfId-1382416]##link:JSF.htm#50638860_pgfId-1033244[Syntax
9–22]

{empty}[#50638879_pgfId-1382418]##link:JSF.htm#50638860_pgfId-1033246[Body
Content 9–22]

{empty}[#50638879_pgfId-1382420]##link:JSF.htm#50638860_pgfId-1033265[Attributes
9–22]

{empty}[#50638879_pgfId-1382422]##link:JSF.htm#50638860_pgfId-1033266[Constraints
9–22]

{empty}[#50638879_pgfId-1382424]##link:JSF.htm#50638860_pgfId-1033304[Description
9–22]

{empty}[#50638879_pgfId-1382426]##link:JSF.htm#50638860_pgfId-1033343[9.4.7
<f:loadBundle> 9–23]

{empty}[#50638879_pgfId-1382428]##link:JSF.htm#50638860_pgfId-1033345[Syntax
9–23]

{empty}[#50638879_pgfId-1382430]##link:JSF.htm#50638860_pgfId-1033347[Body
Content 9–23]

{empty}[#50638879_pgfId-1382432]##link:JSF.htm#50638860_pgfId-1033374[Attributes
9–23]

{empty}[#50638879_pgfId-1382434]##link:JSF.htm#50638860_pgfId-1033375[Constraints
9–23]

{empty}[#50638879_pgfId-1382436]##link:JSF.htm#50638860_pgfId-1033412[Description
9–23]

{empty}[#50638879_pgfId-1382438]##link:JSF.htm#50638860_pgfId-1033431[9.4.8
<f:param> 9–24]

{empty}[#50638879_pgfId-1382440]##link:JSF.htm#50638860_pgfId-1033433[Syntax
9–24]

{empty}[#50638879_pgfId-1382442]##link:JSF.htm#50638860_pgfId-1033441[Body
Content 9–24]

{empty}[#50638879_pgfId-1382444]##link:JSF.htm#50638860_pgfId-1033484[Attributes
9–24]

{empty}[#50638879_pgfId-1382446]##link:JSF.htm#50638860_pgfId-1033485[Constraints
9–24]

{empty}[#50638879_pgfId-1382448]##link:JSF.htm#50638860_pgfId-1033509[Description
9–24]

{empty}[#50638879_pgfId-1382450]##link:JSF.htm#50638860_pgfId-1033550[9.4.9
<f:phaseListener> 9–25]

{empty}[#50638879_pgfId-1382452]##link:JSF.htm#50638860_pgfId-1033552[Syntax
9–25]

{empty}[#50638879_pgfId-1382454]##link:JSF.htm#50638860_pgfId-1033555[Body
Content 9–25]

{empty}[#50638879_pgfId-1382456]##link:JSF.htm#50638860_pgfId-1033582[Attributes
9–25]

{empty}[#50638879_pgfId-1382458]##link:JSF.htm#50638860_pgfId-1033583[Constraints
9–25]

{empty}[#50638879_pgfId-1382460]##link:JSF.htm#50638860_pgfId-1033633[Description
9–25]

{empty}[#50638879_pgfId-1382462]##link:JSF.htm#50638860_pgfId-1033666[9.4.10
<f:selectItem> 9–26]

{empty}[#50638879_pgfId-1382464]##link:JSF.htm#50638860_pgfId-1033668[Syntax
9–26]

{empty}[#50638879_pgfId-1382466]##
link:JSF.htm#50638860_pgfId-1033680[Body Content 9–26]

{empty}[#50638879_pgfId-1382468]##link:JSF.htm#50638860_pgfId-1033755[Attributes
9–27]

{empty}[#50638879_pgfId-1382470]##link:JSF.htm#50638860_pgfId-1033756[Constraints
9–27]

{empty}[#50638879_pgfId-1382472]##link:JSF.htm#50638860_pgfId-1033780[Description
9–27]

{empty}[#50638879_pgfId-1382474]##link:JSF.htm#50638860_pgfId-1033821[9.4.11
<f:selectItems> 9–28]

{empty}[#50638879_pgfId-1382476]##link:JSF.htm#50638860_pgfId-1033823[Syntax
9–28]

{empty}[#50638879_pgfId-1382478]##
link:JSF.htm#50638860_pgfId-1033827[Body Content 9–28]

{empty}[#50638879_pgfId-1382480]##link:JSF.htm#50638860_pgfId-1033866[Attributes
9–28]

{empty}[#50638879_pgfId-1382482]##link:JSF.htm#50638860_pgfId-1033867[Constraints
9–28]

{empty}[#50638879_pgfId-1382484]##link:JSF.htm#50638860_pgfId-1033869[Description
9–28]

{empty}[#50638879_pgfId-1382486]##link:JSF.htm#50638860_pgfId-1033911[9.4.12
<f:setPropertyActionListener> 9–29]

{empty}[#50638879_pgfId-1382488]##link:JSF.htm#50638860_pgfId-1033913[Syntax
9–29]

{empty}[#50638879_pgfId-1382490]##link:JSF.htm#50638860_pgfId-1033915[Body
Content 9–29]

{empty}[#50638879_pgfId-1382492]##link:JSF.htm#50638860_pgfId-1033942[Attributes
9–29]

{empty}[#50638879_pgfId-1382494]##link:JSF.htm#50638860_pgfId-1033943[Constraints
9–29]

{empty}[#50638879_pgfId-1382496]##link:JSF.htm#50638860_pgfId-1034019[Description
9–29]

{empty}[#50638879_pgfId-1382498]##link:JSF.htm#50638860_pgfId-1034025[9.4.13
<f:subview> 9–31]

{empty}[#50638879_pgfId-1382500]##link:JSF.htm#50638860_pgfId-1034034[Syntax
9–31]

{empty}[#50638879_pgfId-1382502]##link:JSF.htm#50638860_pgfId-1034035[Body
Content 9–31]

{empty}[#50638879_pgfId-1382504]##link:JSF.htm#50638860_pgfId-1034070[Attributes
9–31]

{empty}[#50638879_pgfId-1382506]##link:JSF.htm#50638860_pgfId-1034071[Constraints
9–31]

{empty}[#50638879_pgfId-1382508]##link:JSF.htm#50638860_pgfId-1034098[Description
9–31]

{empty}[#50638879_pgfId-1382510]##link:JSF.htm#50638860_pgfId-1034194[9.4.14
<f:validateDoubleRange> 9–34]

{empty}[#50638879_pgfId-1382512]##link:JSF.htm#50638860_pgfId-1034196[Syntax
9–34]

{empty}[#50638879_pgfId-1382514]##link:JSF.htm#50638860_pgfId-1034203[Body
Content 9–34]

{empty}[#50638879_pgfId-1382516]##link:JSF.htm#50638860_pgfId-1034238[Attributes
9–34]

{empty}[#50638879_pgfId-1382518]##link:JSF.htm#50638860_pgfId-1034239[Constraints
9–34]

{empty}[#50638879_pgfId-1382520]##link:JSF.htm#50638860_pgfId-1034306[Description
9–34]

{empty}[#50638879_pgfId-1382522]##link:JSF.htm#50638860_pgfId-1036531[9.4.15
<f:validateLength> 9–36]

{empty}[#50638879_pgfId-1382524]##link:JSF.htm#50638860_pgfId-1036310[Syntax
9–36]

{empty}[#50638879_pgfId-1382526]##link:JSF.htm#50638860_pgfId-1036317[Body
Content 9–36]

{empty}[#50638879_pgfId-1382528]##link:JSF.htm#50638860_pgfId-1036352[Attributes
9–36]

{empty}[#50638879_pgfId-1382530]##link:JSF.htm#50638860_pgfId-1036353[Constraints
9–36]

{empty}[#50638879_pgfId-1382532]##link:JSF.htm#50638860_pgfId-1036358[Description
9–36]

{empty}[#50638879_pgfId-1382534]##link:JSF.htm#50638860_pgfId-1034361[9.4.16
<f:validateRegex> 9–38]

{empty}[#50638879_pgfId-1382536]##link:JSF.htm#50638860_pgfId-1034363[Syntax
9–38]

{empty}[#50638879_pgfId-1382538]##link:JSF.htm#50638860_pgfId-1034370[Body
Content 9–38]

{empty}[#50638879_pgfId-1382540]##link:JSF.htm#50638860_pgfId-1034405[Attributes
9–38]

{empty}[#50638879_pgfId-1382542]##link:JSF.htm#50638860_pgfId-1034406[Constraints
9–38]

{empty}[#50638879_pgfId-1382544]##link:JSF.htm#50638860_pgfId-1034473[Description
9–38]

{empty}[#50638879_pgfId-1382546]##link:JSF.htm#50638860_pgfId-1034523[9.4.17
<f:validateLongRange> 9–39]

{empty}[#50638879_pgfId-1382548]##link:JSF.htm#50638860_pgfId-1034525[Syntax
9–39]

{empty}[#50638879_pgfId-1382550]##link:JSF.htm#50638860_pgfId-1034532[Body
Content 9–39]

{empty}[#50638879_pgfId-1382552]##link:JSF.htm#50638860_pgfId-1034567[Attributes
9–39]

{empty}[#50638879_pgfId-1382554]##link:JSF.htm#50638860_pgfId-1034568[Constraints
9–39]

{empty}[#50638879_pgfId-1382556]##link:JSF.htm#50638860_pgfId-1034635[Description
9–39]

{empty}[#50638879_pgfId-1382558]##link:JSF.htm#50638860_pgfId-1034663[9.4.18
<f:validator> 9–41]

{empty}[#50638879_pgfId-1382560]##link:JSF.htm#50638860_pgfId-1034665[Syntax
9–41]

{empty}[#50638879_pgfId-1382562]##link:JSF.htm#50638860_pgfId-1034667[Body
Content 9–41]

{empty}[#50638879_pgfId-1382564]##link:JSF.htm#50638860_pgfId-1034694[Attributes
9–41]

{empty}[#50638879_pgfId-1382566]##link:JSF.htm#50638860_pgfId-1034695[Constraints
9–41]

{empty}[#50638879_pgfId-1382568]##link:JSF.htm#50638860_pgfId-1034747[Description
9–41]

{empty}[#50638879_pgfId-1382570]##link:JSF.htm#50638860_pgfId-1034793[9.4.19
<f:valueChangeListener> 9–42]

{empty}[#50638879_pgfId-1382572]##link:JSF.htm#50638860_pgfId-1034795[Syntax
9–42]

{empty}[#50638879_pgfId-1382574]##link:JSF.htm#50638860_pgfId-1034797[Body
Content 9–42]

{empty}[#50638879_pgfId-1382576]##link:JSF.htm#50638860_pgfId-1034824[Attributes
9–42]

{empty}[#50638879_pgfId-1382578]##link:JSF.htm#50638860_pgfId-1034825[Constraints
9–42]

{empty}[#50638879_pgfId-1382580]##link:JSF.htm#50638860_pgfId-1034889[Description
9–42]

{empty}[#50638879_pgfId-1382582]##link:JSF.htm#50638860_pgfId-1034933[9.4.20
<f:verbatim> 9–44]

{empty}[#50638879_pgfId-1382584]##link:JSF.htm#50638860_pgfId-1034935[Syntax
9–44]

{empty}[#50638879_pgfId-1382586]##link:JSF.htm#50638860_pgfId-1034937[Body
Content 9–44]

{empty}[#50638879_pgfId-1382588]##link:JSF.htm#50638860_pgfId-1034964[Attributes
9–44]

{empty}[#50638879_pgfId-1382590]##link:JSF.htm#50638860_pgfId-1034965[Constraints
9–44]

{empty}[#50638879_pgfId-1382592]##link:JSF.htm#50638860_pgfId-1034989[Description
9–44]

{empty}[#50638879_pgfId-1382594]##link:JSF.htm#50638860_pgfId-1034992[9.4.21
<f:view> 9–45]

{empty}[#50638879_pgfId-1382596]##link:JSF.htm#50638860_pgfId-1035001[Syntax
9–45]

{empty}[#50638879_pgfId-1382598]##link:JSF.htm#50638860_pgfId-1035002[Body
Content 9–45]

{empty}[#50638879_pgfId-1382600]##link:JSF.htm#50638860_pgfId-1035045[Attributes
9–45]

{empty}[#50638879_pgfId-1382602]##link:JSF.htm#50638860_pgfId-1035046[Constraints
9–45]

{empty}[#50638879_pgfId-1382604]##link:JSF.htm#50638860_pgfId-1035110[Description
9–46]

{empty}[#50638879_pgfId-1382606]##link:JSF.htm#50638860_pgfId-1035118[9.5
Standard HTML RenderKit Tag Library 9–47]

======= [#50638879_pgfId-1382608]##link:JSF.htm#50638887_pgfId-1039729[Facelets and its use in Web Applications 10–1]

{empty}[#50638879_pgfId-1382610]##link:JSF.htm#50638887_pgfId-1036609[10.1
Non-normative Background 10–1]

{empty}[#50638879_pgfId-1382612]##link:JSF.htm#50638887_pgfId-1036617[10.1.1
Differences between JSP and Facelets 10–1]

{empty}[#50638879_pgfId-1382614]##link:JSF.htm#50638887_pgfId-1037010[10.1.2
Differences between Pre JSF 2.0 Facelets and Facelets in JSF 2.0 10–2]

{empty}[#50638879_pgfId-1382616]##link:JSF.htm#50638887_pgfId-1049253[10.1.3
Resource Library Contracts Background 10–3]

{empty}[#50638879_pgfId-1382618]##link:JSF.htm#50638887_pgfId-1049315[10.1.3.1
Non-normative Example 10–3]

{empty}[#50638879_pgfId-1382620]##link:JSF.htm#50638887_pgfId-1055327[10.1.3.2
Non-normative Feature Overview 10–5]

{empty}[#50638879_pgfId-1382622]##link:JSF.htm#50638887_pgfId-1056589[10.1.4
HTML5 Friendly Markup 10–6]

{empty}[#50638879_pgfId-1382624]##link:JSF.htm#50638887_pgfId-1057849[10.1.4.1
Non-normative Feature Overview 10–7]

{empty}[#50638879_pgfId-1382626]##link:JSF.htm#50638887_pgfId-1057982[10.2
Java Programming Language Specification for Facelets in JSF 2.0 10–8]

{empty}[#50638879_pgfId-1382628]##link:JSF.htm#50638887_pgfId-1039236[10.2.1
Specification of the ViewDeclarationLanguage Implementation for Facelets
for JSF 2.0 10–9]

{empty}[#50638879_pgfId-1382630]##link:JSF.htm#50638887_pgfId-1039271[10.3
XHTML Specification for Facelets for JSF 2.0 10–10]

{empty}[#50638879_pgfId-1382632]##link:JSF.htm#50638887_pgfId-1039218[10.3.1
General Requirements 10–10]

{empty}[#50638879_pgfId-1382634]##link:JSF.htm#50638887_pgfId-1042579[10.3.1.1
DOCTYPE and XML Declaration 10–10]

{empty}[#50638879_pgfId-1382636]##link:JSF.htm#50638887_pgfId-1037177[10.3.2
Facelet Tag Library mechanism 10–10]

{empty}[#50638879_pgfId-1382638]##link:JSF.htm#50638887_pgfId-1037118[10.3.3
Requirements specific to composite components 10–12]

{empty}[#50638879_pgfId-1382640]##link:JSF.htm#50638887_pgfId-1037321[10.3.3.1
Declaring a composite component library for use in a Facelet page 10–12]

[#50638879_pgfId-1382642]##link:JSF.htm#50638887_pgfId-1037365[10.3.3.2
Creating an instance of a] _top level component_ 10–12

[#50638879_pgfId-1382644]##link:JSF.htm#50638887_pgfId-1037372[10.3.3.3
Populating a] _top level component_ instance with children 10–13

{empty}[#50638879_pgfId-1382646]##link:JSF.htm#50638887_pgfId-1037427[10.4
Standard Facelet Tag Libraries 10–14]

{empty}[#50638879_pgfId-1382648]##link:JSF.htm#50638887_pgfId-1037059[10.4.1
JSF Core Tag Library 10–14]

{empty}[#50638879_pgfId-1382650]##link:JSF.htm#50638887_pgfId-1037540[10.4.1.1
<f:ajax> 10–14]

{empty}[#50638879_pgfId-1382652]##link:JSF.htm#50638887_pgfId-1071153[10.4.1.2
<f:event> 10–18]

{empty}[#50638879_pgfId-1382654]##link:JSF.htm#50638887_pgfId-1038897[10.4.1.3
<f:metadata> 10–18]

{empty}[#50638879_pgfId-1382656]##link:JSF.htm#50638887_pgfId-1038864[10.4.1.4
<f:validateBean> 10–18]

{empty}[#50638879_pgfId-1382658]##link:JSF.htm#50638887_pgfId-1065184[10.4.1.5
<f:validateRequired> 10–20]

{empty}[#50638879_pgfId-1382660]##link:JSF.htm#50638887_pgfId-1065236[10.4.1.6
<f:validateWholeBean> 10–21]

{empty}[#50638879_pgfId-1382662]##link:JSF.htm#50638887_pgfId-1066314[10.4.1.7
<f:websocket> 10–22]

{empty}[#50638879_pgfId-1382664]##link:JSF.htm#50638887_pgfId-1065228[10.4.2
Standard HTML RenderKit Tag Library 10–31]

{empty}[#50638879_pgfId-1382666]##link:JSF.htm#50638887_pgfId-1070676[10.4.3
Facelet Templating Tag Library 10–32]

{empty}[#50638879_pgfId-1382668]##link:JSF.htm#50638887_pgfId-1037087[10.4.4
Composite Component Tag Library 10–32]

{empty}[#50638879_pgfId-1382670]##link:JSF.htm#50638887_pgfId-1037139[10.4.5
JSTL Core and Function Tag Libraries 10–32]

{empty}[#50638879_pgfId-1382672]##link:JSF.htm#50638887_pgfId-1036321[10.5
Assertions relating to the construction of the view hierarchy 10–32]

======= [#50638879_pgfId-1382674]##link:JSF.htm#50638850_pgfId-1031520[Using JSF in Web Applications 11–1]

{empty}[#50638879_pgfId-1382676]##link:JSF.htm#50638850_pgfId-1031522[11.1
Web Application Deployment Descriptor 11–1]

{empty}[#50638879_pgfId-1382678]##link:JSF.htm#50638850_pgfId-1031527[11.1.1
Servlet Definition 11–1]

{empty}[#50638879_pgfId-1382680]##link:JSF.htm#50638850_pgfId-1031566[11.1.2
Servlet Mapping 11–2]

{empty}[#50638879_pgfId-1382682]##link:JSF.htm#50638850_pgfId-1031619[11.1.3
Application Configuration Parameters 11–2]

{empty}[#50638879_pgfId-1382684]##link:JSF.htm#50638850_pgfId-1031665[11.2
Included Classes and Resources 11–5]

{empty}[#50638879_pgfId-1382686]##link:JSF.htm#50638850_pgfId-1031671[11.2.1
Application-Specific Classes and Resources 11–6]

{empty}[#50638879_pgfId-1382688]##link:JSF.htm#50638850_pgfId-1031673[11.2.2
Servlet and JSP API Classes (javax.servlet.*) 11–6]

{empty}[#50638879_pgfId-1382690]##link:JSF.htm#50638850_pgfId-1031692[11.2.3
JSP Standard Tag Library (JSTL) API Classes (javax.servlet.jsp.jstl.*)
11–6]

{empty}[#50638879_pgfId-1382692]##link:JSF.htm#50638850_pgfId-1031698[11.2.4
JSP Standard Tag Library (JSTL) Implementation Classes 11–6]

{empty}[#50638879_pgfId-1382694]##link:JSF.htm#50638850_pgfId-1031704[11.2.5
JavaServer Faces API Classes (javax.faces.*) 11–6]

{empty}[#50638879_pgfId-1382696]##link:JSF.htm#50638850_pgfId-1032853[11.2.6
JavaServer Faces Implementation Classes 11–6]

{empty}[#50638879_pgfId-1382698]##link:JSF.htm#50638850_pgfId-1031709[11.2.6.1
FactoryFinder 11–6]

{empty}[#50638879_pgfId-1382700]##link:JSF.htm#50638850_pgfId-1031752[11.2.6.2
FacesServlet 11–7]

{empty}[#50638879_pgfId-1382702]##link:JSF.htm#50638850_pgfId-1031823[11.2.6.3
UIComponentELTag 11–8]

{empty}[#50638879_pgfId-1382704]##link:JSF.htm#50638850_pgfId-1031850[11.2.6.4
FacetTag 11–8]

{empty}[#50638879_pgfId-1382706]##link:JSF.htm#50638850_pgfId-1031858[11.2.6.5
ValidatorTag 11–8]

{empty}[#50638879_pgfId-1382708]##link:JSF.htm#50638850_pgfId-1029868[11.3
Deprecated APIs in the webapp package 11–9]

[#50638879_pgfId-1382710]##link:JSF.htm#50638850_pgfId-1029872[11.3.1]
_AttributeTag_ 11–9

[#50638879_pgfId-1382712]##link:JSF.htm#50638850_pgfId-1029883[11.3.2]
_ConverterTag_ 11–9

[#50638879_pgfId-1382714]##link:JSF.htm#50638850_pgfId-1029890[11.3.3]
_UIComponentBodyTag_ 11–9

[#50638879_pgfId-1382716]##link:JSF.htm#50638850_pgfId-1029894[11.3.4]
_UIComponentTag_ 11–9

[#50638879_pgfId-1382718]##link:JSF.htm#50638850_pgfId-1029898[11.3.5]
_ValidatorTag_ 11–9

{empty}[#50638879_pgfId-1382720]##link:JSF.htm#50638850_pgfId-1031916[11.4
Application Configuration Resources 11–9]

{empty}[#50638879_pgfId-1382722]##link:JSF.htm#50638850_pgfId-1031918[11.4.1
Overview 11–9]

{empty}[#50638879_pgfId-1382724]##link:JSF.htm#50638850_pgfId-1031922[11.4.2
Application Startup Behavior 11–10]

{empty}[#50638879_pgfId-1382726]##link:JSF.htm#50638850_pgfId-1037946[11.4.2.1
Resource Library Contracts 11–11]

{empty}[#50638879_pgfId-1382728]##link:JSF.htm#50638850_pgfId-1040692[11.4.3
Faces Flows 11–12]

{empty}[#50638879_pgfId-1382730]##link:JSF.htm#50638850_pgfId-1047282[11.4.3.1
Defining Flows 11–12]

{empty}[#50638879_pgfId-1382732]##link:JSF.htm#50638850_pgfId-1040763[11.4.3.2
Packaging Faces Flows in JAR Files 11–12]

{empty}[#50638879_pgfId-1382734]##link:JSF.htm#50638850_pgfId-1041910[11.4.3.3
Packaging Flows in Directories 11–12]

{empty}[#50638879_pgfId-1382736]##link:JSF.htm#50638850_pgfId-1035178[11.4.4
Application Shutdown Behavior 11–13]

{empty}[#50638879_pgfId-1382738]##link:JSF.htm#50638850_pgfId-1031989[11.4.5
Application Configuration Resource Format 11–13]

{empty}[#50638879_pgfId-1382740]##link:JSF.htm#50638850_pgfId-1032055[11.4.6
Configuration Impact on JSF Runtime 11–15]

{empty}[#50638879_pgfId-1382742]##link:JSF.htm#50638850_pgfId-1032104[11.4.7
Delegating Implementation Support 11–17]

{empty}[#50638879_pgfId-1382744]##link:JSF.htm#50638850_pgfId-1033445[11.4.8
Ordering of Artifacts 11–19]

{empty}[#50638879_pgfId-1382746]##link:JSF.htm#50638850_pgfId-1033301[11.4.9
Example Application Configuration Resource 11–24]

{empty}[#50638879_pgfId-1382748]##link:JSF.htm#50638850_pgfId-1035683[11.5
Annotations that correspond to and may take the place of entries in the
Application Configuration Resources 11–25]

{empty}[#50638879_pgfId-1382750]##link:JSF.htm#50638850_pgfId-1034239[11.5.1
Requirements for scanning of classes for annotations 11–25]

======= [#50638879_pgfId-1382752]##link:JSF.htm#50638859_pgfId-1000265[Lifecycle Management 12–1]

{empty}[#50638879_pgfId-1382754]##link:JSF.htm#50638859_pgfId-1000272[12.1
Lifecycle 12–1]

{empty}[#50638879_pgfId-1382756]##link:JSF.htm#50638859_pgfId-1000300[12.2
PhaseEvent 12–2]

{empty}[#50638879_pgfId-1382758]##link:JSF.htm#50638859_pgfId-1000313[12.3
PhaseListener 12–2]

{empty}[#50638879_pgfId-1382760]##link:JSF.htm#50638859_pgfId-1000328[12.4
LifecycleFactory 12–5]

======= [#50638879_pgfId-1382762]##link:JSF.htm#50638885_pgfId-1015881[Ajax Integration 13–1]

{empty}[#50638879_pgfId-1382764]##link:JSF.htm#50638885_pgfId-1015885[13.1
JavaScript Resource 13–1]

{empty}[#50638879_pgfId-1382766]##link:JSF.htm#50638885_pgfId-1017820[13.1.1
JavaScript Resource Loading 13–1]

{empty}[#50638879_pgfId-1382768]##link:JSF.htm#50638885_pgfId-1017831[13.1.1.1
The Annotation Approach 13–1]

{empty}[#50638879_pgfId-1382770]##link:JSF.htm#50638885_pgfId-1013213[13.1.1.2
The Resource API Approach 13–2]

{empty}[#50638879_pgfId-1382772]##link:JSF.htm#50638885_pgfId-1018268[13.1.1.3
The Page D eclaration Language Approach 13–3]

{empty}[#50638879_pgfId-1382774]##link:JSF.htm#50638885_pgfId-1017964[13.2
JavaScript Namespacing 13–3]

{empty}[#50638879_pgfId-1382776]##link:JSF.htm#50638885_pgfId-1018892[13.3
Ajax Interaction 13–3]

{empty}[#50638879_pgfId-1382778]##link:JSF.htm#50638885_pgfId-1021380[13.3.1
Sending an Ajax Request 13–4]

{empty}[#50638879_pgfId-1382780]##link:JSF.htm#50638885_pgfId-1019962[13.3.2
Ajax Request Queueing 13–4]

{empty}[#50638879_pgfId-1382782]##link:JSF.htm#50638885_pgfId-1019988[13.3.3
Request Callback Function 13–4]

{empty}[#50638879_pgfId-1382784]##link:JSF.htm#50638885_pgfId-1020022[13.3.4
Receiving The Ajax Response 13–4]

{empty}[#50638879_pgfId-1382786]##link:JSF.htm#50638885_pgfId-1021392[13.3.5
Monitoring Events On The Client 13–4]

{empty}[#50638879_pgfId-1382788]##link:JSF.htm#50638885_pgfId-1021539[13.3.5.1
Monitoring Events For An Ajax Request 13–5]

{empty}[#50638879_pgfId-1382790]##link:JSF.htm#50638885_pgfId-1021692[13.3.5.2
Monitoring Events For All Ajax Requests 13–5]

{empty}[#50638879_pgfId-1382792]##link:JSF.htm#50638885_pgfId-1021868[13.3.5.3
Sending Events 13–5]

{empty}[#50638879_pgfId-1382794]##link:JSF.htm#50638885_pgfId-1021691[13.3.6
Handling Errors On the Client 13–5]

{empty}[#50638879_pgfId-1382796]##link:JSF.htm#50638885_pgfId-1021738[13.3.6.1
Handling Errors For An Ajax Request 13–5]

{empty}[#50638879_pgfId-1382798]##link:JSF.htm#50638885_pgfId-1021763[13.3.6.2
Handling Errors For All Ajax Requests 13–6]

{empty}[#50638879_pgfId-1382800]##link:JSF.htm#50638885_pgfId-1021811[13.3.6.3
Signaling Errors 13–6]

{empty}[#50638879_pgfId-1382802]##link:JSF.htm#50638885_pgfId-1022041[13.3.7
Handling Errors On The Server 13–6]

{empty}[#50638879_pgfId-1382804]##link:JSF.htm#50638885_pgfId-1022152[13.4
Partial View Traversal 13–6]

{empty}[#50638879_pgfId-1382806]##link:JSF.htm#50638885_pgfId-1021224[13.4.1
Partial Traversal Strategy 13–7]

{empty}[#50638879_pgfId-1382808]##link:JSF.htm#50638885_pgfId-1018815[13.4.2
Partial View Processing 13–7]

{empty}[#50638879_pgfId-1382810]##link:JSF.htm#50638885_pgfId-1022432[13.4.3
Partial View Rendering 13–8]

{empty}[#50638879_pgfId-1382812]##link:JSF.htm#50638885_pgfId-1020355[13.4.4
Sending The Response to The Client 13–8]

{empty}[#50638879_pgfId-1382814]##link:JSF.htm#50638885_pgfId-1020440[13.4.4.1
Writing The Partial Response 13–8]

======= [#50638879_pgfId-1382816]##link:JSF.htm#50638886_pgfId-1015881[JavaScript API 14–1]

{empty}[#50638879_pgfId-1382818]##link:JSF.htm#50638886_pgfId-1021273[14.1
Collecting and Encoding View State 14–1]

{empty}[#50638879_pgfId-1382820]##link:JSF.htm#50638886_pgfId-1021351[14.1.1
Use Case 14–1]

{empty}[#50638879_pgfId-1382822]##link:JSF.htm#50638886_pgfId-1021370[14.2
Initiating an Ajax Request 14–2]

{empty}[#50638879_pgfId-1382824]##link:JSF.htm#50638886_pgfId-1023157[14.2.1
Usage 14–2]

{empty}[#50638879_pgfId-1382826]##link:JSF.htm#50638886_pgfId-1022817[14.2.2
Keywords 14–3]

{empty}[#50638879_pgfId-1382828]##link:JSF.htm#50638886_pgfId-1021550[14.2.3
Default Values 14–3]

{empty}[#50638879_pgfId-1382830]##link:JSF.htm#50638886_pgfId-1021571[14.2.4
Request Sending Specifics 14–3]

{empty}[#50638879_pgfId-1382832]##link:JSF.htm#50638886_pgfId-1021610[14.2.5
Use Case 14–4]

{empty}[#50638879_pgfId-1382834]##link:JSF.htm#50638886_pgfId-1021625[14.3
Processing The Ajax Response 14–4]

{empty}[#50638879_pgfId-1382836]##link:JSF.htm#50638886_pgfId-1021658[14.4
Registering Callback Functions 14–4]

{empty}[#50638879_pgfId-1382838]##link:JSF.htm#50638886_pgfId-1021685[14.4.1
Request/Response Event Handling 14–5]

{empty}[#50638879_pgfId-1382840]##link:JSF.htm#50638886_pgfId-1022229[14.4.1.1
Use Case 14–5]

{empty}[#50638879_pgfId-1382842]##link:JSF.htm#50638886_pgfId-1021938[14.4.2
Error Handling 14–6]

{empty}[#50638879_pgfId-1382844]##link:JSF.htm#50638886_pgfId-1022234[14.4.2.1
Use Case 14–6]

{empty}[#50638879_pgfId-1382846]##link:JSF.htm#50638886_pgfId-1020081[14.5
Determining An Application’s Project Stage 14–7]

{empty}[#50638879_pgfId-1382848]##link:JSF.htm#50638886_pgfId-1020344[14.5.1
Use Case 14–7]

{empty}[#50638879_pgfId-1382850]##link:JSF.htm#50638886_pgfId-1022772[14.6
Script Chaining 14–7]

======= [#50638879_pgfId-1382852]##link:JSF.htm#50638878_pgfId-1029116[Appendix A - JSF Metadata A–1]

[#50638879_pgfId-1382854]##link:JSF.htm#50638878_pgfId-1038150[1.1
Required Handling of] _*-extension_ elements in the application
configuration resources files A–1

[#50638879_pgfId-1382856]##link:JSF.htm#50638878_pgfId-1045744[1.1.1]
_faces-config-extension_ handling A–1

[#50638879_pgfId-1382858]##link:JSF.htm#50638878_pgfId-1045784[1.1.1.1
The] _facelets-processing_ element A–2

{empty}[#50638879_pgfId-1382860]##link:JSF.htm#50638878_pgfId-1037675[1.2
XML Schema Definition For Facelet Taglib A–3]

{empty}[#50638879_pgfId-1382862]##link:JSF.htm#50638878_pgfId-1041276[1.2.1
Deprecated DTD for Facelet Taglibraries Used by Versions of Facelets
Prior to JSF 2.0 A–4]

{empty}[#50638879_pgfId-1382864]##link:JSF.htm#50638878_pgfId-1038047[1.3
XML Schema Definition for Composite Components A–4]

======= [#50638879_pgfId-1382866]##link:JSF.htm#50638881_pgfId-1024787[Appendix B - Change Log B–11]

======= [#50638879_pgfId-1382868]##link:JSF.htm#50638881_pgfId-1025257[Changes between 2.1 and 2.2 11]

{empty}[#50638879_pgfId-1382870]##link:JSF.htm#50638881_pgfId-1025259[Big
Ticket Features 11]

{empty}[#50638879_pgfId-1382872]##link:JSF.htm#50638881_pgfId-1025284[Other
Features, by Functional Area 11]

{empty}[#50638879_pgfId-1382874]##link:JSF.htm#50638881_pgfId-1025285[Components/Renderers
11]

{empty}[#50638879_pgfId-1382876]##link:JSF.htm#50638881_pgfId-1025311[Lifecycle
13]

{empty}[#50638879_pgfId-1382878]##link:JSF.htm#50638881_pgfId-1025350[Platform
Integration 14]

{empty}[#50638879_pgfId-1382880]##link:JSF.htm#50638881_pgfId-1025358[Facelets/VDL
14]

{empty}[#50638879_pgfId-1382882]##link:JSF.htm#50638881_pgfId-1025398[Spec
Clarifications 15]

{empty}[#50638879_pgfId-1382884]##link:JSF.htm#50638881_pgfId-1025435[Resources
16]

{empty}[#50638879_pgfId-1382886]##link:JSF.htm#50638881_pgfId-1025452[Expression
Language 17]

{empty}[#50638879_pgfId-1382888]##link:JSF.htm#50638881_pgfId-1025464[Configuration
and Bootstrapping 17]

{empty}[#50638879_pgfId-1382890]##link:JSF.htm#50638881_pgfId-1025470[Miscellaneous
17]

{empty}[#50638879_pgfId-1382892]##link:JSF.htm#50638881_pgfId-1025615[Backward
Compatibility with Previous Versions 19]

{empty}[#50638879_pgfId-1382894]##link:JSF.htm#50638881_pgfId-1025617[Breakages
in Backward Compatibility 19]

======= [#50638879_pgfId-1382896]##link:JSF.htm#50638881_pgfId-1024801[Changes between 2.1 and 2.2 20]

{empty}[#50638879_pgfId-1382898]##link:JSF.htm#50638881_pgfId-1024803[Big
Ticket Features 20]

{empty}[#50638879_pgfId-1382900]##link:JSF.htm#50638881_pgfId-1024828[Other
Features, by Functional Area 20]

{empty}[#50638879_pgfId-1382902]##link:JSF.htm#50638881_pgfId-1024829[Components/Renderers
20]

{empty}[#50638879_pgfId-1382904]##link:JSF.htm#50638881_pgfId-1024855[Lifecycle
21]

{empty}[#50638879_pgfId-1382906]##link:JSF.htm#50638881_pgfId-1024894[Platform
Integration 23]

{empty}[#50638879_pgfId-1382908]##link:JSF.htm#50638881_pgfId-1024902[Facelets/VDL
23]

{empty}[#50638879_pgfId-1382910]##link:JSF.htm#50638881_pgfId-1024942[Spec
Clarifications 24]

{empty}[#50638879_pgfId-1382912]##link:JSF.htm#50638881_pgfId-1024979[Resources
25]

{empty}[#50638879_pgfId-1382914]##link:JSF.htm#50638881_pgfId-1024996[Expression
Language 26]

{empty}[#50638879_pgfId-1382916]##link:JSF.htm#50638881_pgfId-1025008[Configuration
and Bootstrapping 26]

{empty}[#50638879_pgfId-1382918]##link:JSF.htm#50638881_pgfId-1025014[Miscellaneous
26]

{empty}[#50638879_pgfId-1382920]##link:JSF.htm#50638881_pgfId-1025159[Backward
Compatibility with Previous Versions 28]

{empty}[#50638879_pgfId-1382922]##link:JSF.htm#50638881_pgfId-1025161[Breakages
in Backward Compatibility 28]

======= [#50638879_pgfId-1382924]##link:JSF.htm#50638881_pgfId-1024788[Changes between 2.0 Rev a and 2.1 29]

{empty}[#50638879_pgfId-1382926]##link:JSF.htm#50638881_pgfId-1024792[Section
10.3.2 “Facelet Tag Library mechanism” 29]

{empty}[#50638879_pgfId-1382928]##link:JSF.htm#50638881_pgfId-1024404[New
feature: <facelets-processing> 29]

{empty}[#50638879_pgfId-1382930]##link:JSF.htm#50638881_pgfId-1024409[Update
schema for 2.1 29]

{empty}[#50638879_pgfId-1382932]##link:JSF.htm#50638881_pgfId-1024414[Change
Restore View Phase 29]

{empty}[#50638879_pgfId-1382934]##link:JSF.htm#50638881_pgfId-1024422[Section
7.6.2 “Default ViewHandler Implementation” 29]

{empty}[#50638879_pgfId-1382936]##link:JSF.htm#50638881_pgfId-1024396[2.1
Changes between 2.0 Final and 2.0 Rev a B–30]

{empty}[#50638879_pgfId-1382938]##link:JSF.htm#50638881_pgfId-1021698[Global
changes 30]

{empty}[#50638879_pgfId-1382940]##link:JSF.htm#50638881_pgfId-1021699[ExceptionQueuedEvent
30]

{empty}[#50638879_pgfId-1382942]##link:JSF.htm#50638881_pgfId-1021701[Usage
of the term "page" in the JSF 2.0 spec 30]

{empty}[#50638879_pgfId-1382944]##link:JSF.htm#50638881_pgfId-1021724[Front
Matter 31]

{empty}[#50638879_pgfId-1382946]##link:JSF.htm#50638881_pgfId-1021727[Chapter
2 31]

{empty}[#50638879_pgfId-1382948]##link:JSF.htm#50638881_pgfId-1021731[Section
2.2.1 “Restore View” 31]

{empty}[#50638879_pgfId-1382950]##link:JSF.htm#50638881_pgfId-1021736[Section
2.5.2.4 “Localized Application Messages” 31]

{empty}[#50638879_pgfId-1382952]##link:JSF.htm#50638881_pgfId-1021742[Section
2.5.7 “JSR 303 Bean Validation” 31]

{empty}[#50638879_pgfId-1382954]##link:JSF.htm#50638881_pgfId-1021747[Section
2.5.7 “JSR 303 Bean Validation”needs to reference "Bean Validation
Integration" section 31]

{empty}[#50638879_pgfId-1382956]##link:JSF.htm#50638881_pgfId-1021752[Section
2.6.1.3 “Resource Identifiers” 31]

{empty}[#50638879_pgfId-1382958]##link:JSF.htm#50638881_pgfId-1021754[Chapter
3 31]

{empty}[#50638879_pgfId-1382960]##link:JSF.htm#50638881_pgfId-1021758[Clarify
meaning of "javax.faces.bean" in Section 3.5.6.1 “Bean Validator
Activation” 31]

{empty}[#50638879_pgfId-1382962]##link:JSF.htm#50638881_pgfId-1021765[Need
to be consistent between Section 3.4.3.4 “Declarative Listener
Registration”of the JSF 2.0 Spec and the VDLDoc for f:event 32]

{empty}[#50638879_pgfId-1382964]##link:JSF.htm#50638881_pgfId-1021775[Typo
in Section 3.4.3.4 “Declarative Listener Registration” of the JSF 2.0
Spec regarding "beforeRender" 32]

{empty}[#50638879_pgfId-1382966]##link:JSF.htm#50638881_pgfId-1021786[Section
3.5.3 “Validation Registration”, Section 3.6.1.1 “What does it mean to
be a JSF User Interface component?” 32]

{empty}[#50638879_pgfId-1382968]##link:JSF.htm#50638881_pgfId-1021792[Section
3.6.2.1 “Composite Component Metadata” 32]

{empty}[#50638879_pgfId-1382970]##link:JSF.htm#50638881_pgfId-1021794[Chapter
4 32]

{empty}[#50638879_pgfId-1382972]##link:JSF.htm#50638881_pgfId-1021798[Section
4.1.19.4 “Events” 32]

{empty}[#50638879_pgfId-1382974]##link:JSF.htm#50638881_pgfId-1021800[Chapter
7 33]

{empty}[#50638879_pgfId-1382976]##link:JSF.htm#50638881_pgfId-1021804[Section
7.4.1 “Overview” 33]

{empty}[#50638879_pgfId-1382978]##link:JSF.htm#50638881_pgfId-1021809[Section
7.4.2 “Default NavigationHandler Algorithm” 33]

{empty}[#50638879_pgfId-1382980]##link:JSF.htm#50638881_pgfId-1021814[Section
7.6.2 “Default ViewHandler Implementation” 33]

{empty}[#50638879_pgfId-1382982]##link:JSF.htm#50638881_pgfId-1021816[Chapter
9 33]

{empty}[#50638879_pgfId-1382984]##link:JSF.htm#50638881_pgfId-1021820[Section
9.4.1 “<f:actionListener>” of Spec PDF -- Missing "for" attribute of
f:actionListener in Spec PDF 33]

{empty}[#50638879_pgfId-1382986]##link:JSF.htm#50638881_pgfId-1021829[Section
9.4.1 “<f:actionListener>” and Section 9.4.19 “<f:valueChangeListener>”
33]

{empty}[#50638879_pgfId-1382988]##link:JSF.htm#50638881_pgfId-1021832[Chapter
10 33]

{empty}[#50638879_pgfId-1382990]##link:JSF.htm#50638881_pgfId-1021841[Section
10.3.1 “General Requirements” 34]

{empty}[#50638879_pgfId-1382992]##link:JSF.htm#50638881_pgfId-1021846[Section
10.3.2 “Facelet Tag Library mechanism” 34]

{empty}[#50638879_pgfId-1382994]##link:JSF.htm#50638881_pgfId-1021849[VDLDocs
and PDL documentation 34]

{empty}[#50638879_pgfId-1382996]##link:JSF.htm#50638881_pgfId-1021865[Possible
error in section Section 10.4.1.1 “<f:ajax>” of the JSF 2.0 Spec
regarding f:ajax and h:panelGrid 34]

{empty}[#50638879_pgfId-1382998]##link:JSF.htm#50638881_pgfId-1021890[Redundant
mentioning of Facelets in Section 10.4.1.4 “<f:validateBean>” of the JSF
2.0 Spec 35]

{empty}[#50638879_pgfId-1383000]##link:JSF.htm#50638881_pgfId-1021892[Availability
of f:validateBean and f:validateRequired in JSP 35]

{empty}[#50638879_pgfId-1383002]##link:JSF.htm#50638881_pgfId-1021899[Chapter
13 35]

{empty}[#50638879_pgfId-1383004]##link:JSF.htm#50638881_pgfId-1021903[Redundancy
in Section 13.4.2 “Partial View Processing” of the JSF 2.0 Spec 35]

{empty}[#50638879_pgfId-1383006]##link:JSF.htm#50638881_pgfId-1021908["Execute
portions" of the JSF request processing lifecycle in the JSF 2.0 Spec
35]

{empty}[#50638879_pgfId-1383008]##link:JSF.htm#50638881_pgfId-1021912[Chapter
14 35]

{empty}[#50638879_pgfId-1383010]##link:JSF.htm#50638881_pgfId-1021916[Section
14.2 “Initiating an Ajax Request” Typo in table 14.2.2 of the JSF 2.0
Spec 35]

{empty}[#50638879_pgfId-1383012]##link:JSF.htm#50638881_pgfId-1021925[Section
14.4.1 “Request/Response Event Handling”Table 14.4.1 36]

{empty}[#50638879_pgfId-1383014]##link:JSF.htm#50638881_pgfId-1021928[Appendix
A Metadata 36]

{empty}[#50638879_pgfId-1383016]##link:JSF.htm#50638881_pgfId-1021932[Section
1.2.1 “Deprecated DTD for Facelet Taglibraries Used by Versions of
Facelets Prior to JSF 2.0” 36]

{empty}[#50638879_pgfId-1383018]##link:JSF.htm#50638881_pgfId-1021939[VDLDoc
changes 36]

{empty}[#50638879_pgfId-1383020]##link:JSF.htm#50638881_pgfId-1021940[Typo
in f:selectItems VDLDocs 36]

{empty}[#50638879_pgfId-1383022]##link:JSF.htm#50638881_pgfId-1021942[Need
clarification on execute attribute of f:ajax 36]

{empty}[#50638879_pgfId-1383024]##link:JSF.htm#50638881_pgfId-1021944[Spelling
error in VDLDocs for f:ajax 36]

{empty}[#50638879_pgfId-1383026]##link:JSF.htm#50638881_pgfId-1021948[Need
clarification on required attribute in VDLDocs for tags that got a new
"for" attribute in JSF 2.0 37]

{empty}[#50638879_pgfId-1383028]##link:JSF.htm#50638881_pgfId-1021951[Uppercase
typo in VDLDocs for f:event 37]

{empty}[#50638879_pgfId-1383030]##link:JSF.htm#50638881_pgfId-1021953[Need
to change "JSP" to "Facelets" in "Body Content" of VDLDocs 37]

{empty}[#50638879_pgfId-1383032]##link:JSF.htm#50638881_pgfId-1021955[Need
clarification in VDLDocs for f:metadata 37]

{empty}[#50638879_pgfId-1383034]##link:JSF.htm#50638881_pgfId-1021964[Missing
description in VDLDocs for name attribute of f:viewParam 37]

{empty}[#50638879_pgfId-1383036]##link:JSF.htm#50638881_pgfId-1021966[VLDDocs
on "for" attribute of f:viewParam claim it can be used in a CC 37]

{empty}[#50638879_pgfId-1383038]##link:JSF.htm#50638881_pgfId-1021968[Miscellaneous
VDLDoc items 38]

{empty}[#50638879_pgfId-1383040]##link:JSF.htm#50638881_pgfId-1021983[Should
TLDDocs now be VDLDocs? 38]

{empty}[#50638879_pgfId-1383042]##link:JSF.htm#50638881_pgfId-1021985[Typo
in VDLDocs for f:event. 38]

{empty}[#50638879_pgfId-1383044]##link:JSF.htm#50638881_pgfId-1021988[Accepted
Changes from JCP Change Log for JSF 2.0 Rev a 38]

{empty}[#50638879_pgfId-1383046]##link:JSF.htm#50638881_pgfId-1021695[2.2
Changes between 1.2 Final and 2.0 Final B–45]

{empty}[#50638879_pgfId-1383048]##link:JSF.htm#50638881_pgfId-1020790[Section
2.1 “Request Processing Lifecycle Scenarios” 45]

{empty}[#50638879_pgfId-1383050]##link:JSF.htm#50638881_pgfId-1020795[Section
2.2 “Standard Request Processing Lifecycle Phases” 45]

{empty}[#50638879_pgfId-1383052]##link:JSF.htm#50638881_pgfId-1020800[Section
2.2.1 “Restore View” 46]

{empty}[#50638879_pgfId-1383054]##link:JSF.htm#50638881_pgfId-1020807[Section
2.2.2 “Apply Request Values” 46]

{empty}[#50638879_pgfId-1383056]##link:JSF.htm#50638881_pgfId-1020812[Section
2.2.2.1 “Apply Request Values Partial Processing” 46]

{empty}[#50638879_pgfId-1383058]##link:JSF.htm#50638881_pgfId-1020817[Section
2.2.3 “Process Validations” 46]

{empty}[#50638879_pgfId-1383060]##link:JSF.htm#50638881_pgfId-1020822[Section
2.2.3.1 “Partial Validations Partial Processing” 46]

{empty}[#50638879_pgfId-1383062]##link:JSF.htm#50638881_pgfId-1020827[Section
2.2.4 “Update Model Values” 46]

{empty}[#50638879_pgfId-1383064]##link:JSF.htm#50638881_pgfId-1020832[Section
2.2.4.1 “Update Model Values Partial Processing” 46]

{empty}[#50638879_pgfId-1383066]##link:JSF.htm#50638881_pgfId-1020837[Section
2.2.6 “Render Response” 46]

{empty}[#50638879_pgfId-1383068]##link:JSF.htm#50638881_pgfId-1020843[Section
2.5.2.4 “Localized Application Messages” 47]

{empty}[#50638879_pgfId-1383070]##link:JSF.htm#50638881_pgfId-1020848[Section
2.5.4 “Resource Handling” 47]

{empty}[#50638879_pgfId-1383072]##link:JSF.htm#50638881_pgfId-1020853[Section
2.5.5 “View Parameters” 47]

{empty}[#50638879_pgfId-1383074]##link:JSF.htm#50638881_pgfId-1020858[Section
2.5.6 “Bookmarkability” 47]

{empty}[#50638879_pgfId-1383076]##link:JSF.htm#50638881_pgfId-1020863[Section
2.5.7 “JSR 303 Bean Validation” 47]

{empty}[#50638879_pgfId-1383078]##link:JSF.htm#50638881_pgfId-1020868[Section
2.5.8 “Ajax” 47]

{empty}[#50638879_pgfId-1383080]##link:JSF.htm#50638881_pgfId-1020873[Section
2.5.9 “Component Behaviors” 47]

{empty}[#50638879_pgfId-1383082]##link:JSF.htm#50638881_pgfId-1020878[New
Section 2.6 “Resource Handling” 47]

{empty}[#50638879_pgfId-1383084]##link:JSF.htm#50638881_pgfId-1020883[New
Section 2.6.2 “Rendering Resources” 47]

{empty}[#50638879_pgfId-1383086]##link:JSF.htm#50638881_pgfId-1020888[New
Section 2.6.2.1 “Relocatable Resources” 48]

{empty}[#50638879_pgfId-1383088]##link:JSF.htm#50638881_pgfId-1020893[New
Section 2.6.2.2 “Resource Rendering Using Annotations” 48]

{empty}[#50638879_pgfId-1383090]##link:JSF.htm#50638881_pgfId-1020898[Section
3.1.8 “Component Tree Navigation” 48]

{empty}[#50638879_pgfId-1383092]##link:JSF.htm#50638881_pgfId-1020904[Section
3.1.10 “Managing Component Behavior” 48]

[#50638879_pgfId-1383094]## _link:JSF.htm#50638881_pgfId-1020909[Section
3.1.11 “Generic Attributes”]_ 48

{empty}[#50638879_pgfId-1383096]##link:JSF.htm#50638881_pgfId-1020914[Section
3.1.11.1 “Special Attributes” 48]

{empty}[#50638879_pgfId-1383098]##link:JSF.htm#50638881_pgfId-1020919[Section
3.1.13 “Component Specialization Methods” 48]

{empty}[#50638879_pgfId-1383100]##link:JSF.htm#50638881_pgfId-1020924[Section
3.1.14 “Lifecycle Management Methods” 48]

{empty}[#50638879_pgfId-1383102]##link:JSF.htm#50638881_pgfId-1020929[Section
3.1.15 “Utility Methods” 48]

{empty}[#50638879_pgfId-1383104]##link:JSF.htm#50638881_pgfId-1020934[Section
3.2.6.1 “Properties” 49]

{empty}[#50638879_pgfId-1383106]##link:JSF.htm#50638881_pgfId-1020939[Section
3.2.7.2 “Methods” 49]

{empty}[#50638879_pgfId-1383108]##link:JSF.htm#50638881_pgfId-1020944[Section
3.2.8 “SystemEventListenerHolder” 49]

{empty}[#50638879_pgfId-1383110]##link:JSF.htm#50638881_pgfId-1020949[Section
3.3.2 “Converter” 49]

{empty}[#50638879_pgfId-1383112]##link:JSF.htm#50638881_pgfId-1020954[Section
3.4.1 “Overview” 49]

{empty}[#50638879_pgfId-1383114]##link:JSF.htm#50638881_pgfId-1020966[Section
3.4.2.6 “Event Broadcasting” 49]

{empty}[#50638879_pgfId-1383116]##link:JSF.htm#50638881_pgfId-1020971[Section
3.4.3.1 “Event Classes” 49]

{empty}[#50638879_pgfId-1383118]##link:JSF.htm#50638881_pgfId-1020976[Section
3.4.3.4 “Declarative Listener Registration” 49]

{empty}[#50638879_pgfId-1383120]##link:JSF.htm#50638881_pgfId-1020981[Section
3.4.3.5 “Listener Registration By Annotation” 49]

{empty}[#50638879_pgfId-1383122]##link:JSF.htm#50638881_pgfId-1020986[Section
3.5.2 “Validator Classes” 50]

{empty}[#50638879_pgfId-1383124]##link:JSF.htm#50638881_pgfId-1020991[Section
3.5.2 “Validator Classes” 50]

{empty}[#50638879_pgfId-1383126]##link:JSF.htm#50638881_pgfId-1020996[Section
3.5.2 “Validator Classes” 50]

{empty}[#50638879_pgfId-1383128]##link:JSF.htm#50638881_pgfId-1021001[Section
3.5.3 “Validation Registration” 50]

{empty}[#50638879_pgfId-1383130]##link:JSF.htm#50638881_pgfId-1021006[Section
3.5.5 “Standard Validator Implementations” 50]

{empty}[#50638879_pgfId-1383132]##link:JSF.htm#50638881_pgfId-1021011[Section
3.5.6 “Bean Validation Integration” 50]

{empty}[#50638879_pgfId-1383134]##link:JSF.htm#50638881_pgfId-1021016[Section
3.7 “Component Behavior Model” 50]

{empty}[#50638879_pgfId-1383136]##link:JSF.htm#50638881_pgfId-1021021[Section
4.1.19.2 “Properties” 50]

[#50638879_pgfId-1383138]##link:JSF.htm#50638881_pgfId-1021022[Specify
the] _viewMap_ property on UIViewRoot. 50

{empty}[#50638879_pgfId-1383140]##link:JSF.htm#50638881_pgfId-1021026[Section
4.1.19.3 “Methods” 50]

{empty}[#50638879_pgfId-1383142]##link:JSF.htm#50638881_pgfId-1021031[Section
4.1.19.4 “Events” 50]

{empty}[#50638879_pgfId-1383144]##link:JSF.htm#50638881_pgfId-1021036[Section
4.1.19.5 “Partial Processing” 51]

{empty}[#50638879_pgfId-1383146]##link:JSF.htm#50638881_pgfId-1021041[Section
4.2.1.2 “Methods” 51]

{empty}[#50638879_pgfId-1383148]##link:JSF.htm#50638881_pgfId-1021046[Section
3.6 “Composite User Interface Components” 51]

{empty}[#50638879_pgfId-1383150]##link:JSF.htm#50638881_pgfId-1021051[Section
5.2.1 “MethodExpression Syntax and Semantics” 51]

{empty}[#50638879_pgfId-1383152]##link:JSF.htm#50638881_pgfId-1021056[Section
5.4.2 “Managed Bean Lifecycle Annotations” 51]

{empty}[#50638879_pgfId-1383154]##link:JSF.htm#50638881_pgfId-1021062[Section
5.6.1.1 “Faces Implicit Object ELResolver For JSP” and Section 5.6.2.1
“Implicit Object ELResolver for Facelets and Programmatic Access” 51]

[#50638879_pgfId-1383156]## _link:JSF.htm#50638881_pgfId-1021071[Section
5.6.1.2 “ManagedBean ELResolver”]_ 51

{empty}[#50638879_pgfId-1383158]##link:JSF.htm#50638881_pgfId-1021075[Section
5.6.2.1 “Implicit Object ELResolver for Facelets and Programmatic
Access” 51]

{empty}[#50638879_pgfId-1383160]##link:JSF.htm#50638881_pgfId-1021082[Section
5.6.2.5 “Resource ELResolver” 52]

{empty}[#50638879_pgfId-1383162]##link:JSF.htm#50638881_pgfId-1021083[This
section specifies the behavior of the Resource EL Resolver 52]

{empty}[#50638879_pgfId-1383164]##link:JSF.htm#50638881_pgfId-1021087[Section
5.6.2.2 “Composite Component Attributes ELResolver” 52]

{empty}[#50638879_pgfId-1383166]##link:JSF.htm#50638881_pgfId-1021092[Section
5.6.2.9 “ScopedAttribute ELResolver” 52]

{empty}[#50638879_pgfId-1383168]##link:JSF.htm#50638881_pgfId-1021097[Section
6.1.2 “Attributes” 52]

{empty}[#50638879_pgfId-1383170]##link:JSF.htm#50638881_pgfId-1021102[Section
6.1.8 “ResponseStream and ResponseWriter” 52]

{empty}[#50638879_pgfId-1383172]##link:JSF.htm#50638881_pgfId-1021107[Section
6.1.10 “Partial Processing Methods” 52]

{empty}[#50638879_pgfId-1383174]##link:JSF.htm#50638881_pgfId-1021112[Section
6.1.11 “Partial View Context” 52]

{empty}[#50638879_pgfId-1383176]##link:JSF.htm#50638881_pgfId-1021117[Section
6.1.12 “Access To The Current FacesContext Instance” 52]

{empty}[#50638879_pgfId-1383178]##link:JSF.htm#50638881_pgfId-1021122[Section
6.1.13 “CurrentPhaseId” 52]

{empty}[#50638879_pgfId-1383180]##link:JSF.htm#50638881_pgfId-1021127[Section
6.2 “ExceptionHandler” 52]

{empty}[#50638879_pgfId-1383182]##link:JSF.htm#50638881_pgfId-1021132[Section
6.7 “ExceptionHandlerFactory” 53]

{empty}[#50638879_pgfId-1383184]##link:JSF.htm#50638881_pgfId-1021137[Section
6.8 “ExternalContextFactory” 53]

{empty}[#50638879_pgfId-1383186]##link:JSF.htm#50638881_pgfId-1021142[Section
7.1.9 “ProjectStage Property” 53]

[#50638879_pgfId-1383188]## _link:JSF.htm#50638881_pgfId-1021147[Section
7.1.14 “System Event Methods”]_ 53

{empty}[#50638879_pgfId-1383190]##link:JSF.htm#50638881_pgfId-1021152[Section
7.4.2 “Default NavigationHandler Algorithm” 53]

{empty}[#50638879_pgfId-1383192]##link:JSF.htm#50638881_pgfId-1021161[Section
7.6.1 “Overview” 53]

{empty}[#50638879_pgfId-1383194]##link:JSF.htm#50638881_pgfId-1021166[Section
7.6.2 “Default ViewHandler Implementation” 53]

{empty}[#50638879_pgfId-1383196]##link:JSF.htm#50638881_pgfId-1021173[Section
7.7 “ViewDeclarationLanguage” 53]

{empty}[#50638879_pgfId-1383198]##link:JSF.htm#50638881_pgfId-1021178[Section
8.1 “RenderKit” 54]

{empty}[#50638879_pgfId-1383200]##link:JSF.htm#50638881_pgfId-1021183[Section
8.2 “Renderer” 54]

{empty}[#50638879_pgfId-1383202]##link:JSF.htm#50638881_pgfId-1021188[Section
8.3 “ClientBehaviorRenderer” 54]

{empty}[#50638879_pgfId-1383204]##link:JSF.htm#50638881_pgfId-1021193[Section
9.4.3 “<f:convertDateTime>” 54]

{empty}[#50638879_pgfId-1383206]##link:JSF.htm#50638881_pgfId-1021198[Section
9.4.4 “<f:convertNumber>” 54]

{empty}[#50638879_pgfId-1383208]##link:JSF.htm#50638881_pgfId-1021203[Section
9.4.14 “<f:validateDoubleRange>” 54]

{empty}[#50638879_pgfId-1383210]##link:JSF.htm#50638881_pgfId-1021208[Section
9.4.16 “<f:validateRegex>” 54]

{empty}[#50638879_pgfId-1383212]##link:JSF.htm#50638881_pgfId-1021213[Section
9.4.17 “<f:validateLongRange>” 54]

{empty}[#50638879_pgfId-1383214]##link:JSF.htm#50638881_pgfId-1021218[Section
9.4.21 “<f:view>” 54]

{empty}[#50638879_pgfId-1383216]##link:JSF.htm#50638881_pgfId-1021223[Section
“Facelets and its use in Web Applications” 54]

{empty}[#50638879_pgfId-1383218]##link:JSF.htm#50638881_pgfId-1021231[Section
10.4.1.1 “<f:ajax>” 55]

{empty}[#50638879_pgfId-1383220]##link:JSF.htm#50638881_pgfId-1021235[Section
“Override default Ajax action. “button1” is associated with the Ajax
“execute=’cancel’” action:” 55]

{empty}[#50638879_pgfId-1383222]##link:JSF.htm#50638881_pgfId-1021241[Section
10.4.1.5 “<f:validateRequired>” 55]

{empty}[#50638879_pgfId-1383224]##link:JSF.htm#50638881_pgfId-1021246[Section
11.1.3 “Application Configuration Parameters” 55]

{empty}[#50638879_pgfId-1383226]##link:JSF.htm#50638881_pgfId-1021258[Section
11.4.2 “Application Startup Behavior” 55]

{empty}[#50638879_pgfId-1383228]##link:JSF.htm#50638881_pgfId-1021263[Section
11.4.6 “Configuration Impact on JSF Runtime” 55]

[#50638879_pgfId-1383230]## _link:JSF.htm#50638881_pgfId-1021272[Section
11.4.7 “Delegating Implementation Support”]_ 56

{empty}[#50638879_pgfId-1383232]##link:JSF.htm#50638881_pgfId-1021277[Section
11.4.8 “Ordering of Artifacts” 56]

{empty}[#50638879_pgfId-1383234]##link:JSF.htm#50638881_pgfId-1021281[Section
11.5 “Annotations that correspond to and may take the place of entries
in the Application Configuration Resources” 56]

{empty}[#50638879_pgfId-1383236]##link:JSF.htm#50638881_pgfId-1021287[Section
12.2 “PhaseEvent” 56]

{empty}[#50638879_pgfId-1383238]##link:JSF.htm#50638881_pgfId-1021292[Chapter
13 “Ajax Integration 56]

{empty}[#50638879_pgfId-1383240]##link:JSF.htm#50638881_pgfId-1021297[Section
13.1 “JavaScript Resource” 56]

{empty}[#50638879_pgfId-1383242]##link:JSF.htm#50638881_pgfId-1021302[Section
13.1.1 “JavaScript Resource Loading” 56]

{empty}[#50638879_pgfId-1383244]##link:JSF.htm#50638881_pgfId-1021307[Section
13.1.1.1 “The Annotation Approach” 56]

{empty}[#50638879_pgfId-1383246]##link:JSF.htm#50638881_pgfId-1021312[Section
13.1.1.2 “The Resource API Approach” 56]

{empty}[#50638879_pgfId-1383248]##link:JSF.htm#50638881_pgfId-1021317[Section
13.1.1.3 “The Page D eclaration Language Approach” 57]

{empty}[#50638879_pgfId-1383250]##link:JSF.htm#50638881_pgfId-1021322[Section
13.2 “JavaScript Namespacing” 57]

{empty}[#50638879_pgfId-1383252]##link:JSF.htm#50638881_pgfId-1021327[Section
13.3 “Ajax Interaction” 57]

{empty}[#50638879_pgfId-1383254]##link:JSF.htm#50638881_pgfId-1021332[Section
13.3.1 “Sending an Ajax Request” 57]

{empty}[#50638879_pgfId-1383256]##link:JSF.htm#50638881_pgfId-1021337[Section
13.3.2 “Ajax Request Queueing” 57]

{empty}[#50638879_pgfId-1383258]##link:JSF.htm#50638881_pgfId-1021342[Section
13.3.3 “Request Callback Function” 57]

{empty}[#50638879_pgfId-1383260]##link:JSF.htm#50638881_pgfId-1021347[Section
13.3.4 “Receiving The Ajax Response” 57]

{empty}[#50638879_pgfId-1383262]##link:JSF.htm#50638881_pgfId-1021352[Section
13.3.5 “Monitoring Events On The Client” 57]

{empty}[#50638879_pgfId-1383264]##link:JSF.htm#50638881_pgfId-1021357[Section
13.3.5.1 “Monitoring Events For An Ajax Request” 57]

{empty}[#50638879_pgfId-1383266]##link:JSF.htm#50638881_pgfId-1021362[Section
13.3.5.2 “Monitoring Events For All Ajax Requests” 58]

{empty}[#50638879_pgfId-1383268]##link:JSF.htm#50638881_pgfId-1021367[Section
13.3.5.3 “Sending Events” 58]

{empty}[#50638879_pgfId-1383270]##link:JSF.htm#50638881_pgfId-1021372[Section
13.3.6 “Handling Errors On the Client” 58]

{empty}[#50638879_pgfId-1383272]##link:JSF.htm#50638881_pgfId-1021377[Section
13.3.6.1 “Handling Errors For An Ajax Request” 58]

{empty}[#50638879_pgfId-1383274]##link:JSF.htm#50638881_pgfId-1021382[Section
13.3.6.2 “Handling Errors For All Ajax Requests” 58]

{empty}[#50638879_pgfId-1383276]##link:JSF.htm#50638881_pgfId-1021387[Section
13.3.6.3 “Signaling Errors” 58]

{empty}[#50638879_pgfId-1383278]##link:JSF.htm#50638881_pgfId-1021392[Section
13.3.7 “Handling Errors On The Server” 58]

{empty}[#50638879_pgfId-1383280]##link:JSF.htm#50638881_pgfId-1021397[Section
13.4 “Partial View Traversal” 58]

{empty}[#50638879_pgfId-1383282]##link:JSF.htm#50638881_pgfId-1021402[Section
13.4.1 “Partial Traversal Strategy” 58]

{empty}[#50638879_pgfId-1383284]##link:JSF.htm#50638881_pgfId-1021407[Section
13.4.2 “Partial View Processing” 59]

{empty}[#50638879_pgfId-1383286]##link:JSF.htm#50638881_pgfId-1021412[Section
13.4.3 “Partial View Rendering” 59]

{empty}[#50638879_pgfId-1383288]##link:JSF.htm#50638881_pgfId-1021417[Section
13.4.4 “Sending The Response to The Client” 59]

{empty}[#50638879_pgfId-1383290]##link:JSF.htm#50638881_pgfId-1021422[Section
13.4.4.1 “Writing The Partial Response” 59]

{empty}[#50638879_pgfId-1383292]##link:JSF.htm#50638881_pgfId-1021427[Chapter
14 “JavaScript API 59]

{empty}[#50638879_pgfId-1383294]##link:JSF.htm#50638881_pgfId-1021432[Section
14.1 “Collecting and Encoding View State” 59]

{empty}[#50638879_pgfId-1383296]##link:JSF.htm#50638881_pgfId-1021437[Section
14.1.1 “Use Case” 59]

{empty}[#50638879_pgfId-1383298]##link:JSF.htm#50638881_pgfId-1021442[Section
14.2 “Initiating an Ajax Request” 59]

{empty}[#50638879_pgfId-1383300]##link:JSF.htm#50638881_pgfId-1021447[Section
14.2.1 “Usage” 59]

{empty}[#50638879_pgfId-1383302]##link:JSF.htm#50638881_pgfId-1021452[Section
14.2.3 “Default Values” 59]

{empty}[#50638879_pgfId-1383304]##link:JSF.htm#50638881_pgfId-1021457[Section
14.2.4 “Request Sending Specifics” 60]

{empty}[#50638879_pgfId-1383306]##link:JSF.htm#50638881_pgfId-1021462[Section
14.2.5 “Use Case” 60]

{empty}[#50638879_pgfId-1383308]##link:JSF.htm#50638881_pgfId-1021467[Section
14.5 “Determining An Application’s Project Stage” 60]

{empty}[#50638879_pgfId-1383310]##link:JSF.htm#50638881_pgfId-1021472[Section
14.4 “Registering Callback Functions” 60]

{empty}[#50638879_pgfId-1383312]##link:JSF.htm#50638881_pgfId-1021477[Section
14.4.1 “Request/Response Event Handling” 60]

{empty}[#50638879_pgfId-1383314]##link:JSF.htm#50638881_pgfId-1021482[Section
14.4.1.1 “Use Case” 60]

{empty}[#50638879_pgfId-1383316]##link:JSF.htm#50638881_pgfId-1021487[Section
14.4.2 “Error Handling” 60]

{empty}[#50638879_pgfId-1383318]##link:JSF.htm#50638881_pgfId-1021492[Section
14.4.2.1 “Use Case” 60]

{empty}[#50638879_pgfId-1383320]##link:JSF.htm#50638881_pgfId-1021497[Section
14.5 “Determining An Application’s Project Stage” 60]

{empty}[#50638879_pgfId-1383322]##link:JSF.htm#50638881_pgfId-1021502[Section
14.5.1 “Use Case” 60]

{empty}[#50638879_pgfId-1383324]##link:JSF.htm#50638881_pgfId-1021507[Section
14.6 “Script Chaining” 61]

{empty}[#50638879_pgfId-1383326]##link:JSF.htm#50638881_pgfId-1021511[Javadoc
XML Schema section 61]

{empty}[#50638879_pgfId-1383328]##link:JSF.htm#50638881_pgfId-1021518[Section
1.3 “XML Schema Definition for Composite Components” 61]

{empty}[#50638879_pgfId-1383330]##link:JSF.htm#50638881_pgfId-1021520[Standard
HTML RenderKit specification 61]

{empty}[#50638879_pgfId-1383332]##link:JSF.htm#50638881_pgfId-1021521[component-family:
javax.faces.Graphic renderer-type: javax.faces.Image 61]

{empty}[#50638879_pgfId-1383334]##link:JSF.htm#50638881_pgfId-1021523[component-family:
javax.faces.Output renderer-type: javax.faces.Body 61]

{empty}[#50638879_pgfId-1383336]##link:JSF.htm#50638881_pgfId-1021525[component-family:
javax.faces.Output renderer-type: javax.faces.Head 61]

{empty}[#50638879_pgfId-1383338]##link:JSF.htm#50638881_pgfId-1021527[component-family:
javax.faces.Output renderer-type: javax.faces.resource.Script 61]

{empty}[#50638879_pgfId-1383340]##link:JSF.htm#50638881_pgfId-1021529[component-family:
javax.faces.Output renderer-type: javax.faces.resource.Stylesheet 61]

{empty}[#50638879_pgfId-1383342]##link:JSF.htm#50638881_pgfId-1021531[General
Changes 61]

[#50638879_pgfId-1383344]##link:JSF.htm#50638881_pgfId-1020780[2.3]
_Changes Between 1.1 and 1.2_ B–62

{empty}[#50638879_pgfId-1383346]##link:JSF.htm#50638881_pgfId-1020018[Unified
Expression Language (EL) 62]

{empty}[#50638879_pgfId-1383348]##link:JSF.htm#50638881_pgfId-1020021[2.3.0.1
Guide to Deprecated Methods Relating to the Unified EL and their
Corresponding Replacements B–62]

{empty}[#50638879_pgfId-1383350]##link:JSF.htm#50638881_pgfId-1020121[Guide
to Deprecated Methods Relating to State Management and their
Corresponding Replacements 65]

{empty}[#50638879_pgfId-1383352]##link:JSF.htm#50638881_pgfId-1020143[JavaServer
Faces 1.2 Backwards Compatibility 65]

{empty}[#50638879_pgfId-1383354]##link:JSF.htm#50638881_pgfId-1020147[Breakages
in Backwards Compatability 66]

{empty}[#50638879_pgfId-1383356]##link:JSF.htm#50638881_pgfId-1020157[General
changes 66]

{empty}[#50638879_pgfId-1383358]##link:JSF.htm#50638881_pgfId-1020320[Preface
69]

{empty}[#50638879_pgfId-1383360]##link:JSF.htm#50638881_pgfId-1020325[Section
2.2.1 “Restore View” 69]

{empty}[#50638879_pgfId-1383362]##link:JSF.htm#50638881_pgfId-1020334[Section
2.2.6 “Render Response” 69]

{empty}[#50638879_pgfId-1383364]##link:JSF.htm#50638881_pgfId-1020339[Section
2.4.2.1 “Create A New View” 69]

{empty}[#50638879_pgfId-1383366]##link:JSF.htm#50638881_pgfId-1020344[Section
2.5.2.4 “Localized Application Messages” 70]

[#50638879_pgfId-1383368]## _link:JSF.htm#50638881_pgfId-1020349[Section
3.1.11 “Generic Attributes”]_ 70

{empty}[#50638879_pgfId-1383370]##link:JSF.htm#50638881_pgfId-1020354[Section
3.1.13 “Component Specialization Methods” 70]

{empty}[#50638879_pgfId-1383372]##link:JSF.htm#50638881_pgfId-1020355[Add
new method, encodeAll(), which is now the preferred method for
developers to call to render a child or facet(). 70]

{empty}[#50638879_pgfId-1383374]##link:JSF.htm#50638881_pgfId-1020359[Section
4.1.4 “UIForm” 70]

{empty}[#50638879_pgfId-1383376]##link:JSF.htm#50638881_pgfId-1020364[UIData
Section 4.1.3.2 “Properties” 70]

{empty}[#50638879_pgfId-1383378]##link:JSF.htm#50638881_pgfId-1020369[UIInput
Section 4.1.6 “UIInput” 70]

{empty}[#50638879_pgfId-1383380]##link:JSF.htm#50638881_pgfId-1020374[UIInput
Section 4.1.6.3 “Methods” 70]

{empty}[#50638879_pgfId-1383382]##link:JSF.htm#50638881_pgfId-1020379[Section
4.1.19 “UIViewRoot” 70]

{empty}[#50638879_pgfId-1383384]##link:JSF.htm#50638881_pgfId-1020383[Section
5.1.2 and 5.1.3 “ValueExpression Syntax” and “ValueExpression Semantics”
70]

{empty}[#50638879_pgfId-1383386]##link:JSF.htm#50638881_pgfId-1020388[Section
5.2.1 “MethodExpression Syntax and Semantics” 70]

{empty}[#50638879_pgfId-1383388]##link:JSF.htm#50638881_pgfId-1020392[Section
5.4 “Managed Bean Annotations” 71]

{empty}[#50638879_pgfId-1383390]##link:JSF.htm#50638881_pgfId-1020399[Section
5.5.3 “ExpressionFactory” 71]

{empty}[#50638879_pgfId-1383392]##link:JSF.htm#50638881_pgfId-1020404[Section
5.6.1.4 “ResourceBundle ELResolver for JSP Pages” 71]

{empty}[#50638879_pgfId-1383394]##link:JSF.htm#50638881_pgfId-1020415[Section
7.6.1 “Overview” ViewHandler 71]

{empty}[#50638879_pgfId-1383396]##link:JSF.htm#50638881_pgfId-1020420[Section
7.6.2 “Default ViewHandler Implementation” 71]

{empty}[#50638879_pgfId-1383398]##link:JSF.htm#50638881_pgfId-1020436[State
Saving Section 7.8.1 “Overview” 71]

{empty}[#50638879_pgfId-1383400]##link:JSF.htm#50638881_pgfId-1020441[Section
7.8.2 “State Saving Alternatives and Implications” 71]

{empty}[#50638879_pgfId-1383402]##link:JSF.htm#50638881_pgfId-1020450[Section
8.4 “ResponseStateManager” 72]

{empty}[#50638879_pgfId-1383404]##link:JSF.htm#50638881_pgfId-1020457[Section
9.1 “UIComponent Custom Actions” 72]

{empty}[#50638879_pgfId-1383406]##link:JSF.htm#50638881_pgfId-1020461[Section
9.2.8 “Interoperability with JSP Template Text and Other Tag Libraries”
72]

{empty}[#50638879_pgfId-1383408]##link:JSF.htm#50638881_pgfId-1020468[Section
“Integration with JSP” 72]

{empty}[#50638879_pgfId-1383410]##link:JSF.htm#50638881_pgfId-1020473[Section
9.3.1.2 “Faces 1.0 and 1.1 Taglib migration story” 72]

[#50638879_pgfId-1383412]## _link:JSF.htm#50638881_pgfId-1020478[Section
9.4 “JSF Core Tag Library”]_ 72

{empty}[#50638879_pgfId-1383414]##link:JSF.htm#50638881_pgfId-1020487[Section
9.4.2 “<f:attribute>” 72]

{empty}[#50638879_pgfId-1383416]##link:JSF.htm#50638881_pgfId-1020492[Section
9.4.12 “<f:setPropertyActionListener>” 73]

{empty}[#50638879_pgfId-1383418]##link:JSF.htm#50638881_pgfId-1020497[Section
9.4.21 “<f:view>” 73]

{empty}[#50638879_pgfId-1383420]##link:JSF.htm#50638881_pgfId-1020502[Section
9.5 “Standard HTML RenderKit Tag Library” 73]

{empty}[#50638879_pgfId-1383422]##link:JSF.htm#50638881_pgfId-1020508[Section
11.2.6.2 “FacesServlet” 73]

{empty}[#50638879_pgfId-1383424]##link:JSF.htm#50638881_pgfId-1020513[Section
11.3 “Deprecated APIs in the webapp package” 73]

{empty}[#50638879_pgfId-1383426]##link:JSF.htm#50638881_pgfId-1020518[Section
11.4.2 “Application Startup Behavior” 73]

== [#50638856_pgfId-24335]##

image:JSF-3.gif[image]

Preface

image:JSF-4.gif[image]

[#50638856_pgfId-32209]##This is the JavaServer Faces 2.3 (JSF 2.3)
specification, developed by the JSR-372 expert group under the Java
Community Process (see <http://www.jcp.org> for more information about
the JCP).

=== [#50638856_pgfId-32210]##

image:JSF-5.gif[image]

Changes between 2.2 and 2.3

[#50638856_pgfId-32211]##This section gives the reader a survey of the
changes between this version of the specification and the previous
version, using the categories from the issue tracker at <
http://jsf-spec.java.net/issues/ >.

==== [#50638856_pgfId-32212]##Big Ticket Features

[#50638856_pgfId-42993]##WebSocket Integration

[#50638856_pgfId-42994]##Issue ID 1396

[#50638856_pgfId-42998]##See the VDLDocs for _<f:websocket />_ _and_
link:JSF.htm#50638887_97665[See <f:websocket>].

[#50638856_pgfId-42988]##Multi-field Validation

[#50638856_pgfId-42989]##Issue ID 1

[#50638856_pgfId-42990]##See the VDLDocs for _<f:validateWholeBean />_ .

[#50638856_pgfId-42983]##Java Time Support

[#50638856_pgfId-42984]##Issue ID 1370

[#50638856_pgfId-42985]##See the VDLDocs for _<f:convertDateTime />_ .

[#50638856_pgfId-42975]##Use CDI for evaluation of JSF specific EL
implicit Objects

[#50638856_pgfId-42976]##Issue ID
1311,1322,1325,1327,1328,1334,1332,1331,1328,1384,1385,1383,1386 - 1394

{empty}[#50638856_pgfId-42980]##See link:JSF.htm#50638862_18430[See EL
Resolution]

[#50638856_pgfId-42971]##Issue ID 1417

[#50638856_pgfId-42972]##Deprecate javax.faces.bean.

[#50638856_pgfId-42959]##Support @Inject on JSF specific artifacts

[#50638856_pgfId-42960]##Issue ID
1316,527,1309,1323,1283,1353,1335,1333,1323,1349,1351,1350,1345

{empty}[#50638856_pgfId-42964]##See link:JSF.htm#50638862_61291[See JSF
Objects Valid for @Inject Injection]

[#50638856_pgfId-42954]##UIData and <ui:repeat> supports Map and
Iterable

[#50638856_pgfId-42955]##Issue ID 1102

[#50638856_pgfId-42956]##ui:repeat condition check.

[#50638856_pgfId-42950]##Issue ID 1418

[#50638856_pgfId-42951]##CDI Replacement for @ManagedProperty. See
javadocs for _javax.faces.annotation.ManagedProperty_ .

[#50638856_pgfId-42945]##Issue ID 1103, 1364

[#50638856_pgfId-42946]##See the Javadoc for
_javax.faces.component.UIData_ , and
_javax.faces.model.IterableDataModel_ .

[#50638856_pgfId-42939]## _DataModel_ implementations can be registered

[#50638856_pgfId-42940]##Issue ID 1078

[#50638856_pgfId-42941]##See the javadoc for annotation
_javax.faces.model.FacesDataModel_ .

[#50638856_pgfId-42935]##Issue ID 1412

[#50638856_pgfId-42936]##See the javadoc for annotation
_javax.faces.partialViewContext.getEvalScripts()_ .

[#50638856_pgfId-42930]##Issue ID 613

[#50638856_pgfId-42931]##Ajax Method Invocation. See vdldoc for
<h:commandScript>.

[#50638856_pgfId-42925]##Issue ID 1238

[#50638856_pgfId-42926]##Enhanced component search facility. See the
javadoc for package _javax.faces.component.search_ . __

==== [#50638856_pgfId-32237]##Other Features, by Functional Area

[#50638856_pgfId-36313]##Components/Renderers

====== [#50638856_pgfId-42919]##Larger Changes

[#50638856_pgfId-42920]##Issue ID 217

[#50638856_pgfId-42921]##styleClass attribute added to h:column

[#50638856_pgfId-42915]##Issue ID 329

[#50638856_pgfId-42916]##Add “group” attribute to <h:selectOneRadio>.

[#50638856_pgfId-42910]##Issue ID 1423,1404

[#50638856_pgfId-42911]##ResourceHandler.markResourceRendered(), and
isResourceRendered(), UIViewRoot.getComponentResources() enable the
discovery of dynamically added resources, even within Ajax requests.

[#50638856_pgfId-42905]##Issue ID 1404

[#50638856_pgfId-42906]##Add API to check if a resource has already been
rendered. See Javadoc for
_javax.faces.application.ResourceHandler.markResourceRendered()_ and
_isResourceRendered()_ .

[#50638856_pgfId-42897]##Issue ID 1436

[#50638856_pgfId-42901]##In link:JSF.htm#50638877_70838[See Render
Response], specify how Server Push is utilized.

====== [#50638856_pgfId-42891]##Smaller Changes

[#50638856_pgfId-42892]##Issue ID 1422

[#50638856_pgfId-42893]##UISelectMany detects converter based on first
item.

[#50638856_pgfId-42887]##Issue ID 1007

[#50638856_pgfId-42888]##Explicit support for dynamic component
manipulation

[#50638856_pgfId-42882]##Issue ID 819

[#50638856_pgfId-42883]##Add “disabled” attribute for h:button

[#50638856_pgfId-42877]##Issue ID 1300

[#50638856_pgfId-42878]## _UIViewRoot.getViewMap()_ and _publishEvent()_
.

[#50638856_pgfId-42872]##Issue ID 1229

[#50638856_pgfId-42873]##Document _UIData.setRowStatePreserved()_ in
VDLDoc and RenderKit Doc.

[#50638856_pgfId-42867]##Issue ID 1135

[#50638856_pgfId-42868]##Add _PostRenderViewEvent_ .

[#50638856_pgfId-42862]##Issue ID 1258

[#50638856_pgfId-42863]##Clarify text escaping for _<h:outputText>_ or
equivalent EL expressions.

[#50638856_pgfId-42857]##Issue ID 807

[#50638856_pgfId-42858]##Pass _FacesContext_ to system event listeners.

[#50638856_pgfId-42852]##Issue ID 1113

[#50638856_pgfId-42853]##Remove _onselect_ attribute from _SELECT_
components.

[#50638856_pgfId-42847]##Issue ID 1433

[#50638856_pgfId-42848]##Add a context-param to enable forcing
validation to happen even when there is no parameter corresponding to
the current component.

[#50638856_pgfId-32264]##Lifecycle

====== [#50638856_pgfId-42841]##Larger Changes

[#50638856_pgfId-42842]##Issue ID 790

[#50638856_pgfId-42843]##javax.faces.ViewState and ajax with cross form
submit.

====== [#50638856_pgfId-42836]##Smaller Changes

[#50638856_pgfId-42837]##Issue ID 473

[#50638856_pgfId-42838]##FacesEvent.getFacesContext().

[#50638856_pgfId-42832]##Issue ID 1241

[#50638856_pgfId-42833]## _faces-config_ supports
_client-window-factory_ .

[#50638856_pgfId-42827]##Issue ID 1346

[#50638856_pgfId-42828]##Simplify decoration of _FaceletCacheFactory_ .

[#50638856_pgfId-42822]##Issue ID 1361

[#50638856_pgfId-42823]##Correct oversight regarding re-entrancy of flow
scoped beans.

[#50638856_pgfId-42817]##Issue ID 821

[#50638856_pgfId-42818]##Implement _ExternalContext.getRealPath()_ on
startup and shutdown.

[#50638856_pgfId-42812]##Issue ID 1401

[#50638856_pgfId-42813]##Explicitly prohibit using _NavigationHandler_
from within _ExceptionHandler_ __ invoked during RENDER RESPONSE.

[#50638856_pgfId-42807]##Issue ID 1306

[#50638856_pgfId-42808]## _@FlowScoped_ should be
_@NormalScope(passivating=true)._

[#50638856_pgfId-42802]##Issue ID 1382

[#50638856_pgfId-42803]##Generify return from
_ExternalContext.getInitParameterMap()_ .

[#50638856_pgfId-42797]##Issue ID 1329

[#50638856_pgfId-42798]## _@NotNull_ and _<f:viewParam>_ .

[#50638856_pgfId-42792]##Issue ID 1403

[#50638856_pgfId-42793]##Allow entry into flow via _<f:viewAction>_ .

[#50638856_pgfId-42787]##Issue ID 1216

[#50638856_pgfId-42788]##Improve consistency in handling _PhaseListener_
instances registered on _UIViewRoot_ components.

[#50638856_pgfId-42782]##Issue ID 1435

[#50638856_pgfId-42783]##Add ResourceHandler.getViewResources() method.

[#50638856_pgfId-42776]##Platform Integration

[#50638856_pgfId-42777]##Issue ID 1379

[#50638856_pgfId-42778]##
_ExternalContext.getResponseCharacterEncoding()_ and Portlet 3.0.

[#50638856_pgfId-34248]##Facelets/VDL

====== [#50638856_pgfId-42771]##Larger Changes

[#50638856_pgfId-42772]##Issue ID 1424

[#50638856_pgfId-42773]##Add tag <f:importConstants>, see VDLDoc for
that tag.

====== [#50638856_pgfId-42766]##Smaller Changes

[#50638856_pgfId-42767]##Issue ID 1362

[#50638856_pgfId-42768]##Revisit some cardinality rules regarding
_<tag>_ and _<component>_ elements.

[#50638856_pgfId-42762]##Issue ID 936

[#50638856_pgfId-42763]##Set _FACELETS_REFRESH_PERIOD_ to -1 if
_ProjectStage_ is _Production_ .

[#50638856_pgfId-42756]##Spec Clarifications

[#50638856_pgfId-42757]##Issue ID 1254

[#50638856_pgfId-42758]##Loosen language regarding the contracts
attribute on <f:view>.

[#50638856_pgfId-42752]##Issue ID 1338

[#50638856_pgfId-42753]##Clarify pseudocode for resource libraries.

[#50638856_pgfId-42747]##Issue ID 1279

[#50638856_pgfId-42748]##Specify UIInput.isEmpty()

[#50638856_pgfId-42742]##Issue ID 1242

[#50638856_pgfId-42743]##Remove mentione of OpenAjax hub.

[#50638856_pgfId-42737]##Issue ID 1215

[#50638856_pgfId-42738]##Additional warning on
DelegatingMetaTagHandler.getTagHandlerDelegate.

[#50638856_pgfId-42732]##Issue ID 1131

[#50638856_pgfId-42733]##“name” attribute not required.

[#50638856_pgfId-42727]##Issue ID 1270

[#50638856_pgfId-42728]##TagDecorator spec namespace modifications.

[#50638856_pgfId-42722]##Issue ID 1401

[#50638856_pgfId-42723]##Advisory text for ExceptionHandler.

[#50638856_pgfId-42717]##Issue ID 1402

[#50638856_pgfId-42718]##Explicitly declare that flow eagerness not
supported.

[#50638856_pgfId-42712]##Issue ID 677

[#50638856_pgfId-42713]##Document automatic UIPanel behavior for
f:facet.

[#50638856_pgfId-42707]##Issue ID 1095

[#50638856_pgfId-42708]##Description for “rendered” attribute for repeat
and fragment.

[#50638856_pgfId-42702]##Issue ID 1066

[#50638856_pgfId-42703]##Application.getNavigationHandler() and
application element.

[#50638856_pgfId-42697]##Issue ID 803

[#50638856_pgfId-42698]##VisitHint.EXECUTE_LIFECYCLE clarifications.

[#50638856_pgfId-42692]##Issue ID 1217

[#50638856_pgfId-42693]##EnumConverter.getAsString() clarifications.

[#50638856_pgfId-42687]##Issue ID 1356

[#50638856_pgfId-42688]##UIInput.processValidators() clarifications.

[#50638856_pgfId-42682]##Issue ID 1424

[#50638856_pgfId-42683]##Public constants for source, behavior, and
partial.event. See the Javadocs for
_javax.faces.component.behavior.ClientBehaviorContext_ , and
_javax.faces.conetxt.PartialViewContext_ .

[#50638856_pgfId-42677]##Issue ID 1428

[#50638856_pgfId-42678]##API constants for jsf.js and javax.faces in
JavaScript.

[#50638856_pgfId-42666]##Issue ID 1260

[#50638856_pgfId-42669]##Support for exact mapping of FacesServlet. See
link:JSF.htm#50638861_35329[See ViewHandler Methods that Derive
Information From the Incoming Request] and
link:JSF.htm#50638861_46125[See ViewHandler Methods Relating to
Navigation].

[#50638856_pgfId-42658]##Issue ID 1250

[#50638856_pgfId-42662]##Fix entries in table
link:JSF.htm#50638862_13494[See JSF Artifacts Eligible for Injection].

[#50638856_pgfId-39251]##Resources

====== [#50638856_pgfId-37246]##Larger Changes

====== [#50638856_pgfId-32391]##Smaller Changes

[#50638856_pgfId-32405]##Expression Language.

[#50638856_pgfId-32417]##Configuration and Bootstrapping

[#50638856_pgfId-42643]##Miscellaneous

[#50638856_pgfId-42644]##Issue ID 1225

{empty}[#50638856_pgfId-42648]##Clarify requirements to support BCP-47
regarding localization. See link:JSF.htm#50638877_24244[See Determining
the active Locale]

[#50638856_pgfId-42639]##Issue ID 1429

[#50638856_pgfId-42640]##Add constructor to make wrapping easier.

[#50638856_pgfId-42631]##Issue ID 1430

[#50638856_pgfId-42632]##Leverage Java SE 8 repeatable annotations where
appropriate.

==== [#50638856_pgfId-33475]##Backward Compatibility with Previous Versions

[#50638856_pgfId-36611]##JSF 2.3 is fully backward compatible with
previous releases of JSF, unless any of the following context-parameter
values are specified. See Section 11.1.3 “Application Configuration
Parameters” for details.

[#50638856_pgfId-36612]##javax.faces.ALWAYS_PERFORM_VALIDATION_WHEN_REQUIRED_IS_TRUE

[#50638856_pgfId-36613]##javax.faces.DISABLE_FACESSERVLET_TO_XHTML

[#50638856_pgfId-33476]##javax.faces.VIEWROOT_PHASE_LISTENER_QUEUES_EXCEPTIONS.

[#50638856_pgfId-39894]##JSF 2.3 is fully backward compatible with
previous releases of JSF unless a CDI managed bean is included in the
application with the annotation _@javax.faces.annotation.FacesConfig_ .
See the javadocs for that annotation for details.

==== [#50638856_pgfId-33477]##Breakages in Backward Compatibility

=== [#50638856_pgfId-33478]##

image:JSF-5.gif[image]

Related Technologies

==== [#50638856_pgfId-14707]##[#50638856_30771]##Other Java™ Platform Specifications

[#50638856_pgfId-30707]##JSF is based on the following Java API
specifications:

[#50638856_pgfId-30708]##JavaServer Pages™ Specification, version 2.2
(JSP™), including Expression Language 2.2
<http://jcp.org/aboutJava/communityprocess/mrel/jsr245/>

[#50638856_pgfId-30721]##Expression Language 3.0
<http://jcp.org/en/jsr/detail?id=341> (optional)

[#50638856_pgfId-30704]##Java™ Servlet Specification, version 4.0
(Servlet) <http://jcp.org/en/jsr/detail?id=369>

[#50638856_pgfId-13940]##Java™ Platform, Enterprise Edition, version 8.0
<http://jcp.org/en/jsr/detail?id=366>

[#50638856_pgfId-35852]##Contexts and Dependency Injection for Java 2.0
<http://jcp.org/en/jsr/detail?id=365>

[#50638856_pgfId-11303]##Java™ Platform, Standard Edition, version 8.0
<http://jcp.org/en/jsr/detail?id=337>

[#50638856_pgfId-13946]##JavaBeans™ Specification, version 1.0.1
<http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html>

[#50638856_pgfId-13947]##JavaServer Pages™ Standard Tag Library, version
1.2 (JSTL) <http://jcp.org/en/jsr/detail?id=52>

[#50638856_pgfId-36630]##Java™ API for WebSocket, version 1.1
<https://www.jcp.org/en/jsr/detail?id=356>

[#50638856_pgfId-39704]##Java™ API for JSON-Processing, version 1.1
<https://www.jcp.org/en/jsr/detail?id=353>

[#50638856_pgfId-13948]##Therefore, a JSF container must support all of
the above specifications. This requirement allows faces applications to
be portable across a variety of JSF implementations.

[#50638856_pgfId-13949]##In addition, JSF is designed to work
synergistically with other web-related Java APIs, including:

[#50638856_pgfId-13950]##Portlet Specification, 1.0 JSR-168
<http://jcp.org/en/jsr/detail?id=168>

[#50638856_pgfId-14532]##Portlet Specification, 2.0 JSR-286
<http://jcp.org/en/jsr/detail?id=286>

[#50638856_pgfId-34847]##Portlet Specification, 3.0 JSR-286
<http://jcp.org/en/jsr/detail?id=362>

[#50638856_pgfId-14537]##JSF Portlet Bridge Specification, JSR-301
<http://jcp.org/en/jsr/detail?id=301>

==== [#50638856_pgfId-13951]##Related Documents and Specifications

[#50638856_pgfId-13952]##The following documents and specifications of
the World Wide Web Consortium will be of interest to JSF implementors,
as well as developers of applications and components based on JavaServer
Faces.

[#50638856_pgfId-13953]##Hypertext Markup Language (HTML), version 4.01
<http://www.w3.org/TR/html4/>

[#50638856_pgfId-13954]##Extensible HyperText Markup Language (XHTML),
version 1.0 <http://www.w3.org/TR/xhtml1>

[#50638856_pgfId-13955]##Extensible Markup Language (XML), version 1.0
(Second Edition) <http://www.w3.org/TR/REC-xml>

[#50638856_pgfId-16698]##The class and method Javadoc documentation for
the classes and interfaces in _javax.faces_ (and its subpackages) are
incorporated by reference as requirements of this Specification.

[#50638856_pgfId-16699]##The JSP and Facelet tag library for the
HTML_BASIC standard RenderKit is specified in the VDLDocs and
incorporated by reference in this Specification.

==== [#50638856_pgfId-13961]##Terminology

[#50638856_pgfId-13962]##The key words MUST, MUST NOT, REQUIRED, SHALL,
SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this
document are to be interpreted as described in

[#50638856_pgfId-13963]##Key words for use in RFCs to Indicate
Requirement Levels (RFC 2119)
<http://www.rfc-editor.org/rfc/rfc2119.txt>

==== [#50638856_pgfId-13964]##Providing Feedback

[#50638856_pgfId-13965]##We welcome any and all feedback about this
specification. Please email your comments to
<users@javaserverfaces-spec-public.java.net>.

[#50638856_pgfId-13966]##Please note that, due to the volume of feedback
that we receive, you will not normally receive a reply from an engineer.
However, each and every comment is read, evaluated, and archived by the
specification team.

==== [#50638856_pgfId-13967]##Acknowledgements

[#50638856_pgfId-40478]##The JavaServer Faces Specification (version
2.3) is the result of the diligent efforts of the JSR-372 Expert Group,
working under the auspices of the Java Community Process. The Expert
Group is

[#50638856_pgfId-40488]##Frank Caputo

[#50638856_pgfId-40489]##Cagatay Civici

[#50638856_pgfId-40490]##Ken Fyten

[#50638856_pgfId-40491]##Neil Griffin

[#50638856_pgfId-40492]##Josh Juneau

[#50638856_pgfId-40493]##Brian Leatham

[#50638856_pgfId-40494]##Kito Mann

[#50638856_pgfId-40495]##Michael Müller

[#50638856_pgfId-40496]##Paul Nicolucci

[#50638856_pgfId-40497]##Bauke Scholtz

[#50638856_pgfId-40498]##Arjan Tijms

[#50638856_pgfId-40473]##Leonardo Uribe

[#50638856_pgfId-40762]##The editors would like to recognize the
following individuals who have contributed to the success of JavaServer
Faces over the years.

[width="100%",cols="50%,50%",]
|===
|[#50638856_pgfId-40768]##Dan Allen |[#50638856_pgfId-40770]##Thomas
Andraschko

|[#50638856_pgfId-40772]##Thomas Asel |[#50638856_pgfId-40774]##Jennifer
Ball

|[#50638856_pgfId-40776]##Lincoln Baxter III
|[#50638856_pgfId-40778]##Hans Bergsten

|[#50638856_pgfId-40780]##Shawn Bayern |[#50638856_pgfId-40782]##Joseph
Berkovitz

|[#50638856_pgfId-40784]##Dennis Byrne |[#50638856_pgfId-40786]##Pete
Carapetyan

|[#50638856_pgfId-40788]##Ryan DeLaplante
|[#50638856_pgfId-40790]##Keith Donald

|[#50638856_pgfId-40792]##Jim Driscoll
|[#50638856_pgfId-40794]##Hanspeter Duennenberger

|[#50638856_pgfId-40796]##Ken Finnigan |[#50638856_pgfId-40798]##Amy
Fowler

|[#50638856_pgfId-40800]##Mike Freedman |[#50638856_pgfId-40802]##David
Geary

|[#50638856_pgfId-40804]##Manfred Geiler |[#50638856_pgfId-40806]##Ted
Goddard

|[#50638856_pgfId-40808]##Juan Gonzalez |[#50638856_pgfId-40810]##Jeremy
Grelle

|[#50638856_pgfId-40812]##Rick Hightower |[#50638856_pgfId-40814]##Jacob
Hookom

|[#50638856_pgfId-40816]##Justyna Horwat
|[#50638856_pgfId-40818]##Alexander Jesse

|[#50638856_pgfId-40820]##Max Katz |[#50638856_pgfId-40822]##Roger Keays

|[#50638856_pgfId-40824]##Gavin King |[#50638856_pgfId-40826]##Roger
Kitain

|[#50638856_pgfId-40828]##Eric Lazarus |[#50638856_pgfId-40830]##Jason
Lee

|[#50638856_pgfId-40832]##Felipe Leme |[#50638856_pgfId-40834]##Cody
Lerum

|[#50638856_pgfId-42042]##Alberto Lemos |[#50638856_pgfId-42044]##Ryan
Lubke

|[#50638856_pgfId-42092]##Barbara Louis |[#50638856_pgfId-40838]##Martin
Marinschek

|[#50638856_pgfId-40840]##Kumar Mettu |[#50638856_pgfId-40842]##Craig
McClanahan

|[#50638856_pgfId-42152]##Pete Muir |[#50638856_pgfId-40846]##Bernd
Müller

|[#50638856_pgfId-40848]##Michael Müller |[#50638856_pgfId-40850]##Hans
Muller

|[#50638856_pgfId-40852]##Brendan Murray
|[#50638856_pgfId-40854]##Michael Nash

|[#50638856_pgfId-40856]##Imre Osswald |[#50638856_pgfId-40858]##Joe
Ottinger

|[#50638856_pgfId-40860]##Ken Paulsen |[#50638856_pgfId-40862]##Dhiru
Pandey

|[#50638856_pgfId-40864]##Raj Premkumar |[#50638856_pgfId-40866]##Werner
Punz

|[#50638856_pgfId-40868]##Matt Raible |[#50638856_pgfId-40870]##Hazem
Saleh

|[#50638856_pgfId-40872]##Andy Schwartz |[#50638856_pgfId-40874]##Yara
Senger

|[#50638856_pgfId-40876]##Stan Silvert |[#50638856_pgfId-40878]##Vernon
Singleton

|[#50638856_pgfId-40880]##Bernhard Slominski
|[#50638856_pgfId-40882]##Alexander Smirnov

|[#50638856_pgfId-40884]##Thomas Spiegel |[#50638856_pgfId-40886]##Kyle
Stiemann

|[#50638856_pgfId-40888]##James Strachan
|[#50638856_pgfId-40890]##Jayashri Visvanathan

|[#50638856_pgfId-40892]##Ana von Klopp
|[#50638856_pgfId-40894]##Matthias Wessendorf

|[#50638856_pgfId-40896]##Adam Winer |[#50638856_pgfId-40898]##Mike
Youngstrom

|[#50638856_pgfId-40900]##John Zukowski |[#50638856_pgfId-40902]## 
|===

[#50638858_pgfId-1001155]## 

== [#50638858_pgfId-1001156]##

image:JSF-6.gif[image]

Overview

image:JSF-7.gif[image]

[#50638858_pgfId-1000645]##JavaServer Faces (JSF) is a _user interface_
(UI) framework for Java web applications. It is designed to
significantly ease the burden of writing and maintaining applications
that run on a Java application server and render their UIs back to a
target client. JSF provides ease-of-use in the following ways:

[#50638858_pgfId-1000646]##Makes it easy to construct a UI from a set of
reusable UI components

[#50638858_pgfId-1000647]##Simplifies migration of application data to
and from the UI

[#50638858_pgfId-1000648]##Helps manage UI state across server requests

[#50638858_pgfId-1000649]##Provides a simple model for wiring
client-generated events to server-side application code

[#50638858_pgfId-1000650]##Allows custom UI components to be easily
built and re-used

[#50638858_pgfId-1000651]##Most importantly, JSF establishes standards
which are designed to be leveraged by tools to provide a developer
experience which is accessible to a wide variety of developer types,
ranging from corporate developers to systems programmers. A “corporate
developer” is characterized as an individual who is proficient in
writing procedural code and business logic, but is not necessarily
skilled in object-oriented programming. A “systems programmer”
understands object-oriented fundamentals, including abstraction and
designing for re-use. A corporate developer typically relies on tools
for development, while a system programmer may define his or her tool as
a text editor for writing code.

[#50638858_pgfId-1000652]##Therefore, JSF is designed to be tooled, but
also exposes the framework and programming model as APIs so that it can
be used outside of tools, as is sometimes required by systems
programmers.

=== [#50638858_pgfId-1000653]##

image:JSF-8.gif[image]

Solving Practical Problems of the Web

[#50638858_pgfId-1000654]##JSF’s core architecture is designed to be
independent of specific protocols and markup. However it is also aimed
directly at solving many of the common problems encountered when writing
applications for HTML clients that communicate via HTTP to a Java
application server that supports servlets and JavaServer Pages (JSP)
based applications. These applications are typically form-based, and are
comprised of one or more HTML pages with which the user interacts to
complete a task or set of tasks. JSF tackles the following challenges
associated with these applications:

[#50638858_pgfId-1000655]##Managing UI component state across requests

[#50638858_pgfId-1000656]##Supporting encapsulation of the differences
in markup across different browsers and clients

[#50638858_pgfId-1000657]##Supporting form processing (multi-page, more
than one per page, and so on)

[#50638858_pgfId-1000658]##Providing a strongly typed event model that
allows the application to write server-side handlers (independent of
HTTP) for client generated events

[#50638858_pgfId-1000659]##Validating request data and providing
appropriate error reporting

[#50638858_pgfId-1000660]##Enabling type conversion when migrating
markup values (Strings) to and from application data objects (which are
often not Strings)

[#50638858_pgfId-1000661]##Handling error and exceptions, and reporting
errors in human-readable form back to the application user

[#50638858_pgfId-1000662]##Handling page-to-page navigation in response
to UI events and model interactions.

=== [#50638858_pgfId-1000663]##

image:JSF-8.gif[image]

Specification Audience

[#50638858_pgfId-1000667]##The _JavaServer Faces Specification_ , and
the technology that it defines, is addressed to several audiences that
will use this information in different ways. The following sections
describe these audiences, the roles that they play with respect to JSF,
and how they will use the information contained in this document. As is
the case with many technologies, the same person may play more than one
of these roles in a particular development scenario; however, it is
still useful to understand the individual viewpoints separately.

==== [#50638858_pgfId-1000668]##Page Authors

[#50638858_pgfId-1000669]##A _page author_ is primarily responsible for
creating the user interface of a web application. He or she must be
familiar with the markup and scripting languages (such as HTML and
JavaScript) that are understood by the target client devices, as well as
the rendering technology (such as JavaServer Pages) used to create
dynamic content. Page authors are often focused on graphical design and
human factors engineering, and are generally not familiar with
programming languages such as Java or Visual Basic (although many page
authors will have a basic understanding of client side scripting
languages such as JavaScript).

[#50638858_pgfId-1000670]##Page authors will generally assemble the
content of the pages being created from libraries of prebuilt user
interface components that are provided by component writers, tool
providers, and JSF implementors. The components themselves will be
represented as configurable objects that utilize the dynamic markup
capabilities of the underlying rendering technology. When JavaServer
Pages are in use, for example, components will be represented as JSP
custom actions, which will support configuring the attributes of those
components as custom action attributes in the JSP page. In addition, the
pages produced by a page author will be used by the JSF framework to
create component tree hierarchies, called “views”, that represent the
components on those pages.

[#50638858_pgfId-1000671]##Page authors will generally utilize
development tools, such as HTML editors, that allow them to deal
directly with the visual representation of the page being created.
However, it is still feasible for a page author that is familiar with
the underlying rendering technology to construct pages “by hand” using a
text editor.

==== [#50638858_pgfId-1000672]##Component Writers

[#50638858_pgfId-1000673]## _Component writers_ are responsible for
creating libraries of reusable user interface objects. Such components
support the following functionality:

[#50638858_pgfId-1000674]##Convert the internal representation of the
component’s properties and attributes into the appropriate markup
language for pages being rendered (encoding).

[#50638858_pgfId-1000675]##Convert the properties of an incoming
request—parameters, headers, and cookies—into the corresponding
properties and attributes of the component (decoding)

[#50638858_pgfId-1000676]##Utilize request-time events to initiate
visual changes in one or more components, followed by redisplay of the
current page.

[#50638858_pgfId-1000677]##Support validation checks on the syntax and
semantics of the representation of this component on an incoming
request, as well as conversion into the internal form that is
appropriate for this component.

[#50638858_pgfId-1000678]##Saving and restoring component state across
requests

[#50638858_pgfId-1000682]##As will be discussed in
link:JSF.htm#50638855_56441[See Rendering Model],” the encoding and
decoding functionality may optionally be delegated to one or more
_Render Kits_ , which are responsible for customizing these operations
to the precise requirements of the client that is initiating a
particular request (for example, adapting to the differences between
JavaScript handling in different browsers, or variations in the WML
markup supported by different wireless clients).

[#50638858_pgfId-1000683]##The component writer role is sometimes
separate from other JSF roles, but is often combined. For example,
reusable components, component libraries, and render kits might be
created by:

[#50638858_pgfId-1000684]##A page author creating a custom “widget” for
use on a particular page

[#50638858_pgfId-1000685]##An application developer providing components
that correspond to specific data objects in the application’s business
domain

[#50638858_pgfId-1000686]##A specialized team within a larger
development group responsible for creating standardized components for
reuse across applications

[#50638858_pgfId-1000687]##Third party library and framework providers
creating component libraries that are portable across JSF
implementations

[#50638858_pgfId-1000688]##Tool providers whose tools can leverage the
specific capabilities of those libraries in development of JSF-based
applications

[#50638858_pgfId-1000689]##JSF implementors who provide
implementation-specific component libraries as part of their JSF product
suite

[#50638858_pgfId-1000690]##Within JSF, user interface components are
represented as Java classes that follow the design patterns outlined in
the JavaBeans Specification. Therefore, new and existing tools that
facilitate JavaBean development can be leveraged to create new JSF
components. In addition, the fundamental component APIs are simple
enough for developers with basic Java programming skills to program by
hand.

==== [#50638858_pgfId-1000691]##Application Developers

[#50638858_pgfId-1000692]## _Application Developers_ are responsible for
providing the server-side functionality of a web application that is not
directly related to the user interface. This encompasses the following
general areas of responsibility:

[#50638858_pgfId-1000693]##Define mechanisms for persistent storage of
the information required by JSF-based web applications (such as creating
schemas in a relational database management system)

[#50638858_pgfId-1000694]##Create a Java object representation of the
persistent information, such as Entity Enterprise JavaBeans (Entity
EJBs), and call the corresponding beans as necessary to perform
persistence of the application’s data.

[#50638858_pgfId-1000695]##Encapsulate the application’s functionality,
or business logic, in Java objects that are reusable in web and non-web
applications, such as Session EJBs.

[#50638858_pgfId-1000696]##Expose the data representation and functional
logic objects for use via JSF, as would be done for any servlet- or
JSP-based application.

[#50638858_pgfId-1000697]##Only the latter responsibility is directly
related to JavaServer Faces APIs. In particular, the following steps are
required to fulfill this responsibility:

[#50638858_pgfId-1000698]##Expose the underlying data required by the
user interface layer as objects that are accessible from the web tier
(such as via request or session attributes in the Servlet API), via
_value reference expressions_ , as described in
link:JSF.htm#50638853_30712[See Standard User Interface Components].”

[#50638858_pgfId-1000702]##Provide application-level event handlers for
the events that are enqueued by JSF components during the request
processing lifecycle, as described in link:JSF.htm#50638877_61764[See
Invoke Application].

[#50638858_pgfId-1000706]##Application modules interact with JSF through
standard APIs, and can therefore be created using new and existing tools
that facilitate general Java development. In addition, application
modules can be written (either by hand, or by being generated) in
conformance to an application framework created by a tool provider.

==== [#50638858_pgfId-1000707]##Tool Providers

[#50638858_pgfId-1000708]## _Tool providers_ , as their name implies,
are responsible for creating tools that assist in the development of
JSF-based applications, rather than creating such applications directly.
JSF APIs support the creation of a rich variety of development tools,
which can create applications that are portable across multiple JSF
implementations. Examples of possible tools include:

[#50638858_pgfId-1000709]##GUI-oriented page development tools that
assist page authors in creating the user interface for a web application

[#50638858_pgfId-1000710]##IDEs that facilitate the creation of
components (either for a particular page, or for a reusable component
library)

[#50638858_pgfId-1000711]##Page generators that work from a high level
description of the desired user interface to create the corresponding
page and component objects

[#50638858_pgfId-1000712]##IDEs that support the development of general
web applications, adapted to provide specialized support (such as
configuration management) for JSF

[#50638858_pgfId-1000713]##Web application frameworks (such as MVC-based
and workflow management systems) that facilitate the use of JSF
components for user interface design, in conjunction with higher level
navigation management and other services

[#50638858_pgfId-1000714]##Application generators that convert high
level descriptions of an entire application into the set of pages, UI
components, and application modules needed to provide the required
application functionality

[#50638858_pgfId-1000715]##Tool providers will generally leverage the
JSF APIs for introspection of the features of component libraries and
render kit frameworks, as well as the application portability implied by
the use of standard APIs in the code generated for an application.

==== [#50638858_pgfId-1000716]##JSF Implementors

[#50638858_pgfId-1000717]##Finally, _JSF implementors_ will provide
runtime environments that implement all of the requirements described in
this specification. Typically, a JSF implementor will be the provider of
a Java 2 Platform, Enterprise Edition (J2EE) application server,
although it is also possible to provide a JSF implementation that is
portable across J2EE servers.

[#50638858_pgfId-1000718]##Advanced features of the JSF APIs allow JSF
implementors, as well as application developers, to customize and extend
the basic functionality of JSF in a portable way. These features provide
a rich environment for server vendors to compete on features and quality
of service aspects of their implementations, while maximizing the
portability of JSF-based applications across different JSF
implementations.

=== [#50638858_pgfId-1000719]##

image:JSF-8.gif[image]

Introduction to JSF APIs

[#50638858_pgfId-1000720]##This section briefly describes major
functional subdivisions of the APIs defined by JavaServer Faces. Each
subdivision is described in its own chapter, later in this
specification.

==== [#50638858_pgfId-1000721]##package _javax.faces_

[#50638858_pgfId-1000722]##This package contains top level classes for
the JavaServer(tm) Faces API. The most important class in the package is
_FactoryFinder_ , which is the mechanism by which users can override
many of the key pieces of the implementation with their own.

[#50638858_pgfId-1000726]##Please see
link:JSF.htm#50638850_10.2.4.1%20FactoryFinder[See FactoryFinder].

==== [#50638858_pgfId-1000727]##package _javax.faces.application_

[#50638858_pgfId-1000728]##This package contains APIs that are used to
link an application’s business logic objects to JavaServer Faces, as
well as convenient pluggable mechanisms to manage the execution of an
application that is based on JavaServer Faces. The main class in this
package is _Application_ .

[#50638858_pgfId-1000732]##Please see link:JSF.htm#50638861_99347[See
Application].

==== [#50638858_pgfId-1000733]##package _javax.faces.component_

[#50638858_pgfId-1000734]##This package contains fundamental APIs for
user interface components.

[#50638858_pgfId-1000738]##Please see link:JSF.htm#50638851_62197[See
User Interface Component Model].

==== [#50638858_pgfId-1000739]##package _javax.faces.component.html_

[#50638858_pgfId-1000740]##This package contains concrete base classes
for each valid combination of component + renderer.

==== [#50638858_pgfId-1000741]##package _javax.faces.context_

[#50638858_pgfId-1000742]##This package contains classes and interfaces
defining per-request state information. The main class in this package
is _FacesContext_ , which is the access point for all per-request
information, as well as the gateway to several other helper classes.

[#50638858_pgfId-1000746]##Please see link:JSF.htm#50638857_28153[See
FacesContext].

==== [#50638858_pgfId-1000747]##package _javax.faces.convert_

[#50638858_pgfId-1000748]##This package contains classes and interfaces
defining converters. The main class in this package is _Converter_ .

[#50638858_pgfId-1000752]##Please see link:JSF.htm#50638851_91636[See
Conversion Model].

==== [#50638858_pgfId-1000753]##package _javax.faces.el_

[#50638858_pgfId-1000754]##As of version 1.2 of this specification, all
classes and interfaces in this package have been deprecated in favor of
the Unified Expression Language (EL) from JSP 2.1.

[#50638858_pgfId-1000758]##Please see link:JSF.htm#50638862_89005[See
Expression Language and Managed Bean Facility].

==== [#50638858_pgfId-1001196]##package _javax.faces.flow_ and _javax.faces.flow.builder_

[#50638858_pgfId-1001228]##The runtime API for Faces Flows.

[#50638858_pgfId-1001276]##Please see _link:JSF.htm#50638861_52748[See
FlowHandler]._

==== [#50638858_pgfId-1000759]##package _javax.faces.lifecycle_

[#50638858_pgfId-1000760]##This package contains classes and interfaces
defining lifecycle management for the JavaServer Faces implementation.
The main class in this package is _Lifecycle_ . _Lifecycle_ is the
gateway to executing the request processing lifecycle.

[#50638858_pgfId-1000764]##Please see link:JSF.htm#50638877_40710[See
Request Processing Lifecycle].

==== [#50638858_pgfId-1000765]##package _javax.faces.event_

[#50638858_pgfId-1000766]##This package contains interfaces describing
events and event listeners, and concrete event implementation classes.
All component-level events extend from _FacesEvent_ and all
component-level listeners extend from _FacesListener_ .

[#50638858_pgfId-1000770]##Please see link:JSF.htm#50638851_80722[See
Event and Listener Model].

==== [#50638858_pgfId-1000771]##package _javax.faces.render_

[#50638858_pgfId-1000772]##This package contains classes and interfaces
defining the rendering model. The main class in this package is
_RenderKit_ . _RenderKit_ maintains references to a collection of
_Renderer_ instances which provide rendering capability for a specific
client device type.

[#50638858_pgfId-1000776]##Please see link:JSF.htm#50638855_56441[See
Rendering Model].

==== [#50638858_pgfId-1000777]##package _javax.faces.validator_

[#50638858_pgfId-1000778]##Interface defining the validator model, and
concrete validator implementation classes.

{empty}[#50638858_pgfId-1000782]##Please see
link:JSF.htm#50638851_97068[See Validation Model]

==== [#50638858_pgfId-1000783]##package _javax.faces.webapp_

[#50638858_pgfId-1000784]##Classes required for integration of
JavaServer Faces into web applications, including a standard servlet,
base classes for JSP custom component tags, and concrete tag
implementations for core tags.

[#50638858_pgfId-1000788]##Please see link:JSF.htm#50638850_25623[See
Using JSF in Web Applications].

[#50638858_pgfId-998874]## 

[#50638877_pgfId-1013465]##[#50638877_11403]## 

== [#50638877_pgfId-1013467]##

image:JSF-9.gif[image]

[#50638877_40710]##Request Processing Lifecycle

image:JSF-10.gif[image]

[#50638877_pgfId-1013440]##Web user interfaces generally follow a
pattern where the user-agent sends one or more requests to the server
with the end goal of displaying a user-interface. In the case of Web
browsers, an initial HTTP GET or POST request is made to the server,
which responds with a document which the browser interprets and
automatically makes subsequent requests on the user’s behalf. The
responses to each of these subsequent requests are usually images,
JavaScript files, CSS Style Sheets, and other artifacts that fit “into”
the original document. If the JSF lifecycle is involved in rendering the
initial response, the entire process of initial request, the response to
that request, and any subsequent requests made automatically by the
user-agent, and their responses, is called a _Faces View
Request/Response_ for discussion. The following graphic illustrates a
Faces View Request/Response.

image:JSF-11.gif[image]

[#50638877_pgfId-1008456]##Each Faces View Request/Response goes through
a well-defined _request processing lifecycle_ made up of _phases_ .
There are three different scenarios that must be considered, each with
its own combination of phases and activities:

[#50638877_pgfId-1006962]##Non-Faces Request generates Faces Response

[#50638877_pgfId-1006963]##Faces Request generates Faces Response

[#50638877_pgfId-1006964]##Faces Request generates Non-Faces Response

[#50638877_pgfId-1006965]##Where the terms being used are defined as
follows:

[#50638877_pgfId-1006966]## _Faces Response_ —A response that was
created by the execution of the _Render Response_ phase of the request
processing lifecycle.

[#50638877_pgfId-1006967]## _Non-Faces Response_ —A response that was
not created by the execution of the _render response_ phase of the
request processing lifecycle. Examples would be a servlet-generated or
JSP-rendered response that does not incorporate JSF components, a
response that sets an HTTP status code other than the usual 200 (such as
a redirect), or a response whose HTTP body consists entirely of the
bytes of an in page resource, such as a JavaScript file, a CSS file, an
image, or an applet. This last scenario is considered a special case of
a Non-Faces Response and will be referred to as a _Faces Resource
Response_ for the remainder of this specification.

[#50638877_pgfId-1006968]## _Faces Request_ —A request that was sent
from a previously generated _Faces response_ . Examples would be a
hyperlink or form submit from a rendered user interface component, where
the request URI was crafted (by the component or renderer that created
it) to identify the view to use for processing the request. Another
example is a request for a resource that the user-agent was instructed
to fetch an artifact such as an image, a JavaScript file, a CSS
stylesheet, or an applet. This last scenario is considered a special
case of a Faces Request and will be referred to as a _Faces Resource
Request_ for the remainder of this specification.

[#50638877_pgfId-1006969]## _Non-Faces Request_ —A request that was sent
to an application component (e.g. a servlet or JSP page), rather than
directed to a Faces view.

[#50638877_pgfId-1006970]##In addition, of course, your web application
may receive non-Faces requests that generate non-Faces responses.
Because such requests do not involve JavaServer Faces at all, their
processing is outside the scope of this specification, and will not be
considered further.

[#50638877_pgfId-1006971]##READER NOTE: The dynamic behavior
descriptions in this Chapter make forward references to the sections
that describe the individual classes and interfaces. You will probably
find it useful to follow the reference and skim the definition of each
new class or interface as you encounter them, then come back and finish
the behavior description. Later, you can study the characteristics of
each JSF API in the subsequent chapters.

=== [#50638877_pgfId-1006973]##

image:JSF-12.gif[image]

[#50638877_68933]##Request Processing Lifecycle Scenarios

[#50638877_pgfId-1006974]##Each of the scenarios described above has a
lifecycle that is composed of a particular set of phases, executed in a
particular order. The scenarios are described individually in the
following subsections.

==== [#50638877_pgfId-1006975]##Non-Faces Request Generates Faces Response

[#50638877_pgfId-1006976]##An application that is processing a non-Faces
request may use JSF to render a Faces response to that request. In order
to accomplish this, the application must perform the common activities
that are described in the following sections:

[#50638877_pgfId-1006979]##Acquire Faces object references, as described
in link:JSF.htm#50638877_37297[See Acquire Faces Object References],
below.

[#50638877_pgfId-1006984]##Create a new view, as described in
link:JSF.htm#50638877_39825[See Create And Configure A New View], below.

[#50638877_pgfId-1006985]##Store the view into the _FacesContext_ by
calling the _setViewRoot()_ method on the _FacesContext._

==== [#50638877_pgfId-1006987]##[#50638877_19735]##Faces Request Generates Faces Response

[#50638877_pgfId-1006988]##The most common lifecycle will be the case
where a previous Faces response includes user interface controls that
will submit a subsequent request to this web application, utilizing a
request URI that is mapped to the JSF implementation’s controller, as
described in link:JSF.htm#50638850_63553[See Servlet Mapping]. Because
such a request will be initially handled by the JSF implementation, the
application need not take any special steps—its event listeners,
validators, and application actions will be invoked at appropriate times
as the standard request processing lifecycle, described in the following
diagrams, is invoked.

image:JSF-13.gif[image]

[#50638877_pgfId-1008572]##The “Handle Resource Request” box, and its
subsequent boxes, are explained in link:JSF.htm#50638877_44233[See
Resource Handling]. The following diagram explains the “Execute and
Render Lifecycle” box.

image:JSF-14.gif[image]

[#50638877_pgfId-1006995]##The behavior of the individual phases of the
request processing lifecycle are described in individual subsections of
link:JSF.htm#50638877_42543[See Standard Request Processing Lifecycle
Phases]. Note that, at the conclusion of several phases of the request
processing lifecycle, common event processing logic (as described in
link:JSF.htm#50638877_24408[See Common Event Processing]) is performed
to broadcast any _FacesEvents_ generated by components in the component
tree to interested event listeners.

==== [#50638877_pgfId-1007002]##Faces Request Generates Non-Faces Response

[#50638877_pgfId-1007003]##Normally, a JSF-based application will
utilize the _Render Response_ phase of the request processing lifecycle
to actually create the response that is sent back to the client. In some
circumstances, however, this behavior might not be desirable. For
example:

[#50638877_pgfId-1007004]##A Faces Request needs to be redirected to a
different web application resource (via a call to
_HttpServletResponse.sendRedirect_ ).

[#50638877_pgfId-1007005]##A Faces Request causes the generation of a
response using some other technology (such as a servlet, or a JSP page
not containing JSF components).

[#50638877_pgfId-1008449]##A Faces Request causes the generation of a
response simply by serving up the bytes of a resource, such as an image,
a JavaScript file, a CSS file, or an applet

[#50638877_pgfId-1007006]##In any of these scenarios, the application
will have used the standard mechanisms of the servlet or portlet API to
create the response headers and content. It is then necessary to tell
the JSF implementation that the response has already been created, so
that the _Render Response_ phase of the request processing lifecycle
should be skipped. This is accomplished by calling the
_responseComplete()_ method on the _FacesContext_ instance for the
current request, prior to returning from event handlers or application
actions.

=== [#50638877_pgfId-1007008]##

image:JSF-12.gif[image]

[#50638877_42543]##Standard Request Processing Lifecycle Phases

[#50638877_pgfId-1007009]##The standard phases of the request processing
lifecycle are described in the following subsections.

{empty}[#50638877_pgfId-1010732]##[P1-start-currentPhaseId]The default
request lifecycle processing implementation must ensure that the
_currentPhaseId_ property of the _FacesContext_ instance for this
request is set with the proper _PhaseId_ constant for the current phase
as early as possible at the beginning of each phase.[P1-end]

==== [#50638877_pgfId-1007011]##[#50638877_45193]##Restore View

[#50638877_pgfId-1007016]##[P1-start-restoreView]The JSF implementation
must perform the following tasks during the _Restore View_ phase of the
request processing lifecycle:

[#50638877_pgfId-1003367]##Call _initView()_ on the _ViewHandler_ . This
will set the character encoding properly for this request.

[#50638877_pgfId-1004598]##Examine the _FacesContext_ instance for the
current request. If it already contains a _UIViewRoot_ :

[#50638877_pgfId-1003371]## Set the _locale_ on this _UIViewRoot_ to the
value returned by the _getRequestLocale()_ method on the
_ExternalContext_ for this request.

[#50638877_pgfId-1008396]##Take no further action during this phase, and
return. The presence of a UIViewRoot already installed in the
FacesContext before the Restore View Phase implementation indicates that
the phase should assume the view has already been restored by other
means.

[#50638877_pgfId-1012790]##Derive the _viewId_ according to the
following algorithm, or one semantically equivalent to it.

[#50638877_pgfId-1013218]## Look in the request map for a value under
the key _javax.servlet.include.path_info_ . If found, let it be the
_viewId_ .

[#50638877_pgfId-1013222]##Call _getRequestPathInfo()_ on the current
_ExternalContext_ . If this value is non-null, let this be the _viewId_
.

[#50638877_pgfId-1013223]##Look in the request map for a value under the
key _javax.servlet.include.servlet_path_ . If found, let it be the
_viewId_ .

[#50638877_pgfId-1013224]##If none of these steps yields a non- _null_
viewId, throw a _FacesException_ with an appropriate localized message.

[#50638877_pgfId-1013217]##Determine if this request is a postback or
initial request by executing the following algorithm. Find the
render-kit-id for the current request by calling
_calculateRenderKitId()_ on the _Application_ ’s _ViewHandler_ . Get
that _RenderKit_ ’s _ResponseStateManager_ and call its _isPostback()_
method, passing the current _FacesContext_ . If the current request is
an attempt by the servlet container to display a servlet error page, do
not interpret the request as a postback, even if it is indeed a
postback.

[#50638877_pgfId-1007046]##If the request is a postback, call
_setProcessingEvents(false)_ on the current _FacesContext_ . Then call
_ViewHandler.restoreView()_ , passing the _FacesContext_ instance for
the current request and the view identifier, and returning a
_UIViewRoot_ for the restored view. If the return from
_ViewHandler.restoreView()_ is null, throw a _ViewExpiredException_ with
an appropriate error message.
_javax.faces.application.ViewExpiredException_ is a _FacesException_
that must be thrown to signal to the application that the expected view
was not returned for the view identifier. An application may choose to
perform some action based on this exception.

[#50638877_pgfId-1012820]##Store the restored _UIViewRoot_ in the
_FacesContext_ .

[#50638877_pgfId-1013228]##Call _setProcessingEvents(true)_ on the
current _FacesContext_ . __

[#50638877_pgfId-1012821]##If the request is not a postback, try to
obtain the _ViewDeclarationLanguage_ from the _ViewHandler_ , for the
current _viewId_ by calling _ViewHandler.deriveLogicalViewId()_ and
passing the result to _ViewHandler.getViewDeclarationLanguage()_ . If no
such instance can be obtained, call _facesContext.renderResponse()_ .
Otherwise, call _getViewMetadata()_ on the _ViewDeclarationLanguage_
instance. If the result is non- _null_ , call _createMetadataView()_ on
the _ViewMetadata_ instance. Call _ViewMetadata.hasMetadata()_ , passing
the newly created _viewRoot_ . If this method returns false, call
_facesContext.renderResponse()_ . If it turns out that the previous call
to _createViewMetadata()_ did not create a _UIViewRoot_ instance, call
_createView()_ on the _ViewHandler_ .

====== [#50638877_pgfId-1013619]##View Protection

[#50638877_pgfId-1022669]##Call
ViewHandler.getProtectedViewsUnmodifiable() to determine if the view for
this viewId is protected. If not, assume the requested view is not
protected and take no additional view protection steps. Obtain the value
of the value of the request parameter whose name is given by the value
of ResponseStateManager.NON_POSTBACK_VIEW_TOKEN_PARAM. If there is no
value, throw ProtectedViewException. If the value is present, compare it
to the return from
ResponseStateManager.getCryptographicallyStrongTokenFromSession(). If
the values do not match, throw ProtectedViewException. If the values do
match, look for a Referer [sic] request header. If the header is
present, use the protected view API to determine if any of the declared
protected views match the value of the Referer header. If so, conclude
that the previously visited page is also a protected view and it is
therefore safe to continue. Otherwise, try to determine if the value of
the Referer header corresponds to any of the views in the current web
application. If not, throw a ProtectedViewException. If the Origin
header is present, additionally perform the same steps as with the
Referer header.

[#50638877_pgfId-1022670]##Call _renderResponse()_ on the _FacesContext_
.

[#50638877_pgfId-1011366]##Obtain a reference to the _FlowHandler_ from
the _Application_ . Call its _clientWindowTransition()_ method. This
ensures that navigation that happened as a result of the renderer for
the _javax.faces.OutcomeTarget_ component-family is correctly handled
with respect to flows. For example, this enables _<h:button>_ to work
correctly with flows.

[#50638877_pgfId-1022240]##Using _Application.publishEvent()_ , publish
a _PostAddToViewEvent_ with the created _UIViewRoot_ as the event
source.

{empty}[#50638877_pgfId-1013408]##In all cases, the implementation must
ensure that the restored tree is traversed and the
_PostRestoreStateEvent_ is published for every node in the tree.[P1-end]

[#50638877_pgfId-1007070]##At the end of this phase, the _viewRoot_
property of the _FacesContext_ instance for the current request will
reflect the saved configuration of the view generated by the previous
Faces Response, or a new view returned by _ViewHandler.createView()_ for
the view identifier.

==== [#50638877_pgfId-1008432]##[#50638877_68096]##Apply Request Values

[#50638877_pgfId-1007073]##The purpose of the _Apply Request Values_
phase of the request processing lifecycle is to give each component the
opportunity to update its current state from the information included in
the current request (parameters, headers, cookies, and so on). When the
information from the current request has been examined to update the
component’s current state, the component is said to have a “local
value”.

[#50638877_pgfId-1007132]##[P1-start-applyRequestDecode]During the
_Apply Request Values_ phase, the JSF implementation must call the
_processDecodes()_ method of the _UIViewRoot_ of the component
tree.[P1-end] This will normally cause the _processDecodes()_ method of
each component in the tree to be called recursively, as described in the
Javadocs for the _UIComponent.processDecodes()_ method.
[P1-start-partialDecode] The _processDecodes()_ method must determine if
the current request is a “partial request” by calling
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
. If
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
returns _true_ , perform the sequence of steps as outlined in
link:JSF.htm#50638877_Apply%20Request%20Values%20Partial%20Processing[See
Apply Request Values Partial Processing].[P1-end] Details of the
decoding process follow.

[#50638877_pgfId-1007133]##During the decoding of request values, some
components perform special processing, including:

[#50638877_pgfId-1003470]##Components that implement _ActionSource_
(such as _UICommand_ ), which recognize that they were activated, will
queue an _ActionEvent_ . The event will be delivered at the end of
_Apply Request Values_ phase if the _immediate_ property of the
component is _true_ , or at the end of _Invoke Application_ phase if it
is _false_ .

[#50638877_pgfId-1007151]##Components that implement
_EditableValueHolder_ (such as _UIInput_ ), and whose _immediate_
property is set to _true_ , will cause the conversion and validation
processing (including the potential to fire _ValueChangeEvent_ events)
that normally happens during _Process Validations_ phase to occur during
_Apply Request Values_ phase instead.

[#50638877_pgfId-1007155]##As described in
link:JSF.htm#50638877_24408[See Common Event Processing], the
_processDecodes()_ method on the _UIViewRoot_ component at the root of
the component tree will have caused any queued events to be broadcast to
interested listeners.

{empty}[#50638877_pgfId-1007156]##At the end of this phase, all
_EditableValueHolder_ components in the component tree will have been
updated with new submitted values included in this request (or enough
data to reproduce incorrect input will have been stored, if there were
conversion errors). [P1-start-applyRequestConversion]In addition,
conversion and validation will have been performed on
_EditableValueHolder_ components whose _immediate_ property is set to
_true_ , as described in the _UIInput_ Javadocs. Conversions and
validations that failed will have caused messages to be enqueued via
calls to the _addMessage()_ method of the _FacesContext_ instance for
the current request, and the _valid_ property on the corresponding
component(s) will be set to _false_ . [P1-end]

{empty}[#50638877_pgfId-1011742]##If any of the _decode()_ methods that
were invoked, or an event listener that processed a queued event, called
_responseComplete()_ on the _FacesContext_ instance for the current
request, clear the remaining events from the event queue and terminate
lifecycle processing of the current request.
[P1-start-applyRequestComplete]If any of the _decode()_ methods that
were invoked, or an event listener that processed a queued event, called
_renderResponse()_ on the _FacesContext_ instance for the current
request, clear the remaining events from the event queue and transfer
control to the _Render Response_ phase of the request processing
lifecycle. Otherwise, control must proceed to the _Process Validations_
phase.[P1-end]

===== [#50638877_pgfId-1011818]##[#50638877_Apply Request Values Partial Processing]##Apply Request Values Partial Processing

{empty}[#50638877_pgfId-1011819]##[P1-start-apply-partial-processing]Call
FacesContext.getPartialViewContext(). Call
PartialViewContext.processPartial() passing the FacesContext,
PhaseID.APPLY_REQUEST_VALUES as arguments. [P1-end]

==== [#50638877_pgfId-1011821]##[#50638877_27358]##Process Validations

[#50638877_pgfId-1007183]##As part of the creation of the view for this
request, zero or more _Validator_ instances may have been registered for
each component. In addition, component classes themselves may implement
validation logic in their _validate()_ methods.

[#50638877_pgfId-1011835]##[P1-start-validation]During the _Process
Validations_ phase of the request processing lifecycle, the JSF
implementation must call the _processValidators()_ method of the
_UIViewRoot_ of the tree.[P1-end] This will normally cause the
_processValidators()_ method of each component in the tree to be called
recursively, as described in the API reference for the
_UIComponent.processValidators()_ method. [P1-start-partialValidate] The
_processValidators()_ method must determine if the current request is a
“partial request” by calling
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
. If
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
returns _true_ , perform the sequence of steps as outlined in
link:JSF.htm#50638877_Partial%20Validations%20Partial%20Processing[See
Partial Validations Partial Processing].[P1-end] Note that
_EditableValueHolder_ components whose _immediate_ property is set to
_true_ will have had their conversion and validation processing
performed during _Apply Request Values_ phase.

[#50638877_pgfId-1007220]##During the processing of validations, events
may have been queued by the components and/or _Validator_ s whose
_validate()_ method was invoked. As described in
link:JSF.htm#50638877_24408[See Common Event Processing], the
_processValidators()_ method on the _UIViewRoot_ component at the root
of the component tree will have caused any queued events to be broadcast
to interested listeners.

[#50638877_pgfId-1007224]##At the end of this phase, all conversions and
configured validations will have been completed. Conversions and
Validations that failed will have caused messages to be enqueued via
calls to the _addMessage()_ method of the _FacesContext_ instance for
the current request, and the _valid_ property on the corresponding
components will have been set to _false_ .

{empty}[#50638877_pgfId-1007261]##If any of the _validate()_ methods
that were invoked, or an event listener that processed a queued event,
called _responseComplete()_ on the _FacesContext_ instance for the
current request, clear the remaining events from the event queue and
terminate lifecycle processing of the current request.
[P1-start-validationValidate]If any of the _validate()_ methods that
were invoked, or an event listener that processed a queued event, called
_renderResponse()_ on the _FacesContext_ instance for the current
request, clear the remaining events from the event queue and transfer
control to the _Render Response_ phase of the request processing
lifecycle. Otherwise, control must proceed to the _Update Model Values_
phase.[P1-end]

===== [#50638877_pgfId-1011809]##[#50638877_Partial Validations Partial Processing]##Partial Validations Partial Processing

{empty}[#50638877_pgfId-1011813]##[P1-start-val-partial-processing]Call
FacesContext.getPartialViewContext(). Call
PartialViewContext.processPartial() passing the FacesContext,
PhaseID.PROCESS_VALIDATIONS as arguments. [P1-end]

==== [#50638877_pgfId-1007263]##[#50638877_44493]##Update Model Values

[#50638877_pgfId-1007264]##If this phase of the request processing
lifecycle is reached, it is assumed that the incoming request is
syntactically and semantically valid (according to the validations that
were performed), that the local value of every component in the
component tree has been updated, and that it is now appropriate to
update the application's model data in preparation for performing any
application events that have been enqueued.

[#50638877_pgfId-1007300]##[P1-start-updateModel]During the _Update
Model Values_ phase, the JSF implementation must call the
_processUpdates()_ method of the _UIViewRoot_ component of the
tree.[P1-end] This will normally cause the _processUpdates()_ method of
each component in the tree to be called recursively, as described in the
API reference for the _UIComponent.processUpdates()_ method.
[P1-start-partialUpdate] The _processUpdates()_ method must determine if
the current request is a “partial request” by calling
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
. If
_FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()_
returns _true_ , perform the sequence of steps as outlined in
link:JSF.htm#50638877_Update%20Model%20Values%20Partial%20Processing[See
Update Model Values Partial Processing]. [P1-end]The actual model update
for a particular component is done in the _updateModel()_ method for
that component.

[#50638877_pgfId-1007301]##During the processing of model updates,
events may have been queued by the components whose _updateModel()_
method was invoked. As described in link:JSF.htm#50638877_24408[See
Common Event Processing], the _processUpdates()_ method on the
UIViewRoot component at the root of the component tree will have caused
any queued events to be broadcast to interested listeners.

[#50638877_pgfId-1007305]##At the end of this phase, all appropriate
model data objects will have had their values updated to match the local
value of the corresponding component, and the component local values
will have been cleared.

{empty}[#50638877_pgfId-1007342]##If any of the _updateModel()_ methods
that were invoked, or an event listener that processed a queued event,
called _responseComplete()_ on the _FacesContext_ instance for the
current request, clear the remaining events from the event queue and
terminate lifecycle processing of the current request.
[P1-start-updateModelComplete]If any of the _updateModel()_ methods that
was invoked, or an event listener that processed a queued event, called
_renderResponse()_ on the _FacesContext_ instance for the current
request, clear the remaining events from the event queue and transfer
control to the _Render Response_ phase of the request processing
lifecycle. Otherwise, control must proceed to the _Invoke Application_
phase.[P1-end]

===== [#50638877_pgfId-1012141]##[#50638877_Update Model Values Partial Processing]##Update Model Values Partial Processing

{empty}[#50638877_pgfId-1012142]##[P1-start-upd-partial-processing]Call
FacesContext.getPartialViewContext(). Call
PartialViewContext.processPartial() passing the FacesContext,
PhaseID.UPDATE_MODEL_VALUES as arguments. [P1-end]

==== [#50638877_pgfId-1012144]##[#50638877_61764]##Invoke Application

[#50638877_pgfId-1007381]##If this phase of the request processing
lifecycle is reached, it is assumed that all model updates have been
completed, and any remaining event broadcast to the application needs to
be performed. [P1-start-invokeApplication]The implementation must ensure
that the _processApplication()_ method of the _UIViewRoot_ instance is
called.[P1-end] The default behavior of this method will be to broadcast
any queued events that specify a phase identifier of
_PhaseId.INVOKE_APPLICATION_ . If _responseComplete()_ was called on the
_FacesContext_ instance for the current request, clear the remaining
events from the event queue and terminate lifecycle processing of the
current request. If _renderResponse()_ was called on the _FacesContext_
instance for the current request, clear the remaining events from the
event queue.

{empty}[#50638877_pgfId-1007421]##Advanced applications (or application
frameworks) may replace the default _ActionListener_ instance by calling
the _setActionListener()_ method on the _Application_ instance for this
application. [P1-start-invokeApplicationListener]However, the JSF
implementation must provide a default _ActionListener_ instance that
behaves as described in link:JSF.htm#50638861_40874[See ActionListener
Property].[P1-end]

==== [#50638877_pgfId-1007423]##[#50638877_70838]##Render Response

[#50638877_pgfId-1007424]##This phase accomplishes two things:

[#50638877_pgfId-1007425]##Causes the response to be rendered to the
client

[#50638877_pgfId-1007426]##Causes the state of the response to be saved
for processing on subsequent requests.

[#50638877_pgfId-1007428]##JSF supports a range of approaches that JSF
implementations may utilize in creating the response text that
corresponds to the contents of the response view, including:

[#50638877_pgfId-1007429]##Deriving all of the response content directly
from the results of the encoding methods (on either the components or
the corresponding renderers) that are called.

[#50638877_pgfId-1007430]##Interleaving the results of component
encoding with content that is dynamically generated by application
programming logic.

[#50638877_pgfId-1007431]##Interleaving the results of component
encoding with content that is copied from a static “template” resource.

[#50638877_pgfId-1007432]##Interleaving the results of component
encoding by embedding calls to the encoding methods into a dynamic
resource (such as representing the components as custom tags in a JSP
page).

[#50638877_pgfId-1007451]##Because of the number of possible options,
the mechanism for implementing the _Render Response_ phase cannot be
specified precisely. [P1-start-renderResponse]However, all JSF
implementations of this phase must conform to the following
requirements:

[#50638877_pgfId-1024439]##If it is possible to obtain a
_ViewDeclarationLanguage_ instance for the current _viewId_ , from the
_ViewHandler_ , its _buildView()_ method must be called. __

[#50638877_pgfId-1024440]##Publish the
_javax.faces.event.PreRenderViewEvent_ .

[#50638877_pgfId-1024441]##JSF implementations must provide a default
_ViewHandler_ implementation that is capable of handling views written
in JSP as well as views written in the Faces View Declaration Language
(VDL). In the case of JSP, the ViewHandler must perform a
_RequestDispatcher.forward()_ call to a web application resource whose
context-relative path is equal to the view identifier of the component
tree.

[#50638877_pgfId-1007453]##If all of the response content is being
derived from the encoding methods of the component or associated
_Renderer_ s, the component tree should be walked in the same
depth-first manner as was used in earlier phases to process the
component tree, but subject to the additional constraints listed here.
Generally this is handled by a call to _ViewHandler.renderView()_ . __

[#50638877_pgfId-1007454]##If the response content is being interleaved
from additional sources and the encoding methods, the components may be
selected for rendering in any desired orderlink:#pgfId-1007457[1].

[#50638877_pgfId-1007458]##During the rendering process, additional
components may be added to the component tree based on information
available to the _ViewHandler_ implementationlink:#pgfId-1007461[2].
However, before adding a new component, the _ViewHandler_ implementation
must first check for the existence of the corresponding component in the
component tree. If the component already exists (perhaps because a
previous phase has pre-created one or more components), the existing
component’s properties and attributes must be utilized.

[#50638877_pgfId-1007465]##Under no circumstances should a component be
selected for rendering when its parent component, or any of its
ancestors in the component tree, has its _rendersChildren_ property set
to true. In such cases, the parent or ancestor component must render the
content of this child component when the parent or ancestor was
selected.

[#50638877_pgfId-1007466]##If the _isRendered()_ method of a component
returns _false_ , the renderer for that component must not generate any
markup, and none of its facets or children (if any) should be rendered.

[#50638877_pgfId-1011879]##It must be possible for the application to
programmatically modify the component tree at any time during the
request processing lifecycle (except during the rendering of the view)
and have the system behave as expected. For example, the following must
be permitted. Modification of the view during rendering may lead to
undefined results. It must be possible to allow components added by the
templating system (such as JSP) to be removed from the tree before
rendering. It must be possible to programmatically add components to the
tree and have them render in the proper place in the hierarchy. It must
be possible to re-order components in the tree before rendering. These
manipulations do require that any components added to the tree have ids
that are unique within the scope of the closest parent _NamingContainer_
component. The value of the _rendersChildren_ property is handled as
expected, and may be either _true_ or _false_ .

[#50638877_pgfId-1025231]##If running on a container that supports
Servlet 4.0 or later, after any dynamic component manipulations have
been completed, any resources that have been added to the UIViewRoot,
such as scripts, images, or stylesheets, and any inline images, must be
pushed to the client using the Servlet Server Push API. All of the
pushes must be started before any of the HTML of the response is
rendered to the client.

[#50638877_pgfId-1011895]##For partial requests, where partial view
rendering is required, there must be no content written outside of the
view (outside _f:view_ ). Response writing must be disabled. Response
writing must be enabled again at the start of _encodeBegin._

[#50638877_pgfId-1011881]##When each particular component in the
component tree is selected for rendering, calls to its _encodeXxx()_
methods must be performed in the manner described in
link:JSF.htm#50638851_49266[See Component Specialization Methods]. For
components that implement _ValueHolder_ (such as _UIInput_ and
_UIOutput_ ), data conversion must occur as described in the _UIOutput_
Javadocs.

{empty}[#50638877_pgfId-1007496]##Upon completion of rendering, but
before state saving the JSF runtime must publish a
_javax.faces.event.PostRenderViewEvent_ . After doing so the JSF runtime
must save the completed state using the methods of the class
_StateManager._ This state information must be made accessible on a
subsequent request, so that the _Restore View_ can access it.[P1-end]
For more on _StateManager_ , see link:JSF.htm#50638861_82303[See State
Saving Methods.]

===== [#50638877_pgfId-1014487]##[#50638877_65450]##Render Response Partial Processing

[#50638877_pgfId-1014533]##[P1-start-render-partial-processing]
According to _UIViewRoot.encodeChildren()_ ,
_FacesContext.processPartial(PhaseId.RENDER_RESPONSE)_ , will be called
if and only if the current request is an Ajax request. Take these
actions in this case.

[#50638877_pgfId-1017403]##On the _ExternalContext_ for the request,
call _setResponseContentType("text/xml")_ and
_addResponseHeader("Cache-control", "no-cache")_ . Call
_startDocument()_ on the _PartialResponseWriter_ .

[#50638877_pgfId-1020645]##Call _writePreamble(“<?xml version=’1.0’
encoding=’currentEncoding’?>\n”)_ on the _PartialResponseWriter_ , where
_encoding_ is the return from the _getCharacterEncoding()_ on the
_PartialResponseWriter_ , or UTF-8 if that method returns _null_ . __

[#50638877_pgfId-1017733]##If _isResetValues()_ returns _true_ , call
_getRenderIds()_ and pass the result to _UIViewRoot.resetValues()_ . __

[#50638877_pgfId-1015202]##If _isRenderAll()_ returns _true_ and the
view root is not an instance of _NamingContainer_ , call
_startUpdate(PartialResponseWriter.RENDER_ALL_MARKER)_ on the
_PartialResponseWriter_ . For each child of the _UIViewRoot_ , call
_encodeAll()_ . Call _endUpdate()_ on the _PartialResponseWriter_ .
Render the state using the algorithm described below in
link:JSF.htm#50638877_73984[See Partial State Rendering], call
_endDocument()_ on the _PartialResponseWriter_ and return. If
_isRenderAll()_ returns _true_ and this _UIViewRoot_ is a
_NamingContainer_ , treat this as a case where _isRenderAll()_ returned
_false_ , but use the _UIViewRoot_ itself as the one and only component
from which the tree visit must start.

[#50638877_pgfId-1015576]##If _isRenderAll()_ returns _false_ , if there
are ids to render, visit the subset of components in the tree to be
rendered in similar fashion as for other phases, but for each
_UIComponent_ in the traversal, call _startUpdate(id)_ on the
_PartialResponseWriter_ , where _id_ is the client id of the component.
Call _encodeAll()_ on the component, and then _endUpdate()_ on the
_PartialResponseWriter_ . If there are no ids to render, this step is
un-necessary. After the subset of components (if any) have been
rendered, Render the state using the algorithm described below in
link:JSF.htm#50638877_73984[See Partial State Rendering], call
_endDocument()_ on the _PartialResponseWriter_ and return.

====== [#50638877_pgfId-1015460]##[#50638877_73984]##Partial State Rendering

[#50638877_pgfId-1016182]##This section describes the requirements for
rendering the _<update>_ elements pertaining to view state and window id
in the case of partial response rendering.

[#50638877_pgfId-1017405]##If the view root is marked transient, take no
action and return.

[#50638877_pgfId-1016262]##Obtain a unique id for the view state, as
described in the JavaDocs for the constant field
_ResponseStateManager.VIEW_STATE_PARAM_ . Pass this id to a call to
_startUpdate()_ on the _PartialResponseWriter_ . Obtain the view state
to render by calling _getViewState()_ on the application’s
_StateManager_ . Write the state by calling _write()_ on the
_PartialResponseWriter_ , passing the state as the argument. Call
_endUpdate()_ on the _PartialResponseWriter_ .

[#50638877_pgfId-1016891]##If _getClientWindow()_ on the
_ExternalContext_ , returns non- _null_ , obtain an id for the
_<update>_ element for the window id as described in the JavaDocs for
the constant _ResponseStateManager.WINDOW_ID_PARAM_ . Pass this id to a
call to _startUpdate()_ on the _PartialResponseWriter_ . Call _write()_
on that same writer, passing the result of calling _getId()_ on the
_ClientWindow_ . Call _endUpdate()_ on the _PartialResponseWriter_ .

{empty}[#50638877_pgfId-1015458]##[P1-end]

=== [#50638877_pgfId-1007498]##

image:JSF-12.gif[image]

[#50638877_24408]##Common Event Processing

[#50638877_pgfId-1007499]##For a complete description of the event
processing model for JavaServer Faces components, see
link:JSF.htm#50638851_80722[See Event and Listener Model].

[#50638877_pgfId-1007505]##During several phases of the request
processing lifecycle, as described in link:JSF.htm#50638877_42543[See
Standard Request Processing Lifecycle Phases], the possibility exists
for events to be queued (via a call to the _queueEvent()_ method on the
source _UIComponent_ instance, or a call to the _queue()_ method on the
_FacesEvent_ instance), which must now be broadcast to interested event
listeners. The broadcast is performed as a side effect of calling the
appropriate lifecycle management method ( _processDecodes()_ ,
_processValidators()_ , _processUpdates()_ , or _processApplication()_ )
on the _UIViewRoot_ instance at the root of the current component tree.

[#50638877_pgfId-1007542]##[P1-start-eventBroadcast]For each queued
event, the _broadcast()_ method of the source _UIComponent_ must be
called to broadcast the event to all event listeners who have registered
an interest, on this source component for events of the specified type,
after which the event is removed from the event queue.[P1-end] See the
API reference for the _UIComponent.broadcast()_ method for the detailed
functional requirements.

{empty}[#50638877_pgfId-1007579]##It is also possible for event
listeners to cause additional events to be enqueued for processing
during the current phase of the request processing lifecycle.
[P1-start-eventOrder]Such events must be broadcast in the order they
were enqueued, after all originally queued events have been broadcast,
before the lifecycle management method returns.[P1-end]

=== [#50638877_pgfId-1007581]##

image:JSF-12.gif[image]

[#50638877_16594]##Common Application Activities

[#50638877_pgfId-1007582]##The following subsections describe common
activities that may be undertaken by an application that is using JSF to
process an incoming request and/or create an outgoing response. Their
use is described in link:JSF.htm#50638877_68933[See Request Processing
Lifecycle Scenarios], for each request processing lifecycle scenario in
which the activity is relevant.

==== [#50638877_pgfId-1007587]##[#50638877_37297]##Acquire Faces Object References

[#50638877_pgfId-1007588]##This phase is only required when the request
being processed was not submitted from a previous response, and
therefore did not initiate the _Faces Request Generates Faces Response_
lifecycle. In order to generate a Faces Response, the application must
first acquire references to several objects provided by the JSF
implementation, as described below.

===== [#50638877_pgfId-1007589]##Acquire and Configure Lifecycle Reference

[#50638877_pgfId-1007632]##[P1-start-lifeReference]As described in
link:JSF.htm#50638859_92529[See Lifecycle], the JSF implementation must
provide an instance of _javax.faces.lifecycle.Lifecycle_ that may be
utilized to manage the remainder of the request processing
lifecycle.[P1-end] An application may acquire a reference to this
instance in a portable manner, as follows:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1007630]##LifecycleFactory lFactory =
(LifecycleFactory)
FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);

[#50638877_pgfId-1007631]##Lifecycle lifecycle =
lFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);

|===

[#50638877_pgfId-1007633]##It is also legal to specify a different
lifecycle identifier as a parameter to the _getLifecycle()_ method, as
long as this identifier is recognized and supported by the JSF
implementation you are using. However, using a non-default lifecycle
identifier will generally not be portable to any other JSF
implementation.

===== [#50638877_pgfId-1007634]##Acquire and Configure FacesContext Reference

[#50638877_pgfId-1007655]##[P1-start-contextReference]As described in
link:JSF.htm#50638857_28153[See FacesContext], the JSF implementation
must provide an instance of _javax.faces.context.FacesContext_ to
contain all of the per-request state information for a Faces Request or
a Faces Response. An application that is processing a Non-Faces Request,
but wants to create a Faces Response, must acquire a reference to a
_FacesContext_ instance as follows

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1007658]##FacesContextFactory fcFactory =
(FacesContextFactory)
FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);

[#50638877_pgfId-1007659]##FacesContext facesContext =

[#50638877_pgfId-1007660]## fcFactory.getFacesContext(context, request,
response, lifecycle);

[#50638877_pgfId-1007661]## 

|===

[#50638877_pgfId-1007680]##where the _context_ , _request_ , and
_response_ objects represent the corresponding instances for the
application environment.[P1-end] For example, in a servlet-based
application, these would be the _ServletContext_ , _HttpServletRequest_
, and _HttpServletResponse_ instances for the current request.

==== [#50638877_pgfId-1007682]##[#50638877_39825]##Create And Configure A New View

[#50638877_pgfId-1007683]##When a Faces response is being intially
created, or when the application decides it wants to create and
configure a new view that will ultimately be rendered, it may follow the
steps described below in order to set up the view that will be used. You
must start with a reference to a _FacesContext_ instance for the current
request.

===== [#50638877_pgfId-1007685]##[#50638877_34789]##Create A New View

[#50638877_pgfId-1007686]##Views are represented by a data structure
rooted in an instance of _javax.faces.component.UIViewRoot_ , and
identified by a view identifier whose meaning depends on the
_ViewHandler_ implementation to be used during the _Render Response_
phase of the request processing lifecyclelink:#pgfId-1007689[3]. The
_ViewHandler_ provides a factory method that may be utilized to
construct new component trees, as follows:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1007692]##String viewId = ... _identifier of the
desired Tree_ ...;

[#50638877_pgfId-1007693]##ViewHandler viewHandler =
application.getViewHandler();

[#50638877_pgfId-1007694]##UIViewRoot view =
viewHandler.createView(facesContext, viewId);

|===

[#50638877_pgfId-1007730]##[P1-start-createViewRoot]The _UIViewRoot_
instance returned by the _createView()_ method must minimally contain a
single _UIViewRoot_ provided by the JSF implementation, which must
encapsulate any implementation-specific component management that is
required.[P1-end] Optionally, a JSF implementation’s _ViewHandler_ may
support the automatic population of the returned _UIViewRoot_ with
additional components, perhaps based on some external metadata
description.

[#50638877_pgfId-1007766]##[P1-start-createView]The caller of
_ViewHandler.createView()_ must cause the _FacesContext_ to be populated
with the new _UIViewRoot._ Applications must make sure that it is safe
to discard any state saved in the view rooted at the _UIViewRoot_
currently stored in the _FacesContext_ .[P1-end] If Facelets is the page
definition language, _FacesContext.setViewRoot()_ must be called before
returning from _ViewHandler.createView()._ Refer to
link:JSF.htm#50638861_36790[See Default ViewHandler Implementation] for
more _ViewHandler_ details.

===== [#50638877_pgfId-1007767]##Configure the Desired RenderKit

{empty}[#50638877_pgfId-1007806]##[P1-start-defaultRenderkit]The
_UIViewRoot_ instance provided by the _ViewHandler_ , as described in
the previous subsection, must automatically be configured to utilize the
default _javax.faces.render.RenderKit_ implementation provided by the
JSF implementation, as described in link:JSF.htm#50638855_48699[See
RenderKit]. This _RenderKit_ must support the standard components and
_Renderer_ s described later in this specification, to maximize the
portability of your application.[P1-end]

[#50638877_pgfId-1007807]##However, a different _RenderKit_ instance
provided by your JSF implementation (or as an add-on library) may be
utilized instead, if desired. A reference to this _RenderKit_ instance
can be obtained from the standard _RenderKitFactory_ , and then assigned
to the _UIViewRoot_ instance created previously, as follows:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1007810]##String renderKitId = ... identifier of
desired RenderKit ...;

[#50638877_pgfId-1007811]##RenderKitFactory rkFactory =
(RenderKitFactory)
FactoryFinder.getFactory(FactoryFinder.RENDER_KIT_FACTORY);

[#50638877_pgfId-1007812]##RenderKit renderKit =
rkFactory.getRenderKit(renderKitId, facesContext);

[#50638877_pgfId-1007813]##view.setRenderKitId(renderKitId);

|===

[#50638877_pgfId-1007814]##As described in Chapter 8, changing the
_RenderKit_ being used changes the set of _Renderer_ s that will
actually perform decoding and encoding activities. Because the
components themselves store only a _rendererType_ property (a logical
identifier of a particular _Renderer_ ), it is thus very easy to switch
between _RenderKit_ s, as long as they support renderers with the same
renderer types.

[#50638877_pgfId-1003983]##[P1-start-calcRenderkitId]The default
_ViewHandler_ must call _calculateRenderKitId()_ on itself and set the
result into the _UIViewRoot_ ’s _renderKitId_ property.[P1-end] This
allows applications that use alternative _RenderKit_ s to dynamically
switch on a per-view basis.

===== [#50638877_pgfId-1007858]##Configure The View’s Components

[#50638877_pgfId-1007859]##At any time, the application can add new
components to the view, remove them, or modify the attributes and
properties of existing components. For example, a new _FooComponent_ (an
implementation of _UIComponent_ ) can be added as a child to the root
_UIViewRoot_ in the component tree as follows:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1007862]##FooComponent component = ... _create a
FooComponent instance_ ...;

[#50638877_pgfId-1007863]##facesContext.getViewRoot().getChildren().add(component);

|===

===== [#50638877_pgfId-1007864]##Store the new View in the FacesContext

{empty}[#50638877_pgfId-1007887]##[P1-start-setViewRoot]Once the view
has been created and configured, the _FacesContext_ instance for this
request must be made aware of it by calling _setViewRoot()_ .[P1-end]

=== [#50638877_pgfId-1007888]##

image:JSF-12.gif[image]

Concepts that impact several lifecycle phases

[#50638877_pgfId-1007889]##This section is intended to give the reader a
“big picture” perspective on several complex concepts that impact
several request processing lifecycle phases.

==== [#50638877_pgfId-1003637]##[#50638877_21645]##Value Handling

[#50638877_pgfId-1003641]##At a fundamental level, JavaServer Faces is a
way to get values from the user, into your model tier for processing.
The process by which values flow from the user to the model has been
documented elsewhere in this spec, but a brief holistic survey comes in
handy. The following description assumes the JSP/HTTP case, and that all
components have Renderers.

===== [#50638877_pgfId-1003648]##Apply Request Values Phase

[#50638877_pgfId-1003649]##The user presses a button that causes a form
submit to occur. This causes the state of the form to be sent as
_name=value_ pairs in the _POST_ data of the HTTP request. The JSF
request processing lifecycle is entered, and eventually we come to the
_Apply Request Values Phase_ . In this phase, the _decode()_ method for
each _Renderer_ for each _UIComponent_ in the view is called. The
_Renderer_ takes the value from the request and passes it to the
_setSubmittedValue()_ method of the component, which is, of course, an
instance of _EditableValueHolder_ . If the component has the "
_immediate_ " property set to _true_ , we execute validation immediately
after decoding. See below for what happens when we execute validation.

===== [#50638877_pgfId-1003650]##Process Validators Phase

[#50638877_pgfId-1003651]## _processValidators()_ is called on the root
of the view. For each _EditableValueHolder_ in the view, If the “
_immediate_ ” property is not set, we execute validation for each
_UIInput_ in the view. Otherwise, validation has already occurred and
this phase is a no-op.

===== [#50638877_pgfId-1003652]##Executing Validation

[#50638877_pgfId-1003653]##Please see the javadocs for
_UIInput.validate()_ for more details, but basically, this method gets
the submitted value from the component (set during _Apply Request
Values_ ), gets the _Renderer_ for the component and calls its
_getConvertedValue()_ , passing the submitted value. If a conversion
error occurs, it is dealt with as described in the javadocs for that
method. Otherwise, all validators attached to the component are asked to
validate the converted value. If any validation errors occur, they are
dealt with as described in the javadocs for _Validator.validate()_ . The
converted value is pushed into the component's _setValue()_ method, and
a _ValueChangeEvent_ is fired if the value has changed.

===== [#50638877_pgfId-1003654]##Update Model Values Phase

[#50638877_pgfId-1003655]##For each _UIInput_ component in the view, its
_updateModel()_ method is called. This method only takes action if a
local value was set when validation executed and if the page author
configured this component to push its value to the model tier. This
phase simply causes the converted local value of the _UIInput_ component
to be pushed to the model in the way specified by the page author. Any
errors that occur as a result of the attempt to push the value to the
model tier are dealt with as described in the javadocs for
_UIInput.updateModel()_ .

==== [#50638877_pgfId-1007908]##[#50638877_67270]##Localization and Internationalization (L10N/I18N)

[#50638877_pgfId-1007909]##JavaServer Faces is fully internationalized.
The I18N capability in JavaServer Faces builds on the I18N concepts
offered in the Servlet, JSP and JSTL specifications. I18N happens at
several points in the request processing lifecycle, but it is easiest to
explain what goes on by breaking the task down by function.

===== [#50638877_pgfId-1007910]##[#50638877_24244]##Determining the active _Locale_

[#50638877_pgfId-1007911]##JSF has the concept of an active _Locale_
which is used to look up all localized resources. Converters must use
this _Locale_ when performing their conversion. This _Locale_ is stored
as the value of the _locale_ JavaBeans property on the _UIViewRoot_ of
the current _FacesContext_ . The application developer can tell JSF what
locales the application supports in the applications’
_WEB-INF/faces-config.xml_ file. For example:

[#50638877_pgfId-1007912]##<faces-config>

[#50638877_pgfId-1007913]## <application>

[#50638877_pgfId-1007914]## <locale-config>

[#50638877_pgfId-1007915]## <default-locale>en</default-locale>

[#50638877_pgfId-1007916]## <supported-locale>de</supported-locale>

[#50638877_pgfId-1007917]## <supported-locale>fr</supported-locale>

[#50638877_pgfId-1007918]## <supported-locale>es</supported-locale>

[#50638877_pgfId-1007919]## </locale-config>

[#50638877_pgfId-1007920]## </application>

[#50638877_pgfId-1007921]##This application’s default locale is _en_ ,
but it also supports _de, fr,_ and _es_ locales. These elements cause
the _Application_ instance to be populated with _Locale_ data. Please
see the javadocs for details.

[#50638877_pgfId-1007945]##The _UIViewRoot_ ’s _Locale_ is determined
and set by the _ViewHandler_ during the execution of the _ViewHandler_
’s _createView()_ method. [P1-start-locale]This method must cause the
active _Locale_ to be determined by looking at the user’s preferences
combined with the application’s stated supported locales.[P1-end] Please
see the javadocs for details.

{empty}[#50638877_pgfId-1007982]##The application can call
_UIViewRoot.setLocale()_ directly, but it is also possible for the page
author to override the _UIViewRoot_ ’s locale by using the _locale_
attribute on the _<f:view_ > tag. [P1-start-localeValue]The value of
this attribute must be specified as
_language[\{-|_}country[\{-|_}variant]]_ without the colons, for example
" _ja_JP_SJIS_ ". The separators between the segments must be ' _-_ ' or
' ___ '.[P1-end]

[#50638877_pgfId-1007983]##In all cases where JSP is utilized, the
active _Locale_ is set under “request scope” into the JSTL class
_javax.servlet.jsp.jstl.core.Config_ , under the key _Config.FMT_LOCALE_
.

[#50638877_pgfId-1024810]##To facilitate BCP 47 support, the Locale
parsing mentioned above is done only if the JDK Locale.languageForTag
method does not return a Locale with a language in it. The additional
format of the Locale string is as specified by that method.

===== [#50638877_pgfId-1007984]##Determining the Character Encoding

[#50638877_pgfId-1007985]##The request and response character encoding
are set and interpreted as follows.

[#50638877_pgfId-1007986]##On an initial request to a Faces webapp, the
request character encoding is left unmodified, relying on the underlying
request object (e.g., the servlet or portlet request) to parse request
parameter correctly.

[#50638877_pgfId-1008022]##[P1-start-setLocale]At the beginning of the
render-response phase, the ViewHandler must ensure that the response
Locale is set to be that of the UIViewRoot, for example by calling
_ServletResponse.setLocale()_ when running in the servlet
environment.[P1-end] Setting the response Locale may affect the response
character encoding, see the Servlet and Portlet specifications for
details.

[#50638877_pgfId-1008040]##[P1-start-encoding]At the end of the
render-response phase, the ViewHandler must store the response character
encoding used by the underlying response object (e.g., the servlet or
portlet response) in the session (if and only if a session already
exists) under a well known, implementation-dependent key.

{empty}[#50638877_pgfId-1008059]##On a subsequent postback, before any
of the ExternalContext methods for accessing request parameters are
invoked, the ViewHandler must examine the Content-Type header to read
the charset attribute and use its value to set it as the request
encoding for the underlying request object. If the Content-Type header
doesn't contain a charset attribute, the encoding previously stored in
the session (if and only if a session already exists), must be used to
set the encoding for the underlying request object. If no character
encoding is found, the request encoding must be left unmodified.[P1-end]

[#50638877_pgfId-1008060]##The above algorithm allows an application to
use the mechanisms of the underlying technologies to adjust both the
request and response encoding in an application-specific manner, for
instance using the page directive with a fixed character encoding
defined in the contentType attribute in a JSP page, see the Servlet,
Portlet and JSP specifications for details. Note, though, that the
character encoding rules prior to Servlet 2.4 and JSP 2.0 are imprecise
and special care must be taken for portability between containers.

===== [#50638877_pgfId-1008061]##Localized Text

[#50638877_pgfId-1008062]##There is no direct support for this in the
API, but the JSP layer provides a convenience tag that converts a
_ResourceBundle_ into a _java.util.Map_ and stores it in the scoped
namespace so all may get to it. This section describes how resources
displayed to the end user may be localized. This includes images,
labels, button text, tooltips, alt text, etc.

[#50638877_pgfId-1008063]##Since most JSF components allow pulling their
display value from the model tier, it is easy to do the localization at
the model tier level. As a convenience, JSF provides the
_<f:loadBundle>_ tag, which takes a _ResourceBundle_ and loads it into a
_Map_ , which is then stored in the scoped namespace in request scope,
thus making its messages available using the same mechanism for
accessing data in the model tier. For example:

[#50638877_pgfId-1008064]##<f:loadBundle
basename=”com.foo.industryMessages.chemical”

[#50638877_pgfId-1008065]## var=”messages” />

[#50638877_pgfId-1008066]##<h:outputText value=”#\{messages.benzene}” />

[#50638877_pgfId-1008067]##This must cause the _ResourceBundle_ named
_com.foo.industryMessages.chemical_ to be loaded as a Map into the
request scope under the key _messages_ . Localized content can then be
pulled out of it using the normal value expression syntax.

===== [#50638877_pgfId-1008069]##[#50638877_24181]##Localized Application Messages

[#50638877_pgfId-1008088]##This section describes how JSF handles
localized error and informational messages that occur as a result of
conversion, validation, or other application actions during the request
processing lifecycle. The JSF class
_javax.faces.application.FacesMessage_ is provided to encapsulate
summary, detail, and severity information for a message.
[P1-start-bundle]A JSF implementation must provide a
_javax.faces.Messages ResourceBundle_ containing all of the necessary
keys for the standard messages. The required keys (and a non-normative
indication of the intended message text) are as follows:

[#50638877_pgfId-1008089]##javax.faces.component.UIInput.CONVERSION --
\{0}: Conversion error occurred

[#50638877_pgfId-1008090]##javax.faces.component.UIInput.REQUIRED --
\{0}: Validation Error: Value is required

[#50638877_pgfId-1004578]##javax.faces.component.UIInput.UPDATE -- \{0}:
An error occurred when processing your submitted information

[#50638877_pgfId-1008109]##javax.faces.component.UISelectOne.INVALID --
\{0}: Validation Error: Value is not valid

[#50638877_pgfId-1008110]##javax.faces.component.UISelectMany.INVALID --
\{0}: Validation Error: Value is not valid

[#50638877_pgfId-1004244]##javax.faces.converter.BigDecimalConverter.DECIMAL=\{2}:
''\{0}'' must be a signed decimal number.

[#50638877_pgfId-1004251]##javax.faces.converter.BigDecimalConverter.DECIMAL_detail=\{2}:
''\{0}'' must be a signed decimal number consisting of zero or more
digits, that may be followed by a decimal point and fraction. Example:
\{1}

[#50638877_pgfId-1008115]##javax.faces.converter.BigIntegerConverter.BIGINTEGER=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1008116]##javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail=\{2}:
''\{0}'' must be a number consisting of one or more digits. Example:
\{1}

[#50638877_pgfId-1004276]##javax.faces.converter.BooleanConverter.BOOLEAN=\{1}:
''\{0}'' must be 'true' or 'false'.

[#50638877_pgfId-1004277]##javax.faces.converter.BooleanConverter.BOOLEAN_detail=\{1}:
''\{0}'' must be 'true' or 'false'. Any value other than 'true' will
evaluate to 'false'.

[#50638877_pgfId-1004285]##javax.faces.converter.ByteConverter.BYTE=\{2}:
''\{0}'' must be a number between -128 and 127.

[#50638877_pgfId-1004283]##javax.faces.converter.ByteConverter.BYTE_detail=\{2}:
''\{0}'' must be a number between -128 and 127. Example: \{1}

[#50638877_pgfId-1004291]##javax.faces.converter.CharacterConverter.CHARACTER=\{1}:
''\{0}'' must be a valid character.

[#50638877_pgfId-1004289]##javax.faces.converter.CharacterConverter.CHARACTER_detail=\{1}:
''\{0}'' must be a valid ASCII character.

[#50638877_pgfId-1004297]##javax.faces.converter.DateTimeConverter.DATE=\{2}:
''\{0}'' could not be understood as a date.

[#50638877_pgfId-1004298]##javax.faces.converter.DateTimeConverter.DATE_detail=\{2}:
''\{0}'' could not be understood as a date. Example: \{1}

[#50638877_pgfId-1004299]##javax.faces.converter.DateTimeConverter.TIME=\{2}:
''\{0}'' could not be understood as a time.

[#50638877_pgfId-1004295]##javax.faces.converter.DateTimeConverter.TIME_detail=\{2}:
''\{0}'' could not be understood as a time. Example: \{1}

[#50638877_pgfId-1004305]##javax.faces.converter.DateTimeConverter.DATETIME=\{2}:
''\{0}'' could not be understood as a date and time.

[#50638877_pgfId-1004306]##javax.faces.converter.DateTimeConverter.DATETIME_detail=\{2}:
''\{0}'' could not be understood as a date and time. Example: \{1}

[#50638877_pgfId-1004308]##javax.faces.converter.DateTimeConverter.PATTERN_TYPE=\{1}:
A 'pattern' or 'type' attribute must be specified to convert the value
''\{0}''.

[#50638877_pgfId-1004310]##javax.faces.converter.DoubleConverter.DOUBLE=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1004311]##javax.faces.converter.DoubleConverter.DOUBLE_detail=\{2}:
''\{0}'' must be a number between 4.9E-324 and 1.7976931348623157E308
Example: \{1}

[#50638877_pgfId-1004608]##javax.faces.converter.EnumConverter.ENUM=\{2}:
''\{0}'' must be convertible to an enum.

[#50638877_pgfId-1004609]##javax.faces.converter.EnumConverter.ENUM_detail=\{2}:
''\{0}'' must be convertible to an enum from the enum that contains the
constant ''\{1}''.

[#50638877_pgfId-1004610]##javax.faces.converter.EnumConverter.ENUM_NO_CLASS=\{1}:
''\{0}'' must be convertible to an enum from the enum, but no enum class
provided.

[#50638877_pgfId-1004606]##javax.faces.converter.EnumConverter.ENUM_NO_CLASS_detail=\{1}:
''\{0}'' must be convertible to an enum from the enum, but no enum class
provided.

[#50638877_pgfId-1004313]##javax.faces.converter.FloatConverter.FLOAT=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1004314]##javax.faces.converter.FloatConverter.FLOAT_detail=\{2}:
''\{0}'' must be a number between 1.4E-45 and 3.4028235E38 Example: \{1}

[#50638877_pgfId-1004316]##javax.faces.converter.IntegerConverter.INTEGER=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1004317]##javax.faces.converter.IntegerConverter.INTEGER_detail=\{2}:
''\{0}'' must be a number between -2147483648 and 2147483647 Example:
\{1}

[#50638877_pgfId-1004319]##javax.faces.converter.LongConverter.LONG=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1004320]##javax.faces.converter.LongConverter.LONG_detail=\{2}:
''\{0}'' must be a number between -9223372036854775808 to
9223372036854775807 Example: \{1}

[#50638877_pgfId-1004322]##javax.faces.converter.NumberConverter.CURRENCY=\{2}:
''\{0}'' could not be understood as a currency value.

[#50638877_pgfId-1004323]##javax.faces.converter.NumberConverter.CURRENCY_detail=\{2}:
''\{0}'' could not be understood as a currency value. Example: \{1}

[#50638877_pgfId-1004325]##javax.faces.converter.NumberConverter.PERCENT=\{2}:
''\{0}'' could not be understood as a percentage.

[#50638877_pgfId-1004326]##javax.faces.converter.NumberConverter.PERCENT_detail=\{2}:
''\{0}'' could not be understood as a percentage. Example: \{1}

[#50638877_pgfId-1004328]##javax.faces.converter.NumberConverter.NUMBER=\{2}:
''\{0}'' is not a number.

[#50638877_pgfId-1004329]##javax.faces.converter.NumberConverter.NUMBER_detail=\{2}:
''\{0}'' is not a number. Example: \{1}

[#50638877_pgfId-1004330]##javax.faces.converter.NumberConverter.PATTERN=\{2}:
''\{0}'' is not a number pattern.

[#50638877_pgfId-1004331]##javax.faces.converter.NumberConverter.PATTERN_detail=\{2}:
''\{0}'' is not a number pattern. Example: \{1}

[#50638877_pgfId-1004332]##javax.faces.converter.ShortConverter.SHORT=\{2}:
''\{0}'' must be a number consisting of one or more digits.

[#50638877_pgfId-1004333]##javax.faces.converter.ShortConverter.SHORT_detail=\{2}:
''\{0}'' must be a number between -32768 and 32767 Example: \{1}

[#50638877_pgfId-1004362]##javax.faces.converter.STRING=\{1}: Could not
convert ''\{0}'' to a string.

[#50638877_pgfId-1012437]##javax.faces.validator.BeanValidator.MESSAGE
-- \{0}

[#50638877_pgfId-1008121]##javax.faces.validator.DoubleRangeValidator.MAXIMUM
-- \{1}: Validation Error: Value is greater than allowable maximum of
‘’\{0}’’

[#50638877_pgfId-1008122]##javax.faces.validator.DoubleRangeValidator.MINIMUM
-- \{1}: Validation Error: Value is less than allowable minimum of
‘’\{0}’’

[#50638877_pgfId-1004207]##javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE
-- \{2}: Validation Error: Specified attribute is not between the
expected values of \{0} and \{1}.

[#50638877_pgfId-1008128]##javax.faces.validator.DoubleRangeValidator.TYPE
-- \{0}: Validation Error: Value is not of the correct type

[#50638877_pgfId-1008129]##javax.faces.validator.LengthValidator.MAXIMUM
-- \{1}: Validation Error: Length is greater than allowable maximum of
‘’\{0}’’

[#50638877_pgfId-1008130]##javax.faces.validator.LengthValidator.MINIMUM
-- \{1}: Validation Error: Length is less than allowable minimum of
‘’\{0}’’

[#50638877_pgfId-1008131]##javax.faces.validator.LongRangeValidator.MAXIMUM
-- \{1}: Validation Error: Value is greater than allowable maximum of
‘’\{0}’’

[#50638877_pgfId-1008132]##javax.faces.validator.LongRangeValidator.MINIMUM
-- \{1}: Validation Error Value is less than allowable minimum of
‘’\{0}’’

[#50638877_pgfId-1004377]##javax.faces.validator.LongRangeValidator.NOT_IN_RANGE=\{2}:
Validation Error: Specified attribute is not between the expected values
of \{0} and \{1}.

[#50638877_pgfId-1008137]##javax.faces.validator.LongRangeValidator.TYPE
-- \{0}: Validation Error: Value is not of the correct type

[#50638877_pgfId-1004153]##The following message keys are deprecated:

{empty}[#50638877_pgfId-1004157]##javax.faces.validator.NOT_IN_RANGE --
Specified attribute is not between the expected values of \{0} and
\{1}[P1-end]

[#50638877_pgfId-1008183]##A JSF application may provide its own
messages, or overrides to the standard messages by supplying a
_<message-bundle>_ element to in the application configuration
resources. Since the _ResourceBundle_ provided in the Java platform has
no notion of summary or detail, JSF adopts the policy that
_ResourceBundle_ key for the message looks up the message summary. The
detail is stored under the same key as the summary, with __detail_
appended. [P1-start-bundleKey]These _ResourceBundle_ keys must be used
to look up the necessary values to create a localized _FacesMessage_
instance. Note that the value of the summary and detail keys in the
_ResourceBundle_ may contain parameter substitution tokens, which must
be substituted with the appropriate values using
_java.text.MessageFormat_ .[P1-end] Replace the last parameter
substitution token shown in the messages above with the input
component’s _label_ attribute. For example, _\{1}_ for
_“DoubleRangeValidator.MAXIMUM”, \{2}_ for _“ShortConverter.SHORT”._ The
_label_ attribute is a generic attribute. Please see
_link:JSF.htm#50638851_84394[See Generic Attributes]_ and
_link:JSF.htm#50638855_61767[See Standard HTML RenderKit
Implementation]_ for more information on these attributes. If the input
component’s _label_ attribute is not specified, use the component’s
client identifier.

[#50638877_pgfId-1008190]##These messages can be displayed in the page
using the _UIMessage_ and _UIMessages_ components and their
corresponding tags, _<h:message>_ and _<h:messages>._

[#50638877_pgfId-1008208]##[P1-start-facesMessage]The following
algorithm must be used to create a _FacesMessage_ instance given a
message key.

[#50638877_pgfId-1008209]##Call _getMessageBundle()_ on the
_Application_ instance for this web application, to determine if the
application has defined a resource bundle name. If so, load that
ResourceBundle and look for the message there.

[#50638877_pgfId-1008210]##If not there, look in the
_javax.faces.Messages_ resource bundle.

{empty}[#50638877_pgfId-1008229]##In either case, if a message is found,
use the above conventions to create a _FacesMessage_ instance.[P1-end]

==== [#50638877_pgfId-1008231]##[#50638877_35050]##State Management

[#50638877_pgfId-1008232]##JavaServer Faces introduces a powerful and
flexible system for saving and restoring the state of the view between
requests to the server. It is useful to describe state management from
several viewpoints. For the page author, state management happens
transparently. For the app assembler, state management can be configured
to save the state in the client or on the server by setting the
ServletContext InitParameter named _javax.faces.STATE_SAVING_METHOD_ to
either _client_ or _server_ . The value of this parameter directs the
state management decisions made by the implementation.

===== [#50638877_pgfId-1008233]##State Management Considerations for the Custom Component Author

[#50638877_pgfId-1008283]##Since the component developer cannot know
what the state saving method will be at runtime, they must be aware of
state management. As shown in link:JSF.htm#50638853_10300[See The
javax.faces.component package], all JSF components implement the
_StateHolder_ interface. As a consequence the standard components
provide implementations of _PartialStateHolder_ to suit their needs.
[P1-start-componentStateHolder]A custom component that extends
_UIComponent_ directly, and does not extend any of the standard
components, must implement _PartialStateHolder_ (or its older
super-interface, _StateHolder_ ), manually. The helper class
_StateHelper_ exists to simplify this process for the custom component
author. [P1-end]Please see _link:JSF.htm#50638851_PartialStateHolder[See
PartialStateHolder]_ or link:JSF.htm#50638851_95437[See StateHolder] for
details.

[#50638877_pgfId-1008320]##A custom component that does extend from one
of the standard components and maintains its own state, in addition to
the state maintained by the superclass must take special care to
implement _StateHolder_ or _PartialStateHolder_ correctly.
[P1-start-saveState]Notably, calls to _saveState()_ must not alter the
state in any way.[P1-end] The subclass is responsible for saving and
restoring the state of the superclass. Consider this example. My custom
component represents a “slider” ui widget. As such, it needs to keep
track of the maximum value, minimum value, and current values as part of
its state.

[#50638877_pgfId-1008321]##public class Slider extends UISelectOne \{

[#50638877_pgfId-1008322]## protected Integer min = null;

[#50638877_pgfId-1008323]## protected Integer max = null;

[#50638877_pgfId-1008324]## protected Integer cur = null;

[#50638877_pgfId-1008325]## 

[#50638877_pgfId-1008326]##// ... details omitted

[#50638877_pgfId-1008327]##public Object saveState(FacesContext context)
\{

[#50638877_pgfId-1008328]## Object values[] = new Object[4];

[#50638877_pgfId-1008329]## values[0] = super.saveState(context);

[#50638877_pgfId-1008330]## values[1] = min;

[#50638877_pgfId-1008331]## values[2] = max;

[#50638877_pgfId-1008332]## values[3] = cur;

[#50638877_pgfId-1008333]##}

[#50638877_pgfId-1008334]## 

[#50638877_pgfId-1008335]##public void restoreState(FacesContext
context, Object state) \{

[#50638877_pgfId-1008336]## Object values[] = (Object \{}) state; //
guaranteed to succeed

[#50638877_pgfId-1008337]## super.restoreState(context, values[0]);

[#50638877_pgfId-1008338]## min = (Integer) values[1];

[#50638877_pgfId-1008339]## max = (Integer) values[2];

[#50638877_pgfId-1008340]## cur = (Integer) values[3];

[#50638877_pgfId-1008341]##}

[#50638877_pgfId-1008342]##Note that we call _super.saveState()_ and
_super.restoreState()_ as appropriate. This is absolutely vital! Failing
to do this will prevent the component from working.

===== [#50638877_pgfId-1008343]##State Management Considerations for the JSF Implementor

[#50638877_pgfId-1008344]##The intent of the state management facility
is to make life easier for the page author, app assembler, and component
author. However, the complexity has to live somewhere, and the JSF
implementor is the lucky role. Here is an overview of the key players.
Please see the javadocs for each individual class for more information.

====== [#50638877_pgfId-1021365]##Key Players in State Management

[#50638877_pgfId-1021366]## _StateHelper_ the helper class that defines
a _Map_ -like contract that makes it easier for components to implement
_PartialStateHolder_ .

[#50638877_pgfId-1021367]## _ViewHandler_ the entry point to the state
management system. Uses a helper class, _StateManager_ , to do the
actual work. In the JSP case, delegates to the tag handler for the
_<f:view>_ tag for some functionality.

[#50638877_pgfId-1008347]## _StateManager_ abstraction for the hard work
of state saving. Uses a helper class, _ResponseStateManager_ , for the
rendering technology specific decisions.

[#50638877_pgfId-1008348]## _ResponseStateManager_ abstraction for
rendering technology specific state management decisions.

[#50638877_pgfId-1008349]## _UIComponent_ directs process of saving and
restoring individual component state.

==== [#50638877_pgfId-1012449]##[#50638877_40833]##Resource Handling

[#50638877_pgfId-1012453]##This section only applies to pages written
using Facelets for JSF 2 and later. link:JSF.htm#50638877_44233[See
Resource Handling] is the starting point for the normative specification
for Resource Handling. This section gives a non-normative overview of
the feature. The following steps walk through the points in the
lifecycle where this feature is encountered. Consider a Faces web
application that contains resources that have been packaged into the
application as specified in link:JSF.htm#50638877_65086[See Packaging
Resources]. Assume each page in the application includes references to
resources, specifically scripts and stylesheets. The first diagram in
this chapter is helpful in understanding this example.

[#50638877_pgfId-1012468]##Consider an initial request to the
application.

[#50638877_pgfId-1012469]##The _ViewHandler_ calls
_ViewDeclarationLanguage.buildView()_ . This ultimately causes the
_processEvent()_ method for the _javax.faces.resource.Script_ and
_javax.faces.resource.Stylesheet_ renderers (which implement
_ComponentSystemEventListener)_ to be called after each component that
declares them as their renderer is added to the view. This method is
specified to take actions that cause the resource to be rendered at the
correct part in the page based on user-specified or application
invariant rules. Here’s how it works.

[#50638877_pgfId-1012486]##Every _UIComponent_ instance in a view is
created with a call to some variant of _Application.createComponent()_ .
The specification for this method now includes some annotation
processing requirements. If the component or its renderer has an
_@ListenerFor_ or _@ListenersFor_ annotation, and the _Script_ and
_Stylesheet_ renderers must, the component or its renderer are added as
a component scoped listener for the appropriate event. In the case of
_Script_ and _Stylesheet_ renderers, they must listen for the
_PostAddToViewEvent_ .

[#50638877_pgfId-1012490]##When the _processEvent()_ method is called on
a _Script_ or _Stylesheet_ renderer, the renderer takes the specified
action to move the component to the proper point in the tree based on
what kind of resource it is, and on what hints the page author has
declared on the component in the view.

[#50638877_pgfId-1012496]##The _ViewHandler_ calls
_ViewDeclarationLanguage.renderView()_ . The view is traversed as normal
and because the components with _Script_ and _Stylesheet_ renderers have
already been reparented to the proper place in the view, the normal
renderering causes the resource to be encoded as described in
link:JSF.htm#50638877_Rendering%20Resources[See Rendering Resources].

[#50638877_pgfId-1012506]##The browser then parses the completely
rendered page and proceeds to issue subsequent requests for the
resources included in the page.

[#50638877_pgfId-1012519]##Now consider a request from the browser for
one of those resources included in the page.

[#50638877_pgfId-1012523]##The request comes back to the Faces server.
The _FacesServlet_ is specified to call
_ResourceHandler.isResourceRequest()_ as shown in the diagram in
link:JSF.htm#50638877_19735[See Faces Request Generates Faces Response].
In this case, the method returns _true_ . The _FacesServlet_ is
specified to call _ResourceHandler.handleResourceRequest()_ to serve up
the bytes of the resource.

==== [#50638877_pgfId-1012556]##[#50638877_92607]##View Parameters

[#50638877_pgfId-1012683]##This section only applies to pages written
using Facelets for JSF 2 and later. The normative specification for this
feature is spread out across several places, including the View
Declaration Language Documentation for the _<f:metadata>_ element, the
javadocs for the _UIViewParameter_ , _ViewHandler_ , and
_ViewDeclarationLanguage_ classes, and the spec language requirements
for the default _NavigationHandler_ and the Request Processing
Lifecycle. This leads to a very diffuse field of specification
requirements. To aid in understanding the feature, this section provides
a non-normative overview of the feature. The following steps walk
through the points in the lifecycle where this feature is encountered.
Consider a web application that uses this feature exclusively on every
page. Therefore every page has the following features in common.

[#50638877_pgfId-1012688]##Every page has an _<f:metadata>_ tag, with at
least one _<f:viewParameter>_ element within it.

[#50638877_pgfId-1012692]##Every page has at least one _<h:link>_ or <
_h:button>_ with the appropriate parameters nested within it.

[#50638877_pgfId-1012693]##No other kind of navigation components are
used in the application.

[#50638877_pgfId-1012684]##Consider an initial request to the
application.

[#50638877_pgfId-1012631]##As specified in section
link:JSF.htm#50638877_45193[See Restore View], the restore view phase of
the request processing lifecycle detects that this is an initial request
and tries to obtain the _ViewDeclarationLanguage_ instance from the
_ViewHandler_ for this _viewId_ . Because every page in the app is
written in Facelets for JSF 2.0, there is a _ViewDeclarationLanguage_
instance. Restore view phase calls
_ViewDeclarationLanguage.getViewMetadata()_ . Because every view in this
particular app does have _<f:metadata>_ on every page, this method
returns a _ViewMetadata_ instance. Restore view phase calls
_MetaData.createMetadataView()_ . This method creates a _UIViewRoot_
containing only children declared in the _<f:metadata>_ element. Restore
view phase calls _ViewMetadata.getViewParameters()_ . Because every
_<f:metadata>_ in the app has at least one _<f:viewParameter>_ element
within it, this method returns a non empty _Collection<UIViewParameter>_
. Restore view phase uses this fact to decide that the lifecycle must
not skip straight to render response, as is the normal action taken on
initial requests.

[#50638877_pgfId-1012668]##The remaining phases of the request
processing lifecycle execute: apply request values, process validations,
update model values, invoke application, and finally render response.
Because the view only contains _UIViewParameter_ children, only these
children are traversed during the lifecycle, but because this is an
initial request, with no query parameters, none of these compnents take
any action during the lifecycle.

[#50638877_pgfId-1012687]##Because the pages exclusively use _<h:link>_
and _<h:button>_ for their navigation, the renderers for these
components are called during the rendering of the page. As specified in
the renderkit docs for the renderers for those components, markup is
rendered that causes the browser to issue a GET request with query
parameters.

[#50638877_pgfId-1012697]##Consider when the user clicks on a link in
the application. The browser issues a GET request with query parameters

[#50638877_pgfId-1012701]##Restore view phase takes the same action as
in the previously explained request. Because this is a GET request, no
state is restored from the previous request.

[#50638877_pgfId-1012705]##Because this is a request with query
parameters, the _UIViewParameter_ children do take action when they are
traversed during the normal lifecycle, reading values during the apply
request values phase, doing conversion and processing validators
attached to the _<f:viewParam>_ elements, if any, and updating models
during the update model values phase. Because there are only _<h:link>_
and _<h:button>_ navigation elements in the page, no action action will
happen during the invoke application phase. The response is re-rendered
as normal. In such an application, the only navigation to a new page
happens by virtue of the browser issuing a GET request to a different
viewId.

==== [#50638877_pgfId-1012711]##[#50638877_13018]##Bookmarkability

[#50638877_pgfId-1012734]##Prior to JSF 2, every client server
interaction was an HTTP POST. While this works fine in many situations,
it does not work well when it comes to bookmarking pages in a web
application. Version 2 of the specification introduces bookmarking
capability with the use of two new Standard HTML RenderKit additions.

[#50638877_pgfId-1012990]##Provided is a new component (UIOutcomeTarget)
that provides properties that are used to produce a hyperlink at render
time. The component can appear in the form of a button or a link. This
feature introduces a concept known as “preemptive navigation”, which
means the target URL is determined at Render Response time - before the
user has activated the component. This feature allows the user to
leverage the navigation model while also providing the ability to
generate bookmarkable non-faces requests.

==== [#50638877_pgfId-1012715]##[#50638877_99953]##JSR 303 Bean Validation

{empty}[#50638877_pgfId-1012726]##Version 2 of the specification
introduces support for JSR 303 Bean Validation.
[p1-beanValidationRequired]A JSF implentation must support JSR 303 Bean
Validation if the environment in which the JSF runtime is included
requires JSR 303 Bean Validation. Currently the only such environment is
when JSF is included in a Java EE 6 runtime.[p1-end]

[#50638877_pgfId-1012894]##A detailed description of the usage of Bean
Validation with JSF is beyond the scope of this section, but this
section will provide a brief overview of the feature, touching on the
points of interest to a spec implementor. Consider a simple web
application that has one page, written in Facelets for JSF 2, that has a
several text fields inside of a form. This application is running in a
JSF runtime in an environment that does require JSR 303 Bean Validation,
and therefore this feature is available. Assume that every text field is
bound to a managed bean property that has at least one Bean Validation
constraint annotation attached to it.

[#50638877_pgfId-1012906]##During the render response phase that always
precedes a postback, due to the specification requirements in
link:JSF.htm#50638851_63282[See Validation Registration], every
_UIInput_ in this application has an instance of _Validator_ with id
_javax.faces.Bean_ attached to it.

[#50638877_pgfId-1013450]##During the process validations phase, due to
the specification for the _validate()_ method of this _Validator_ , Bean
Validation is invoked automatically, for the user specified validation
constraints, whenever such components are normally validated. The
_javax.faces.Bean_ standard validator also ensures that every
_ConstraintViolation_ that resulted in attempting to validate the model
data is wrapped in a _FacesMessage_ and added to the _FacesContext_ as
normal with every other kind of validator.

[#50638877_pgfId-1013453]##See also link:JSF.htm#50638851_65936[See Bean
Validation Integration].

==== [#50638877_pgfId-1012754]##[#50638877_86284]##Ajax

[#50638877_pgfId-1012999]##JSF and Ajax have been working well together
for a number of years. this has led to the sprouting of many JSF Ajax
frameworks. Although many of these frameworks may appear different, they
all contribute to a dynamic request response experience. The variations
in the way these frameworks provide that experience causes component
compatibility problems when using components from different libraries
together in the same web application.

[#50638877_pgfId-1013006]##JSF 2 introduces Ajax into the specification,
and it builds upon important concepts from a variety of existing JSF
Ajax frameworks. The specification introduces a JavaScript library for
performing basic Ajax operations. The library helps define a standard
way of sending an Ajax request, and processing an Ajax response, since
these are problem areas for component compatability. The specification
provides two ways of adding Ajax to JSF web applications. Page authors
may use the JavaScript library directly in their pages by attaching the
Ajax request call to a JSF component via a JavaScript event (such as
onclick). They may also take a more declarative aproach and use a core
Facelets tag (<f:ajax/>) that they can nest within JSF components to
“Ajaxify” them. It is also possible to “Ajaxify” regions of a page by
“wrapping” the tag around component groups.

[#50638877_pgfId-1013021]##The server side aspects of JSF Ajax
frameworks work with the standard JSF lifecycle. In addition to
providing a standard page authoring experience, the specification also
standardizes the server side processing of Ajax requests. Selected
components in a JSF view can be priocessed (known as partial processing)
and selected components can be rendered to the client (known as partial
rendering).

==== [#50638877_pgfId-1012864]##[#50638877_35970]##Component Behaviors

[#50638877_pgfId-1012868]##The JSF 2 specification introduces a new type
of attached object known as component behaviors. Component behaviors
play a similar role to converters and validators in that they are
attached to a component instance in order to enhance the component with
additional functionality not defined by the component itself. While
converters and validators are currently limited to the server-side
request processing lifecycle, component behaviors have impact that
extends to the client, within the scope of a particular instance
component in a view. In particular, the _ClientBehavior_ interface
defines a contract for behaviors that can enhance a component's rendered
content with behavior-defined "scripts". These scripts are executed on
the client in response to end user interaction, but can also trigger
postbacks back into the JSF request processing lifecycle.

[#50638877_pgfId-1013061]##The usage pattern for client behaviors is as
follows:

[#50638877_pgfId-1013066]##The page author attaches a client behavior to
a component, typically by specifying a behavior tag as a child of a
component tag.

[#50638877_pgfId-1013074]##When attaching a client behavior to a
component, the page author identifies the name of a client "event" to
attach to. The set of valid events are defined by the component.

[#50638877_pgfId-1013079]##At render time, the component (or renderer)
retrieves the client behavior and asks it for its script.

[#50638877_pgfId-1013094]##The component (or renderer) renders this
script at the appropriate location in its generated content (eg.
typically in a DOM event handler).

[#50638877_pgfId-1013095]##When the end user interacts with the
component's content in the browser, the behavior-defined script is
executed in response to the page author-specified event.

[#50638877_pgfId-1013103]##The script provides some client-side
interaction, for example, hiding or showing content or validating input
on the client, and possibly posts back to the server.

[#50638877_pgfId-1013108]##The first client behavior provided by the JSF
specification is the _AjaxBehavior_ . This behavior is exposed to a page
author as a Facelets _<f:ajax>_ tag, which can be embedded within any of
the standard HTML components as follows:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1013127]## <h:commandButton>

[#50638877_pgfId-1013128]## <f:ajax event="mouseover"/>

[#50638877_pgfId-1013118]## </h:commandButton>

|===

[#50638877_pgfId-1013132]##When activated in response to end user
activity, the _<f:ajax>_ client behavior generates an Ajax request back
into the JSF request processing lifecycle.

[#50638877_pgfId-1013139]##The component behavior framework is
extensible and allows developers to define custom behaviors and also
allows component authors to enhance custom components to work with
behaviors.

==== [#50638877_pgfId-1013096]##System Events

[#50638877_pgfId-1012876]##System Events are normatively specified in
link:JSF.htm#50638851_52454[See System Events]. This section provides an
overview of this feature as it relates to the lifecycle.

[#50638877_pgfId-1012959]##System events expand on the idea of lifecycle
_PhaseEvent_ s. With _PhaseEvent_ s, it is possible to have application
scoped _PhaseListeners_ that are given the opportunity to act on the
system before and after each phase in the lifecycle. System events
provide a much more fine grained insight into the system, allowing
application or component scoped listeners to be notified of a variety of
kinds of events. The set of events supported in the core specification
is given in link:JSF.htm#50638851_3.4.3.1%20Event%20Classes[See Event
Classes]. To accomodate extensibility, users may define their own kinds
of events.

[#50638877_pgfId-1012963]##The system event feature is a simple
publish/subscribe event model. There is no event queue, events are
published immediately, and always with a call to
_Application.publishEvent()_ . There are several ways to declare
interest in a particular kind of event.

[#50638877_pgfId-1012967]##Call _Application.subscribeToEvent()_ to add
an application scoped listener.

[#50638877_pgfId-1012975]##Call _UIComponent.subscribeToEvent()_ to add
a component scoped listener.

[#50638877_pgfId-1012977]##Use the _<f:event>_ tag to declare a
component scoped listener.

[#50638877_pgfId-1012982]##Use the _@ListenerFor_ or _@ListenersFor_
annotation. The scope of the listener is determined by the code that
processes the annotation.

[#50638877_pgfId-1012983]##Use the _<system-event-listener>_ element in
an application configuration resource to add an application scoped
listener.

[#50638877_pgfId-1012943]##This feature is conceptually related to the
lifecycle because there are calls to _Application.publishEvent()_
sprinkled throughout the code that gets executed when the lifecycle
runs.

=== [#50638877_pgfId-1012639]##

image:JSF-12.gif[image]

[#50638877_44233]##Resource Handling

====== [#50638877_pgfId-1012636]##As shown in the diagram in link:JSF.htm#50638877_19735[See Faces Request Generates Faces Response], [P1-start isResourceRequest rules] the JSF run-time must determine if the current Faces Request is a _Faces Resource Reques_ t or a _View Request_ . This must be accomplished by calling _Application.getResourceHandler().isResourceRequest()_ . [P1-end] Most of the normative specification for resource handling is contained in the Javadocs for _ResourceHandler_ and its related classes. This section contains the specification for resource handling that fits best in prose, rather than in Javadocs.

==== [#50638877_pgfId-1009004]##[#50638877_65086]##Packaging Resources

[#50638877_pgfId-1010087]##ResourceHandler defines a path based
packaging convention for resources. The default implementation of
ResourceHandler must support packaging resources in the web application
root or in the classpath, according to the following specification.Other
implementations of ResourceHandler are free to package resources however
they like.

===== [#50638877_pgfId-1010110]##[#50638877_33963]##Packaging Resources into the Web Application Root

[#50638877_pgfId-1010107]##[P1-start web app packaging ] The default
implementation must support packaging resources in the web application
root under the path

[#50638877_pgfId-1010095]## _resources/<resourceIdentifier_ >

[#50638877_pgfId-1010127]##relative to the web app root. Resources
packaged into the web app root must be accessed using the
_getResource*()_ methods on _ExternalContext._ [P1-end] __

===== [#50638877_pgfId-1010121]##[#50638877_63077]##Packaging Resources into the Classpath

[#50638877_pgfId-1010089]##[P1-start classpath packaging ]For the
default implementation, resources packaged in the classpath must reside
under the JAR entry name:

[#50638877_pgfId-1009013]## _META-INF/resources/<resourceIdentifier>_

{empty}[#50638877_pgfId-1010140]##Resources packaged into the classpath
must be accessed using the _getResource*()_ methods of the _ClassLoader_
obtained by calling the _getContextClassLoader()_ method of the curreth
_Thread_ .[P1-end]

===== [#50638877_pgfId-1010153]##[#50638877_95265]##Resource Identifiers

[#50638877_pgfId-1009021]## _<resourceIdentifier>_ consists of several
segments, specified as follows.

{empty}[#50638877_pgfId-1009775]##[P1-start requirements for something
to be considered a valid resourceIdentifier]

[#50638877_pgfId-1009774]##
_[localePrefix/][libraryName/][libraryVersion/]resourceName[/resourceVersion]_

[#50638877_pgfId-1009025]##The run-time must enforce the following rules
to consider a _<resourceIdentifier>_ valid. A _<resourceIdentifier>_
that does not follow these rules must not be considered valid and must
be ignored silently.

[#50638877_pgfId-1009029]##The set of characters that are valid for use
in the _localePrefix_ , _libraryName_ , _libraryVerison_ ,
_resourceName_ and _resourceVersion_ segments of the resource identifier
is specififed as XML NameChar excluding the path separator and ‘:’
characters. The specification for XML NameChar may be seen at
_http://www.w3.org/TR/REC-xml/#NT-NameChar_ .

[#50638877_pgfId-1013366]##A further restriction applies to
_libraryName_ . A _libraryName_ must not be an underscore separated
sequence of non-negative integers or a locale string. More rigorously, a
_libraryName_ must not match either of the following regular
expressions:

[#50638877_pgfId-1013369]## _[0-9]+(_[0-9]+)*_

[#50638877_pgfId-1013377]## _[A-Za-z]\{2}(_[A-Za-z]\{2}(_[A-Za-z]+)*)?_

[#50638877_pgfId-1012026]##Segments in square brackets [] are optional.

[#50638877_pgfId-1009030]##The segments must appear in the order shown
above.

[#50638877_pgfId-1009035]##If _libraryVersion_ is present, it must be
preceded by _libraryName._

[#50638877_pgfId-1010660]##If _libraryVersion_ is present, any leaf
files under _libraryName_ must be ignored. __

[#50638877_pgfId-1009038]##If _resourceVersion_ is present, it must be
preceded by _resourceName._

[#50638877_pgfId-1009041]##There must be a ’ _/_ ’ between adjacent
segments in a _<resourceIdentifier>_

[#50638877_pgfId-1009044]##If _libraryVersion_ or _resourceVersion_ are
present, both must be a ’ ___ ’ separated list of integers, neither
starting nor ending with ’ ___ ’

[#50638877_pgfId-1010675]##If _resourceVersion_ is present, it must be a
version number in the same format as _libraryVersion_ . An optional
“file extension” may be used with the _resourceVersion._ If “file
extension” is used, a “.” character, followed by a “file extension” must
be appended to the version number. See the following table for an
example.

{empty}[#50638877_pgfId-1009778]##[P1-end]

[#50638877_pgfId-1009097]##The following examples illustrate the nine
valid combinations of the above resource identifier segments.

[width="99%",cols="16%,14%,14%,14%,14%,14%,14%",]
|===
a|
[#50638877_pgfId-1009558]##localePrefx

{empty}[#50638877_pgfId-1009559]##[optional]

a|
[#50638877_pgfId-1009561]##libraryName

{empty}[#50638877_pgfId-1009562]##[optional]

a|
[#50638877_pgfId-1009564]##library

{empty}[#50638877_pgfId-1009699]##Version [optional]

a|
[#50638877_pgfId-1009566]##resourceName

{empty}[#50638877_pgfId-1009700]##[required]

a|
[#50638877_pgfId-1009568]##resource

{empty}[#50638877_pgfId-1009701]##Version [optional]

|[#50638877_pgfId-1009570]##Description
|[#50638877_pgfId-1009572]##actual resourceIdentifier

|[#50638877_pgfId-1009574]## __   |[#50638877_pgfId-1009576]## __  
|[#50638877_pgfId-1009578]## __   |[#50638877_pgfId-1009580]##
_duke.gif_ |[#50638877_pgfId-1009582]## __  
|[#50638877_pgfId-1009584]##A non-localized, non-versioned image
resource called " _duke.gif_ ", not in a library
|[#50638877_pgfId-1009586]## _duke.gif_

|[#50638877_pgfId-1009588]## __   |[#50638877_pgfId-1009590]##
_corporate_ |[#50638877_pgfId-1009592]## __  
|[#50638877_pgfId-1009594]## _duke.gif_ |[#50638877_pgfId-1009596]## __
  |[#50638877_pgfId-1009598]##A non-localized, non-versioned image
resource called " _duke.gif_ " in a library called " _corporate_ "
|[#50638877_pgfId-1009600]## _corporate/duke.gif_

|[#50638877_pgfId-1009602]## __   |[#50638877_pgfId-1009604]##
_corporate_ |[#50638877_pgfId-1009606]## _2_3_
|[#50638877_pgfId-1009608]## _duke.gif_ |[#50638877_pgfId-1009610]## __
  |[#50638877_pgfId-1009612]##A non-localized, non-versioned image
resource called " _duke.gif_ ", in version _2_3_ of the " _corporate_ "
library |[#50638877_pgfId-1009614]## _corporate/2_3/duke.gif_

|[#50638877_pgfId-1009616]## __   |[#50638877_pgfId-1009618]## _basic_
|[#50638877_pgfId-1009620]## _2_3_ |[#50638877_pgfId-1009622]##
_script.js_ |[#50638877_pgfId-1009624]## _1_3_4.js_ a|
[#50638877_pgfId-1009626]##A non-localized, version _1.3.4_ script
resource called " _script.js_ ", in versioned _2_3_

[#50638877_pgfId-1009710]##library called " _basic_ ".

|[#50638877_pgfId-1009628]## _basic/2_3/script.js/1_3_4.js_

|[#50638877_pgfId-1009630]## _de_ |[#50638877_pgfId-1009632]## __  
|[#50638877_pgfId-1009634]## __   |[#50638877_pgfId-1009636]##
_header.css_ |[#50638877_pgfId-1009638]## __  
|[#50638877_pgfId-1009640]##A non-versioned style resource called "
_header.css"_ localized for locale " _de_ " |[#50638877_pgfId-1009642]##
_de/header.css_

|[#50638877_pgfId-1009644]## _de_AT_ |[#50638877_pgfId-1009646]## __  
|[#50638877_pgfId-1009648]## __   |[#50638877_pgfId-1009650]##
_footer.css_ |[#50638877_pgfId-1009652]## _1_4_2.css_
|[#50638877_pgfId-1009654]##Version _1_4_2_ of style resource "
_footer.css_ ", localized for locale " _de_AT_ "
|[#50638877_pgfId-1009656]## _de_AT/footer.css/1_4_2.css_

|[#50638877_pgfId-1009658]## _zh_ |[#50638877_pgfId-1009660]##
_extraFancy_ |[#50638877_pgfId-1009662]## __  
|[#50638877_pgfId-1009664]## _menu-bar.css_ |[#50638877_pgfId-1009666]##
_2_4.css_ |[#50638877_pgfId-1009668]##Version _2_4_ of style resource
called, " _menu-bar.css_ " in non-versioned library, " _extraFancy_ ",
localized for locale " _zh_ " |[#50638877_pgfId-1009670]##
_zh/extraFancy/menu-bar.css/2_4.css_

|[#50638877_pgfId-1009672]## _ja_ |[#50638877_pgfId-1009674]## _mild_
|[#50638877_pgfId-1009676]## _0_1_ |[#50638877_pgfId-1009678]##
_ajaxTransaction.js_ |[#50638877_pgfId-1009680]## __  
|[#50638877_pgfId-1009682]##Non-versioned script resource called, "
_ajaxTransaction.js_ ", in version _0_1_ of library called " _mild_ ",
localized for locale " _ja_ " |[#50638877_pgfId-1009684]##
_ja/mild/0_1/ajaxTransaction.js_

|[#50638877_pgfId-1009686]## _de_ch_ |[#50638877_pgfId-1009688]##
_grassy_ |[#50638877_pgfId-1009690]## _1_0_ |[#50638877_pgfId-1009692]##
_bg.png_ |[#50638877_pgfId-1009694]## _1_0.png_
|[#50638877_pgfId-1009696]##Version _1_0_ of image resource called "
_bg.png_ ", in version _1_0_ of library called " _grassy_ " localized
for locale " _de_ch_ " |[#50638877_pgfId-1009698]##
_de_ch/grassy/1_0/bg.png/1_0.png_
|===

[#50638877_pgfId-1009246]##

===== [#50638877_pgfId-1009724]##[#50638877_79794]##Libraries of Localized and Versioned Resources

[#50638877_pgfId-1009780]##An important feature of the resource handler
is the ability for resources to be localized, versioned, and collected
into libraries. The localization and versioning scheme is completely
hidden behind the API of _ResourceHandler_ and _Resource_ and is not
exposed in any way to the JSF run-time.

[#50638877_pgfId-1011957]##[P1-start resource versioning] The default
implementation of _ResourceHandler.createResource()_ , for all variants
of that method, must implement the following to discover which actual
resource will be encapsulated within the returned _Resource_ instance.
An implementation may perform caching of the resource metadata to
improve performance if the _ProjectStage_ is _ProjectStage.Production_ .

[#50638877_pgfId-1023091]##Using the _resourceName_ and _libraryName_
arguments to _createResource()_ , and the resource packaging scheme
specified in link:JSF.htm#50638877_33963[See Packaging Resources into
the Web Application Root], link:JSF.htm#50638877_63077[See Packaging
Resources into the Classpath], and link:JSF.htm#50638877_95265[See
Resource Identifiers], discover the file or entry that contains the
bytes of the resource. If there are multiple versions of the same
library, and _libraryVersion_ is not specified, the library with the
highest version is chosen. If there are multiple versions of the same
resource, and _resourceVersion_ is not specified, the resource with the
highest version is chosen. The algorithm is specified in pseudocode.

[#50638877_pgfId-1023102]##function createResource(resourceName,
libraryName) \{ +
var resource = null; +
var resourceId = null; +
for (var contract : getLibraryContracts()) \{ +
resourceId = deriveResourceIdConsideringResourceLoaders(contract,
resourceName, libraryName) +
if (null != resourceId) \{ +
resource = create the resource using the resourceId; +
return resource; +
} +
} +
 +
// try without a contract +
resourceId = deriveResourceIdConsideringResourceLoaders(null,
resourceName, libraryName) +
if (null != resourceId) \{ +
resource = create the resource using the resourceId; +
} +
return resource; +
} +
 +
function deriveResourceIdConsideringResourceLoaders(contract,
resourceName, libraryName) \{ +
var prefix = web app root resource prefix; +
var resourceLoader = web app resource loader; +
// these are shorthand for the prefix and resource loading +
// facility specified in Section 2.6.1.1. They are +
// not actual API per se. +
var resourceId = deriveResourceIdConsideringLocalePrefix(contract,
prefix, resourceLoader, resourceName, libraryName); +
 +
if (null == resourceId) \{ +
prefix = classpath resource prefix; +
resourceLoader = classpath resource loader; +
// these are shorthand for the prefix and resource +
// loading facility specified in Section 2.6.1.2. They are +
// not actual API per se. +
resourceId = deriveResourceIdConsideringLocalePrefix(contract, prefix,
resourceLoader, resourceName, libraryName); +
} +
return resourceId; +
} +
 +
function deriveResourceIdConsideringLocalePrefix(contract, prefix,
resourceLoader, resourceName, libraryName) \{ +
var localePrefix = getLocalePrefix(); +
var result = deriveResourceId(contract, prefix, resourceLoader,
resourceName, libraryName, localePrefix); +
// If the application has been configured to have a localePrefix, and
the resource +
// is not found, try to find it again, without the localePrefix. +
if (null == result && null != localePrefix) \{ +
result = deriveResourceId(contract, prefix, resourceLoader,
resourceName, libraryName, null); +
} +
return result; +
} +
 +
function deriveResourceId(contract, prefix, resourceLoader, +
resourceName, libraryName, localePrefix) \{ +
var resourceVersion = null; +
var libraryVersion = null; +
var resourceId; +
if (null != localePrefix) \{ +
prefix = localePrefix + '/' + prefix; +
} +
if (null != contract) \{ +
prefix = contract + '/' + prefix; +
} +
 +
if (null != libraryName) \{ +
// actual argument is
resourcesInContractInJar/resources/resourcesInContractInJar +
var libraryPaths = resourceLoader.getResourcePaths( +
prefix + '/' + libraryName); +
 +
if (null != libraryPaths && !libraryPaths.isEmpty()) \{ +
libraryVersion = // execute the comment +
// Look in the libraryPaths for versioned libraries. +
// If one or more versioned libraries are found, take +
// the one with the highest version number as the value +
// of libraryVersion. If no versioned libraries +
// are found, let libraryVersion remain null. +
} +
if (null != libraryVersion) \{ +
libraryName = libraryName + '/' + libraryVersion; +
} +
var resourcePaths = resourceLoader.getResourcePaths( +
prefix + '/' + libraryName + '/' + resourceName); +
if (null != resourcePaths && !resourcePaths.isEmpty()) \{ +
resourceVersion = // execute the comment +
// Look in the resourcePaths for versioned resources. +
// If one or more versioned resources are found, take +
// the one with the â€œhighestâ€? version number as the value +
// of resourceVersion. If no versioned libraries +
// are found, let resourceVersion remain null. +
} +
if (null != resourceVersion) \{ +
resourceId = prefix + '/' + libraryName + '/' + +
resourceName + '/' + resourceVersion; +
} +
else \{ +
resourceId = prefix + '/' + libraryName + '/' + resourceName; +
} +
} // end of if (null != libraryName) +
else \{ +
// libraryName == null +
var resourcePaths = resourceLoader.getResourcePaths( +
prefix + '/' + resourceName); +
if (null != resourcePaths && !resourcePaths.isEmpty()) \{ +
resourceVersion = // execute the comment +
// Look in the resourcePaths for versioned resources. +
// If one or more versioned resources are found, take +
// the one with the â€œhighestâ€? version number as the value +
// of resourceVersion. If no versioned libraries +
// are found, let resourceVersion remain null. +
} +
if (null != resourceVersion) \{ +
resourceId = prefix + '/' + resourceName + '/' + +
resourceVersion; +
} else \{ +
resourceId = prefix + '/' + resourceName; +
} +
} // end of else, when libraryName == null +
return resourceId; +
} +
 +
function getLocalePrefix() \{ +
var localePrefix; +
var appBundleName = facesContext.application.messageBundle; +
if (null != appBundleName) \{ +
var locale = +
// If there is a viewRoot on the current facesContext, use its locale. +
// Otherwise, use the locale of the application's ViewHandler +
ResourceBundle appBundle = ResourceBundle.getBundle( +
appBundleName, locale); +
localePrefix = appBundle.getString(ResourceHandler. LOCALE_PREFIX); +
} +
// Any MissingResourceException instances that are encountered +
// in the above code must be swallowed by this method, and null +
// returned; +
return localePrefix; +
}

{empty}[#50638877_pgfId-1010629]##[P1-end]

==== [#50638877_pgfId-1010754]##[#50638877_Rendering Resources]##Rendering Resources

[#50638877_pgfId-1011288]##Resources such as images, stylesheets and
scripts use the resource handling mechanism as outlined in
link:JSF.htm#50638877_65086[See Packaging Resources]. So, for example:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1011306]##<h:graphicImage name=”Planets.gif”
library=”images”/>

[#50638877_pgfId-1011307]##<h:graphicImage
value=”#\{resource[‘images:Planets.gif’]}”/>

|===

[#50638877_pgfId-1011303]##These entries render exactly the same markup.
In addition to using the name and library attributes, stylesheet and
script resources can be “relocated” to other parts of the view. For
example, we could specify that a script resource be rendered within an
HTML “head”, “body” or “form” element in the page.

===== [#50638877_pgfId-1010845]##[#50638877_Relocatable Resources]##Relocatable Resources

[#50638877_pgfId-1010846]##Relocatable resources are resources that can
be told where to render themselves, and this rendered location may be
different than the resource tag placement in the view. For example, a
portion of the view may be described in the view declaration language as
follows:

[#50638877_pgfId-1010864]##<f:view contentType="text/html">

[#50638877_pgfId-1010872]##<h:head>

[#50638877_pgfId-1010891]##<meta http-equiv="Content-Type"
content="text/html;

[#50638877_pgfId-1010905]##charset=iso-8859-1" />

[#50638877_pgfId-1010912]##<title>Example View</title>

[#50638877_pgfId-1010916]##</h:head>

[#50638877_pgfId-1010923]##<h:body>

[#50638877_pgfId-1010924]##<h:form>

[#50638877_pgfId-1010937]##<h:outputScript name=”ajax.js”
library=”javax.faces”

[#50638877_pgfId-1010941]##target=”head”/>

[#50638877_pgfId-1010945]##</h:form>

[#50638877_pgfId-1010958]##</h:body>

[#50638877_pgfId-1011116]##</f:view>

[#50638877_pgfId-1011157]##The <h:outputScript> tag refers to the
renderer, ScriptRenderer, that listens for PostAddToViewEvent event
types:

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1011168]##@ListenerFor(facesEventClass=PostAddToViewEvent.class,

[#50638877_pgfId-1011172]##sourceClass=UIOutput.class)

[#50638877_pgfId-1011166]##public class ScriptRenderer extends Renderer
implements ComponentSystemEventListener \{...

|===

[#50638877_pgfId-1011158]##Refer to link:JSF.htm#50638851_80722[See
Event and Listener Model]. When the component for this resource is added
to the view, the ScriptRenderer processEvent method adds the component
to a facet (named by the target attribute) under the view root. using
the UIViewRoot component resource methods as described in
link:JSF.htm#50638853_Methods[See Methods].

[#50638877_pgfId-1011173]##The <h:head> and <h:body> tags refer to the
renderers HeadRenderer and BodyRenderer respectively. They are described
in the Standard HTML Renderkit documentation referred to in
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation].
During the rendering phase, the encode methods for these renderers
render the HTML “head” and “body” elements respectively. Then they
render all component resources under the facet child (named by target)
under the UIViewRoot using the UIViewRoot component resource methods as
described in link:JSF.htm#50638853_Methods[See Methods].

[#50638877_pgfId-1011232]##Existing component libraries (with existing
head and body components), that want to use this resource loading
feature must follow the rendering requirements described in
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation].

===== [#50638877_pgfId-1011253]##[#50638877_Resource Rendering Using Annotations]##Resource Rendering Using Annotations

[#50638877_pgfId-1011257]##Components and renderers may be declared as
requiring a resource using the @ResourceDependency annotation. The
implementation must scan for the presence of this annotation on the
component that was added to the List of child components. Check for the
presence of the annotation on the renderer for this component (if there
is a renderer for the component). The annotation check must be done
immediately after the component is added to the List. Refer to
link:JSF.htm#50638851_Head2[See Component Tree Manipulation]for detailed
information.

=== [#50638877_pgfId-1017874]##

image:JSF-12.gif[image]

[#50638877_78699]##Resource Library Contracts

[#50638877_pgfId-1019705]##[P1-start_contract_packaging]A resource
library contract is a resource library, as specified in the preceding
section, except that instead of residing in the _resources_ directory of
the web-app root, or in the _META-INF/resources_ JAR entry name in a JAR
file, it resides in the _contracts_ directory of the web-app root, or in
the _META-INF/contracts_ JAR entry name in a JAR file. When packaged in
a JAR file, there is one additional packaging requirement: each resource
library contract in the JAR must have a marker file. The name of the
file is given by the value of the symbolic constant
_javax.faces.application.ResourceHandler.RESOURCE_CONTRACT_XML_ . This
may be a zero length file, though future versions of the specification
may use the file to declare the usage contract. [P1-end] The requirement
to have a marker file enables implementations to optimize for faster
deployment while still enabling automatic discovery of the available
contracts.

[#50638877_pgfId-1020385]##Following is a listing of the entries in a
JAR file containing two resource library contracts.

[width="100%",cols="100%",]
|===
a|
[#50638877_pgfId-1019851]##META-INF/contracts/ +
siteLayout/ +
javax.faces.contract.xml +
topNav_template.xhtml +
leftNav_foo.xhtml +
styles.css +
script.js +
background.png

[#50638877_pgfId-1020308]## subSiteLayout/ +
javax.faces.contract.xml +
sub_template.xhtml

[#50638877_pgfId-1019854]## 

|===

[#50638877_pgfId-1019706]## 

[#50638877_pgfId-1020359]##All of the other packaging, encoding and
decoding requirements are the same as for resource libraries.

[#50638877_pgfId-1018549]##See link:JSF.htm#50638887_50816[See Resource
Library Contracts Background] for a non-normative overview of the
feature, including a brief usage example.

[#50638851_pgfId-1029727]##[#50638851_86901]## 

== [#50638851_pgfId-1029729]##

image:JSF-15.gif[image]

[#50638851_62197]##User Interface Component Model

image:JSF-16.gif[image]

[#50638851_pgfId-1022111]##A JSF _user interface component_ is the basic
building block for creating a JSF user interface. A particular component
represents a configurable and reusable element in the user interface,
which may range in complexity from simple (such as a button or text
field) to compound (such as a tree control or table). Components can
optionally be associated with corresponding objects in the data model of
an application, via _value expressions_ .

[#50638851_pgfId-1022112]##JSF also supports user interface components
with several additional helper APIs:

[#50638851_pgfId-1022113]## _Converters_ —Pluggable support class to
convert the markup value of a component to and from the corresponding
type in the model tier.

[#50638851_pgfId-1022114]## _Events and Listeners_ —An event broadcast
and listener registration model based on the design patterns of the
JavaBeans Specification, version 1.0.1.

[#50638851_pgfId-1029375]## _Validators_ —Pluggable support classes that
can examine the local value of a component (as received in an incoming
request) and ensure that it conforms to the business rules enforced by
each Validator. Error messages for validation failures can be generated
and sent back to the user during rendering.

[#50638851_pgfId-1029376]##The user interface for a particular page of a
JSF-based web application is created by assembling the user interface
components for a particular request or response into a _view_ . The view
is a tree of classes that implement _UIComponent_ . The components in
the tree have parent-child relationships with other components, starting
at the _root element_ of the tree, which must be an instance of
_UIViewRoot_ . Components in the tree can be anonymous or they can be
given a _component identifier_ by the framework user. Components in the
tree can be located based on _component identifiers_ , which must be
unique within the scope of the nearest ancestor to the component that is
a _naming container_ . For complex rendering scenarios, components can
also be attached to other components as _facets_ .

[#50638851_pgfId-1022117]##This chapter describes the basic architecture
and APIs for user interface components and the supporting APIs.

=== [#50638851_pgfId-1022118]##

image:JSF-17.gif[image]

UIComponent and UIComponentBase

[#50638851_pgfId-1022119]##The base abstract class for all user
interface components is _javax.faces.component.UIComponent_ . This class
defines the state information and behavioral contracts for all
components through a Java programming language API, which means that
components are independent of a rendering technology such as JavaServer
Pages (JSP). A standard set of components (described in
link:JSF.htm#50638853_30712[See Standard User Interface Components]”)
that add specialized properties, attributes, and behavior, is also
provided as a set of concrete subclasses.

[#50638851_pgfId-1022123]##Component writers, tool providers,
application developers, and JSF implementors can also create additional
_UIComponent_ implementations for use within a particular application.
To assist such developers, a convenience subclass,
_javax.faces.component.UIComponentBase_ , is provided as part of JSF.
This class provides useful default implementations of nearly every
_UIComponent_ method, allowing the component writer to focus on the
unique characteristics of a particular _UIComponent_ implementation.

[#50638851_pgfId-1022124]##The following subsections define the key
functional capabilities of JSF user interface components.

==== [#50638851_pgfId-1022131]##[#50638851_34611]##Component Identifiers

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022128]##public String getId();

[#50638851_pgfId-1022129]## 

[#50638851_pgfId-1022130]##public void setId(String componentId);

|===

[#50638851_pgfId-1022132]##[N/T-start may-component-identifier] Every
component may be named by a _component identifier_ that must conform to
the following rules:

[#50638851_pgfId-1022133]##They must start with a letter (as defined by
the _Character.isLetter()_ method).

[#50638851_pgfId-1022134]##Subsequent characters must be letters (as
defined by the _Character.isLetter()_ method), digits as defined by the
_Character.isDigit()_ method, dashes (‘-’), or underscores (‘_’).

[#50638851_pgfId-1022135]##[P1-end] To minimize the size of responses
generated by JavaServer Faces, it is recommended that component
identifiers be as short as possible.

[#50638851_pgfId-1022136]##If a component has been given an identifier,
it must be unique in the namespace of the closest ancestor to that
component that is a _NamingContainer_ (if any).

==== [#50638851_pgfId-1022137]##Component Type

[#50638851_pgfId-1022138]##While not a property of _UIComponent_ , the
_component-type_ is an important piece of data related to each
_UIComponent_ subclass that allows the _Application_ instance to create
new instances of _UIComponent_ subclasses with that type. Please see
link:JSF.htm#50638861_19251[See Object Factories] for more on
_component-type_ .

[#50638851_pgfId-1022142]##Component types starting with “javax.faces.”
are reserved for use by the JSF specification.

==== [#50638851_pgfId-1022146]##Component Family

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022145]##public String getFamily();
|===

[#50638851_pgfId-1022147]##Each standard user interface component class
has a standard value for the component family, which is used to look up
renderers associated with this component. Subclasses of a generic
UIComponent class will generally inherit this property from its
superclass, so that renderers who only expect the superclass will still
be able to process specialized subclasses.

[#50638851_pgfId-1022148]##Component families starting with
“javax.faces.” are reserved for use by the JSF specification.

==== [#50638851_pgfId-1022150]##[#50638851_91832]##ValueExpression properties

[#50638851_pgfId-1022151]##Properties and attributes of standard
concrete component classes may be _value expression enabled_ . This
means that, rather than specifying a literal value as the parameter to a
property or attribute setter, the caller instead associates a
_ValueExpression_ (see link:JSF.htm#50638862_51501[See ValueBinding])
whose _getValue()_ method must be called (by the property getter) to
return the actual property value to be returned if no value has been set
via the corresponding property setter. If a property or attribute value
has been set, that value must be returned by the property getter
(shadowing any associated value binding expression for this property).

[#50638851_pgfId-1022160]##Value binding expressions are managed with
the following method calls:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022157]##public ValueExpression
getValueExpression(String name);

[#50638851_pgfId-1022158]## 

[#50638851_pgfId-1022159]##public void setValueExpression(String name,
ValueExpression expression);

|===

{empty}[#50638851_pgfId-1022161]##where _name_ is the name of the
attribute or property for which to establish the value expression.
[P1-start setValueExpression rules] The implementation of
setValueExpression must detemine if the expression is a literal by
calling ValueExpression.isLiteralText() on the expression argument. If
the expression argument is literal text, then ValueExpression.getValue()
must be called on the expression argument. The result must be used as
the value argument, along with the name argument to this component’s
getAttributes().put(name, value) method call. [P1-end] [P1-start which
properties are value expression enabled] For the standard component
classes defined by this specification, all attributes, and all
properties other than _id_ , _parent_ , _action_ , _listener_ ,
_actionListener_ , _valueChangeListener_ , and _validator_ are value
expression enabled. The _action_ , _listener_ , _actionListener_ ,
_valueChangeListener_ , and _validator_ attributes are method expression
enabled.[P1-end]

[#50638851_pgfId-1022162]##In previous versions of this specification,
this concept was called “value binding”. Methods and classes referring
to this concept are deprecated, but remain implemented to preserve
backwards compatibility.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022165]##public ValueBinding getValueBinding(String
name);

[#50638851_pgfId-1022166]## 

[#50638851_pgfId-1022167]##public void setValueBinding(String name,
ValueBinding binding);

|===

[#50638851_pgfId-1022168]##Please consult the javadoc for these methods
to learn how they are implemented in terms of the new “value expression”
concept.

==== [#50638851_pgfId-1022170]##[#50638851_65495]##Component Bindings

[#50638851_pgfId-1022171]##A _component binding_ is a special value
expression that can be used to facilitate “wiring up” a component
instance to a corresponding property of a JavaBean that is associated
with the page, and wants to manipulate component instances
programatically. It is established by calling _setValueExpression()_
(see link:JSF.htm#50638851_91832[See ValueExpression properties]) with
the special property name _binding_ .

[#50638851_pgfId-1022175]##The specified _ValueExpression_ must point to
a read-write JavaBeans property of type _UIComponent_ (or appropriate
subclass). Such a component binding is used at two different times
during the processing of a Faces Request:

{empty}[#50638851_pgfId-1022176]##[P3-start how a component binding is
used from a JSP page] When a component instance is first created
(typically by virtue of being referenced by a _UIComponentELTag_ in a
JSP page), the JSF implementation will retrieve the _ValueExpression_
for the name _binding,_ and call _getValue()_ on it. If this call
returns a non-null _UIComponent_ value (because the JavaBean
programmatically instantiated and configured a component already), that
instance will be added to the component tree that is being created. If
the call returns _null_ , a new component instance will be created,
added to the component tree, and _setValue()_ will be called on the
_ValueExpression_ (which will cause the property on the JavaBean to be
set to the newly created component instance). [P3-end]

{empty}[#50638851_pgfId-1022177]##[P1-start how a component binding is
used when restoring the tree]When a component tree is recreated during
the _Restore View_ phase of the request processing lifecycle, for each
component that has a _ValueExpression_ associated with the name
“binding”, _setValue()_ will be called on it, passing the recreated
component instance. [P1-end]

[#50638851_pgfId-1022178]##Component bindings are often used in
conjunction with JavaBeans that are dynamically instantiated via the
Managed Bean Creation facility (see _link:JSF.htm#50638862_74815[See
VariableResolver and the Default VariableResolver]_ ). If application
developers place managed beans that are pointed at by component binding
expressions in any scope other than request scope, the system cannot
behave correctly. This is because placing it in a scope wider than
request scope would require thread safety, since UIComponent instances
depend on running inside of a single thread. There are also potentially
negative impacts on memory management when placing a component binding
in “session” or “view” scopes.

==== [#50638851_pgfId-1022183]##[#50638851_56063]##Client Identifiers

[#50638851_pgfId-1022184]##Client identifiers are used by JSF
implementations, as they decode and encode components, for any occasion
when the component must have a client side name. Some examples of such
an occasion are:

[#50638851_pgfId-1022185]##to name request parameters for a subsequent
request from the JSF-generated page.

[#50638851_pgfId-1022186]##to serve as anchors for client side scripting
code.

[#50638851_pgfId-1022191]##to serve as anchors for client side
accessibility labels.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022189]##public String getClientId(FacesContext
context);

[#50638851_pgfId-1022190]##protected String
getContainerClientId(FacesContext context);

|===

[#50638851_pgfId-1022192]##The client identifier is derived from the
component identifier (or the result of calling
_UIViewRoot.createUniqueId()_ if there is not one), and the client
identifier of the closest parent component that is a _NamingContainer_
according to the algorithm specified in the javadoc for
_UIComponent.getClientId()_ . The _Renderer_ associated with this
component, if any, will then be asked to convert this client identifier
to a form appropriate for sending to the client. The value returned from
this method must be the same throughout the lifetime of the component
instance unless _setId()_ is called, in which case it will be
recalculated by the next call to _getClientId()_ .

==== [#50638851_pgfId-1022201]##[#50638851_23043]##[#50638851_Head2]##[#50638851_]##Component Tree Manipulation

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022198]##public UIComponent getParent();

[#50638851_pgfId-1022199]## 

[#50638851_pgfId-1022200]##public void setParent(UIComponent parent);

|===

[#50638851_pgfId-1022202]##Components that have been added as children
of another component can identify the parent by calling the _getParent_
method. For the root node component of a component tree, or any
component that is not part of a component tree, _getParent_ will return
_null_ . In some special cases, such as transient components, it is
possible that a component in the tree will return _null_ from
getParent(). The _setParent()_ method should only be called by the
_List_ instance returned by calling the _getChildren()_ method, or the
_Map_ instance returned by calling the _getFacets()_ method, when child
components or facets are being added, removed, or replaced.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022205]##public List<UIComponent> getChildren();
|===

[#50638851_pgfId-1022206]##Return a mutable _List_ that contains all of
the child _UIComponent_ s for this component instance. [P1-start
requirements of UIComponent.getChildren() ] The returned _List_
implementation must support all of the required and optional methods of
the _List_ interface, as well as update the parent property of children
that are added and removed, as described in the Javadocs for this
method. [P1-end] Note that the _add()_ methods have a special
requirement to cause the _PostAddToViewEvent_ method to be fired, as
well as the processing of the _ResourceDependency_ annotation. See the
javadocs for _getChildren()_ for details.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022209]##public int getChildCount();
|===

{empty}[#50638851_pgfId-1022210]##A convenience method to return the
number of child components for this component. [P2-start
UIComponent.getChildCount requirements.] If there are no children, this
method must return 0. The method must not cause the creation of a child
component list, so it is preferred over calling _getChildren().size()_
when there are no children. [P2-end]

==== [#50638851_pgfId-1022215]##[#50638851_85169]##Component Tree Navigation

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022214]##public UIComponent findComponent(String
expr);
|===

[#50638851_pgfId-1022216]##Search for and return the UIComponent with an
_id_ that matches the specified search expression (if any), according to
the algorithm described in the Javadocs for this method.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022219]##public Iterator<UIComponent>
getFacetsAndChildren();
|===

[#50638851_pgfId-1022220]##Return an immutable _Iterator_ over all of
the facets associated with this component (in an undetermined order),
followed by all the child components associated with this component (in
the order they would be returned by _getChildren()_ )..

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022223]##public boolean
invokeOnComponent(FacesContext context, String clientId, ContextCallback
callback) throws FacesException;
|===

[#50638851_pgfId-1022224]##Starting at _this_ component in the view,
search for the UIComponent whose _getClientId()_ method returns a String
that exactly matches the argument _clientId_ using the algorithm
specified in the Javadocs for this method. If such a UIComponent is
found, call the _invokeContextCallback()_ method on the argument
_callback_ passing the current _FacesContext_ and the found UIComponent.
Upon normal return from the callback, return _true_ to the caller. If
the callback throws an exception, it must be wrapped inside of a
_FacesException_ and re-thrown. If no such UIComponent is found, return
_false_ to the caller.

[#50638851_pgfId-1022225]##Special consideration should be given to the
implementation of _invokeOnComponent()_ for UIComponent classes that
handle iteration, such as _UIData_ . Iterating components manipulate
their own internal state to handle iteration, and doing so alters the
clientIds of components nested within the iterating component.
Implementations of _invokeOnComponent()_ must guarantee that any state
present in the component or children is restored before returning.
Please see the Javadocs for _UIData.invokeOnComponent()_ for details.

[#50638851_pgfId-1022232]##The _ContextCallback_ interface is specified
as follows..

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022228]##public interface ContextCallback \{

[#50638851_pgfId-1022229]## public void
invokeContextCallback(FacesContext context, UIComponent target);

[#50638851_pgfId-1022230]##

[#50638851_pgfId-1022231]##}

|===

[#50638851_pgfId-1022233]##Please consult the Javadocs for more details
on this interface.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023776]##public static UIComponent
getCurrentComponent(FacesContext context);
|===

[#50638851_pgfId-1023782]##Returns the UIComponent instance that is
currently being processed.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023796]##public static UIComponent
getCurrentCompositeComponent(FacesContext context);
|===

[#50638851_pgfId-1023807]##Returns the closest ancestor component
relative to getCurrentComponent that is a composite component, or null
if no such component is exists.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1028975]##public boolean visitTree(VisitContext
context,

[#50638851_pgfId-1028966]## VisitCallback callback);

[#50638851_pgfId-1028996]## 

|===

[#50638851_pgfId-1028984]##Uses the visit API introduced in version 2 of
the specification to perform a flexible and customizable visit of the
tree from this instance and its children. Please see the package
description for the package _javax.faces.component.visit_ for the
normative specification.

==== [#50638851_pgfId-1028988]##[#50638851_55906]##Facet Management

[#50638851_pgfId-1022236]##JavaServer Faces supports the traditional
model of composing complex components out of simple components via
parent-child relationships that organize the entire set of components
into a tree, as described in link:JSF.htm#50638851_23043[See Component
Tree Manipulation]. However, an additional useful facility is the
ability to define particular subordinate components that have a specific
_role_ with respect to the owning component, which is typically
independent of the parent-child relationship. An example might be a
“data grid” control, where the children represent the columns to be
rendered in the grid. It is useful to be able to identify a component
that represents the column header and/or footer, separate from the usual
child collection that represents the column data.

[#50638851_pgfId-1022240]##To meet this requirement, JavaServer Faces
components offer support for _facets_ , which represent a named
collection of subordinate (but non-child) components that are related to
the current component by virtue of a unique _facet name_ that represents
the role that particular component plays. Although facets are not part
of the parent-child tree, they participate in request processing
lifecycle methods, as described in link:JSF.htm#50638851_84171[See
Lifecycle Management Methods].

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022246]##public Map<String, UIComponent> getFacets();
|===

[#50638851_pgfId-1022250]##Return a mutable Map representing the facets
of this UIComponent, keyed by the facet name.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022249]##public UIComponent getFacet(String name);
|===

[#50638851_pgfId-1022251]##A convenience method to return a facet value,
if it exists, or _null_ otherwise. If the requested facet does not
exist, no facets _Map_ must not be created, so it is preferred over
calling _getFacets().get()_ when there are no _Facet_ s.

[#50638851_pgfId-1022252]##For easy use of components that use facets,
component authors may include type-safe getter and setter methods that
correspond to each named facet that is supported by that component
class. For example, a component that supports a _header_ facet of type
_UIHeader_ should have methods with signatures and functionality as
follows:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022255]##public UIHeader getHeader() \{

[#50638851_pgfId-1022256]## return ((UIHeader) getFacet(“header”);

[#50638851_pgfId-1022257]##}

[#50638851_pgfId-1022258]## 

[#50638851_pgfId-1022259]##public void setHeader(UIHeader header) \{

[#50638851_pgfId-1022260]## getFacets().put(“header”, header);

[#50638851_pgfId-1022261]##}

|===

==== [#50638851_pgfId-1027505]##[#50638851_Managing Component Behavior]##Managing Component Behavior

[#50638851_pgfId-1027506]## _UIComponentBase_ provides default
implementations for the methods from the _javax.faces.c_ o
_mponent.behavior.BehaviorHolder_ interface. _UIComponentBase_ does not
implement the _javax.faces.component.behavior.BehaviorHolder_ interface,
but it provides the default implementations to simplify subclass
implemenations. Refer to
link:JSF.htm#50638851_Component%20Behavior%20Model[See Component
Behavior Model] for more information.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027519]##public void addBehavior(String eventName,
Behavior behavior)
|===

[#50638851_pgfId-1027524]##This method attaches a _Behavior_ to the
component for the specified _eventName. The eventName_ must be one of
the values in the _Collection_ returned from _getEventNames(). F_ or
example, it may be desired to have some behavior defined when a “click”
event occurs. The behavior could be some client side behavior in the
form of a script executing, or a server side listener executing.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027552]##public Collection<String> getEventNames()
|===

[#50638851_pgfId-1027597]##Returns the logical event names that can be
associated with behavior for the component.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027596]##public Map<String, List<Behavior>>
getBehaviors()
|===

[#50638851_pgfId-1027609]##Returns a _Map_ defining the association of
events and behaviors. They keys in the _Map_ are event names.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027628]##public String getDefaultEventName()
|===

[#50638851_pgfId-1027633]##Returns the default event name (if any) for
the component.

==== [#50638851_pgfId-1027602]##[#50638851_84394]##Generic Attributes

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027601]##public Map<String, Object> getAttributes();
|===

[#50638851_pgfId-1027603]##The render-independent characteristics of
components are generally represented as JavaBean component properties
with getter and setter methods (see link:JSF.htm#50638851_64285[See
Render-Independent Properties]). In addition, components may also be
associated with generic attributes that are defined outside the
component implementation class. Typical uses of generic attributes
include:

[#50638851_pgfId-1022271]##Specification of render-dependent
characteristics, for use by specific _Renderer_ s.

[#50638851_pgfId-1022272]##General purpose association of
application-specific objects with components.

[#50638851_pgfId-1022273]##The attributes for a component may be of any
Java programming language object type, and are keyed by attribute name
(a String). However, see link:JSF.htm#50638861_53238[See State Saving
Alternatives and Implications] for implications of your application’s
choice of state saving method on the classes used to implement attribute
values.

[#50638851_pgfId-1022277]##Attribute names that begin with _javax.faces_
are reserved for use by the JSF specification. Names that begin with
_javax_ are reserved for definition through the Java Community Process.
Implementations are not allowed to define names that begin with _javax._

[#50638851_pgfId-1022278]##[P1-start attribute property transparency
rules] The _Map_ returned by _getAttributes()_ must also support
attribute-property transparency, which operates as follows:

[#50638851_pgfId-1022279]##When the _get()_ method is called, if the
specified attribute name matches the name of a readable JavaBeans
property on the component implementation class, the value returned will
be acquired by calling the appropriate property getter method, and
wrapping Java primitive values (such as int) in their corresponding
wrapper classes (such as _java.lang.Integer_ ) if necessary. If the
specified attribute name does not match the name of a readable JavaBeans
property on the component implementation class, consult the internal
data-structure to in which generic attributes are stored. If no entry
exists in the internal data-structure, see if there is a
_ValueExpression_ for this attribute name by calling
_getValueExpression()_ , passing the attribute name as the key. If a
_ValueExpression_ exists, call _getValue()_ on it, returning the result.
If an _ELException_ is thrown wrap it in a _FacesException_ and re-throw
it.

[#50638851_pgfId-1022280]##When the _put()_ method is called, if the
specified attribute name matches the name of a writable JavaBeans
property on the component implementation class, the appropriate property
setter method will be called. If the specified attribute name does not
match the name of a writable JavaBeans property, simply put the value in
the data-structure for generic attributes.

[#50638851_pgfId-1022281]##When the _remove()_ method is called, if the
specified attribute name matches the name of a JavaBeans property on the
component, an _IllegalArgumentException_ must be thrown.

[#50638851_pgfId-1022282]##When the _containsKey()_ method is called, if
the specified attribute name matches the name of a JavaBeans property,
return _false_ . Otherwise, return _true_ if and only if the specified
attribute name exists in the internal data-structure for the generic
attributes.

{empty}[#50638851_pgfId-1022283]##The _Map_ returned by
_getAttributes()_ must also conform to the entire contract for the _Map_
interface. [P1-end]

===== [#50638851_pgfId-1023566]##[#50638851_3.1.10.1 Special Attributes]##Special Attributes

====== [#50638851_pgfId-1023595]##UIComponent Constants

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023574]##public static final String CURRENT_COMPONENT
= "javax.faces.component.CURRENT_COMPONENT";
|===

[#50638851_pgfId-1023599]##This is used as a key in the _FacesContext_
attributes Map to indicate the component that is currently being
processed.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023614]##public static final String
CURRENT_COMPOSITE_COMPONENT =
"javax.faces.component.CURRENT_COMPOSITE_COMPONENT";
|===

[#50638851_pgfId-1023618]##This is used as a key in the _FacesContext_
attributes Map to indicate the composite component that is currently
being processed.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023626]##public static final String BEANINFO_KEY =
"javax.faces.component.BEANINFO_KEY";
|===

[#50638851_pgfId-1023635]##This is a key in the component attributes Map
whose value is a java.beans.BeanInfo describing the composite component.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023648]##public static final String FACETS_KEY =
"javax.faces.component.FACETS_KEY";
|===

[#50638851_pgfId-1023656]##This is a key in the composite component
BeanDescriptor whose value is a Map<PropertyDescriptor> that contains
meta-information for the declared facets for the composite component.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023660]##public static final String
COMPOSITE_COMPONENT_TYPE_KEY =
"javax.faces.component.COMPOSITE_COMPONENT_TYPE";
|===

[#50638851_pgfId-1023666]##This is a key in the composite component
BeanDescriptor whose value is a ValueExpression that evaluates to the
component-type of the composite component root.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023690]##public static final String
COMPOSITE_FACET_NAME = "javax.faces.component.COMPOSITE_FACET_NAME";
|===

[#50638851_pgfId-1023698]##This is a key in the Map<PropertyDescriptor>
that is returned by using the key FACETS_KEY. The value of this constant
is also used as the key in the Map returned from getFacets(). In this
case, the value of this key is the facet (the UIPanel) that is the
parent of all the components in the composite implementation section of
the composite component VDL file.

[#50638851_pgfId-1023760]##Refer to the
javax.faces.component.UIComponent Javadocs for more detailed
information.

==== [#50638851_pgfId-1022285]##[#50638851_64285]##Render-Independent Properties

[#50638851_pgfId-1022286]##The render-independent characteristics of a
user interface component are represented as JavaBean component
properties, following JavaBeans naming conventions. Specifically, the
method names of the getter and/or setter methods are determined using
standard JavaBeans component introspection rules, as defined by
_java.beans.Introspector_ . The render-independent properties supported
by all _UIComponent_ s are described in the following table:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022289]##Name |[#50638851_pgfId-1022291]##Access
|[#50638851_pgfId-1022293]##Type |[#50638851_pgfId-1022295]##Description
|[#50638851_pgfId-1022297]## _id_ |[#50638851_pgfId-1022299]##RW
|[#50638851_pgfId-1022301]##String |[#50638851_pgfId-1022305]##The
component identifier, as described in link:JSF.htm#50638851_34611[See
Component Identifiers].

|[#50638851_pgfId-1022308]## _parent_ |[#50638851_pgfId-1022310]##RW
|[#50638851_pgfId-1022312]## _UIComponent_
|[#50638851_pgfId-1022314]##The parent component for which this
component is a child or a facet.

|[#50638851_pgfId-1022316]## _rendered_ |[#50638851_pgfId-1022318]##RW
|[#50638851_pgfId-1022320]## _boolean_ |[#50638851_pgfId-1022322]##A
flag that, if set to _true_ , indicates that this component should be
processed during all phases of the request processing lifecycle. The
default value is “true”.

|[#50638851_pgfId-1022324]## _rendererType_
|[#50638851_pgfId-1022326]##RW |[#50638851_pgfId-1022328]## _String_
|[#50638851_pgfId-1022330]##Identifier of the _Renderer_ instance (from
the set of _Renderer_ instances supported by the _RenderKit_ associated
with the component tree we are processing. If this property is set,
several operations during the request processing lifecycle (such as
_decode_ and the _encodeXxx_ family of methods) will be delegated to a
_Renderer_ instance of this type. If this property is not set, the
component must implement these methods directly.

|[#50638851_pgfId-1022332]## _rendersChildren_
|[#50638851_pgfId-1022334]##RO |[#50638851_pgfId-1022336]## _boolean_
|[#50638851_pgfId-1022338]##A flag that, if set to _true_ , indicates
that this component manages the rendering of all of its children
components (so the JSF implementation should not attempt to render
them). The default implementation in _UIComponentBase_ delegates this
setting to the associated _Renderer_ , if any, and returns _false_
otherwise.

|[#50638851_pgfId-1022340]## _transient_ |[#50638851_pgfId-1022342]##RW
|[#50638851_pgfId-1022344]##boolean |[#50638851_pgfId-1022346]##A flag
that, if set to _true_ , indicates that this component must not be
included in the state of the component tree. The default implementation
in _UIComponentBase_ returns _false_ for this property.
|===

[#50638851_pgfId-1022347]##The method names for the render-independent
property getters and setters must conform to the design patterns in the
JavaBeans specification. See link:JSF.htm#50638861_53238[See State
Saving Alternatives and Implications] for implications of your
application’s choice of state saving method on the classes used to
implement property values.

==== [#50638851_pgfId-1022352]##[#50638851_49266]##[#50638851_3.1.12 Component Specialization Methods]##Component Specialization Methods

[#50638851_pgfId-1022353]##The methods described in this section are
called by the JSF implementation during the various phases of the
request processing lifecycle, and may be overridden in a concrete
subclass to implement specialized behavior for this component.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022356]##public boolean broadcast(FacesEvent event)
throws AbortProcessingException;
|===

[#50638851_pgfId-1022359]##The _broadcast()_ method is called during the
common event processing (see link:JSF.htm#50638877_24408[See Common
Event Processing]) at the end of several request processing lifecycle
phases. For more information about the event and listener model, see
link:JSF.htm#50638851_80722[See Event and Listener Model]. Note that it
is not necessary to override this method to support additional event
types.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022366]##public void decode(FacesContext context);
|===

[#50638851_pgfId-1022367]##This method is called during the _Apply
Request Values_ phase of the request processing lifecycle, and has the
responsibility of extracting a new local value for this component from
an incoming request. The default implementation in _UIComponentBase_
delegates to a corresponding _Renderer_ , if the _rendererType_ property
is set, and does nothing otherwise.

[#50638851_pgfId-1022368]##Generally, component writers will choose to
delegate decoding and encoding to a corresponding _Renderer_ by setting
the _rendererType_ property (which means the default behavior described
above is adequate).

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022371]##public void encodeAll(FacesContext context)
throws IOException

[#50638851_pgfId-1022372]##public void encodeBegin(FacesContext context)
throws IOException;

[#50638851_pgfId-1022373]## 

[#50638851_pgfId-1022374]##public void encodeChildren(FacesContext
context) throws IOException;

[#50638851_pgfId-1022375]## 

[#50638851_pgfId-1022376]##public void encodeEnd(FacesContext context)
throws IOException;

|===

{empty}[#50638851_pgfId-1023464]##These methods are called during the
_Render Response_ phase of the request processing lifecycle.
_encodeAll()_ will cause this component and all its children and facets
that return _true_ from _isRendered()_ to be rendered, regardless of the
value of the _getRendersChildren()_ return value. _encodeBegin()_ ,
_encodeChildren()_ , and _encodeEnd()_ have the responsibility of
creating the response data for the beginning of this component, this
component’s children (only called if the _rendersChildren_ property of
this component is _true_ ), and the ending of this component,
respectively. Typically, this will involve generating markup for the
output technology being supported, such as creating an HTML _<input>_
element for a _UIInput_ component. For clients that support it, the
encode methods might also generate client-side scripting code (such as
JavaScript), and/or stylesheets (such as CSS). The default
implementations in _UIComponentBase_ _encodeBegin()_ and _encodeEnd()_
delegate to a corresponding _Renderer_ , if the _rendererType_ property
is _true_ , and do nothing otherwise. [P1-start-comp-special]The default
implementation in UIComponentBase _encodeChildren()_ must iterate over
its children and call _encodeAll()_ for each child component.
_encodeBegin()_ must publish a _PreRenderComponentEvent._ [P1-end]

[#50638851_pgfId-1022378]##Generally, component writers will choose to
delegate encoding to a corresponding _Renderer_ , by setting the
_rendererType_ property (which means the default behavior described
above is adequate).

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022381]##public void queueEvent(FacesEvent event);
|===

[#50638851_pgfId-1022382]##Enqueue the specified event for broadcast at
the end of the current request processing lifecycle phase. Default
behavior is to delegate this to the _queueEvent()_ of the parent
component, normally resulting in broadcast via the default behavior in
the _UIViewRoot_ lifecycle methods.

[#50638851_pgfId-1022383]##The component author can override any of the
above methods to customize the behavior of their component.

==== [#50638851_pgfId-1022385]##[#50638851_84171]##Lifecycle Management Methods

[#50638851_pgfId-1022386]##The following methods are called by the
various phases of the request processing lifecycle, and implement a
recursive tree walk of the components in a component tree, calling the
component specialization methods described above for each component.
These methods are not generally overridden by component writers, but
doing so may be useful for some advanced component implementations. See
the javadocs for detailed information on these methods

[#50638851_pgfId-1022389]##In order to support the “component” implicit
object (See link:JSF.htm#50638862_50118[See Implicit Object ELResolver
for Facelets and Programmatic Access]), the following methods have been
added to _UIComponent_

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022393]##protected void pushComponentToEL(FacesContext
context);

[#50638851_pgfId-1022394]##protected void
popComponentFromEL(FacesContext context)

|===

[#50638851_pgfId-1022395]## _pushComponentToEL()_ and
_popComponentFromEL()_ must be called inside each of the lifecycle
management methods in this section as specified in the javadoc for that
method.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022398]##public void processRestoreState(FacesContext
context, Object state);
|===

[#50638851_pgfId-1022399]##Perform the component tree processing
required by the _Restore View_ phase of the request processing lifecycle
for all facets of this component, all children of this component, and
this component itself.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022402]##public void processDecodes(FacesContext
context);
|===

[#50638851_pgfId-1022403]##Perform the component tree processing
required by the _Apply Request Values_ phase of the request processing
lifecycle for all facets of this component, all children of this
component, and this component itself

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022406]##public void processValidators(FacesContext
context);
|===

[#50638851_pgfId-1022407]##Perform the component tree processing
required by the _Process Validations_ phase of the request processing
lifecycle for all facets of this component, all children of this
component, and this component itself.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022410]##public void processUpdates(FacesContext
context);
|===

[#50638851_pgfId-1022411]##Perform the component tree processing
required by the Update Model Values phase of the request processing
lifecycle for all facets of this component, all children of this
component, and this component itself.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022414]##public void processSaveState(FacesContext
context);
|===

[#50638851_pgfId-1022415]##Perform the component tree processing
required by the state saving portion of the _Render Response_ phase of
the request processing lifecycle for all facets of this component, all
children of this component, and this component itself.

==== [#50638851_pgfId-1022419]##[#50638851_3.1.14 Utility Methods]##Utility Methods

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022418]##protected FacesContext getFacesContext();
|===

[#50638851_pgfId-1022423]##Return the FacesContext instance for the
current request.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022422]##protected Renderer getRenderer(FacesContext
context);
|===

[#50638851_pgfId-1022424]##Return the _Renderer_ that is associated this
_UIComponent_ , if any, based on the values of the _family_ and
_rendererType_ properties currently stored as instance data on the
_UIComponent_ .

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022427]##protected void addFacesListener(FacesListener
listener);

[#50638851_pgfId-1022428]## 

[#50638851_pgfId-1022429]##protected void
removeFacesListener(FacesListener listener);

|===

[#50638851_pgfId-1022430]##These methods are used to register and
deregister an event listener. They should be called only by a public
addXxxListener() method on the component implementation class, which
provides typesafe listener registration.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1023834]##public Map<String, String>
getResourceBundleMap();
|===

[#50638851_pgfId-1023844]##Return a Map of the ResourceBundle for this
component. Please consult the Javadocs for more information.

[#50638851_pgfId-1022431]## 

=== [#50638851_pgfId-1022432]##

image:JSF-17.gif[image]

[#50638851_41597]##Component Behavioral Interfaces

[#50638851_pgfId-1022433]##In addition to extending _UIComponent_ ,
component classes may also implement one or more of the _behavioral
interfaces_ described below. Components that implement these interfaces
must provide the corresponding method signatures and implement the
described functionality.

==== [#50638851_pgfId-1022435]##[#50638851_46959]##ActionSource

[#50638851_pgfId-1022436]##The _ActionSource_ interface defines a way
for a component to indicate that wishes to be a source of _ActionEvent_
events, including the ability invoke application actions (see
link:JSF.htm#50638861_77001[See Application Actions]) via the default
_ActionListener_ facility (see link:JSF.htm#50638861_40874[See
ActionListener Property]).

===== [#50638851_pgfId-1022444]##[#50638851_73522]##Properties

[#50638851_pgfId-1022490]##The following render-independent properties
are added by the _ActionSource_ interface:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022447]##Name |[#50638851_pgfId-1022449]##Access
|[#50638851_pgfId-1022451]##Type |[#50638851_pgfId-1022453]##Description
|[#50638851_pgfId-1022455]## _action_ |[#50638851_pgfId-1022457]##RW
|[#50638851_pgfId-1022459]## _MethodBinding_
|[#50638851_pgfId-1022461]##DEPRECATED A _MethodBinding_ (see
link:JSF.htm#50638862_35971[See MethodBinding]) that must (if non-
_null_ ) point at an action method (see link:JSF.htm#50638861_77001[See
Application Actions]). The specified method will be called during the
_Apply Request Values_ or _Invoke Application_ phase of the request
processing lifecycle, as described in link:JSF.htm#50638877_61764[See
Invoke Application]. This method is replaced by the _actionExpression_
property on _ActionSource2._ See the javadocs for the backwards
compatibility implementation strategy.

|[#50638851_pgfId-1022472]##actionListener
|[#50638851_pgfId-1022474]##RW |[#50638851_pgfId-1022476]##MethodBinding
|[#50638851_pgfId-1022478]##DEPRECATED A _MethodBinding_ (see
link:JSF.htm#50638862_35971[See MethodBinding]) that (if non- _null_ )
must point at a method accepting an _ActionEvent_ , with a return type
of _void_ . Any _ActionEvent_ that is sent by this _ActionSource_ will
be passed to this method along with the _processAction()_ method of any
registered _ActionListener_ s, in either Apply Request Values or Invoke
Application phase, depending upon the state of the _immediate_ property.
See the javadocs for the backwards compatibility implementation
strategy.

|[#50638851_pgfId-1022483]##immediate |[#50638851_pgfId-1022485]##RW
|[#50638851_pgfId-1022487]##boolean |[#50638851_pgfId-1022489]##A flag
indicating that the default _ActionListener_ should execute immediately
(that is, during the _Apply Request Values_ phase of the request
processing lifecycle, instead of waiting for _Invoke Application_
phase). The default value of this property must be _false_ .
|===

[#50638851_pgfId-1022491]## 

===== [#50638851_pgfId-1022492]##Methods

[#50638851_pgfId-1022493]## _ActionSource_ adds no new processing
methods.

===== [#50638851_pgfId-1022494]##Events

[#50638851_pgfId-1022495]##A component implementing _ActionSource_ is a
source of _ActionEvent_ events. There are three important moments in the
lifetime of an _ActionEvent_ :

[#50638851_pgfId-1022496]##when an the event is _created_

[#50638851_pgfId-1022497]##when the event is _queued_ for later
processing

[#50638851_pgfId-1022498]##when the listeners for the event are
_notified_

[#50638851_pgfId-1022499]## _ActionEvent_ creation occurs when the
system detects that the component implementing _ActionSource_ has been
activated. For example, a button has been pressed. This happens when the
_decode()_ processing of the _Apply Request Values_ phase of the request
processing lifecycle detects that the corresponding user interface
control was activated.

[#50638851_pgfId-1022500]## _ActionEvent_ queueing occurs immediately
after the event is created.

[#50638851_pgfId-1022501]##Event listeners that have registered an
interest in _ActionEvent_ s fired by this component (see below) are
notified at the end of the _Apply Request Values_ or _Invoke
Application_ phase, depending upon the immediate property of the
originating _UICommand_ .

[#50638851_pgfId-1022502]## _ActionSource_ includes the following
methods to register and deregister _ActionListener_ instances interested
in these events. See link:JSF.htm#50638851_80722[See Event and Listener
Model] for more details on the event and listener model provided by JSF.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022508]##public void addActionListener(ActionListener
listener);

[#50638851_pgfId-1022509]## 

[#50638851_pgfId-1022510]##public void
removeActionListener(ActionListener listener);

|===

[#50638851_pgfId-1022511]##In addition to manually registered listeners,
the JSF implementation provides a default _ActionListener_ that will
process _ActionEvent_ events during the _Apply Request Values_ or
_Invoke Application_ phases of the request processing lifecycle. See
link:JSF.htm#50638877_61764[See Invoke Application] for more
information.

==== [#50638851_pgfId-1022516]##[#50638851_54136]##ActionSource2

[#50638851_pgfId-1022517]##The _ActionSource2_ interface extends
_ActionSource_ and provides a JavaBeans property analogous to the
_action_ property on _ActionSource_ . This allows the _ActionSource_
concept to leverage the new Unified EL API.

===== [#50638851_pgfId-1022518]##Properties

[#50638851_pgfId-1022545]##The following render-independent properties
are added by the _ActionSource_ interface:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022521]##Name |[#50638851_pgfId-1022523]##Access
|[#50638851_pgfId-1022525]##Type |[#50638851_pgfId-1022527]##Description
|[#50638851_pgfId-1022529]## _actionExpression_
|[#50638851_pgfId-1022531]##RW |[#50638851_pgfId-1022533]##
_javax.el.MethodExpression_ |[#50638851_pgfId-1022537]##A
_MethodExpression_ (see link:JSF.htm#50638862_35971[See MethodBinding])
that must (if non- _null_ ) point at an action method (see
link:JSF.htm#50638861_77001[See Application Actions]). The specified
method will be called during the _Apply Request Values_ or _Invoke
Application_ phase of the request processing lifecycle, as described in
link:JSF.htm#50638877_61764[See Invoke Application].
|===

[#50638851_pgfId-1022546]## 

===== [#50638851_pgfId-1022547]##Methods

[#50638851_pgfId-1022548]## _ActionSource2_ adds no new processing
methods.

===== [#50638851_pgfId-1022549]##Events

[#50638851_pgfId-1022550]## _ActionSource2_ adds no new events.

==== [#50638851_pgfId-1022553]##[#50638851_48495]##[#50638851_61552]##NamingContainer

[#50638851_pgfId-1022554]## _NamingContainer_ is a marker interface.
Components that implement _NamingContainer_ have the property that, for
all of their children that have non- _null_ component identifiers, all
of those identifiers are unique. This property is enforced by the
_renderView()_ method on _ViewHandler_ . In JSP based applications, it
is also enforced by the _UIComponentELTag_ . Since this is just a marker
interface, there are no properties, methods, or events. Among the
standard components, _UIForm_ and _UIData_ implement _NamingContainer_ .
See link:JSF.htm#50638853_96109[See UIForm] and _Section_
link:JSF.htm#50638853_33796[See Methods] “UIData” for details of how the
_NamingContainer_ concept is used in these two cases.

[#50638851_pgfId-1022561]## _NamingContainer_ defines a public static
final character constant, _SEPARATOR_CHAR_ , that is used to separate
components of client identifiers, as well as the components of search
expressions used by the _findComponent()_ method see
(link:JSF.htm#50638851_85169[See Component Tree Navigation]). The value
of this constant must be a colon character (“:”).

[#50638851_pgfId-1022565]##Use of this separator character in client
identifiers rendered by _Renderer_ s can cause problems with CSS
stylesheets that attach styles to a particular client identifier. For
the Standard HTML RenderKit, this issue can be worked around by using
the _style_ attribute to specify CSS style values directly, or the
_styleClass_ attribute to select CSS styles by class rather than by
identifier.

==== [#50638851_pgfId-1022567]##[#50638851_95437]##StateHolder

[#50638851_pgfId-1022568]##The _StateHolder_ interface is implemented by
_UIComponent_ , _Converter_ , _FacesListener_ , and _Validator_ classes
that need to save their state between requests. _UIComponent_ implements
this interface to denote that components have state that must be saved
and restored between requests.

===== [#50638851_pgfId-1022569]##Properties

[#50638851_pgfId-1022587]##The following render-independent properties
are added by the _StateHolder_ interface:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022572]##Name |[#50638851_pgfId-1022574]##Access
|[#50638851_pgfId-1022576]##Type |[#50638851_pgfId-1022578]##Description
|[#50638851_pgfId-1022580]## _transient_ |[#50638851_pgfId-1022582]##RW
|[#50638851_pgfId-1022584]## _boolean_ |[#50638851_pgfId-1022586]##A
flag indicating whether this instance has decided to opt out of having
its state information saved and restored. The default value for all
standard component, converter, and validator classes that implement
_StateHolder_ must be _false_ .
|===

[#50638851_pgfId-1022588]## 

===== [#50638851_pgfId-1022590]##[#50638851_31080]##Methods

[#50638851_pgfId-1022591]##Any class implementing _StateHolder_ must
implement both the _saveState()_ and _restoreState()_ methods, since
these two methods have a tightly coupled contract between themselves. In
other words, if there is an inheritance hierarchy, it is not permissible
to have the _saveState()_ and _restoreState()_ methods reside at
different levels of the hierarchy.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022594]##public Object saveState(FacesContext
context);

[#50638851_pgfId-1022595]##public void restoreState(FacesContext
context, Object state) throws IOException;

|===

[#50638851_pgfId-1022596]##Gets or restores the state of the instance as
a _Serializable_ _Object_ .

[#50638851_pgfId-1022597]##If the class that implements this interface
has references to Objects which also implement _StateHolder_ (such as a
_UIComponent_ with a converter, event listeners, and/or validators)
these methods must call the _saveState()_ or _restoreState()_ method on
all those instances as well.

[#50638851_pgfId-1022598]##Any class implementing _StateHolder_ must
have a public no-args constructor.

[#50638851_pgfId-1022599]##If the state saving method is server, these
methods may not be called.

[#50638851_pgfId-1022600]##If the class that implements this interface
has references to Objects which do not implement _StateHolder_ , these
methods must ensure that the references are preserved. For example,
consider class _MySpecialComponent_ , which implements _StateHolder_ ,
and keeps a reference to a helper class, _MySpecialComponentHelper_ ,
which does not implement _StateHolder_ .
_MySpecialComponent.saveState()_ must save enough information about
_MySpecialComponentHelper_ , so that when
_MySpecialComponent.restoreState()_ is called, the reference to
_MySpecialComponentHelper_ can be restored. The return from
_saveState()_ must be _Serializable_ .

[#50638851_pgfId-1022603]##Since all of the standard user interface
components listed in link:JSF.htm#50638853_30712[See Standard User
Interface Components]” extend from _UIComponent_ , they all implement
the _StateHolder_ interface. In addition, the standard _Converter_ and
_Validator_ classes that require state to be saved and restored also
implement _StateHolder._

===== [#50638851_pgfId-1022605]##Events

[#50638851_pgfId-1022606]## _StateHolder_ does not originate any
standard events.

==== [#50638851_pgfId-1029211]##[#50638851_PartialStateHolder]##PartialStateHolder

[#50638851_pgfId-1029569]## _PartialStateHolder_ extends _StateHolder_
and adds a usage contract for components that wish to take part in the
partial state saving mechanism introduced in version 2.0.
Implementations of this interface should use the
_javax.faces.component.StateHelper_ instance returned from
_UIComponent.getStateHelper()_ to store stateful component information
that otherwise would have been stored as instance variables on the class
implementing _PartialStateHolder_ .

===== [#50638851_pgfId-1029570]##Properties

[#50638851_pgfId-1029574]## _PartialStateHolder_ adds no properties to
the _StateHolder_ contract

===== [#50638851_pgfId-1029578]##[#50638851_3.2.6.2 Methods]##Methods

[#50638851_pgfId-1029579]##The following methods support the partial
state saving feature:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1029582]##void clearInitialState();

[#50638851_pgfId-1029583]## 

[#50638851_pgfId-1029584]##boolean initialStateMarked();

[#50638851_pgfId-1029595]## 

[#50638851_pgfId-1029596]##void markInitialState();

|===

[#50638851_pgfId-1029575]##These methods allow the state saving feature
to determine if the component is in its initial state or not, and to set
the flag indicating this condition of existence. The Javadocs for these
methods specify the conditions under which these methods are invoked.

===== [#50638851_pgfId-1029599]##Events

[#50638851_pgfId-1029603]## _PartialStateHolder_ does not originate any
standard events.

==== [#50638851_pgfId-1022608]##[#50638851_58138]##ValueHolder

[#50638851_pgfId-1022609]## _ValueHolder_ is an interface that may be
implemented by any concrete _UIComponent_ that wishes to support a local
value, as well as access data in the model tier via a _value expression_
, and support conversion between _String_ and the model tier data's
native data type.

===== [#50638851_pgfId-1022610]##[#50638851_3.2.5.1 Properties]##Properties

[#50638851_pgfId-1022644]##The following render-independent properties
are added by the _ValueHolder_ interface:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022613]##Name |[#50638851_pgfId-1022615]##Access
|[#50638851_pgfId-1022617]##Type |[#50638851_pgfId-1022619]##Description
|[#50638851_pgfId-1022621]##converter |[#50638851_pgfId-1022623]##RW
|[#50638851_pgfId-1022625]##Converter |[#50638851_pgfId-1022627]##The
_Converter_ (if any) that is registered for this UIComponent.

|[#50638851_pgfId-1022629]## _value_ |[#50638851_pgfId-1022631]##RW
|[#50638851_pgfId-1022633]## _Object_ |[#50638851_pgfId-1022635]##First
consult the local value property of this component. If non- _null_
return it. If the local value property is _null_ , see if we have a
_ValueExpression_ for the value property. If so, return the result of
evaluating the property, otherwise return _null_ .

|[#50638851_pgfId-1022637]##localValue |[#50638851_pgfId-1022639]##RO
|[#50638851_pgfId-1022641]##Object |[#50638851_pgfId-1022643]##allows
any value set by calling _setValue()_ to be returned, without
potentially evaluating a _ValueExpression_ the way that _getValue()_
will do
|===

[#50638851_pgfId-1022645]##Like nearly all component properties, the
_value_ property may have a value binding expression (see
link:JSF.htm#50638851_91832[See ValueExpression properties]) associated
with it. If present (and if there is no _value_ set directly on this
component), such an expression is utilized to retrieve a value
dynamically from a model tier object during _Render Response Phase_ of
the request processing lifecycle. In addition, for input components, the
value expression is used during _Update Model Values_ phase (on the
subsequent request) to push the possibly updated component value back to
the model tier object.

[#50638851_pgfId-1022649]##The _Converter_ property is used to allow the
component to know how to convert the model type from the _String_ format
provided by the Servlet API to the proper type in the model tier.

[#50638851_pgfId-1023421]##The _Converter_ property must be inspected
for the presence of _ResourceDependency_ and _ResourceDependencies_
annotations as described in the Javadocs for the _setConverter_ method.

===== [#50638851_pgfId-1022650]##Methods

[#50638851_pgfId-1022651]##ValueHolder adds no methods.

===== [#50638851_pgfId-1022652]##Events

[#50638851_pgfId-1022653]## _ValueHolder_ does not originate any
standard events.

==== [#50638851_pgfId-1022655]##[#50638851_45435]##EditableValueHolder

[#50638851_pgfId-1022658]##The _EditableValueHolder_ interface (extends
_ValueHolder_ , see link:JSF.htm#50638851_58138[See ValueHolder])
describes additional features supported by editable components,
including _ValueChangeEvents_ and _Validators_ .

===== [#50638851_pgfId-1022660]##Properties

[#50638851_pgfId-1022661]##The following render-independent properties
are added by the _EditableValueHolder_ interface:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638851_pgfId-1022664]##Name |[#50638851_pgfId-1022666]##Access
|[#50638851_pgfId-1022668]##Type |[#50638851_pgfId-1022670]##Description
|[#50638851_pgfId-1022672]##immediate |[#50638851_pgfId-1022674]##RW
|[#50638851_pgfId-1022676]##boolean |[#50638851_pgfId-1022678]##Flag
indicating that conversion and validation of this component’s value
should occur during _Apply Request Values_ phase instead of _Process
Validations_ phase.

|[#50638851_pgfId-1022680]##localValueSet |[#50638851_pgfId-1022682]##RW
|[#50638851_pgfId-1022684]##boolean |[#50638851_pgfId-1022686]##Flag
indicating whether the _value_ property has been set.

|[#50638851_pgfId-1022688]##required |[#50638851_pgfId-1022690]##RW
|[#50638851_pgfId-1022692]##boolean |[#50638851_pgfId-1022694]##Is the
user required to provide a non-empty value for this component? Default
value must be _false_ .

|[#50638851_pgfId-1022696]##submittedValue
|[#50638851_pgfId-1022698]##RW |[#50638851_pgfId-1022700]## _Object_
|[#50638851_pgfId-1022702]##The submitted, unconverted, value of this
component. This property should only be set by the decode() method of
this component, or its corresponding Renderer, or by the validate method
of this component. This property should only be read by the validate()
method of this component.

|[#50638851_pgfId-1022704]##valid |[#50638851_pgfId-1022706]##RW
|[#50638851_pgfId-1022708]##boolean |[#50638851_pgfId-1022710]##A flag
indicating whether the local value of this component is valid (that is,
no conversion error or validation error has occurred).

|[#50638851_pgfId-1022712]##validator |[#50638851_pgfId-1022714]##RW
|[#50638851_pgfId-1022716]##MethodBinding
|[#50638851_pgfId-1022718]##DEPRECATED A _MethodBinding_ that (if not
null) must point at a method accepting a _FacesContext_ and a _UIInput_
, with a return type of _void_ . This method will be called during
_Process Validations_ phase, after any validators that are externally
registered. See the javadocs for the backwards compatibility strategy.

|[#50638851_pgfId-1022720]##valueChangeListener
|[#50638851_pgfId-1022722]##RW |[#50638851_pgfId-1022724]##MethodBinding
|[#50638851_pgfId-1022726]##DEPRECATED A MethodBinding that (if not
null) must point at a method that accepts a _ValueChangeEvent_ , with a
return type of _void_ . The specified method will be called during the
_Process Validations_ phase of the request processing lifecycle, after
any externally registered _ValueChangeListener_ s. See the javadocs for
the backwards compatibility strategy.
|===

===== [#50638851_pgfId-1022727]##[#50638851_3.2.6.2 Methods]##Methods

[#50638851_pgfId-1022728]##The following methods support the validation
functionality performed during the _Process Validations_ phase of the
request processing lifecycle:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1023371]##public void addValidator(Validator
validator);

[#50638851_pgfId-1023372]## 

[#50638851_pgfId-1022733]##public void removeValidator(Validator
validator);

|===

[#50638851_pgfId-1022734]##The _addValidator()_ and _removeValidator()_
methods are used to register and deregister additional external
_Validator_ instances that will be used to perform correctness checks on
the local value of this component.

[#50638851_pgfId-1022735]##If the _validator_ property is not null, the
method it points at must be called by the _processValidations()_ method,
after the _validate()_ method of all registered _Validator_ s is called.

[#50638851_pgfId-1023368]##The addValidator’s Validator argument must be
inspected for the presense of the ResourceDependency and
ResourceDependencies annotations as described in the Javadocs for the
addValidator method.

===== [#50638851_pgfId-1022736]##[#50638851_61411]##Events

[#50638851_pgfId-1022737]## _EditableValueHolder_ is a source of
_ValueChangeEvent_ , _PreValidateEvent_ and _PostValidate_ events. These
are emitted during calls to _validate()_ , which happens during the
_Process Validations_ phase of the request processing lifecycle. The
_PreValidateEvent_ is published immediately before the component gets
validated. _PostValidate_ is published after validation has occurred,
regardless if the validation was successful or not. If the validation
for the component did pass successfully, and the previous value of this
component differs from the current value, the _ValueChangeEvent_ is
published. The following methods allow listeners to register and
deregister for _ValueChangeEvent_ s. __ See
link:JSF.htm#50638851_80722[See Event and Listener Model] for more
details on the event and listener model provided by JSF.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022743]##public void
addValueChangeListener(ValueChangeListener listener);

[#50638851_pgfId-1022744]## 

[#50638851_pgfId-1022745]##public void
removeValueChangeListener(ValueChangeListener listener);

|===

[#50638851_pgfId-1022746]##In addition to the above listener
registration methods, If the _valueChangeListener_ property is not
_null_ , the method it points at must be called by the _broadcast()_
method, after the _processValueChange()_ method of all registered
_ValueChangeListener_ s is called.

==== [#50638851_pgfId-1022747]##[#50638851_14153]##SystemEventListenerHolder

[#50638851_pgfId-1022748]##Classes that implement this interface agree
to maintain a list of _SystemEventListener_ instances for each kind of
_SystemEvent_ they can generate. This interface enables arbitrary
Objects to act as the source for _SystemEvent_ instances.

===== [#50638851_pgfId-1022749]##Properties

[#50638851_pgfId-1022750]##This interface contains no JavaBeans
properties

===== [#50638851_pgfId-1022751]##Methods

[#50638851_pgfId-1022752]##The following method gives the JSF runtime
access to the list of listeners stored by this instance.:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022755]##public List<FacesLifecycleListener>
getListenersForEventClass(Class<? extends SystemEvent> facesEventClass);
|===

[#50638851_pgfId-1022756]##During the processing for
_Application.publishEvent()_ , if the _source_ argument to that method
implements _SystemEventListenerHolder_ , the
_getListenersForEventClass()_ method is invoked on it, and each listener
in the list is given an opportunity to process the event, as specified
in the javadocs for _Application.publishEvent()_ .

===== [#50638851_pgfId-1022757]##Events

[#50638851_pgfId-1022758]##While the class that implements
_SystemEventListenerHolder_ is indeed a source of events, it is a call
to _Application.publishEvent()_ that causes the event to actually be
emitted. In the interest of maximum flexibility, this interface does not
define how listeners are added, removed, or stored. See
link:JSF.htm#50638851_80722[See Event and Listener Model] for more
details on the event and listener model provided by JSF.

==== [#50638851_pgfId-1028012]##[#50638851_ClientBehaviorHolder]##ClientBehaviorHolder

[#50638851_pgfId-1028016]##[P1-start-addBehavior] Components must
implement the _ClientBehaviorHolder_ interface to add the ability for
attaching ClientBehavior instances (see
link:JSF.htm#50638851_Component%20Behavior%20Model[See Component
Behavior Model]). Components that extend UIComponentBase only need to
implement the getEventNames() method and specify "implements
ClientBehaviorHolder". UIComponentBase provides base implementations for
all other methods. [P1-end] The concrete HTML component classes that
come with JSF implement the _ClientBehaviorHolder_ interface.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028031]##public void addClientBehavior(String
eventName, ClientBehavior behavior);
|===

[#50638851_pgfId-1028036]##Attach a ClientBehavior to a component
implementing this _ClientBehaviorHolder_ interface for the specified
event. A default implementation of this method is provided in
UIComponentBase to make it easier for subclass implementations to add
behaviors.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028046]##public Collection<String> getEventNames();
|===

{empty}[#50638851_pgfId-1028150]##Return a Collection of logical event
names that are supported by the component implementing this
_ClientBehaviorHolder_ interface. [P1-start-getEventNames]The Collection
must be non null and unmodifiable.[P1-end]

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028153]##public Map<String, List<ClientBehavior>>
getClientBehaviors();
|===

[#50638851_pgfId-1028154]##Return a Map containing the event-client
behavior association. Each event in the Map may contain one or more
ClientBehavior instances that were added via the addClientBehavior()
method.

{empty}[#50638851_pgfId-1028160]##[P1-start-getBehaviors]Each key value
in this Map must be one of the event names in the Collection returned
from getEventNames().[P1-end]

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028157]##public String getDefaultEventName();
|===

[#50638851_pgfId-1028085]##Return the default event name for this
component behavior if the component defines a default event.

=== [#50638851_pgfId-1022763]##

image:JSF-17.gif[image]

[#50638851_91636]##Conversion Model

[#50638851_pgfId-1022764]##This section describes the facilities
provided by JavaServer Faces to support type conversion between
server-side Java objects and their (typically String-based)
representation in presentation markup.

==== [#50638851_pgfId-1022765]##Overview

[#50638851_pgfId-1022766]##A typical web application must constantly
deal with two fundamentally different viewpoints of the underlying data
being manipulated through the user interface:

[#50638851_pgfId-1022767]##The _model_ view—Data is typically
represented as Java programming language objects (often JavaBeans
components), with data represented in some native Java programming
language datatype. For example, date and time values might be
represented in the model view as instances of _java.util.Date_ .

[#50638851_pgfId-1022768]##The _presentation_ view—Data is typically
represented in some form that can be perceived or modified by the user
of the application. For example, a date or type value might be
represented as a text string, as three text strings (one each for
month/date/year or one each for hour/minute/second), as a calendar
control, associated with a spin control that lets you increment or
decrement individual elements of the date or time with a single mouse
click, or in a variety of other ways. Some presentation views may depend
on the preferred language or locale of the user (such as the commonly
used mm/dd/yy and dd/mm/yy date formats, or the variety of punctuation
characters in monetary amount presentations for various currencies).

[#50638851_pgfId-1022769]##To transform data formats between these
views, JavaServer Faces provides an ability to plug-in an optional
_Converter_ for each _ValueHolder_ , which has the responsibility of
converting the internal data representation between the two views. The
application developer attaches a particular _Converter_ to a particular
_ValueHolder_ by calling _setConverter_ , passing an instance of the
particular converter. A _Converter_ implementation may be acquired from
the _Application_ instance (see link:JSF.htm#50638861_19251[See Object
Factories]) for your application.

==== [#50638851_pgfId-1022774]##[#50638851_3.3.2 Converter]##Converter

[#50638851_pgfId-1022775]##JSF provides the
_javax.faces.convert.Converter_ interface to define the behavioral
characteristics of a _Converter_ . Instances of implementations of this
interface are either identified by a _converter identifier_ , or by a
class for which the _Converter_ class asserts that it can perform
successful conversions, which can be registered with, and later
retrieved from, an _Application_ , as described in
link:JSF.htm#50638861_19251[See Object Factories].

[#50638851_pgfId-1022779]##Often, a _Converter_ will be an object that
requires no extra configuration information to perform its
responsibilities. However, in some cases, it is useful to provide
configuration parameters to the _Converter_ (such as a
_java.text.DateFormat_ pattern for a _Converter_ that supports
_java.util.Date_ model objects). Such configuration information will
generally be provided via JavaBeans properties on the _Converter_
instance.

[#50638851_pgfId-1022780]## _Converter_ implementations should be
programmed so that the conversions they perform are symmetric. In other
words, if a model data object is converted to a String (via a call to
the _getAsString_ method), it should be possible to call _getAsObject_
and pass it the converted String as the value parameter, and return a
model data object that is semantically equal to the original one. In
some cases, this is not possible. For example, a converter that uses the
formatting facilities provided by the _java.text.Format_ class might
create two adjacent integer numbers with no separator in between, and in
this case the _Converter_ could not tell which digits belong to which
number.

[#50638851_pgfId-1022781]##For _UIInput_ and _UIOutput_ components that
wish to explicitly select a _Converter_ to be used, a new _Converter_
instance of the appropriate type must be created, optionally configured,
and registered on the component by calling _setConverter()_
link:#pgfId-1022784[4]. Otherwise, the JSF implementation will
automatically create new instances based on the data type being
converted, if such Converter classes have been registered. In either
case, Converter implementations need not be threadsafe, because they
will be used only in the context of a single request processing thread.

[#50638851_pgfId-1022788]##The following two method signatures are
defined by the _Converter_ interface:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022787]##public Object getAsObject(FacesContext
context, UIComponent component, String value) throws ConverterException;
|===

[#50638851_pgfId-1022789]##This method is used to convert the
presentation view of a component’s value (typically a String that was
received as a request parameter) into the corresponding model view. It
is called during the _Apply Request Values_ phase of the request
processing lifecycle.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022792]##public String getAsString(FacesContext
context, UIComponent component, Object value) throws ConverterException;
|===

[#50638851_pgfId-1022793]##This method is used to convert the model view
of a component’s value (typically some native Java programming language
class) into the presentation view (typically a String that will be
rendered in some markup language. It is called during the _Render
Response_ phase of the request processing lifecycle.

{empty}[#50638851_pgfId-1023897]##[P1-start-converter-resource]If the
class implementing Converter has a ResourceDependency annotation or a
ResourceDependencies annotation, the action described in the Javadocs
for the Converter interface must be followed when
ValueHolder.setConverter is called.[P1-end]

==== [#50638851_pgfId-1023899]##[#50638851_39429]##Standard Converter Implementations

[#50638851_pgfId-1022796]##JSF provides a set of standard _Converter_
implementations. A JSF implementation must register the _DateTime_ and
_Number_ converters by name with the _Application_ instance for this web
application, as described in the table below. This ensures that the
converters are available for subsequent calls to
_Application.createConverter()_ . Each concrete implementation class
must define a static final String constant _CONVERTER_ID_ whose value is
the standard converter id under which this Converter is registered.

[#50638851_pgfId-1022797]##[P1-start standard converters] The following
converter id values must be registered to create instances of the
specified Converter implementation classes:

[#50638851_pgfId-1022798]## _javax.faces.BigDecimal_ -- An instance of
_javax.faces.convert.BigDecimalConverter_ (or a subclass of this class).

[#50638851_pgfId-1022799]## _javax.faces.BigInteger_ -- An instance of
_javax.faces.convert.BigIntegerConverter_ (or a subclass of this class).

[#50638851_pgfId-1022800]## _javax.faces.Boolean_ -- An instance of
_javax.faces.convert.BooleanConverter_ (or a subclass of this class).

[#50638851_pgfId-1022801]## _javax.faces.Byte_ -- An instance of
_javax.faces.convert.ByteConverter_ (or a subclass of this class).

[#50638851_pgfId-1022802]## _javax.faces.Character_ -- An instance of
_javax.faces.convert.CharacterConverter_ (or a subclass of this class).

[#50638851_pgfId-1022803]## _javax.faces.DateTime_ -- An instance of
_javax.faces.convert.DateTimeConverter_ (or a subclass of this class).

[#50638851_pgfId-1022804]## _javax.faces.Double_ -- An instance of
_javax.faces.convert.DoubleConverter_ (or a subclass of this class).

[#50638851_pgfId-1022805]## _javax.faces.Float_ -- An instance of
_javax.faces.convert.FloatConverter_ (or a subclass of this class).

[#50638851_pgfId-1022806]## _javax.faces.Integer_ -- An instance of
_javax.faces.convert.IntegerConverter_ (or a subclass of this class).

[#50638851_pgfId-1022807]## _javax.faces.Long_ -- An instance of
_javax.faces.convert.LongConverter_ (or a subclass of this class).

[#50638851_pgfId-1022808]## _javax.faces.Number_ -- An instance of
_javax.faces.convert.NumberConverter_ (or a subclass of this class).

[#50638851_pgfId-1022809]## _javax.faces.Short_ -- An instance of
_javax.faces.convert.ShortConverter_ (or a subclass of this class).

[#50638851_pgfId-1022810]##[P1-end] See the Javadocs for these classes
for a detailed description of the conversion operations they perform,
and the configuration properties that they support.

[#50638851_pgfId-1022811]##[P1-start by-Class converters] A JSF
implementation must register converters for all of the following classes
using the by-type registration mechanism:

[#50638851_pgfId-1022812]## _java.math.BigDecimal,_ and
_java.math.BigDecimal.TYPE_ -- An instance of
_javax.faces.convert.BigDecimalConverter_ (or a subclass of this class)
_._

[#50638851_pgfId-1022813]## _java.math.BigInteger,_ and
_java.math.BigInteger.TYPE_ -- An instance of
_javax.faces.convert.BigIntegerConverter_ (or a subclass of this class)
_._

[#50638851_pgfId-1022814]## _java.lang.Boolean_ , and
_java.lang.Boolean.TYPE_ -- An instance of
_javax.faces.convert.BooleanConverter_ (or a subclass of this class).

[#50638851_pgfId-1022815]## _java.lang.Byte_ , and _java.lang.Byte.TYPE_
-- An instance of _javax.faces.convert.ByteConverter_ (or a subclass of
this class).

[#50638851_pgfId-1022816]## _java.lang.Character_ , and
_java.lang.Character.TYPE_ -- An instance of
_javax.faces.convert.CharacterConverter_ (or a subclass of this class).

[#50638851_pgfId-1022817]## _java.lang.Double_ , and
_java.lang.Double.TYPE_ -- An instance of
_javax.faces.convert.DoubleConverter_ (or a subclass of this class).

[#50638851_pgfId-1022818]## _java.lang.Float_ , and
_java.lang.Float.TYPE_ -- An instance of
_javax.faces.convert.FloatConverter_ (or a subclass of this class).

[#50638851_pgfId-1022819]## _java.lang.Integer_ , and
_java.lang.Integer.TYPE_ -- An instance of
_javax.faces.convert.IntegerConverter_ (or a subclass of this class).

[#50638851_pgfId-1022820]## _java.lang.Long_ , and _java.lang.Long.TYPE_
-- An instance of _javax.faces.convert.LongConverter_ (or a subclass of
this class).

[#50638851_pgfId-1022821]## _java.lang.Short_ , and
_java.lang.Short.TYPE_ -- An instance of
_javax.faces.convert.ShortConverter_ (or a subclass of this class).

[#50638851_pgfId-1022822]## _java.lang.Enum_ , and _java.lang.Enum.TYPE_
-- An instance of _javax.faces.convert.EnumConverter_ (or a subclass of
this class).

[#50638851_pgfId-1022823]##[P1-end] See the Javadocs for these classes
for a detailed description of the conversion operations they perform,
and the configuration properties that they support.

{empty}[#50638851_pgfId-1022824]##[P1-start allowing string converters]
A compliant implementation must allow the registration of a converter
for class _java.lang.String_ and _java.lang.String.TYPE_ that will be
used to convert values for these types. [P1-end]

=== [#50638851_pgfId-1022826]##

image:JSF-17.gif[image]

[#50638851_80722]##Event and Listener Model

[#50638851_pgfId-1022827]##This section describes how JavaServer Faces
provides support for generating and handling user interface events and
system events.

==== [#50638851_pgfId-1022829]##[#50638851_84579]##Overview

[#50638851_pgfId-1022830]##JSF implements a model for event notification
and listener registration based on the design patterns in the _JavaBeans
Specification_ , version 1.0.1. This is similar to the approach taken in
other user interface toolkits, such as the Swing Framework included in
the JDK.

[#50638851_pgfId-1023241]##A _UIComponent_ subclass may choose to emit
_events_ that signify significant state changes, and broadcast them to
_listeners_ that have registered an interest in receiving events of the
type indicated by the event’s implementation class. At the end of
several phases of the request processing lifecycle, the JSF
implementation will broadcast all of the events that have been queued to
interested listeners. As of JSF version 2, the specification also
defines _system events_ . System events are events that are not specific
to any particular application, but rather stem from specific points in
time of running a JSF application. The following UML class diagram
illustrates the key players in the event model. Boxes shaded in gray
indicate classes or interfaces defined outside of the
_javax.faces.event_ package.

[#50638851_pgfId-1023302]## 

image:JSF-18.gif[image]

==== [#50638851_pgfId-1023289]##[#50638851_93935]##Application Events

[#50638851_pgfId-1022835]##Application events are events that are
specific to a particular application. Application events are the
standard events that have been in JSF from the beginning.

===== [#50638851_pgfId-1026896]##[#50638851_27996]##Event Classes

[#50638851_pgfId-1026897]##All events that are broadcast by JSF user
interface components must extend the _javax.faces.event.FacesEvent_
abstract base class. The parameter list for the constructor(s) of this
event class must include a _UIComponent_ , which identifies the
component from which the event will be broadcast to interested
listeners. The source component can be retrieved from the event object
itself by calling _getComponent_ . Additional constructor parameters
and/or properties on the event class can be used to relay additional
information about the event.

[#50638851_pgfId-1026898]##In conformance to the naming patterns defined
in the _JavaBeans Specification_ , event classes typically have a class
name that ends with _Event_ . It is recommended that application event
classes follow this naming pattern as well.

[#50638851_pgfId-1026902]##The component that is the source of a
FacesEvent can be retrieved via this method:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1026901]##public UIComponent getComponent();
|===

[#50638851_pgfId-1022846]## _FacesEvent_ has a _phaseId_ property (of
type _PhaseId_ , see link:JSF.htm#50638851_84785[See Phase Identifiers])
used to identify the request processing lifecycle phase after which the
event will be delivered to interested listeners.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022850]##public PhaseId getPhaseId();

[#50638851_pgfId-1022851]## 

[#50638851_pgfId-1022852]##public void setPhaseId(PhaseId phaseId);

|===

[#50638851_pgfId-1022853]##If this property is set to PhaseId.ANY_PHASE
(which is the default), the event will be delivered at the end of the
phase in which it was enqueued.

[#50638851_pgfId-1022854]##To facilitate general management of event
listeners in JSF components, a _FacesEvent_ implementation class must
support the following methods:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022857]##public abstract boolean
isAppropriateListener(FacesListener listener);

[#50638851_pgfId-1022858]## 

[#50638851_pgfId-1022859]##public abstract void
processListener(FacesListener listener);

|===

[#50638851_pgfId-1022860]##The _isAppropriateListener()_ method returns
true if the specified _FacesListener_ is a relevant receiver of this
type of event. Typically, this will be implemented as a simple
“instanceof” check to ensure that the listener class implements the
_FacesListener_ subinterface that corresponds to this event class

[#50638851_pgfId-1022861]##The _processListener()_ method must call the
appropriate event processing method on the specified listener.
Typically, this will be implemented by casting the listener to the
corresponding _FacesListener_ subinterface and calling the appropriate
event processing method, passing this event instance as a parameter.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1022864]##public void queue();
|===

[#50638851_pgfId-1022865]##The above convenience method calls the
_queueEvent()_ method of the source _UIComponent_ for this event,
passing this event as a parameter.

[#50638851_pgfId-1026657]##JSF includes two standard _FacesEvent_
subclasses, which are emitted by the corresponding standard
_UIComponent_ subclasses described in the following chapter.

[#50638851_pgfId-1026658]## _ActionEvent—_ Emitted by a _UICommand_
component when the user activates the corresponding user interface
control (such as a clicking a button or a hyperlink).

[#50638851_pgfId-1022868]## _ValueChangeEvent_ —Emitted by a _UIInput_
component (or appropriate subclass) when a new local value has been
created, and has passed all validations.

===== [#50638851_pgfId-1022870]##[#50638851_82628]##Listener Classes

[#50638851_pgfId-1022871]##For each event type that may be emitted, a
corresponding listener interface must be created, which extends the
_javax.faces.event.FacesListener_ interface. The method signature(s)
defined by the listener interface must take a single parameter, an
instance of the event class for which this listener is being created. A
listener implementation class will implement one or more of these
listener interfaces, along with the event handling method(s) specified
by those interfaces. The event handling methods will be called during
event broadcast, one per event.

[#50638851_pgfId-1022872]##In conformance to the naming patterns defined
in the _JavaBeans Specification_ , listener interfaces have a class name
based on the class name of the event being listened to, but with the
word _Listener_ replacing the trailing _Event_ of the event class name
(thus, the listener for a _FooEvent_ would be a _FooListener_ ). It is
recommended that application event listener interfaces follow this
naming pattern as well.

[#50638851_pgfId-1022873]##Corresponding to the two standard event
classes described in the previous section, JSF defines two standard
event listener interfaces that may be implemented by application
classes:

[#50638851_pgfId-1022874]## _ActionListener_ —a listener that is
interested in receiving _ActionEvent_ events.

[#50638851_pgfId-1022875]## _ValueChangeListener_ —a listener that is
interested in receiving _ValueChangeEvent_ events.

===== [#50638851_pgfId-1022877]##[#50638851_84785]##Phase Identifiers

[#50638851_pgfId-1022881]##As described in
link:JSF.htm#50638877_24408[See Common Event Processing], event handling
occurs at the end of several phases of the request processing lifecycle.
In addition, a particular event must indicate, through the value it
returns from the _getPhaseId()_ method, the phase in which it wishes to
be delivered. This indication is done by returning an instance of
_javax.faces.event.PhaseId_ . The class defines a typesafe enumeration
of all the legal values that may be returned by _getPhaseId()_ . In
addition, a special value ( _PhaseId.ANY_PHASE_ ) may be returned to
indicate that this event wants to be delivered at the end of the phase
in which it was queued.

===== [#50638851_pgfId-1022882]##[#50638851_Listener Registration]##Listener Registration

[#50638851_pgfId-1022883]##A concrete _UIComponent_ subclass that emits
events of a particular type must include public methods to register and
deregister a listener implementation. [P1-start listener methods must
conform to javabeans naming] In order to be recognized by development
tools, these listener methods must follow the naming patterns defined in
the _JavaBeans Specification_ . [P1-end] For example, for a component
that emits _FooEvent_ events, to be received by listeners that implement
the _FooListener_ interface, the method signatures (on the component
class) must be:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1022886]##public void addFooListener(FooListener
listener);

[#50638851_pgfId-1022887]## 

[#50638851_pgfId-1022888]##public FooListener[] getFooListeners();

[#50638851_pgfId-1022889]## 

[#50638851_pgfId-1022890]##public void removeFooListener(FooListener
listener);

|===

[#50638851_pgfId-1022891]##The application (or other components) may
register listener instances at any time, by calling the appropriate add
method. The set of listeners associated with a component is part of the
state information that JSF saves and restores. Therefore, listener
implementation classes must have a public zero-argument constructor, and
may implement _StateHolder_ (see link:JSF.htm#50638851_95437[See
StateHolder]) if they have internal state information that needs to be
saved and restored.

[#50638851_pgfId-1022895]##The _UICommand_ and _UIInput_ standard
component classes include listener registration and deregistration
methods for event listeners associated with the event types that they
emit. The _UIInput_ methods are also inherited by _UIInput_ subclasses,
including _UISelectBoolean_ , _UISelectMany_ , and _UISelectOne_ .

===== [#50638851_pgfId-1022896]##Event Queueing

[#50638851_pgfId-1022897]##During the processing being performed by any
phase of the request processing lifecycle, events may be created and
queued by calling the _queueEvent()_ method on the source _UIComponent_
instance, or by calling the _queue()_ method on the _FacesEvent_
instance itself. As described in link:JSF.htm#50638877_24408[See Common
Event Processing], at the end of certain phases of the request
processing lifecycle, any queued events will be broadcast to interested
listeners in the order that the events were originally queued.

[#50638851_pgfId-1022901]##Deferring event broadcast until the end of a
request processing lifecycle phase ensures that the entire component
tree has been processed by that state, and that event listeners all see
the same consistent state of the entire tree, no matter when the event
was actually queued.

===== [#50638851_pgfId-1022903]##[#50638851_39095]##[#50638851_3.4.2.6 Event Broadcasting]##Event Broadcasting

[#50638851_pgfId-1022907]##As described in
link:JSF.htm#50638877_24408[See Common Event Processing], at the end of
each request processing lifecycle phase that may cause events to be
queued, the lifecycle management method of the _UIViewRoot_ component at
the root of the component tree will iterate over the queued events and
call the _broadcast()_ method on the source component instance to
actually notify the registered listeners. See the Javadocs of the
_broadcast()_ method for detailed functional requirements.

[#50638851_pgfId-1022908]##During event broadcasting, a listener
processing an event may:

[#50638851_pgfId-1022909]##Examine or modify the state of any component
in the component tree.

[#50638851_pgfId-1022910]##Add or remove components from the component
tree.

[#50638851_pgfId-1022911]##Add messages to be returned to the user, by
calling _addMessage_ on the _FacesContext_ instance for the current
request.

[#50638851_pgfId-1022912]##Queue one or more additional events, from the
same source component or a different one, for processing during the
current lifecycle phase.

[#50638851_pgfId-1022913]##Throw an _AbortProcessingException_ , to tell
the JSF implementation that no further broadcast of this event should
take place.

[#50638851_pgfId-1022914]##Call _renderResponse()_ on the _FacesContext_
instance for the current request. This tells the JSF implementation
that, when the current phase of the request processing lifecycle has
been completed, control should be transferred to the _Render Response_
phase.

[#50638851_pgfId-1022915]##Call _responseComplete()_ on the
_FacesContext_ instance for the current request. This tells the JSF
implementation that, when the current phase of the request processing
lifecycle has been completed, processing for this request should be
terminated (because the actual response content has been generated by
some other means).

==== [#50638851_pgfId-1022916]##[#50638851_52454]##System Events

[#50638851_pgfId-1024729]##System Events are introduced in version 2 of
the specification and represent specific points in time for a JSF
application. _PhaseEvent_ s also represent specific points in time in a
JSF application, but the granularity they offer is not as precise as
System Events. For more on _PhaseEvent_ s, please see
link:JSF.htm#50638859_72521[See PhaseEvent].

===== [#50638851_pgfId-1022918]##[#50638851_3.4.3.1 Event Classes]##Event Classes

[#50638851_pgfId-1022919]##All system events extend from the base class
_SystemEvent_ . _SystemEvent_ has a similar API to _FacesEvent_ , but
the _source_ of the event is of type _Object_ (instead of _UIComponent_
), _SystemEvent_ has no _PhaseId_ property and _SystemEvent_ has no
_queue()_ method because _SystemEvent_ s are never queued. _SystemEvent_
shares _isAppropriateListener()_ _and processListener()_ with
_FacesEvent_ . __ For the specification of these methods see
_link:JSF.htm#50638851_27996[See Event Classes]_ .

[#50638851_pgfId-1022991]##System events that originate from or are
associated with specific component instances should extend from
_ComponentSystemEvent_ , which extends _SystemEvent_ and adds a
_getComponent()_ method, as specififed in
_link:JSF.htm#50638851_27996[See Event Classes]_ .

[#50638851_pgfId-1029039]##The specification defines the following
_SystemEvent_ subclasses, all in package _javax.faces.event_ . __

[#50638851_pgfId-1029040]## _ExceptionQueuedEvent_ indicates a
non-expected _Exception_ has been thrown. Please see
link:JSF.htm#50638857_91184[See ExceptionHandler] for the normative
specification.

[#50638851_pgfId-1029051]## _PostConstructApplicationEvent_ must be
published immediately after application startup. Please see
link:JSF.htm#50638850_57048[See Application Startup Behavior] for the
normative specification.

[#50638851_pgfId-1029052]## _PreDestroyApplicationEvent_ must be
published as immediately before application shutdown. Please see
link:JSF.htm#50638850_69589[See Application Shutdown Behavior] for the
normative specification

[#50638851_pgfId-1030641]## _PostKeepFlashEvent_ This event must be
published by a call to _Application.publishEvent()_ when a value is kept
in the flash.

[#50638851_pgfId-1030693]## _PostPutFlashEvent_ This event must be
published by a call to _Application.publishEvent()_ when a value is
stored in the flash.

[#50638851_pgfId-1030718]## _PreClearFlashEvent_ This event must be
published by a call to _Application.publishEvent()_ when a before the
flash is cleared.

[#50638851_pgfId-1030780]## _PreRemoveFlashEvent_ This event must be
published by a call to _Application.publishEvent()_ when a value is
removed from the flash.

[#50638851_pgfId-1022996]##The specification defines the following
_ComponentSystemEvent_ classes, all in package _javax.faces.event_ .

[#50638851_pgfId-1022997]## _InitialStateEvent_ must be published with a
direct call to _UIComponent.processEvent()_ , during the _apply()_
method of the class _javax.faces.webapp.vdl.ComponentHandler_ . Please
see the javadocs for the normative specification.

[#50638851_pgfId-1029081]## _PostAddToViewEvent_ indicates that the
_source_ component has just been added to the view. Please see
link:JSF.htm#50638851_23043[See Component Tree Manipulation] for a
reference to the normative specification.

[#50638851_pgfId-1029133]## _PostConstructViewMapEvent_ indicates that
the _Map_ that is the view scope has just been created. Please see, the
UIViewRoot link:JSF.htm#50638853_4.1.17.4%20Events[See Events] for a
reference to the normative specification.

[#50638851_pgfId-1030968]##PostRenderViewEvent indicates that the
UIViewRoot source component has just been rendered. Please see Section
2.2.6 “Render Response” for the normative specification.

[#50638851_pgfId-1023034]##PostRestoreStateEvent indicates that an
individual component instance has just had its state restored. Please
see the _UIViewRoot_ link:JSF.htm#50638853_4.1.17.4%20Events[See Events]
for a reference to the normative specification.

[#50638851_pgfId-1029150]##PostValidateEvent indicates that an
individual component instance has just been validated. Please see the
_EditableValueHolder_ link:JSF.htm#50638851_61411[See Events] for the
normative specification.

[#50638851_pgfId-1023036]## _PreDestroyViewMapEvent_ indicates that the
_Map_ that is the view scope is about to be destroyed. Please see, the
UIViewRoot link:JSF.htm#50638853_84800[See Properties] for the normative
specification.

[#50638851_pgfId-1029180]## _PreRenderComponentEvent_ indicates that the
_source_ component is about to be rendered. Please see
link:JSF.htm#50638851_23043[See Component Tree Manipulation] for a
reference to the normative specification.

[#50638851_pgfId-1029187]## _PreRenderViewEvent_ indicates that the
_UIViewRoot_ source component is about to be rendered. Please see
link:JSF.htm#50638877_70838[See Render Response] for the normative
specification.

[#50638851_pgfId-1029199]##PreValidateEvent indicates that an individual
component instance is about to be validated. Please see the
_EditableValueHolder_ link:JSF.htm#50638851_61411[See Events] for the
normative specification.

===== [#50638851_pgfId-1025532]##Listener Classes

[#50638851_pgfId-1023047]##Unlike application events, the creation of
new event types for system events does not require the creation of new
listener interfaces. All _SystemEvent_ types can be listened for by
listeners that implement _javax.faces.event.SystemEventListener_ .
Please see the javadocs for that class for the complete specification.

[#50638851_pgfId-1023050]##As a developer convenience, the listener
interface _ComponentSystemEventListener_ has been defined for those
cases when a _SystemEventListener_ is being attached to a specific
_UIComponent_ instance. _ComponentSystemEventListener_ lacks the
_isListenerForSource()_ method because it is implcictly defined by
virture of the listener being added to a specific component instance.

===== [#50638851_pgfId-1022922]##Programmatic Listener Registration

[#50638851_pgfId-1023054]##System events may be listened for at the
Application level, using _Application.subscribeToEvent()_ or at the
component level, by calling _subscribeToEvent()_ on a specific component
instance. The specification for _Application.subscribeToEvent()_ may be
found in _link:JSF.htm#50638861_42183[See System Event Methods]_ .

[#50638851_pgfId-1023086]##The following methods are defined on
_UIComponent_ to support per-component system events.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1023079]##public void subscribeToEvent(Class<? extends
SystemEvent> eventClass, ComponentSystemEventListener
componentListener);

[#50638851_pgfId-1023133]##public void unsubscribeFromEvent(Class<?
extends SystemEvent> eventClass, ComponentSystemEventListener
componentListener);

|===

[#50638851_pgfId-1023975]##See the javadoc for _UIComponent_ for the
normative specification of these methods.

[#50638851_pgfId-1024713]##In addition to the above methods, the
_@ListenerFor_ and _@ListenersFor_ annotations allow components,
renderers, validators and converters to declare that they want to
register for system events. Please see the javadocs for those
annotations for the complete specification.

===== [#50638851_pgfId-1025537]##[#50638851_98213]##Declarative Listener Registration

[#50638851_pgfId-1025584]##Page authors can subscribe to events using
the <f:event/> tag. This tag will allow the application developer to
specify the method to be called when the specifed event fires for the
component of which the tag is a child. The tag usage is as follows:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1025587]##<h:inputText value="#\{myBean.text}">

[#50638851_pgfId-1025588]## <f:event type="preRenderComponent"

[#50638851_pgfId-1025589]## listener="#\{myBean.beforeTextRender}" />

[#50638851_pgfId-1025590]##</h:inputText>

|===

[#50638851_pgfId-1025596]##The _type_ attribute specifies the type of
event, and can be any of the specification-defined events or one of any
user-defined events, but must be a _ComponentSystemEvent_ , using either
the short-hand name for the event or the fully-qualified class name
(e.g., _com.foo.app.event.CustomEvent_ ). If the event can not be found,
a _FacesException_ listing the offending event type will be thrown.
Please see the VDLDocs for the _<f:event />_ tag for the normative
specification of the declarative event feature.

[#50638851_pgfId-1029668]##The method signature for the
_MethodExpression_ pointed to by the _listener_ attribute must match the
signature of
_javax.faces.event.ComponentSystemEventListener.processEvent()_ , which
is:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1029664]##public void
processEvent(javax.faces.event.ComponentSystemEvent event) throws
AbortProcessingException.
|===

[#50638851_pgfId-1025592]## 

===== [#50638851_pgfId-1023976]##[#50638851_3.4.3.4 Listener Registration By Annotation]##Listener Registration By Annotation

[#50638851_pgfId-1023991]##The _ListenerFor_ and _ListenersFor_
annotations can be applied to components and rendererers. Classes tagged
with the _ListenerFor_ annotation are installed as listeners. The
_ListenersFor_ annotation is a container annotation tp specify multiple
_ListenerFor_ annotations for a single class. Please refer to the
Javadocs for the _ListenerFor_ and _ListenersFor classes for more
details._

===== [#50638851_pgfId-1028472]##Listener Registration By Application Configuration Resources

[#50638851_pgfId-1028476]##A _<system-event-listener>_ element, within
the _<application>_ element of an application configuration resource,
declares an application scoped listener and causes a call to
_Application.subscribeToEvent()_ .

===== [#50638851_pgfId-1023977]##Event Broadcasting

[#50638851_pgfId-1023978]##System events are broadcast immediately by
calls to _Application.publishEvent()_ Please see
link:JSF.htm#50638861_42183[See System Event Methods] for the normative
specification of _publishEvent()_ .

=== [#50638851_pgfId-1023983]##

image:JSF-17.gif[image]

[#50638851_97068]##Validation Model

[#50638851_pgfId-1022926]##This section describes the facilities
provided by JavaServer Faces for validating user input.

==== [#50638851_pgfId-1022927]##Overview

[#50638851_pgfId-1022928]##JSF supports a mechanism for registering zero
or more _validators_ on each _EditableValueHolder_ component in the
component tree. A validator’s purpose is to perform checks on the local
value of the component, during the _Process Validations_ phase of the
request processing lifecycle. In addition, a component may implement
internal checking in a _validate_ method that is part of the component
class.

==== [#50638851_pgfId-1022930]##[#50638851_52434]##[#50638851_3.5.2 Validator Classes]##Validator Classes

[#50638851_pgfId-1022931]##A validator must implement the
_javax.faces.validator.Validator_ interface, which contains a
_validate()_ method signature.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028185]## _public void validate(FacesContext context,
UIComponent component, Object value);_
|===

[#50638851_pgfId-1028181]##General purpose validators may require
configuration values in order to define the precise check to be
performed. For example, a validator that enforces a maximum length might
wish to support a configurable length limit. Such configuration values
are typically implemented as JavaBeans component properties, and/or
constructor arguments, on the _Validator_ implementation class. In
addition, a validator may elect to use generic attributes of the
component being validated for configuration information.

[#50638851_pgfId-1022934]##JSF includes implementations of several
standard validators, as described in link:JSF.htm#50638851_46579[See
Standard Validator Implementations].

==== [#50638851_pgfId-1022936]##[#50638851_63282]##Validation Registration

[#50638851_pgfId-1022937]##The _EditableValueHolder_ interface
(implemented by _UIInput_ ) includes an _addValidator_ method to
register an additional validator for this component, and a
_removeValidator_ method to remove an existing registration. In JSF 1.1
there was the ability to set a _MethodBinding_ that points to a method
that adheres to the _validate_ signature in the _Validator_ interface,
which will be called after the Validator instances added by calling
addValidator() have been invoked. In JSF 1.2, this has been replaced by
providing a new wrapper class that implements _Validator_ , and accepts
a _MethodExpression_ instance that points to the same method that the
_MethodBinding_ pointed to in JSF 1.1. Please see the javadocs for
_EditableValueHolder.setValidator()_ .

[#50638851_pgfId-1022938]##The application (or other components) may
register validator instances at any time, by calling the _addValidator_
method. The set of validators associated with a component is part of the
state information that JSF saves and restores. Validators that wish to
have configuration properties saved and restored must also implement
_StateHolder_ (see link:JSF.htm#50638851_95437[See StateHolder]).

[#50638851_pgfId-1025688]##In addition to validators which are
registered explicitly on the component, either through the Java API or
in the view markup, zero or more “default validators” can be declared in
the application configuration resources, which will be registered on all
_UIInput_ instances in the component tree unless explicitly disabled.
[P1-start-validator-reg]The default validators are appended after any
locally defined validators once the _EditableValueHolder_ is populated
and added to the component tree. A default validator must not be added
to a _UIInput_ if a validator having the same id is already present.

[#50638851_pgfId-1025952]##The typical way of registering a default
validator id is by declaring it in a configuration resource, as follows:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1025964]## _<faces-config>_

[#50638851_pgfId-1025965]## < _application>_

[#50638851_pgfId-1025966]## < _default-validators>_

[#50638851_pgfId-1025967]##
_<validator-id>javax.faces.Bean</validator-id>_

[#50638851_pgfId-1025968]##</ _default-validators>_

[#50638851_pgfId-1025969]## < _application/>_

[#50638851_pgfId-1025970]## _</faces-config>_

[#50638851_pgfId-1025951]## 

|===

[#50638851_pgfId-1025960]##A default validator may also be registered
using the _isDefault_ attribute on the _@FacesValidator_ annotation on a
_Validator_ class, as specified in link:JSF.htm#50638850_27931[See
Requirements for scanning of classes for annotations].

[#50638851_pgfId-1028432]##The during application startup, the runtime
must cause any default validators declared either in the application
configuration resources, or via a _@FacesValidator_ annotation with
_isDefault_ set to _true_ to be added with a call to
_Application.addDefaultValidatorId()_ . This method is declared in
link:JSF.htm#50638861_68197[See Default Validator Ids].

[#50638851_pgfId-1028428]##Any configuration resource that declares a
list of default validators overrides any list provided in a previously
processed configuration resource. If an empty _<default-validators/>_
element is found in a configuration resource, the list of default
validators must be cleared.

[#50638851_pgfId-1029330]##In environments that include Bean Validation,
the following additional actions must be taken at startup time. If the
_javax.faces.validator.DISABLE_DEFAULT_BEAN_VALIDATOR_ _<context-param>_
exists and its value is _true_ , the following step must be skipped:

{empty}[#50638851_pgfId-1029335]##The runtime must guarantee that the
validator id _javax.faces.Bean_ is included in the result from a call to
_Application.getDefaultValidatorInfo()_ (see
link:JSF.htm#50638861_68197[See Default Validator Ids]), regardless of
any configuration found in the application configuration resources or
via the _@FacesValidator_ annotation.[P1-end]

==== [#50638851_pgfId-1022942]##Validation Processing

[#50638851_pgfId-1022943]##During the _Process Validations_ phase of the
request processing lifecycle (as described in
link:JSF.htm#50638877_27358[See Process Validations]), the JSF
implementation will ensure that the _validate()_ method of each
registered _Validator_ , the method referenced by the _validator_
property (if any), and the _validate_ () method of the component itself,
is called for each _EditableValueHolder_ component in the component
tree, regardless of the validity state of any of the components in the
tree. The responsibilities of each _validate()_ method include:

[#50638851_pgfId-1022947]##Perform the check for which this validator
was registered.

[#50638851_pgfId-1022948]##If violation(s) of the correctness rules are
found, create a _FacesMessage_ instance describing the problem, and
create a _ValidatorException_ around it, and throw the
_ValidatorException_ . The _EditableValueHolder_ on which this
validation is being performed will catch this exception, set _valid_ to
_false_ for that instance, and cause the message to be added to the
_FacesContext_ .

[#50638851_pgfId-1022949]##In addition, a _validate()_ method may:

[#50638851_pgfId-1022950]##Examine or modify the state of any component
in the component tree.

[#50638851_pgfId-1022951]##Add or remove components from the component
tree.

[#50638851_pgfId-1022952]##Queue one or more events, from the same
component or a different one, for processing during the current
lifecycle phase.

[#50638851_pgfId-1022953]##The render-independent property _required_ is
a shorthand for the function of a “required” validator. If the value of
this property is true, there is an entry in the request payload
corresponding to this component, and the component has no value, the
component is marked invalid and a message is added to the _FacesContext_
instance. See link:JSF.htm#50638877_24181[See Localized Application
Messages] for details on the message.

==== [#50638851_pgfId-1022958]##[#50638851_46579]##Standard Validator Implementations

[#50638851_pgfId-1022959]##JavaServer Faces defines a standard suite of
_Validator_ implementations that perform a variety of commonly required
checks. In addition, component writers, application developers, and tool
providers will often define additional _Validator_ implementations that
may be used to support component-type-specific or application-specific
constraints. These implementations share the following common
characteristics:

[#50638851_pgfId-1022960]##Standard _Validators_ accept configuration
information as either parameters to the constructor that creates a new
instance of that _Validator_ , or as JavaBeans component properties on
the _Validator_ implementation class.

[#50638851_pgfId-1022961]##To support internationalization,
_FacesMessage_ instances should be created. The message identifiers for
such standard messages are also defined by manifest String constants in
the implementation classes. It is the user’s responsibility to ensure
the content of a _FacesMessage_ instance is properly localized, and
appropriate parameter substitution is performed, perhaps using
_java.text.MessageFormat_ .

[#50638851_pgfId-1025851]##See the javadocs for
_UIInput.validateValue()_ for further normative specification regarding
validation.

[#50638851_pgfId-1022963]##Concrete Validator implementations must
define a public static final String constant VALIDATOR_ID, whose value
is the standard identifier under which the JSF implementation must
register this instance (see below).

[#50638851_pgfId-1022967]##Please see link:JSF.htm#50638877_24181[See
Localized Application Messages] for the list of message identifiers.

[#50638851_pgfId-1022968]##[P1-start standard validators] The following
standard _Validator_ implementations (in the _javax.faces.validator_
package) are provided:

[#50638851_pgfId-1022969]## _DoubleRangeValidator_ —Checks the local
value of a component, which must be of any numeric type, against
specified maximum and/or minimum values. Standard identifier is
“javax.faces.DoubleRange”.

[#50638851_pgfId-1022970]## _LengthValidator_ —Checks the length (i.e.
number of characters) of the local value of a component, which must be
of type _String_ , against maximum and/or minimum values. Standard
identifier is “javax.faces.Length”.

[#50638851_pgfId-1022971]## _LongRangeValidator_ —Checks the local value
of a component, which must be of any numeric type convertible to _long_
, against maximum and/or minimum values. Standard identifier is
“javax.faces.LongRange”.

[#50638851_pgfId-1024759]## _RegexValidator_ —Accepts a “pattern”
attribute that is interpreted as a regular expression from the
_java.util.regex_ package. The local value of the component is checked
fora match against this regular expression. Standard identifier is
“javax.faces.RegularExpression”

[#50638851_pgfId-1025898]## _BeanValidator_ - The implementation must
ensure that this validator is only available when running in an
environment in which JSR-303 Beans Validation is available. Please see
the javadocs for _BeanValidator.validate()_ for the
specification.Standard identifier is “javax.faces.Bean”

[#50638851_pgfId-1025897]##RequiredValidator - Analogous to setting the
required attribute to true on the EditableValueHolder. Enforces that the
local value is not empty. Reuses the logic and error messages defined on
UIInput. The standard identifier for this validator is
"javax.faces.Required"

{empty}[#50638851_pgfId-1024073]## _MethodExpressionValidator_ —Wraps a
_MethodExpression_ and interprets it as pointing to a method that
performs validation. Any exception thrown when the expression is invoked
is wrapped in a _ValidatorException_ in similar fashion as the above
validators. [P1-end]

==== [#50638851_pgfId-1028223]##[#50638851_65936]##Bean Validation Integration

[#50638851_pgfId-1028233]##If the implementation is running in a
container environment that requires Bean Validation, it must expose the
bean validation as described in this specification.

[#50638851_pgfId-1028240]##As stated in the specification goals of JSR
303, validation often gets spread out across the application, from user
interface components to persistent objects. Bean Validation strives to
avoid this duplication by defining a set of metadata that can be used to
express validation constraints that are sharable by any layer of the
application. Since its inception, JSF has supported a “field level
validation” approach. Rather than requiring the developer to define
validators for each input component (i.e., _EditableValueHolder_ ), the
BeanValidator can be automatically applied to all fields on a page so
that the work of enforcing the constraints can be delegated to the Bean
Validation provider.

===== [#50638851_pgfId-1028306]##[#50638851_14108]##Bean Validator Activation

[#50638851_pgfId-1028307]##[P1-BeanValidationIntegration]If Bean
Validation is present in the runtime environment, the system must ensure
that the standard validator with validator-id _javax.faces.Bean_ is
added with a call to _Application.addDefaultValidatorId()_ .[P1-end] See
link:JSF.htm#50638851_46579[See Standard Validator Implementations] for
the description of the standard _BeanValidator_ , and
link:JSF.htm#50638887_73374[See <f:validateBean>] for the Facelet tag
that exposes this validator to the page author. This ensures Bean
Validation will be called for every field in the application.

[#50638851_pgfId-1028308]##If Bean Validation is present, and the
_javax.faces.VALIDATE_EMPTY_FIELDS_ _<context-param>_ is not explicitly
set to _false_ , JSF will validate _null_ and empty fields so that the
_@NotNull_ and _@NotEmpty_ constraints from Bean Validation can be
leveraged. The next section describes how the reference to the Bean
Validation ValidatorFactory is obtained by that validator.

===== [#50638851_pgfId-1028339]##[#50638851_20098]##Obtaining a ValidatorFactory

[#50638851_pgfId-1028340]##The Bean Validation ValidatorFactory is the
main entry point into Bean Validation and is responsible for creating
Validator instances. [P1-start-validatoryfactory]A ValidatorFactory is
retrieved using the following algorithm:

[#50638851_pgfId-1028341]##If the servlet context contains a
ValidatorFactory instance under the attribute named
javax.faces.validator.beanValidator.ValidatorFactory, this instance is
used by JSF to acquire Validator instances (specifically in the
BeanValidator). This key should be defined in the constant named
VALIDATOR_FACTORY_KEY on BeanValidator.

[#50638851_pgfId-1028342]##If the servlet context does not contain such
an entry, JSF looks for a Bean Validation provider in the classpath. If
present, the standard Bean Validation bootstrap strategy is used. If not
present, Bean Validation integration is disabled. If the BeanValidator
is used an no ValidatorFactory can be retrieved, a FacesException is
raised. The standard Bean Validation bootstrap procedure is shown here:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028345]##ValidatorFactory validatorFactory =
Validation.buildDefaultValidatorFactory();
|===

{empty}[#50638851_pgfId-1028346]##Once instantiated, the result can be
stored in the servlet context attribute mentioned as a means of caching
the result. If JSF is running in an EE6 environment, Bean Validation
will be available, as defined by the EE6 specification, and thus
activated in JSF. The EE container will be responsible for making the
ValidatorFactory available as an attribute in the ServletContext as
mentioned above.[P1-end]

===== [#50638851_pgfId-1030998]##Class-Level Validation

[#50638851_pgfId-1031028]##JSF conversion and validation as described in
this chapter operates on the principle that all conversion and
validation is performed before values are pushed into the model. This
principle allows one to safely assume that if a value is pushed into the
model, it is of the proper type and has been validated. This validation
is done on a “field level” basis, as mentioned in
link:JSF.htm#50638851_65936[See Bean Validation Integration]. This
approach poses challenges for higher level validation that needs to take
the value of several fields together into account to decide if they are
valid or not. For example, consider the common case of a user account
creation page with two fields for the password. The page can only be
considered valid if both password fields are themselves individually
valid based on the specified password constraints and also are both the
same value. JSF provides for this case by providing a facility for
performing Class-Level Validation using Bean Validation. Please see the
VDLDoc for the _<f:validateWholeBean />_ tag for the normative
specification of this feature as well as a usage example showing the
password validation scenario.

===== [#50638851_pgfId-1028347]##Localization of Bean Validation Messages

[#50638851_pgfId-1028348]##To ensure proper localization of the
messages, JSF should provide a custom BeanValidation MessageInterpolator
resolving the Locale according to JSF defaults and delegating to the
default MessageInterpolator as defined in
ValidationFactory.getMessageInterpolator(). A possible implementation is
shown here:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1028351]##public class JsfMessageInterpolator
implements MessageInterpolator \{

[#50638851_pgfId-1028352]##

[#50638851_pgfId-1028353]##private final MessageInterpolator delegate;

[#50638851_pgfId-1028354]## 

[#50638851_pgfId-1028355]##public
JsfMessageInterpolator(MessageInterpolator delegate) \{

[#50638851_pgfId-1028356]## this.delegate = delegate;

[#50638851_pgfId-1028357]## }

[#50638851_pgfId-1028358]## 

[#50638851_pgfId-1028359]## public String interpolate(String message,
ConstraintDescriptor constraintDescriptor,Object value) \{

[#50638851_pgfId-1028360]## Locale locale =
FacesContext.getCurrentInstance().getViewRoot().

[#50638851_pgfId-1028361]##getLocale();

[#50638851_pgfId-1028362]##return this.delegate.interpolate(

[#50638851_pgfId-1028363]##message, constraintDescriptor, value, locale
);

[#50638851_pgfId-1028364]## }

[#50638851_pgfId-1028365]## 

[#50638851_pgfId-1028366]## public String interpolate(String message,
ConstraintDescriptor constraintDescriptor, Object value, Locale locale)
\{

[#50638851_pgfId-1028367]## return this.delegate.interpolate(message,
constraintDescriptor, value, locale);

[#50638851_pgfId-1028368]##}

[#50638851_pgfId-1028369]##}

[#50638851_pgfId-1028370]## 

|===

[#50638851_pgfId-1028374]##Once a ValidatorFactory is obtained, as
described in link:JSF.htm#50638851_20098[See Obtaining a
ValidatorFactory], JSF receives a Validator instance by providing the
custom message interpolator to the validator state.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1028377]##//could be cached

[#50638851_pgfId-1028378]##MessageInterpolator jsfMessageInterpolator =
new JsfMessageInterpolator(

[#50638851_pgfId-1028379]##validatorFactory.getMessageInterpolator() );

[#50638851_pgfId-1028380]## 

[#50638851_pgfId-1028381]##//...

[#50638851_pgfId-1028382]## 

[#50638851_pgfId-1028383]##Validator validator = validatorFactory

[#50638851_pgfId-1028384]## .usingContext()

[#50638851_pgfId-1028385]## .messageInterpolator(jsfMessageInterpolator)

[#50638851_pgfId-1028386]## .getValidator();

[#50638851_pgfId-1028387]## 

|===

[#50638851_pgfId-1028388]##The local value is then passed to the
Validator.validateValue() method to check for constraint violations.
Since Bean Validation defines a strategy for localized message
reporting, the BeanValidator does not need to concern itself with
producing the validation message. Instead, the BeanValidator should
accept the interpolated message returned from Bean Validation API, which
is accessed via the method getInterpolatedMessage() on the
ContraintFailure class, and use it as the replacement value for the
first numbered placeholder for the key
javax.faces.validator.BeanValidator.MESSAGE (i.e., \{0}). To encourage
use of the Bean Validation message facility, the default message format
string for the BeanValidator message key must be a single placeholder,
as shown here:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028391]##javax.faces.validator.BeanValidator.MESSAGE=\{0}
|===

[#50638851_pgfId-1028392]##Putting the Bean Validation message
resolution in full control of producing the displayed message is the
recommended approach. However, to allow the developer to align the
messages generated by the BeanValidator with existing JSF 1.2
validators, the developer may choose to override this message key in an
application resource bundle and reference the component label, which
replaces the second numbered placeholder (i.e., \{1}).

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028395]##javax.faces.validator.BeanValidator.MESSAGE=\{1}:
\{0}
|===

[#50638851_pgfId-1028396]##This approach is useful if you are already
using localized labels for your input components and are displaying the
messages above the form, rather than adjacent to the input.

=== [#50638851_pgfId-1024075]##

image:JSF-17.gif[image]

[#50638851_96393]##Composite User Interface Components

==== [#50638851_pgfId-1024078]##Non-normative Background

[#50638851_pgfId-1024079]##To aid implementors in providing a spec
compliant runtime for composite components, this section provides a
non-normative background to motivate the discussion of the composite
component feature. The composite component feature enables developers to
write real, reusable, JSF UI components without any Java code or
configuration XML.

===== [#50638851_pgfId-1024080]##[#50638851_59315]##What does it mean to be a JSF User Interface component?

[#50638851_pgfId-1024081]##JSF is a component based framework, and JSF
UI components are the main point of JSF. But what is a JSF UI component,
really? Conceptually, a JSF UI Component is a software artifact that
represents a reusable, self contained piece of a user interface. A very
narrow definition for “JSF UI Component” is imposed at runtime. This
definition can be summarized as

[#50638851_pgfId-1024082]##A JSF UI Component is represented at runtime
by an instance of a Java class that includes
_javax.faces.component.UIComponent_ as an ancestor in its inheritance
hierarchy.

[#50638851_pgfId-1024083]##It is easy to write a class that adheres to
this definition, but in practice, component authors need to do more than
just this in order to get the most from JSF and to conform to user’s
expectations of what a JSF UI Component is. For example, users expect a
JSF UI Component can do some or all of the following:

[#50638851_pgfId-1024084]##be exposed to the page-author via a markup
tag with sensible attributes

[#50638851_pgfId-1024085]##emit events (such a _ValueChangeEvent_ or
_ActionEvent_ )

[#50638851_pgfId-1024086]##allow attaching listeners

[#50638851_pgfId-1024087]##allow attaching a _Converter_ and/or
_Validator_ (s)

[#50638851_pgfId-1024088]##render itself to the user-agent, with full
support for styles, localization and accessibility

[#50638851_pgfId-1024089]##support delegated rendering to allow for
client device independence

[#50638851_pgfId-1024090]##read values sent from the user-agent and
correctly adapt them to the faces lifecycle

[#50638851_pgfId-1024091]##correctly handle saving and restoring its
state across multiple requests from the user-agent

[#50638851_pgfId-1024092]##Another important dimension to consider
regarding UI components is the context in which the developer interacts
with the component. There are generally two such contexts.

[#50638851_pgfId-1024093]##In the context of a markup view, such as a
JSP or Facelet view. In this context the developer interacts with the UI
component using a markup element, setting attributes on that element,
and nesting child elements within that component markup element.

[#50638851_pgfId-1024094]##In the context of code, such as a listener, a
managed-bean, or other programming language context. In this context,
the developer is writing JavaCode that is either passed the UI component
as an argument, or obtains a reference to the UI component in some other
way.

===== [#50638851_pgfId-1024095]##[#50638851_34668]##How does one make a custom JSF User Interface component (JSF 1.2 and earlier)?

[#50638851_pgfId-1024096]##To satisfy a user’s expectations for a JSF UI
component, the component author must adhere to one of the following best
practices.

[#50638851_pgfId-1024097]##extend the custom component class from an
existing subclass of _UIComponent_ that most closely represents the
meaning and behavior of the piece of the UI you are encapsulating in the
component.

[#50638851_pgfId-1024098]##extend the custom component class directly
from _UIComponentBase_ and implement the appropriate “behavioral
interface”(s) that most closely represents the meaning and behavior of
the piece of the UI you are encapsulating in the component. See
link:JSF.htm#50638851_41597[See Component Behavioral Interfaces] for
more.

[#50638851_pgfId-1024102]##Note that the first best practice includes
the second one “for free” since the stock _UIComponent_ subclasses
already implement the appropriate behavioral interfaces.

[#50638851_pgfId-1024103]##When following either best practice, the JSF
UI component developer must follow several steps to make the component
available for use in markup pages or in code, including but not
necessarily limited to

[#50638851_pgfId-1024104]##Make entries in a _faces-config.xml_ file,
linking the component class to its _component-type_ , which enables the
_Application.createComponent()_ method to create instances of the
component.

[#50638851_pgfId-1024105]##Make entries in a _faces-config.xml_ file to
declare a _Renderer_ that provides client-device independence.

[#50638851_pgfId-1024106]##Provide a JSP or Facelet tag handler that
allows the page author to build UIs that include the component, and to
customize each instance of the component with listeners, properties and
model associations. This includes making the association between the
_Renderer_ and the _UIComponent_ .

[#50638851_pgfId-1024255]##Provide a _Renderer_ that provides client
device independency for the component

[#50638851_pgfId-1024256]##Make entries in a _faces-config.xml_ file
that links the _Renderer_ and its Java class.

[#50638851_pgfId-1024107]##These steps are complex, yet the components
one creates by following them can be very flexible and powerful. By
making some simplifying assumptions, it is possible to allow the
creation of components that are just as powerful but require far less
complexity to develop. This is the whole point of composite components:
to enable developers to write real, reusable, JSF UI components without
any Java code or configuration XML.

===== [#50638851_pgfId-1024108]##[#50638851_37180]##How does one make a composite component?

[#50638851_pgfId-1024109]##The composite component feature builds on two
features introduced in JSF 2.0: resources
(link:JSF.htm#50638877_44233[See Resource Handling]) and Facelets
(link:JSF.htm#50638887_31965[See Facelets and its use in Web
Applications]”). Briefly, a composite component is any Facelet markup
file that resides inside of a resource library. For example, if a
Facelet markup file named _loginPanel.xhtml_ resides inside of a
resource library called _ezcomp_ , then page authors can use this
component by declaring the xml namespace
_xmlns:ez="http://java.sun.com/jsf/composite/ezcomp"_ and including the
tag _<ez:loginPanel />_ in their pages. Naturally, it is possible for a
composite component author to declare an alternate XML namespace for
their composite components, but doing so is optional.

[#50638851_pgfId-1024116]##Any valid Facelet markup is valid for use
inside of a composite component, including the templating features
specified in
link:JSF.htm#50638887_Facelet%20Templating%20Tag%20Library[See Facelet
Templating Tag Library]. In addition, the tag library specified in
link:JSF.htm#50638887_36658[See Composite Component Tag Library] must be
used to declare the metadata for the composite component. Future
versions of the JSF specification may relax this requirement, but for
now at least the _<composite:interface>_ and
_<composite:implementation>_ sections are required when creating a
composite component.

===== [#50638851_pgfId-1024123]##[#50638851_70971]##A simple composite component example

[#50638851_pgfId-1024151]##Create the page that uses the composite
component, _index.xhtml_ .

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1024126]##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0
Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

[#50638851_pgfId-1024127]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638851_pgfId-1024128]## xmlns:h="http://java.sun.com/jsf/html"

[#50638851_pgfId-1024129]## xmlns:f="http://java.sun.com/jsf/core"

[#50638851_pgfId-1024130]##
xmlns:ez="http://java.sun.com/jsf/composite/ezcomp">

[#50638851_pgfId-1024131]##<h:head>

[#50638851_pgfId-1024132]##<title>A simple example of EZComp</title>

[#50638851_pgfId-1024133]##</h:head>

[#50638851_pgfId-1024134]## 

[#50638851_pgfId-1024135]##<h:body>

[#50638851_pgfId-1024136]## 

[#50638851_pgfId-1024137]##<h:form>

[#50638851_pgfId-1024138]## 

[#50638851_pgfId-1024139]## <ez:loginPanel id="loginPanel">

[#50638851_pgfId-1024140]## 

[#50638851_pgfId-1024141]## <f:actionListener for="loginEvent"

[#50638851_pgfId-1024142]## binding="#\{bean.loginEventListener}" />

[#50638851_pgfId-1024143]## 

[#50638851_pgfId-1024144]## </ez:loginPanel>

[#50638851_pgfId-1024145]## 

[#50638851_pgfId-1024146]##</h:form>

[#50638851_pgfId-1024147]## 

[#50638851_pgfId-1024148]##</h:body>

[#50638851_pgfId-1024149]## 

[#50638851_pgfId-1024150]##</html>

|===

[#50638851_pgfId-1024152]##The only thing special about this page is the
_ez_ namespace declaration and the inclusion of the _<ez:loginPanel />_
tag on the page. The occurrence of the string
“http://java.sun.com/jsf/composite/” in a Facelet XML namespace
declaration means that whatever follows that last “ _/_ ” is taken to be
the name of a resource library. For any usage of this namespace in the
page, such as _<ez:loginPanel />_ , a Facelet markup file with the
corresponding name is loaded and taken to be the composite component, in
this case the file _loginPanel.xhtml_ . The implementation requirements
for this and other Facelet features related to composite components are
specified in link:JSF.htm#50638887_23235[See Requirements specific to
composite components].

[#50638851_pgfId-1024153]##Create the composite component markup page.
In this case, _loginPanel.xhtml_ resides in the _./resources/ezcomp_
directory relative to the _index.xhtml_ file.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1024156]##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0
Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

[#50638851_pgfId-1024157]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638851_pgfId-1024158]## xmlns:h="http://java.sun.com/jsf/html"

[#50638851_pgfId-1024159]## xmlns:f="http://java.sun.com/jsf/core"

[#50638851_pgfId-1024160]## xmlns:ui="http://java.sun.com/jsf/facelets"

[#50638851_pgfId-1024161]##
xmlns:composite="http://java.sun.com/jsf/composite">

[#50638851_pgfId-1024162]##<head>

[#50638851_pgfId-1024163]## 

[#50638851_pgfId-1024164]##<title>Not present in rendered output</title>

[#50638851_pgfId-1024165]## 

[#50638851_pgfId-1024166]##</head>

[#50638851_pgfId-1024167]## 

[#50638851_pgfId-1024168]##<body>

[#50638851_pgfId-1024169]## 

[#50638851_pgfId-1024170]##<composite:interface>

[#50638851_pgfId-1024171]## 

[#50638851_pgfId-1024172]## <composite:actionSource name="loginEvent" />

[#50638851_pgfId-1024173]## 

[#50638851_pgfId-1024174]##</composite:interface>

[#50638851_pgfId-1024175]## 

[#50638851_pgfId-1024176]##<composite:implementation>

[#50638851_pgfId-1024177]## 

[#50638851_pgfId-1024178]## <p>Username: <h:inputText id="usernameInput"
/></p>

[#50638851_pgfId-1024179]## 

[#50638851_pgfId-1024180]## <p>Password: <h:inputSecret
id="passwordInput" /></p>

[#50638851_pgfId-1024181]## 

[#50638851_pgfId-1024182]## <p><h:commandButton id="loginEvent"
value="login"/>

[#50638851_pgfId-1024183]## 

[#50638851_pgfId-1024184]##</composite:implementation>

[#50638851_pgfId-1024185]## 

[#50638851_pgfId-1024186]##</body>

[#50638851_pgfId-1024187]## 

[#50638851_pgfId-1024188]##</html>

|===

[#50638851_pgfId-1024189]##The _<composite:interface>_ section declares
the public interface that users of this component need to understand. In
this case, the component declares that it contains an implementation of
_ActionSource2_ (see link:JSF.htm#50638851_54136[See ActionSource2]),
and therefore anything one can do with an _ActionSource2_ in a Facelet
markup page you one do with the composite component. (See
link:JSF.htm#50638851_41597[See Component Behavioral Interfaces] for
more on _ActionSource2_ and other behavioral interfaces). The
_<composite:implementation>_ section defines the implementation of this
composite component.

===== [#50638851_pgfId-1024292]##Walk through of the run-time for the simple composite component example

[#50638851_pgfId-1024305]##This section gives a non-normative traversal
of the composite component feature using the previous example as a
guide. Please refer to the javadocs for the normative specification for
each method mentioned below. Any text in _italics_ is a term defined in
link:JSF.htm#50638851_96951[See Composite Component Terms].

[#50638851_pgfId-1024534]##The user-agent requests the _index.html_ from
link:JSF.htm#50638851_70971[See A simple composite component example].
This page contains the
‘xmlns:ez="http://java.sun.com/jsf/composite/ezcomp"‘ declaration and an
occurrence of the _<ez:loginPanel>_ tag. Because this page contains a
usage of a composite component, it is called a _using page_ for
discussion.

[#50638851_pgfId-1024559]##The runtime notices the use of an xml
namespace beginning with “http://java.sun.com/jsf/composite/”. Takes the
substring of the namespace after the last “/”, exclusive, and looks for
a resource library with the name “ _ezcomp_ ” by calling
_ResourceHandler.libraryExists()_ .

[#50638851_pgfId-1024611]##The runtime encounters the _<ez:loginPanel>_
component in the _using page_ . This causes
_Application.createComponent(FacesContext, Resource)_ to be called. This
method instantiates the _top level component_ but does not populate it
with children. Pay careful attention to the javadocs for this method.
Depending on the circumstances, the _top level component_ instance can
come from a developer supplied Java Class, a Script, or an
implementation specific java class. This method calls
_ViewDeclarationLanguage.getComponentMetadata(FacesContext, Resource)_ ,
which obtains the _composite component BeanInfo_ (and therefore also the
_composite component BeanDescriptor_ ) that exposes the _composite
component metadata_ . The _composite component metadata_ also includes
any _attached object targets_ exposed by the _composite component
author_ . One thing that _Application.createComponent(FacesContext,
Resource)_ does to the component before returning it is set the
component’s renderer type to be _javax.faces.Composite_ . This is
important during rendering.

[#50638851_pgfId-1024612]##Again,
_Application.createComponent(FacesContext, Resource)_ does not populate
the _top level component_ with children. Subsequent processing done as
the runtime traverses the rest of the page takes care of that. One very
important aspect of that subsequent processing is ensuring that all of
the _UIComponent_ children in the _defining page_ are placed in a facet
underneath the _top level component_ . The name of that facet is given
by the _UIComponent.COMPOSITE_FACET_NAME_ constant.

[#50638851_pgfId-1024651]##After the children of the _composite
component tag_ in the _using page_ have been processed by the VDL
implementation, the VDL implementation must call
_VDLUtils.retargetAttachedObjects()_ . This method examines the
_composite component metadata_ and retargets any attached objects from
the _using page_ to their approriate _inner component_ targets.

[#50638851_pgfId-1024631]##Because the renderer type of the composite
component was set to _javax.faces.Composite_ , the _composite component
renderer_ is invoked to render the composite component.

===== [#50638851_pgfId-1024614]##[#50638851_96951]##Composite Component Terms

[#50638851_pgfId-1024325]##The following terms are commonly used to
describe the composite component feature.

[#50638851_pgfId-1029387]## 

[#50638851_pgfId-1024326]##Attached Object

[#50638851_pgfId-1024347]##Any artifact that can be attached to a
_UIComponent_ (composite or otherwise). Usually, this means a
_Converter_ , _Validator_ , _ActionListener_ , or _ValueChangeListener_
.

[#50638851_pgfId-1024681]##Attached Object Target

[#50638851_pgfId-1024682]##Part of the _composite component metadata_
that allows the _composite component author_ to expose the semantics of
an inner component to the _using page author_ without exposing the
rendering or implementation details of the inner component.

[#50638851_pgfId-1024364]##Composite Component

[#50638851_pgfId-1024368]##A tree of _UIComponent_ instances, rooted at
a _top level component_ , that can be thought of and used as a single
component in a view. The component hierarchy of this subtree is
described in the _composite component defining page_ .

[#50638851_pgfId-1024387]##Composite Component Author

[#50638851_pgfId-1024391]##The individual or role creating the
_composite component_ . This usually involves authoring the _composite
component defining page_ .

[#50638851_pgfId-1024453]##Composite Component _BeanDescriptor_

[#50638851_pgfId-1024454]##A constituent element of the _composite
component metadata_ . This version of the spec uses the JavaBeans API to
expose the component metadata for the composite component. Future
versions of the spec may use a different API to expose the component
metadata.

[#50638851_pgfId-1024417]##Composite Component _BeanInfo_

[#50638851_pgfId-1024421]##The main element of the _composite component_
_metadata_ .

[#50638851_pgfId-1024401]##Composite Component Declaration

[#50638851_pgfId-1024405]##The section of markup within the _composite
component defining page_ that includes the _<composite:interface>_
section and its children.

[#50638851_pgfId-1024406]##Composite Component Definition

[#50638851_pgfId-1024410]##The section of markup within the _composite
component defining page_ that includes the _<composite:implementation>_
section and its children.

[#50638851_pgfId-1024894]##Composite Component Library

[#50638851_pgfId-1024898]##A resource library that contains a _defining
page_ for each _composite component_ that the _composite component
author_ wishes to expose to the _using page author_ .

[#50638851_pgfId-1024591]##Composite Component Metadata

[#50638851_pgfId-1024595]##Any data about the _composite component_ .
The normative specification for what must be in the _composite component
metadata_ is in the javadocs for
_ViewDeclarationLanguage.getComponentMetadata()_ .

[#50638851_pgfId-1024493]##Composite Component Renderer

[#50638851_pgfId-1024497]##A new renderer in the _HTML_BASIC_ render kit
that knows how to render a _composite component_ .

[#50638851_pgfId-1024469]##Composite Component Tag

[#50638851_pgfId-1024473]##The tag in the _using page_ that references a
_composite component_ declared and defined in a _defining page_ .

[#50638851_pgfId-1024337]##Defining page

[#50638851_pgfId-1024395]##The markup page, usually Facelets markup,
that contains the _composite component declaration_ and _composite
component definition_ .

[#50638851_pgfId-1024703]##Inner Component

[#50638851_pgfId-1024707]##Any _UIComponent_ inside of the _defining
page_ or a page that is referenced from the _defining page_ .

[#50638851_pgfId-1024339]##Top level component

[#50638851_pgfId-1024513]##The _UIComponent_ instance in the tree that
is the parent of all _UIComponent_ instances within the _defining page_
and any pages used by that _defining page_ .

[#50638851_pgfId-1024519]##Using Page

[#50638851_pgfId-1024527]##The VDL page in which a _composite component
tag_ is used.

[#50638851_pgfId-1024655]##Using Page Author

[#50638851_pgfId-1024784]##The individual or role that creates pages
that use the _composite component_ .

==== [#50638851_pgfId-1024796]##Normative Requirements

[#50638851_pgfId-1024809]##This section contains the normative
requirements for the composite component runtime, or pointers to other
parts of the specification that articulate those requirements in the
appropriate context.

======= [#50638851_pgfId-1024813]##References to Composite Component Requirements in Context

[#50638851_pgfId-1024817]##Section

[#50638851_pgfId-1024819]##Feature

{empty}[#50638851_pgfId-1024825]##link:JSF.htm#50638862_50118[See
Implicit Object ELResolver for Facelets and Programmatic Access]

[#50638851_pgfId-1024827]##Ability for the _composite component author_
to refer to the _top level component_ from an EL expression, such as
_#\{cc.children[3]}_ .

{empty}[#50638851_pgfId-1024858]##link:JSF.htm#50638862_54925[See
Composite Component Attributes ELResolver]

[#50638851_pgfId-1024861]##Ability for the _composite component author_
to refer to attributes declared on the _composite component tag_ using
EL expressions such as _#\{cc.attrs.usernameLabel}_

{empty}[#50638851_pgfId-1024833]##link:JSF.htm#50638861_19251[See Object
Factories]

[#50638851_pgfId-1024835]##Methods called by the VDL page to create a
new instance of a _top level component_ for eventual inclusion in the
view

{empty}[#50638851_pgfId-1024837]##link:JSF.htm#50638887_23235[See
Requirements specific to composite components]

[#50638851_pgfId-1024839]##Requirements of the Facelet implementation
relating to Facelets.

{empty}[#50638851_pgfId-1024887]##link:JSF.htm#50638887_36658[See
Composite Component Tag Library]

[#50638851_pgfId-1024889]##Tag handlers for the _composite_ tag library
__

===== [#50638851_pgfId-1025035]##[#50638851_97048]##Composite Component Metadata

[#50638851_pgfId-1025048]##In the current version of the specification,
only composite _UIComponent_ s must have component metadata. It is
possible that future versions of the specification will broaden this
requirement so that all _UIComponent_ s must have metadata.

[#50638851_pgfId-1025049]##This section describes the implementation of
the _composite component metadata_ that is returned from the method
_ViewDeclarationLanguage.getComponentMetadata()_ . This method is
formally declared in link:JSF.htm#50638861_41800[See
ViewDeclarationLanguage.getComponentMetadata()], but for reference its
signature is repeated here.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1025073]##public BeanInfo
getComponentMetadata(FacesContext context, Resource componentResource)
|===

[#50638851_pgfId-1024984]##The specification requires that this method
is called from _Application.createComponent(FacesContext context,
Resource componentResource)_ . See the javadocs for that method for
actions that must be taken based on the composite component metadata
returned from _getComponentMetadata()_ .

[#50638851_pgfId-1025114]##The default implementation of this method
must support authoring the component metadata using tags placed inside
of a _<composite:interface />_ element found on a _defining page_ . This
element is specified in the Facelets taglibrary docs.

[#50638851_pgfId-1024932]##Composite component metadata currently
consists of the following information:

[#50638851_pgfId-1024934]##The _composite component BeanInfo_ , returned
from this method.

[#50638851_pgfId-1025123]##The _Resource_ from which the composite
component was created.

[#50638851_pgfId-1025138]##The _composite component BeanDescriptor_ .

[#50638851_pgfId-1025146]##This _BeanDescriptor_ must be returned when
_getBeanDescriptor()_ is called on the composite component _BeanInfo_ .

[#50638851_pgfId-1025170]##The composite component _BeanDescriptor_
exposes the following information.

[#50638851_pgfId-1025175]##The “name” attributes of the
_<composite:interface/ >_ element is exposed using the corresponding
method on the composite component _BeanDescriptor_ . If _ProjectStage_
is _Development_ , The “displayName”, “shortDescription”, “expert”,
“hidden”, and “preferred” attributes of the _<composite:interface/ >_
element are exposed using the corresponding methods on the composite
component _BeanDescriptor_ . Any additional attributes on
_<composite:interface/ >_ are exposed as attributes accessible from the
_getValue()_ and _attributeNames()_ methods on _BeanDescriptor_
(inherited from _FeatureDescriptor_ ). The return type from _getValue()_
must be a _javax.el.ValueExpression_ for such attributes.

[#50638851_pgfId-1025231]##The list of exposed _AttachedObjectTarget_ s
to which the _page author_ can attach things such as listeners,
converters, or validators.

[#50638851_pgfId-1025189]##The VDL implementation must populate the
composite component metadata with a _List<AttachedObjectTarget>_ that
includes all of the inner components exposed by the composite component
author for use by the page author.

[#50638851_pgfId-1025200]##This List must be exposed in the value set of
the composite component _BeanDescriptor_ under the key
_AttachedObjectTarget.ATTACHED_OBJECT_TARGETS_KEY_ .

[#50638851_pgfId-1025210]##For example, if the defining page has

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1025214]##<composite:interface>

[#50638851_pgfId-1025281]## <composite:editableValueHolder
name=”username” />

[#50638851_pgfId-1025284]## <composite:actionSource name=”loginEvent” />

[#50638851_pgfId-1025285]## <composite:actionSource name=”allEvents”

[#50638851_pgfId-1025286]## targets=”loginEvent cancelEvent” />

[#50638851_pgfId-1025220]##<composite:interface>

|===

[#50638851_pgfId-1024953]##The list of attached object targets would
consist of instances of implementations of the following interfaces from
the package _javax.faces.webapp.vdl_ .

======= [#50638851_pgfId-1025305]##EditableValueHolderAttachedObjectTarget

[#50638851_pgfId-1025315]##ActionSource2AttachedObjectTarget

[#50638851_pgfId-1025328]##ActionSource2AttachedObjectTarget

[#50638851_pgfId-1029567]##BehaviorHolderAttachedObjectTarget

[#50638851_pgfId-1024954]##A _ValueExpression_ that evaluates to the
component type of the composite component. By default this is "
_javax.faces.NamingContainer_ " but the composite component page author
can change this, or provide a Java or script-based _UIComponent_
implementation that is required to implement _NamingContainer_ .

[#50638851_pgfId-1025351]##This _ValueExpression_ must be exposed in the
value set of the composite component _BeanDescriptor_ under the key
_UIComponent.COMPOSITE_COMPONENT_TYPE_KEY_ .

[#50638851_pgfId-1024958]##A _Map<String, PropertyDescriptor>_
representing the facets declared by the composite component author for
use by the page author.

[#50638851_pgfId-1025391]##This _Map_ must be exposed in the value set
of the composite component BeanDescriptor under the key
_UIComponent.FACETS_KEY_ .

[#50638851_pgfId-1024964]##Any attributes declared by the composite
component author using _<composite:attribute/ >_ elements must be
exposed in the array of _PropertyDescriptor_ s returned from
_getPropertyDescriptors()_ on the composite component _BeanInfo_ .

[#50638851_pgfId-1025428]##For each such attribute, for any _String_ or
_boolean_ valued _JavaBeans_ properties on the interface
_PropertyDescriptor_ (and its superinterfaces) that are also given as
attributes on a _<composite:attribute/ >_ element, those properties must
be exposed as properties on the _PropertyDescriptor_ for that markup
element. Any additional attributes on _<composite:attribute/ >_ are
exposed as attributes accessible from the _getValue()_ and
_attributeNames()_ methods on _PropertyDescriptor_ . The return type
from getValue() must be a _ValueExpression_ with the exception of the
_getValue(“type”)_ . The return type from _getValue(“type”)_ must be
_Class_ . If the value specified for the _type_ attribute of
_<cc:attribute/>_ cannot be converted to an actual _Class_ , a
_TagAttributeException_ must be thrown, including the _Tag_ and
_TagAttribute_ instances in the constructor.

[#50638851_pgfId-1029713]##The _composite component BeanDescriptor_ must
return a _Collection<String>_ when its _getValue()_ method is called
with an argument equal to the value of the symbolic constant
_UIComponent.ATTRS_WITH_DECLARED_DEFAULT_VALUES_ . The
_Collection<String>_ must contain the names of any
_<composite:attribute>_ elements for which the _default_ attribute was
specified, or _null_ if none of the attributes have been given a default
value.

=== [#50638851_pgfId-1026035]##

image:JSF-17.gif[image]

[#50638851_Component Behavior Model]##Component Behavior Model

[#50638851_pgfId-1026039]##This section describes the facilities for
adding Behavior attached objects to JavaServer Faces components.

==== [#50638851_pgfId-1026043]##Overview

[#50638851_pgfId-1027732]##JSF supports a mechanism for enhancing
components with additional behaviors that are not explicitly defined by
the component author.

[#50638851_pgfId-1028481]##At the root of the behavior model is he
Behavior interface. This interface serves as a supertype for additional
behavior contracts. The ClientBehavior interface extends the Behavior
interface by providing a contract for defining reusable scripts that can
be attached to any component that implements the ClientBehaviorHolder
interface. The ClientBehaviorHolder interface defines the set of attach
points, or "events", to which a ClientBehavior may be attached. For
example, an "AlertBehavior" implementation might display a JavaScript
alert when attached to a component and activated by the end user.

[#50638851_pgfId-1027734]##While client behaviors typically add
client-side capabilities, they are not limited to client. Client
behaviors can also participate in the JSF request processing lifecycle.
JSF's AjaxBehavior is a good example of such a cross-tier behavior. The
AjaxBehavior both triggers an Ajax request from the client and also
delivers AjaxBehaviorEvents to listeners on the server.

[#50638851_pgfId-1026053]##The standard HTML components provided by JSF
are all client behavior-ready. That is, all of the standard HTML
components implement the ClientBehaviorHolder interface and allow client
behaviors to be attached to well defined events. .

==== [#50638851_pgfId-1028683]##Behavior Interface

[#50638851_pgfId-1028687]##The Behavior interface is the root of the
component behavior model. It defines a single method to enable generic
behavior event delivery.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1028696]##public void broadcast(BehaviorEvent event)

[#50638851_pgfId-1028694]## throws AbortProcessingException

|===

[#50638851_pgfId-1028732]##This method is called by UIComponent
implementations to re-broadcast behavior events that were queued by by
calling UIComponent.queueEvent.

==== [#50638851_pgfId-1028733]##BehaviorBase

[#50638851_pgfId-1028741]##The BehaviorBase abstract class implements
the broadcast method from the Behavior interface. BehaviorBase also
implements the PartialStateHolder interface (see
link:JSF.htm#50638851_PartialStateHolder[See PartialStateHolder]). It
also provides behavior event listener registration methods.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1028748]##public void broadcast(BehaviorEvent event)

[#50638851_pgfId-1028749]## throws AbortProcessingException

|===

[#50638851_pgfId-1028776]##This method delivers the BehaviorEvent to
listeners that were registered via addBehaviorListener.

[#50638851_pgfId-1028789]##The following methods are provided for add
and removing BehaviorListeners..

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028775]##protected void
addBehaviorListener(BehaviorListener listener)
|===

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028779]##protected void
removeBehaviorListener(BehaviorListener listener);
|===

==== [#50638851_pgfId-1028782]##The Client Behavior Contract

[#50638851_pgfId-1028735]##The _ClientBehavior_ interface extends the
_Behavior_ interface and lays the foundation on which behavior authors
can define custom script producing behaviors. The logic for producing
these scripts is defined in the _getScript_ () method. __

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028738]##public String getScript(BehaviorContext
behaviorContext)
|===

[#50638851_pgfId-1028528]##This method returns a String that is an
executable script that can be attached to a client side event handler.
The BehaviorContext argument contains information that may be useful for
getScript implementations.

[#50638851_pgfId-1028540]##In addition to client side functionality,
client behaviors can also post back to the server and participate in the
request processing lifecycle. ..

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1026515]##public void decode(FacesContext
context,UIComponent component)
|===

[#50638851_pgfId-1026520]##This method can perform request decoding and
queue server side events..].

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1026696]##public Set<ClientBehaviorHint> getHints()
|===

[#50638851_pgfId-1026701]##This method provides information about the
client behavior implementation that may be useful to components and
renderers that interact with the client behavior.

[#50638851_pgfId-1026745]##Refer to the javadocs for these methods for
more details.

==== [#50638851_pgfId-1028574]##ClientBehaviorHolder

[#50638851_pgfId-1028610]##Components that support client behaviors must
implement the ClientBehaviorHolder interface. Refer to
link:JSF.htm#50638851_ClientBehaviorHolder[See ClientBehaviorHolder] for
more details.

==== [#50638851_pgfId-1028578]##ClientBehaviorRenderer

[#50638851_pgfId-1028615]##Client behaviors may implement script
generation and decoding in a client behavior class or delegate to a
ClientBehaviorRenderer. Refer to
link:JSF.htm#50638855_ClientBehaviorRenderer[See ClientBehaviorRenderer]
for more specifics.

==== [#50638851_pgfId-1028584]##ClientBehaviorContext

[#50638851_pgfId-1028585]##The specification provides a
ClientBehaviorContext that contains information that may be used at
script rendering time. Specifically it includes:

[#50638851_pgfId-1028586]##FacesContext

[#50638851_pgfId-1028587]##UIComponent that the current behavior is
attached to

[#50638851_pgfId-1028588]##The name of the event that the behavior is
associated with

[#50638851_pgfId-1028589]##The identifier of the source - this may
correspond to the identifier of the source of the behavior

[#50638851_pgfId-1028590]##A collection of parameters that submitting
behaviors should include when posting back to the server

[#50638851_pgfId-1028594]##The ClientBehaviorContext is created with the
use of this static method:

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028593]##public static ClientBehaviorContext
createClientBehaviorContext(FacesContext context,UIComponent
component,String eventName,tring
sourceId,Collection<ClientBehaviorContext.Parameter> parameters)
|===

[#50638851_pgfId-1028582]##This method must throw a NullPointerException
if context, component or eventName is null.

==== [#50638851_pgfId-1028621]##ClientBehaviorHint

[#50638851_pgfId-1028625]##The ClientBehaviorHint enum is used to convey
information about the client behavior implementation. Currently, only
one hint is provided.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028636]##SUBMITTING
|===

[#50638851_pgfId-1028641]##This hint indicates that a client behavior
implementation posts back to the server.

==== [#50638851_pgfId-1027759]##ClientBehaviorBase

[#50638851_pgfId-1028650]## _ClientBehaviorBase_ is an extension of
_BehaviorBase_ that implements the _ClientBehavior_ interface. It It is
a convenience class that contains default implementations for the
methods in _ClientBehavior_ plus additional methods::

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028665]##public String getScript(BehaviorContext
behaviorContext)
|===

[#50638851_pgfId-1028674]##The default implementation calls getRenderer
to retrieve the _ClientBehaviorRenderer_ . If a _ClientBehaviorRenderer_
is found, it is used to obtain the script. If no
_ClientBehaviorRenderer_ is found, this method returns null.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028855]##public void decode(FacesContext
context,UIComponent component)
|===

[#50638851_pgfId-1028861]##The default implementation calls getRenderer
to retrieve the _ClientBehaviorRenderer_ . If a _ClientBehaviorRenderer_
is found, it is used to perform decoding. If no _ClientBehaviorRenderer_
is found, no decoding is performed.

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028878]##public Set<ClientBehaviorHint> getHints()
|===

[#50638851_pgfId-1028891]##The default implementation returns an empty
set

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028903]##public String getRendererType();
|===

[#50638851_pgfId-1028915]##This method identifies the
_ClientBehaviorRenderer_ type. By default, no _ClientBehaviorRenderer_
type is provided. Subclasses should either override this method to
return a valid type or override the getScript and decode methods if a
_ClientBehaviorRenderer_ is not available..

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1028922]##protected ClientBehaviorRenderer
getRenderer(FacesContext context);
|===

[#50638851_pgfId-1027792]##This method returns the
_ClientBehaviorRenderer_ instance that is associated with this
ClientBehavior. It uses the renderer type returned from get
_RendererType()_ to look up the renderer on the RenderKit using
_RenderKit.getClientBehaviorRenderer._

==== [#50638851_pgfId-1026855]##[#50638851_Behavior Event / Listener Model]##Behavior Event / Listener Model

[#50638851_pgfId-1026859]##The behavior event / listener model is an
extension of the JSF event / listener model as described in
link:JSF.htm#50638851_80722[See Event and Listener Model].
BehaviorHolder components are responsible for broadcasting
BehaviorEvents to behaviors.

===== [#50638851_pgfId-1026873]##Event Classes

[#50638851_pgfId-1026934]##Behaviors can broadcast events in the same
way that UIComponents can broadcast events. At the root of the behavior
event hierarchy is BehaviorEvent that extends
_javax.faces.event.FacesEvent_ . All events that are broadcast by JSF
behaviors must extend the _javax.faces.event.BehaviorEvent_ abstract
base class. The parameter list for the constructor(s) of this event
class must include a _UIComponent_ , which identifies the component from
which the event will be broadcast to interested listeners, and a
_Behavior_ which identifies the behavior associated with the component.
The source component can be retrieved from the event object itself by
calling _getComponent_ and the behavior can be retrieved by calling
_getBehavior_ . Additional constructor parameters and/or properties on
the event class can be used to relay additional information about the
event.

[#50638851_pgfId-1026907]##In conformance to the naming patterns defined
in the _JavaBeans Specification_ , event classes typically have a class
name that ends with _Event_ . The following method is available to
determine the Behavior for the event (in addition to the other methods
inherited from _javax.faces.event.FacesEvent:_

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1026979]##public Behavior getBehavior()
|===

===== [#50638851_pgfId-1027106]##Listener Classes

[#50638851_pgfId-1027115]##For each event type that may be emitted, a
corresponding listener interface must be created, which extends the
_javax.faces.event.BehaviorListener_ interface. _BehaviorListener_
extends from _javax.faces.event.FacesListener._ The method signature(s)
defined by the listener interface must take a single parameter, an
instance of the event class for which this listener is being created. A
listener implementation class will implement one or more of these
listener interfaces, along with the event handling method(s) specified
by those interfaces. The event handling methods will be called during
event broadcast, one per event.

[#50638851_pgfId-1027116]##In conformance to the naming patterns defined
in the _JavaBeans Specification_ , listener interfaces have a class name
based on the class name of the event being listened to, but with the
word _Listener_ replacing the trailing _Event_ of the event class name
(thus, the listener for a _FooEvent_ would be a _FooListener_ ). It is
recommended that application event listener interfaces follow this
naming pattern as well.

===== [#50638851_pgfId-1027194]##[#50638851_27710]##Listener Registration

[#50638851_pgfId-1027198]## _BehaviorListener_ registration follows the
same conventions as outlined in link:JSF.htm#50638851_27710[See Listener
Registration].

==== [#50638851_pgfId-1027909]##Ajax Behavior

===== [#50638851_pgfId-1027913]##AjaxBehavior

{empty}[#50638851_pgfId-1029280]##The specification defines a single
concrete _ClientBehavior_ implementation:
_javax.faces.component.behavior.AjaxBehavior_ . This class extends
_javax.faces.component.behavior.ClientBehaviorBase_ . The presence of
this behavior on a component causes the rendering of JavaScript that
will produce an Ajax request to the server using the JavaScript API
outlined in Section “JavaScript API”. This behavior may also broadcast
_javax.faces.event.AjaxBehaviorEvents_ to registered
_javax.faces.event.AjaxBehaviorListener_ implementations. Refer to the
javadocs for more details about _AjaxBehavior._
[P1-start-ajaxbehavior]This behavior must define the behavior id
“javax.faces.behavior.Ajax”. The renderer type must also be
“javax.faces.behavior.Ajax”.[P1-end]

===== [#50638851_pgfId-1027943]##Ajax Behavior Event / Listener Model

[#50638851_pgfId-1027947]##Corresponding to the standard behavior event
classes described in the previous section the specification supports an
event listener model for broadcasting and handling _AjaxBehavior_
events.

====== [#50638851_pgfId-1027958]##javax.faces.event.AjaxBehaviorEvent

[#50638851_pgfId-1027956]##This event type extends from
_javax.faces.event.BehaviorEvent_ and it is broadcast from an
AjaxBehavior. This class follows the standard JSF event / listener
model, incorporating the usual methods as outlined in
link:JSF.htm#50638851_80722[See Event and Listener Model]. This class is
responsible for invoking the method implementation of
_javax.faces.event.AjaxBehaviorListener.processAjaxBehavior._ Refer to
the javadocs for more complete details about this class.

====== [#50638851_pgfId-1027979]##javax.faces.event.AjaxBehaviorListener

[#50638851_pgfId-1027980]##This listener type extends from
_javax.faces.event.BehaviorListener_ and it is invoked in response to
_AjaxBehaviorEvents._

[width="100%",cols="100%",]
|===
|[#50638851_pgfId-1027983]##public void
processAjaxBehavior(AjaxBehaviorEvent event)
|===

[#50638851_pgfId-1027977]## _AjaxBehaviorListener_ implementations
implement this method to provide server side functionality in response
to _AjaxBehavior_ Events. See the javadocs for more details about this
class.

[#50638851_pgfId-1029263]## 

==== [#50638851_pgfId-1026619]##Adding Behavior To Components

[#50638851_pgfId-1026746]##Using the ClientBehaviorHolder interface
(link:JSF.htm#50638851_ClientBehaviorHolder[See ClientBehaviorHolder])
_ClientBehavior_ instances can be added to components. For
_ClientBehavior_ implementations that extend _UIComponentBase_ , the
minimal requirement is to override _getEventNames()_ to return a
non-empty collection of the event names exposed by the
_ClientBehaviorHolder_ . A optional default event name may be specified
as well. For example:

[#50638851_pgfId-1028103]##Here’s an example code snippet from one of
the Html components:

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1026752]##public class HtmlCommandButton extends
javax.faces.component.UICommand implements ClientBehaviorHolder \{

[#50638851_pgfId-1026757]##...

[#50638851_pgfId-1026760]##private static final Collection<String>
EVENT_NAMES =
Collections.unmodifiableCollection(Arrays.asList("blur","change","click","action",...));

[#50638851_pgfId-1026761]## 

[#50638851_pgfId-1026762]## public Collection<String> getEventNames() \{

[#50638851_pgfId-1026763]## return EVENT_NAMES; }

[#50638851_pgfId-1026764]## 

[#50638851_pgfId-1026766]## public String getDefaultEventName() \{

[#50638851_pgfId-1026767]## return "action"; }

[#50638851_pgfId-1026796]##...

[#50638851_pgfId-1026758]## 

|===

[#50638851_pgfId-1029307]##Users of the component will be able to attach
_ClientBehavior_ instances to any of the event names specified by the
_getEventNames()_ implementation by calling
_ClientBehaviorHolder.addBehavior(eventName, clientBehavior)_ .

==== [#50638851_pgfId-1026058]##Behavior Registration

[#50638851_pgfId-1026066]##JSF provides methods for registering
_Behavior_ implementations and these methods are similar to the methods
used to register converters and validators. Refer to
link:JSF.htm#50638861_19251[See Object Factories] for the specifics
about these methods.

===== [#50638851_pgfId-1026261]##XML Registration

[#50638851_pgfId-1027211]##JSF provides the usual faces-config.xml
registration of custom component behavior implementations.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1027216]##<behavior>

[#50638851_pgfId-1027217]##<behavior-id>custom.behavior.Greet</behavior-id>

[#50638851_pgfId-1027218]##<behavior-class>greet.GreetBehavior</behavior-class>

[#50638851_pgfId-1027219]##</behavior>

[#50638851_pgfId-1027214]## 

|===

===== [#50638851_pgfId-1027254]##Registration By Annotation

[#50638851_pgfId-1027261]##JSF provides the @FacesBehavior annotation
for registering custom behavior implementations.

[width="100%",cols="100%",]
|===
a|
[#50638851_pgfId-1027274]##@FacesBehavior(value="custom.behavior.Greet")

[#50638851_pgfId-1027272]##public class GreetBehavior extends
BehaviorBase implements Serializable \{

[#50638851_pgfId-1027278]##...

[#50638851_pgfId-1027279]##}

|===

[#50638853_pgfId-1037844]##

[#50638853_pgfId-1037846]##[#50638853_28317]## 

== [#50638853_pgfId-1031795]##

image:JSF-19.gif[image]

[#50638853_30712]##Standard User Interface Components

image:JSF-20.gif[image]

[#50638853_pgfId-1031796]##In addition to the abstract base class
_UIComponent_ and the abstract base class _UIComponentBase_ , described
in the previous chapter, JSF provides a number of concrete user
interface component implementation classes that cover the most common
requirements. In addition, component writers will typically create new
components by subclassing one of the standard component classes (or the
_UIComponentBase_ class). It is anticipated that the number of standard
component classes will grow in future versions of the JavaServer Faces
specification.

[#50638853_pgfId-1031797]##Each of these classes defines the
render-independent characteristics of the corresponding component as
JavaBeans component properties. Some of these properties may be _value
expressions_ that indirectly point to values related to the current
request, or to the properties of model data objects that are accessible
through request-scope, session-scope, or application-scope attributes.
In addition, the _rendererType_ property of each concrete implementation
class is set to a defined value, indicating that decoding and encoding
for this component will (by default) be delegated to the corresponding
_Renderer_ .

=== [#50638853_pgfId-1031800]##

image:JSF-21.gif[image]

[#50638853_38807]##[#50638853_22194]##Standard User Interface Components

[#50638853_pgfId-1031801]##This section documents the features and
functionality of the standard _UIComponent_ classes and implementations
that are included in JavaServer Faces.

[#50638853_pgfId-1031802]##[P1-start-componentConstant]The
implementation for each standard _UIComponent_ class must specify two
public static final String constant values:

[#50638853_pgfId-1031803]## _COMPONENT_TYPE_ -- The standard component
type identifier under which the corresponding component class is
registered with the _Application_ object for this application. This
value may be used as a parameter to the _createComponent()_ method.

{empty}[#50638853_pgfId-1031804]## _COMPONENT_FAMILY_ -- The standard
component family identifier used to select an appropriate Renderer for
this component.[P1-end]

[#50638853_pgfId-1031805]##For all render-independent properties in the
following sections (except for _id_ , _scope_ , and _var_ ) the value
may either be a literal, or it may come from a value expression. Please
see link:JSF.htm#50638862_70677[See Value Expressions] for more
information.

[#50638853_pgfId-1031809]##The following UML class diagram shows the
classes and interfaces in the package _javax.faces.component._

======= [#50638853_pgfId-1031814]##[#50638853_10300]##The _javax.faces.component_ package

image:JSF-22.gif[image]

==== [#50638853_pgfId-1031815]##UIColumn

[#50638853_pgfId-1031816]## _UIColumn_ (extends _UIComponentBase_ ) is a
component that represents a single column of data with a parent _UIData_
component. The child components of a _UIColumn_ will be processed once
for each row in the data managed by the parent _UIData_ .

===== [#50638853_pgfId-1031817]##Component Type

[#50638853_pgfId-1031818]##The standard component type for _UIColumn_
components is “javax.faces.Column”.

===== [#50638853_pgfId-1031819]##Properties

[#50638853_pgfId-1031845]## _UIColumn_ adds the following
render-independent properties:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1031822]##Name |[#50638853_pgfId-1031824]##Access
|[#50638853_pgfId-1031826]##Type |[#50638853_pgfId-1031828]##Description
|[#50638853_pgfId-1031830]## _footer_ |[#50638853_pgfId-1031832]##RW
|[#50638853_pgfId-1031834]## _UIComponent_
|[#50638853_pgfId-1031836]##Convenience methods to get and set the
“footer” facet for this component.

|[#50638853_pgfId-1031838]## _header_ |[#50638853_pgfId-1031840]##RW
|[#50638853_pgfId-1031842]##UIComponent
|[#50638853_pgfId-1031844]##Convenience methods to get and set the
“header” facet for this component.
|===

[#50638853_pgfId-1031846]## _[P1-start-uicolumn]UIColumn_ specializes
the behavior of render-independent properties inherited from the parent
class as follows:

[#50638853_pgfId-1031847]##The default value of the _family_ property
must be set to “javax.faces.Column”.

{empty}[#50638853_pgfId-1031848]##The default value of the
_rendererType_ property must be set to _null_ .[P1-end]

===== [#50638853_pgfId-1031850]##[#50638853_31221]##Methods

[#50638853_pgfId-1031851]## _UIColumn_ adds no new processing methods.

===== [#50638853_pgfId-1031852]##Events

[#50638853_pgfId-1031853]## _UIColumn_ adds no new event handling
methods.

==== [#50638853_pgfId-1031855]##[#50638853_90489]##UICommand

[#50638853_pgfId-1031856]## _UICommand_ (extends _UIComponentBase;_
implements _ActionSource_ ) is a control which, when activated by the
user, triggers an application-specific “command” or “action.” Such a
component is typically rendered as a push button, a menu item, or a
hyperlink.

===== [#50638853_pgfId-1031857]##Component Type

[#50638853_pgfId-1031858]##The standard component type for _UICommand_
components is “javax.faces. _Command_ ”.

===== [#50638853_pgfId-1031859]##Properties

[#50638853_pgfId-1031877]## _UICommand_ adds the following
render-independent properties.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1031862]##Name |[#50638853_pgfId-1031864]##Access
|[#50638853_pgfId-1031866]##Type |[#50638853_pgfId-1031868]##Description
|[#50638853_pgfId-1031870]## _value_ |[#50638853_pgfId-1031872]##RW
|[#50638853_pgfId-1031874]## _Object_ |[#50638853_pgfId-1031876]##The
value of this component, normally used as a label.
|===

[#50638853_pgfId-1031881]##See link:JSF.htm#50638851_46959[See
ActionSource] for information about properties introduced by the
implemented classes.

[#50638853_pgfId-1031882]## _[P1-start-uicommand]UICommand_ components
specialize the behavior of render-independent properties inherited from
the parent class as follows:

[#50638853_pgfId-1031883]##The default value of the _family_ property
must be set to “javax.faces.Command”.

{empty}[#50638853_pgfId-1031884]##The default value of the
_rendererType_ property must be set to “javax.faces.Button”.[P1-end]

===== [#50638853_pgfId-1031885]##Methods

[#50638853_pgfId-1031889]## _UICommand_ adds no new processing methods.
See link:JSF.htm#50638851_46959[See ActionSource] for information about
methods introduced by the implemented classes.

===== [#50638853_pgfId-1031890]##Events

[#50638853_pgfId-1031893]## _UICommand_ adds no new event processing
methods. See link:JSF.htm#50638851_46959[See ActionSource] for
information about event handling introduced by the implemented classes.

==== [#50638853_pgfId-1031896]##[#50638853_12631]##UIData

[#50638853_pgfId-1031897]## _UIData_ (extends _UIComponentBase;_
implements _NamingContainer_ ) is a component that represents a data
binding to a collection of data objects represented by a DataModel
instance (see link:JSF.htm#50638853_68539[See DataModel]). Only children
of type _UIColumn_ should be processed by renderers associated with this
component.

===== [#50638853_pgfId-1031901]##Component Type

[#50638853_pgfId-1031902]##The standard component type for _UIData_
components is “javax.faces.Data”

===== [#50638853_pgfId-1031904]##[#50638853_22236]##Properties

[#50638853_pgfId-1032002]## _UIData_ adds the following
render-independent properties.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1031907]##Name |[#50638853_pgfId-1031909]##Access
|[#50638853_pgfId-1031911]##Type |[#50638853_pgfId-1031913]##Description
|[#50638853_pgfId-1031915]## _dataModel_
|[#50638853_pgfId-1031917]##protected RW |[#50638853_pgfId-1031919]##
_DataModel_ |[#50638853_pgfId-1031921]##The internal value
representation of the _UIData_ instance. Subclasses might write to this
property if they want to restore the internal model during the _Restore
View Phase_ or if they want to explicitly refresh the model for the
_Render Response_ phase. __

|[#50638853_pgfId-1031923]## _first_ |[#50638853_pgfId-1031925]##RW
|[#50638853_pgfId-1031927]## _int_
|[#50638853_pgfId-1031929]##Zero-relative row number of the first row in
the underlying data model to be displayed, or zero to start at the
beginning of the data model.

|[#50638853_pgfId-1031931]## _footer_ |[#50638853_pgfId-1031933]##RW
|[#50638853_pgfId-1031935]## _UIComponent_
|[#50638853_pgfId-1031937]##Convenience methods to get and set the
“footer” facet for this component.

|[#50638853_pgfId-1031939]## _header_ |[#50638853_pgfId-1031941]##RW
|[#50638853_pgfId-1031943]##UIComponent
|[#50638853_pgfId-1031945]##Convenience methods to get and set the
“header” facet for this component.

|[#50638853_pgfId-1031947]##rowCount |[#50638853_pgfId-1031949]##RO
|[#50638853_pgfId-1031951]##int |[#50638853_pgfId-1031953]##The number
of rows in the underlying _DataModel_ , which can be -1 if the number of
rows is unknown.

|[#50638853_pgfId-1031955]##rowAvailable |[#50638853_pgfId-1031957]##RO
|[#50638853_pgfId-1031959]##boolean |[#50638853_pgfId-1031961]##Return
_true_ if there is row data available for the currently specified
_rowIndex_ ; else return _false_ .

|[#50638853_pgfId-1031963]##rowData |[#50638853_pgfId-1031965]##RO
|[#50638853_pgfId-1031967]##Object |[#50638853_pgfId-1031969]##The data
object representing the data for the currently selected _rowIndex_
value.

|[#50638853_pgfId-1031971]##rowIndex |[#50638853_pgfId-1031973]##RW
|[#50638853_pgfId-1031975]##int
|[#50638853_pgfId-1031977]##Zero-relative index of the row currently
being accessed in the underlying _DataModel_ , or -1 for no current row.
See below for further information.

|[#50638853_pgfId-1031979]##rows |[#50638853_pgfId-1031981]##RW
|[#50638853_pgfId-1031983]##int |[#50638853_pgfId-1031985]##The number
of rows (starting with the one identified by the _first_ property) to be
displayed, or zero to display the entire set of available rows.

|[#50638853_pgfId-1031987]##value |[#50638853_pgfId-1031989]##RW
|[#50638853_pgfId-1031991]##Object |[#50638853_pgfId-1031993]##The
_DataModel_ instance representing the data to which this component is
bound, or a collection of data for which a _DataModel_ instance is
synthesized. See below for more information.

|[#50638853_pgfId-1031995]##var |[#50638853_pgfId-1031997]##RW
|[#50638853_pgfId-1031999]##String |[#50638853_pgfId-1032001]##The
request-scope attribute (if any) under which the data object for the
current row will be exposed when iterating.
|===

[#50638853_pgfId-1032006]##See link:JSF.htm#50638851_48495[See
NamingContainer] for information about properties introduced by the
implemented classes.

[#50638853_pgfId-1032007]## _[P1-start-uidata]UIData_ specializes the
behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032008]##The default value of the _family_ property
must be set to “javax.faces.Data”.

{empty}[#50638853_pgfId-1032009]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Table_ ”.[P1-end]

[#50638853_pgfId-1032010]##The current value identified by the _value_
property is normally of type _DataModel_ .
[P1-start-uidataModel]However, a _DataModel_ wrapper instance must
automatically be provided by the JSF implementation if the current value
is of one of the following types:

[#50638853_pgfId-1032011]## _java.util.List_

[#50638853_pgfId-1038034]##Array of _java.util.Object_

[#50638853_pgfId-1038035]## _java.sql.ResultSet_ (which therefore also
supports _javax.sql.RowSet_ )

[#50638853_pgfId-1038036]## _javax.servlet.jsp.jstl.sql.Result_

[#50638853_pgfId-1038015]##java.util.Map (uses the wrapper for
java.lang.Iterable by providing access to java.util.Map#entrySet())

{empty}[#50638853_pgfId-1032015]##Any other Java object is wrapped by a
_DataModel_ instance with a single row.[P1-end]

[#50638853_pgfId-1032016]##Convenience implementations of _DataModel_
are provided in the _javax.faces.model_ package for each of the above
(see link:JSF.htm#50638853_93394[See Concrete Implementations]), and
must be used by the _UIData_ component to create the required
_DataModel_ wrapper.

===== [#50638853_pgfId-1032021]##[#50638853_33796]##Methods

[#50638853_pgfId-1032022]## _UIData_ adds no new processing methods.
However, the getDataModel() method is now protected, so implementations
have access to the underlying data model. See
link:JSF.htm#50638851_48495[See NamingContainer] for information about
methods introduced by the implemented classes.

[#50638853_pgfId-1032026]##UIData specializes the behavior of the
_getClientId()_ method inherited from its parent, in order to create a
client identifier that includes the current rowIndex value (if it is not
-1). Because _UIData_ is a _NamingContainer_ , this makes it possible
for rendered client identifiers of child components to be row-specific.

[#50638853_pgfId-1032027]## _UIData_ specializes the behavior of the
_queueEvent()_ method inherited from its parent, to wrap the specified
event (bubbled up from a child component) in a private wrapper
containing the current rowIndex value, so that this rowIndex can be
reset when the event is later broadcast.

[#50638853_pgfId-1032028]## _UIData_ specializes the behavior of the
_broadcast()_ method to unwrap the private wrapper (if this event was
wrapped), and call _setRowIndex()_ to re-establish the context in which
the event was queued, followed by delivery of the event.

[#50638853_pgfId-1032029]## _[P1-start-uidataDecode]UIData_ specializes
the behavior of the _processDecodes()_ , _processValidators()_ , and
_processUpdates()_ methods inherited from its parent as follows:

[#50638853_pgfId-1032030]##For each of these methods, the _UIData_
implementation must iterate over each row in the underlying data model,
starting with the row identified by the _first_ property, for the number
of rows indicated by the _rows_ property, by calling the _setRowIndex()_
method.

{empty}[#50638853_pgfId-1032031]##When iteration is complete, set the
_rowIndex_ property of this component, and of the underlying _DataModel_
, to zero, and remove any request attribute exposed via the _var_
property.[P1-end]

[#50638853_pgfId-1032032]## _UIData_ specializes the behavior of
_invokeOnComponent()_ inherited from _UIComponentBase_ to examine the
argument _clientId_ and extract the _rowIndex_ , if any, and position
the data properly before proceeding to locate the component and invoke
the callback. Upon normal or exception return from the callback the data
must be repositioned to match how it was before invoking the callback.
Please see the javadocs for _UIData.invokeOnComponent()_ for more
details.

===== [#50638853_pgfId-1032033]##Events

[#50638853_pgfId-1032037]## _UIData_ adds no new event handling methods.
Seelink:JSF.htm#50638851_48495[See NamingContainer] for information
about event handling introduced by the implemented classes.

==== [#50638853_pgfId-1032039]##[#50638853_96109]##UIForm

[#50638853_pgfId-1032040]## _UIForm_ (extends _UIComponentBase;_
implements _NamingContainer_ ) is a component that represents an input
form to be presented to the user, and whose child components (among
other things) represent the input fields to be included when the form is
submitted.

[#50638853_pgfId-1036486]##[P1-start-uiformEncodeEnd]The _encodeEnd()_
method of the renderer for _UIForm_ must call _ViewHandler.writeState()_
_before_ writing out the markup for the closing tag of the
form.[P1-end]This allows the state for multiple forms to be saved.

===== [#50638853_pgfId-1032043]##[#50638853_91334]##Component Type

[#50638853_pgfId-1032044]##The standard component type for _UIForm_
components is “javax.faces. _Form_ ”.

===== [#50638853_pgfId-1032045]##Properties

[#50638853_pgfId-1032063]## _UIForm_ adds the following
render-independent properties.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032048]##Name |[#50638853_pgfId-1032050]##Access
|[#50638853_pgfId-1032052]##Type |[#50638853_pgfId-1032054]##Description
|[#50638853_pgfId-1032056]## _prependId_ |[#50638853_pgfId-1032058]##RW
|[#50638853_pgfId-1032060]## _boolean_ |[#50638853_pgfId-1032062]##If
true, this _UIForm_ instance does allow its id to be pre-pendend to its
descendent’s id during the generation of clientIds for the descendents.
The default value of this property is _true_ . __
|===

[#50638853_pgfId-1032064]## _[P1-start-uiform]UIForm_ specializes the
behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032065]##The default value of the _family_ property
must be set to “ _javax.faces.Form_ ”.

{empty}[#50638853_pgfId-1032066]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Form_ ”.[P1-end]

===== [#50638853_pgfId-1032072]##[#50638853_12123]##Methods.

[width="100%",cols="100%",]
|===
a|
[#50638853_pgfId-1032070]##public boolean isSubmitted();

[#50638853_pgfId-1032071]##public void setSubmitted(boolean submitted)

|===

[#50638853_pgfId-1032073]##[P1-start-uiform-setSubmitted]The
_setSubmitted()_ method of each _UIForm_ instance in the view must be
called during the _Apply Request Values_ phase of the request processing
lifecycle, during the processing performed by the _UIComponent.decode()_
method. If this _UIForm_ instance represents the form actually being
submitted on this request, the parameter must be set to _true_ ;
otherwise, it must be set to _false_ .[P1-end] The standard
implementation of _UIForm_ delegates the responsibility for calling this
method to the _Renderer_ associated with this instance..

{empty}[#50638853_pgfId-1032074]##[P1-start-uiform-submitted]The value
of a _UIForm'_ s _submitted_ property must not be saved as part of its
state.[P1-end]

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032077]##public void processDecodes(FacesContext
context);
|===

[#50638853_pgfId-1032078]##Override _UIComponent.processDecodes()_ to
ensure that the _submitted_ property is set for this component. If the
_submitted_ property decodes to false, do not process the children and
return immediately.

[width="100%",cols="100%",]
|===
a|
[#50638853_pgfId-1032081]##public void processValidators(FacesContext
context);

[#50638853_pgfId-1032082]##public void processUpdates(FacesContext
context);

|===

[#50638853_pgfId-1032083]##Override _processValidators()_ and
_processUpdates()_ to ensure that the children of this _UIForm_ instance
are only processed if _isSubmitted()_ returns true.

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032086]##public void saveState(FacesContext context);
|===

[#50638853_pgfId-1032087]##[P1-start-uiformSaveState]The _saveState()_
method of UIForm must call _setSubmitted(false)_ before calling
_super.saveState()_ as an extra precaution to ensure the submitted state
is not persisted across requests.[P1-end].

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032090]##protected String
getContainerClientId(FacesContext context);
|===

{empty}[#50638853_pgfId-1032091]##[P1-start-uiformPrependId]Override the
parent method to ensure that children of this _UIForm_ instance in the
view have the form’s _clientId_ prepended to their _clientId_ s if and
only if the form’s _prependId_ property is _true_ .[P1-end]

===== [#50638853_pgfId-1032092]##Events

[#50638853_pgfId-1032093]## _UIForm_ adds no new event handling methods.

==== [#50638853_pgfId-1032095]##[#50638853_34220]##UIGraphic

[#50638853_pgfId-1032096]## _UIGraphic_ (extends _UIComponentBase_ ) is
a component that displays a graphical image to the user. The user cannot
manipulate this component; it is for display purposes only.

===== [#50638853_pgfId-1032097]##Component Type

[#50638853_pgfId-1032098]##The standard component type for _UIGraphic_
components is “javax.faces. _Graphic_ ”.

===== [#50638853_pgfId-1032099]##Properties

[#50638853_pgfId-1032100]##The following render-independent properties
are added by the UIGraphic component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032103]##Name |[#50638853_pgfId-1032105]##Access
|[#50638853_pgfId-1032107]##Type |[#50638853_pgfId-1032109]##Description
|[#50638853_pgfId-1032111]## _url_ |[#50638853_pgfId-1032113]##RW
|[#50638853_pgfId-1032115]## _String_ |[#50638853_pgfId-1032117]##The
URL of the image to be displayed. If this URL begins with a _/_
character, it is assumed to be relative to the context path of the
current web application. This property is a typesafe alias for the
_value_ property, so that the actual URL to be used can be acquired via
a value expression.

|[#50638853_pgfId-1032119]## _value_ |[#50638853_pgfId-1032121]##RW
|[#50638853_pgfId-1032123]## _Object_ |[#50638853_pgfId-1032125]##The
value of this component, normally used as a URL.
|===

[#50638853_pgfId-1032126]## _[P1-start-uigraphic]UIGraphic_ specializes
the behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032127]##The default value of the _family_ property
must be set to “javax.faces.Graphic”.

{empty}[#50638853_pgfId-1032128]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Image_ ”.[P1-end]

===== [#50638853_pgfId-1032129]##Methods

[#50638853_pgfId-1032130]## _UIGraphic_ adds no new processing methods.

===== [#50638853_pgfId-1032131]##Events

[#50638853_pgfId-1032132]## _UIGraphic_ does not originate any standard
events.

==== [#50638853_pgfId-1032134]##[#50638853_33254]##UIInput

[#50638853_pgfId-1032135]## _UIInput_ (extends _UIOutput_ , implements
_EditableValueHolder_ ) is a component that both displays the current
value of the component to the user (as _UIOutput_ components do), and
processes request parameters on the subsequent request that need to be
decoded.

===== [#50638853_pgfId-1032136]##Component Type

[#50638853_pgfId-1032137]##The standard component type for _UIInput_
components is “ _javax.faces.Input_ ”.

===== [#50638853_pgfId-1032138]##Properties

[#50638853_pgfId-1032172]## _UIInput_ adds the following renderer
independent properties.:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032141]##Name |[#50638853_pgfId-1032143]##Access
|[#50638853_pgfId-1032145]##Type |[#50638853_pgfId-1032147]##Description
|[#50638853_pgfId-1032149]## _requiredMessage_
|[#50638853_pgfId-1032151]##RW |[#50638853_pgfId-1032153]## _String_
|[#50638853_pgfId-1032155]##ValueExpression enabled property. If
non-null, this property is used as the _summary_ and _detail_ strings of
the _FacesMessage_ that is queued on the _FacesContext_ instead of the
default message for the required validaiton failure. Note that the
message is fully internationalizable via either the _f:loadBundle_ tag
or via _ResourceBundle_ access from the EL.

|[#50638853_pgfId-1032157]## _converterMessage_
|[#50638853_pgfId-1032159]##RW |[#50638853_pgfId-1032161]## _String_
|[#50638853_pgfId-1032163]##ValueExpression enabled property. If
non-null, this property is used as the _summary_ and _detail_ strings of
the _FacesMessage_ that is queued on the _FacesContext_ instead of the
default message for conversion failure. Note that the message is fully
internationalizable via either the _f:loadBundle_ tag or via
_ResourceBundle_ access from the EL.

|[#50638853_pgfId-1032165]## _validatorMessage_
|[#50638853_pgfId-1032167]##RW |[#50638853_pgfId-1032169]## _String_
|[#50638853_pgfId-1032171]##ValueExpression enabled property. If
non-null, this property is used as the _summary_ and _detail_ strings of
the _FacesMessage_ that is queued on the _FacesContext_ instead of the
default message for validation failure. Note that the message is fully
internationalizable via either the _f:loadBundle_ tag or via
_ResourceBundle_ access from the EL.
|===

[#50638853_pgfId-1032173]## 

[#50638853_pgfId-1032177]##See link:JSF.htm#50638851_45435[See
EditableValueHolder] for information about properties introduced by the
implemented interfaces.

[#50638853_pgfId-1032178]##[P1-start-uiinput]UIInput specializes the
behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032179]##The default value of the _family_ property
must be set to “ _javax.faces.Input_ ”.

[#50638853_pgfId-1032180]##The default value of the _rendererType_
property must be set to “ _javax.faces.Text_ ”.

{empty}[#50638853_pgfId-1032181]##The _Converter_ specified by the
_converter_ property (if any) must also be used to perform
String->Object conversions during decoding.[P1-end]

[#50638853_pgfId-1032182]##If the _value_ property has an associated
_ValueExpression_ , the _setValue()_ method of that _ValueExpression_
will be called during the _Update Model Values_ phase of the request
processing lifecycle to push the local value of the component back to
the corresponding model bean property.

===== [#50638853_pgfId-1032184]##[#50638853_81775]##Methods

[#50638853_pgfId-1032185]##The following method is used during the
_Update Model Values_ phase of the request processing lifecycle, to push
the converted (if necessary) and validated (if necessary) local value of
this component back to the corresponding model bean property.

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032188]##public void updateModel(FacesContext
context);
|===

[#50638853_pgfId-1032192]##The following method is over-ridden from
_UIComponent:_

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032191]##public void broadcast(FacesEvent event);
|===

[#50638853_pgfId-1032193]##In addition to the default
_UIComponent.broadcast(javax.faces.event.FacesEvent)_ processing, pass
the _ValueChangeEvent_ being broadcast to the method referenced by the
_valueChangeListener_ property (if any).

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032196]##public void validate(FacesContext context);
|===

[#50638853_pgfId-1032197]##Perform the algorithm described in the
javadoc to validate the local value of this _UIInput_ ..

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1032200]##public void resetValue();
|===

[#50638853_pgfId-1032201]##Perform the algorithm described in the
javadoc to reset this _UIInput_ to the state where it has no local
value. This method does not touch the value expresson associated with
the “ _value_ ” property.

===== [#50638853_pgfId-1032202]##Events

[#50638853_pgfId-1032206]##All events are described in
link:JSF.htm#50638851_45435[See EditableValueHolder].

==== [#50638853_pgfId-1032207]##UIMessage

[#50638853_pgfId-1032208]## _UIMessage_ (extends _UIComponentBase_ )
encapsulates the rendering of error message(s) related to a specified
input component.

===== [#50638853_pgfId-1032209]##Component Type

[#50638853_pgfId-1032210]##The standard component type for _UIMessage_
components is “ _javax.faces.Message_ ”.

===== [#50638853_pgfId-1032211]##Properties

[#50638853_pgfId-1032212]##The following render-independent properties
are added by the UIMessage component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032215]##Name |[#50638853_pgfId-1032217]##Access
|[#50638853_pgfId-1032219]##Type |[#50638853_pgfId-1032221]##Description
|[#50638853_pgfId-1032223]## _for_ |[#50638853_pgfId-1032225]##RW
|[#50638853_pgfId-1032227]## _String_
|[#50638853_pgfId-1032229]##Identifier of the component for which to
render error messages. If this component is within the same
NamingContainer as the target component, this must be the component
identifier. Otherwise, it must be an absolute component identifier
(starting with “:”). See the UIComponent.findComponent() Javadocs for
more information.

|[#50638853_pgfId-1032231]##showDetail |[#50638853_pgfId-1032233]##RW
|[#50638853_pgfId-1032235]##boolean |[#50638853_pgfId-1032237]##Flag
indicating whether the “detail” property of messages for the specified
component should be rendered. Default value is “true”.

|[#50638853_pgfId-1032239]##showSummary |[#50638853_pgfId-1032241]##RW
|[#50638853_pgfId-1032243]##boolean |[#50638853_pgfId-1032245]##Flag
indicating whether the “summary” property of messages for the specified
component should be rendered. Default value is “false”.
|===

[#50638853_pgfId-1032246]## _[P1-start-uimessage]UIMessage_ specializes
the behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032247]##The default value of the _family_ property
must be set to “ _javax.faces.Message_ ”.

{empty}[#50638853_pgfId-1032248]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Message_
”.[P1-end]

===== [#50638853_pgfId-1032249]##Methods.

[#50638853_pgfId-1032250]## _UIMessage_ adds no new processing methods.

===== [#50638853_pgfId-1032251]##Events

[#50638853_pgfId-1032252]## _UIMessage_ adds no new event handling
methods.

==== [#50638853_pgfId-1032253]##UIMessages

[#50638853_pgfId-1032254]## _UIMessage_ (extends _UIComponentBase_ )
encapsulates the rendering of error message(s) not related to a
specified input component, or all enqueued messages.

===== [#50638853_pgfId-1032255]##Component Type

[#50638853_pgfId-1032256]##The standard component type for _UIMessage_
components is “ _javax.faces.Message_ s”.

===== [#50638853_pgfId-1032257]##Properties

[#50638853_pgfId-1032258]##The following render-independent properties
are added by the UIMessages component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032261]##Name |[#50638853_pgfId-1032263]##Access
|[#50638853_pgfId-1032265]##Type |[#50638853_pgfId-1032267]##Description
|[#50638853_pgfId-1032269]## _globalOnly_ |[#50638853_pgfId-1032271]##RW
|[#50638853_pgfId-1032273]## _boolean_ |[#50638853_pgfId-1032275]##Flag
indicating whether only messages not associated with any specific
component should be rendered. If not set, all messages will be rendered.
Default value is “false”.

|[#50638853_pgfId-1032277]##showDetail |[#50638853_pgfId-1032279]##RW
|[#50638853_pgfId-1032281]##boolean |[#50638853_pgfId-1032283]##Flag
indicating whether the “detail” property of messages for the specified
component should be rendered. Default value is “false”.

|[#50638853_pgfId-1032285]##showSummary |[#50638853_pgfId-1032287]##RW
|[#50638853_pgfId-1032289]##boolean |[#50638853_pgfId-1032291]##Flag
indicating whether the “summary” property of messages for the specified
component should be rendered. Default value is “true”.
|===

[#50638853_pgfId-1032292]## _[P1-stat-uimessages]UIMessages_ specializes
the behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032293]##The default value of the _family_ property
must be set to “ _javax.faces.Messages_ ”.

{empty}[#50638853_pgfId-1032294]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Messages_
”.[P1-end]

===== [#50638853_pgfId-1032295]##Methods.

[#50638853_pgfId-1032296]## _UIMessages_ adds no new processing methods.

===== [#50638853_pgfId-1032297]##Events

[#50638853_pgfId-1032298]## _UIMessages_ adds no new event handling
methods.

==== [#50638853_pgfId-1032300]##[#50638853_UIOutcomeTarget]##UIOutcomeTarget

[#50638853_pgfId-1037241]##UIOutcomeTarget ( _UIOutput_ ) is a component
that has a value and an outcome, either which may optionally be
retrieved from a model tier bean via a value expression (see
link:JSF.htm#50638862_70677[See Value Expressions]), and is displayed to
the user as a hyperlink, appearing in the form of a link or a button.
The user cannot modify the value of the hyperlink, as it's for display
purposes only. The target URL of the hyperlink is derived by passing the
outcome to the _ConfigurationNavigationHandler_ to retrieve the matching
_NavigationCase_ and then using the _ViewHandler_ to translate the
_NavigationCase_ into an action URL. When the client activates the
hyperlink, typically by clicking it, the target URL is retrieved using a
non-faces request and the response is rendered.

[#50638853_pgfId-1037243]##This component introduces a scenario known as
"preemptive navigation". The navigation case is resolved during the
Render Response phase, before the client activates the link (and may
never activate the link). The predetermined navigation is pursued after
the client activates the link. In contrast, the UICommand components
resolve and execute the navigation at once, after the Invoke Application
phase.

[#50638853_pgfId-1037245]##The _UIOutcomeTarget_ component allows the
developer to leverage the navigation model while at the same time being
able to generate bookmarkable, non-faces requests to be included in the
response.

===== [#50638853_pgfId-1037301]##Component Type

[#50638853_pgfId-1037305]##The standard component type for
UIOutcomeTarget is "javax.faces.OutcomeTarget".

===== [#50638853_pgfId-1037310]##Properties

[#50638853_pgfId-1037314]##The following render-independent properties
are added by thec component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1037328]##Name |[#50638853_pgfId-1037330]##Access
|[#50638853_pgfId-1037332]##Type |[#50638853_pgfId-1037334]## 
|[#50638853_pgfId-1037336]##Outcome |[#50638853_pgfId-1037338]##RW
|[#50638853_pgfId-1037340]##String |[#50638853_pgfId-1037342]##The
logical outcome that is used to resolve a NavigationCase which in turn
is used to build the target URL of this component. Default value is the
current view ID.

|[#50638853_pgfId-1037344]##includePageParams
|[#50638853_pgfId-1037346]##RW |[#50638853_pgfId-1037348]##boolean
|[#50638853_pgfId-1037350]##Flag indicating whether the page parameters
should be appended to the query string of the target URL. Default value
is "false".
|===

[#50638853_pgfId-1037375]## _[P1-start-uioutcometarget]_ UIOutcomeTarget
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1037384]##The default value of the family property must
be set to "javax.faces.UIOutcomeTarget"

[#50638853_pgfId-1037392]##The default value of the rendererType
property must be set to "javax.faces.Link" _[P1-end]_

===== [#50638853_pgfId-1037401]##Methods

[#50638853_pgfId-1037408]##The UIOutcomeTarget adds no event handling
methods.

===== [#50638853_pgfId-1037413]##Events

[#50638853_pgfId-1037417]##The UIOutcomeTarget adds no event handling
methods.

==== [#50638853_pgfId-1037231]##[#50638853_64468]##UIOutput

[#50638853_pgfId-1032301]## _UIOutput_ (extends _UIComponentBase;_
implements _ValueHolder_ ) is a component that has a value, optionally
retrieved from a model tier bean via a value expression (see
link:JSF.htm#50638862_70677[See Value Expressions]), that is displayed
to the user. The user cannot directly modify the rendered value; it is
for display purposes only:

===== [#50638853_pgfId-1032305]##Component Type

[#50638853_pgfId-1032306]##The standard component type for _UIOutput_
components is “javax.faces. _Output_ ”.

===== [#50638853_pgfId-1032307]##Properties

[#50638853_pgfId-1032310]## _UIOutput_ adds no new render-independent
properties. See link:JSF.htm#50638851_58138[See ValueHolder] for
information about properties introduced by the implemented classes.

[#50638853_pgfId-1032312]## _[P1-start-uioutput]UIOutput_ specializes
the behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032313]##The default value of the _family_ property
must be set to “javax.faces.Output”.

{empty}[#50638853_pgfId-1032314]##The default value of the
_rendererType_ property must be set to “javax.faces.Text”.[P1-end]

===== [#50638853_pgfId-1032315]##Methods

[#50638853_pgfId-1032319]## _UIOutput_ adds no new processing methods.
See link:JSF.htm#50638851_58138[See ValueHolder] for information about
methods introduced by the implemented interfaces.

===== [#50638853_pgfId-1032320]##Events

[#50638853_pgfId-1032324]##UIOutput does not originate any standard
events. See link:JSF.htm#50638851_58138[See ValueHolder] for information
about events introduced by the implemented interfaces.

==== [#50638853_pgfId-1032326]##[#50638853_11952]##UIPanel

[#50638853_pgfId-1032327]## _UIPanel_ (extends _UIComponentBase_ ) is a
component that manages the layout of its child components.

===== [#50638853_pgfId-1032328]##Component Type

[#50638853_pgfId-1032329]##The standard component type for _UIPanel_
components is “ _javax.faces.Panel_ ”.

===== [#50638853_pgfId-1032330]##Properties

[#50638853_pgfId-1032331]## _UIPanel_ adds no new render-independent
properties.

[#50638853_pgfId-1032332]## _[P1-start-uipanel]UIPanel_ specializes the
behavior of render-independent properties inherited from the parent
component as follows:

[#50638853_pgfId-1032333]##The default value of the _family_ property
must be set to “ _javax.faces.Panel_ ”.

{empty}[#50638853_pgfId-1032334]##The default value of the
_rendererType_ property must be set to _null_ .[P1-end]

===== [#50638853_pgfId-1032335]##Methods

[#50638853_pgfId-1032336]## _UIPanel_ adds no new processing methods.

===== [#50638853_pgfId-1032337]##Events

[#50638853_pgfId-1032338]## _UIPanel_ does not originate any standard
events

==== [#50638853_pgfId-1032339]##UIParameter

[#50638853_pgfId-1032340]## _UIParameter_ (extends _UIComponentBase_ is
a component that represents an optionally named configuration parameter
that affects the rendering of its parent component. _UIParameter_
components do not generally have rendering behavior of their own.

===== [#50638853_pgfId-1032341]##Component Type

[#50638853_pgfId-1032342]##The standard component type for _UIParameter_
components is “ _javax.faces.Parameter_ ”.

===== [#50638853_pgfId-1032343]##Properties

[#50638853_pgfId-1032344]##The following render-independent properties
are added by the _UIParameter_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032347]##Name |[#50638853_pgfId-1032349]##Access
|[#50638853_pgfId-1032351]##Type |[#50638853_pgfId-1032353]##Description
|[#50638853_pgfId-1032355]##name |[#50638853_pgfId-1032357]##RW
|[#50638853_pgfId-1032359]##String |[#50638853_pgfId-1032361]##The
optional name for this parameter.

|[#50638853_pgfId-1032363]##value |[#50638853_pgfId-1032365]##RW
|[#50638853_pgfId-1032367]##Object |[#50638853_pgfId-1032369]##The value
for this parameter.
|===

[#50638853_pgfId-1032370]## _[P1-start-uiparameter]UIParameter_
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1032371]##The default value of the _family_ property
must be set to “javax.faces.Parameter”.

{empty}[#50638853_pgfId-1032372]##The default value of the
_rendererType_ property must be set to _null_ .[P1-end]

===== [#50638853_pgfId-1032373]##Methods

[#50638853_pgfId-1032374]## _UIParameter_ adds no new processing
methods.

===== [#50638853_pgfId-1032375]##Events

[#50638853_pgfId-1032376]## _UIParameter_ does not originate any
standard events

==== [#50638853_pgfId-1032378]##[#50638853_91688]##UISelectBoolean

[#50638853_pgfId-1032379]## _UISelectBoolean_ (extends _UIInput_ ) is a
component that represents a single boolean ( _true_ or _false_ ) value.
It is most commonly rendered as a checkbox.

===== [#50638853_pgfId-1032380]##Component Type

[#50638853_pgfId-1032381]##The standard component type for
_UISelectBoolean_ components is “javax.faces. _SelectBoolean_ ”.

===== [#50638853_pgfId-1032382]##Properties

[#50638853_pgfId-1032383]##The following render-independent properties
are added by the _UISelectBoolean_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032386]##Name |[#50638853_pgfId-1032388]##Access
|[#50638853_pgfId-1032390]##Type |[#50638853_pgfId-1032392]##Description
|[#50638853_pgfId-1032394]## _selected_ |[#50638853_pgfId-1032396]##RW
|[#50638853_pgfId-1032398]## _boolean_ |[#50638853_pgfId-1032400]##The
selected state of this component. This property is a typesafe alias for
the _value_ property, so that the actual state to be used can be
acquired via a value expression.
|===

[#50638853_pgfId-1032401]## _[P1-start-uiselectboolean]UISelectBoolean_
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1032402]##The default value of the _family_ property
must be set to “ _javax.faces.SelectBoolean_ ”.

{empty}[#50638853_pgfId-1032403]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Checkbox_
”.[P1-end]

===== [#50638853_pgfId-1032404]##Methods

[#50638853_pgfId-1032405]## _UISelectBoolean_ adds no new processing
methods.

===== [#50638853_pgfId-1032406]##Events

[#50638853_pgfId-1032407]## _UISelectBoolean_ inherits the ability to
send _ValueChangeEvent_ events from its parent _UIInput_ component.

==== [#50638853_pgfId-1032409]##[#50638853_99874]##UISelectItem

[#50638853_pgfId-1032410]## _UISelectItem_ (extends _UIComponentBase_ )
is a component that may be nested inside a _UISelectMany_ or
_UISelectOne_ component, and represents exactly one _SelectItem_
instance in the list of available options for that parent component.

===== [#50638853_pgfId-1032411]##Component Type

[#50638853_pgfId-1032412]##The standard component type for
_UISelectItem_ components is “ _javax.faces.SelectItem_ ”.

===== [#50638853_pgfId-1032413]##Properties

[#50638853_pgfId-1032414]##The following render-independent properties
are added by the _UISelectItem_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032417]##Name |[#50638853_pgfId-1032419]##Access
|[#50638853_pgfId-1032421]##Type |[#50638853_pgfId-1032423]##Description
|[#50638853_pgfId-1032425]## _itemDescription_
|[#50638853_pgfId-1032427]##RW |[#50638853_pgfId-1032429]## _String_
|[#50638853_pgfId-1032431]##The optional description of this available
selection item. This may be useful for tools.

|[#50638853_pgfId-1032433]##itemDisabled |[#50638853_pgfId-1032435]##RW
|[#50638853_pgfId-1032437]##boolean |[#50638853_pgfId-1032439]##Flag
indicating that any synthesized _SelectItem_ object should have its
_disabled_ property set to _true_ .

|[#50638853_pgfId-1032441]##itemLabel |[#50638853_pgfId-1032443]##RW
|[#50638853_pgfId-1032445]##String |[#50638853_pgfId-1032447]##The
localized label that will be presented to the user for this selection
item.

|[#50638853_pgfId-1032449]##itemValue |[#50638853_pgfId-1032451]##RW
|[#50638853_pgfId-1032453]##Object |[#50638853_pgfId-1032455]##The
server-side value of this item, of the same basic data type as the
parent component’s value. If the parent component type’s value is a
value expression that points at a primitive, this value must be of the
corresponding wrapper type.

|[#50638853_pgfId-1032457]##value |[#50638853_pgfId-1032459]##RW
|[#50638853_pgfId-1032461]##javax.faces.model.SelectItem
|[#50638853_pgfId-1032463]##The _SelectItem_ instance associated with
this component.
|===

[#50638853_pgfId-1032464]## _[P1-start-uiselectitem]UISelectItem_
specializes the behavior of render-independent properties inherited

[#50638853_pgfId-1032465]##The default value of the _family_ property
must be set to “javax.faces.SelectItem”.

[#50638853_pgfId-1032466]##The default value of the _rendererType_
property must be set to _null_ .

[#50638853_pgfId-1032467]##If the _value_ property is non- _null_ , it
must contain a _SelectItem_ instance used to configure the selection
item specified by this component.

[#50638853_pgfId-1032468]##If the _value_ property is a value
expression, it must point at a _SelectItem_ instance used to configure
the selection item specified by this component.

{empty}[#50638853_pgfId-1032469]##If the _value_ property is _null_ ,
and there is no corresponding value expression, the _itemDescription_ ,
_itemDisabled_ , _itemLabel_ and _itemValue_ properties must be used to
construct a new _SelectItem_ representing the selection item specified
by this component.[P1-end]

===== [#50638853_pgfId-1032470]##Methods

[#50638853_pgfId-1032471]## _UISelectItem_ adds no new processing
methods.

===== [#50638853_pgfId-1032472]##Events

[#50638853_pgfId-1032473]## _UISelectItem_ does not originate any
standard events.

==== [#50638853_pgfId-1032475]##[#50638853_90199]##UISelectItems

[#50638853_pgfId-1032476]## _UISelectItems_ (extends _UIComponentBase_ )
is a component that may be nested inside a _UISelectMany_ or
_UISelectOne_ component, and represents zero or more _SelectItem_
instances for adding selection items to the list of available options
for that parent component.

===== [#50638853_pgfId-1032477]##Component Type

[#50638853_pgfId-1032478]##The standard component type for
_UISelectItems_ components is “javax.faces. _SelectItems_ ”.

===== [#50638853_pgfId-1032479]##Properties

[#50638853_pgfId-1032480]##The following render-independent properties
are added by the _UISelectItems_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032483]##Name |[#50638853_pgfId-1032485]##Access
|[#50638853_pgfId-1032487]##Type |[#50638853_pgfId-1032489]##Description
|[#50638853_pgfId-1032491]##value |[#50638853_pgfId-1032493]##RW
|[#50638853_pgfId-1032495]##See below |[#50638853_pgfId-1032497]##The
_SelectItem_ instances associated with this component.
|===

[#50638853_pgfId-1032498]## _[P1-start-uiselectitems]UISelectItems_
specializes the behavior of render-independent properties inherited

[#50638853_pgfId-1032499]##The default value of the _family_ property
must be set to “ _javax.faces.SelectItems_ ”.

[#50638853_pgfId-1032500]##The default value of the _rendererType_
property must be set to _null_ .

{empty}[#50638853_pgfId-1032501]##If the _value_ property (or the value
returned by a value expression associated with the _value_ property) is
non-null, it must contain a _SelectItem_ bean, an array of _SelectItem_
beans, a _Collection_ of _SelectItem_ beans, or a _Map_ , where each map
entry is used to construct a _SelectItem_ bean with the key as the
_label_ property of the bean, and the value as the _value_ property of
the bean (which must be of the same basic type as the value of the
parent component’s value).[P1-end]

===== [#50638853_pgfId-1032502]##Methods

[#50638853_pgfId-1032503]## _UISelectItems_ adds no new processing
methods.

===== [#50638853_pgfId-1032504]##Events

[#50638853_pgfId-1032505]## _UISelectItems_ does not originate any
standard events.

==== [#50638853_pgfId-1032507]##[#50638853_52821]##UISelectMany

[#50638853_pgfId-1032508]## _UISelectMany_ (extends _UIInput_ ) is a
component that represents one or more selections from a list of
available options. It is most commonly rendered as a combobox or a
series of checkboxes.

===== [#50638853_pgfId-1032509]##Component Type

[#50638853_pgfId-1032510]##The standard component type for
_UISelectMany_ components is “ _javax.faces.SelectMany_ ”.

===== [#50638853_pgfId-1032511]##Properties

[#50638853_pgfId-1032512]##The following render-independent properties
are added by the _UISelectMany_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032515]##Name |[#50638853_pgfId-1032517]##Access
|[#50638853_pgfId-1032519]##Type |[#50638853_pgfId-1032521]##Description
|[#50638853_pgfId-1032523]## _selectedValues_
|[#50638853_pgfId-1032525]##RW |[#50638853_pgfId-1032527]## _Object[] or
array of primitives_ |[#50638853_pgfId-1032529]##The selected item
values of this component. This property is a typesafe alias for the
_value_ property, so that the actual state to be used can be acquired
via a value expression.
|===

[#50638853_pgfId-1032530]## _[P1-start-uiselectmany]UISelectMany_
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1032531]##The default value of the _family_ property
must be set to “ _javax.faces.SelectMany_ ”.

{empty}[#50638853_pgfId-1032532]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Listbox_
”.[P1-end]

[#50638853_pgfId-1032533]##See the class Javadocs for _UISelectMany_ for
additional requirements related to implicit conversions for the _value_
property.

===== [#50638853_pgfId-1032534]##Methods

{empty}[#50638853_pgfId-1032535]##
_[P1-start-uselectmany-validate]UISelectMany_ must provide a specialized
_validate()_ method which ensures that any decoded values are valid
options (from the nested _UISelectItem_ and _UISelectItems_
children).[P1-end]

===== [#50638853_pgfId-1032536]##Events

[#50638853_pgfId-1032537]## _UISelectMany_ inherits the ability to send
_ValueChangeEvent_ events from its parent _UIInput_ component.

==== [#50638853_pgfId-1032539]##[#50638853_95724]##UISelectOne

[#50638853_pgfId-1032540]## _UISelectOne_ (extends _UIInput_ ) is a
component that represents zero or one selection from a list of available
options. It is most commonly rendered as a combobox or a series of radio
buttons.

===== [#50638853_pgfId-1032541]##Component Type

[#50638853_pgfId-1032542]##The standard component type for _UISelectOne_
components is “ _javax.faces.SelectOne_ ”.

===== [#50638853_pgfId-1032543]##Properties

[#50638853_pgfId-1032544]## _UISelectOne_ adds no new render-independent
properties.

[#50638853_pgfId-1032545]## _[P1-start-uiselectone]UISelectOne_
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1032546]##The default value of the _family_ property
must be set to “ _javax.faces.SelectOne_ ”.

{empty}[#50638853_pgfId-1032547]##The default value of the
_rendererType_ property must be set to “ _javax.faces.Menu_ ”.[P1-end]

===== [#50638853_pgfId-1032548]##Methods

{empty}[#50638853_pgfId-1032549]##
_[P1-start-uiselectone-validate]UISelectOne_ must provide a specialized
_validate()_ method which ensures that any decoded value is a valid
option (from the nested _UISelectItem_ and _UISelectItems_
children).[P1-end]

===== [#50638853_pgfId-1032550]##Events

[#50638853_pgfId-1032551]## _UISelectOne_ inherits the ability to send
_ValueChangeEvent_ events from its parent _UIInput_ component.

==== [#50638853_pgfId-1037495]##UIViewParameter

[#50638853_pgfId-1037496]## _UIViewParameter_ (extends _UIInput_ ) is a
component that allows the query parameters included in the request by
_UIOutcomTarget_ renderers to participate in the lifecycle. Please see
the javadocs for the normative speficication of this component.Events.

==== [#50638853_pgfId-1032553]##[#50638853_65588]##UIViewRoot

[#50638853_pgfId-1032554]## _UIViewRoot_ (extends _UIComponentBase;_ )
represents the root of the component tree.

===== [#50638853_pgfId-1032556]##[#50638853_66497]##Component Type

[#50638853_pgfId-1032557]##The standard component type for _UIViewRoot_
components is “ _javax.faces.ViewRoot_ ”

===== [#50638853_pgfId-1032558]##[#50638853_84800]##Properties

[#50638853_pgfId-1032559]##The following render-independent properties
are added by the _UIViewRoot_ component:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032562]##Name |[#50638853_pgfId-1032564]##Access
|[#50638853_pgfId-1032566]##Type |[#50638853_pgfId-1032568]##Description
|[#50638853_pgfId-1032570]##locale |[#50638853_pgfId-1032572]##RW
|[#50638853_pgfId-1032574]##java.util.Locale
|[#50638853_pgfId-1032576]##The Locale to be used in localizing the
response for this view.

|[#50638853_pgfId-1032578]##renderKitId |[#50638853_pgfId-1032580]##RW
|[#50638853_pgfId-1032582]##String |[#50638853_pgfId-1032584]##The id of
the _RenderKit_ used to render this page.

|[#50638853_pgfId-1032586]## _viewId_ |[#50638853_pgfId-1032588]##RW
|[#50638853_pgfId-1032590]## _String_ |[#50638853_pgfId-1032592]##The
view identifier for this view.

|[#50638853_pgfId-1032594]## _beforePhaseListener_
|[#50638853_pgfId-1032596]##RW
|[#50638853_pgfId-1032598]##MethodExpression
|[#50638853_pgfId-1032600]## _MethodExpression_ that will be invoked
before all lifecycle phases except for _Restore View._

|[#50638853_pgfId-1032602]## _afterPhaseListener_
|[#50638853_pgfId-1032604]##RW
|[#50638853_pgfId-1032606]##MethodExpression
|[#50638853_pgfId-1032608]##MethodExpression that will be invoked after
all lifecycle phases except for _Restore View_ .

|[#50638853_pgfId-1036217]##viewMap |[#50638853_pgfId-1036219]##RW
|[#50638853_pgfId-1036221]##java.util.Map
|[#50638853_pgfId-1036234]##The _Map_ that acts as the interface to the
data store that is the "view scope".
|===

[#50638853_pgfId-1036395]##For an existing view, the _locale_ property
may be modified only from the event handling portion of _Process
Validations_ phase through _Invoke Application_ phase, unless it is
modified by an _Apply Request Values_ event handler for an
_ActionSource_ or _EditableValueHolder_ component that has its
_immediate_ property set to true (which therefore causes _Process
Validations_ , _Update Model Values_ , and _Invoke Application_ phases
to be skipped).

{empty}[#50638853_pgfId-1036396]## _[P1-start-viewmap]_ The viewMap
property is lazily created the first time it is accessed, and it is
destroyed when a different _UIViewRoot_ instance is installed from a
call to _FacesContext.setViewRoot()_ . After the Map is created a
_PostConstructViewMapEvent_ must be published using _UIViewRoot_ as the
event source. Immediately before the Map is destroyed, a
_PreDestroyViewMapEvent_ must be published using _UIViewRoot_ as the
event source. [P1-end]

[#50638853_pgfId-1036397]## _[P1-start-uiviewroot]UIViewRoot_
specializes the behavior of render-independent properties inherited from
the parent component as follows:

[#50638853_pgfId-1032611]##The default value of the _family_ property
must be set to “ _javax.faces.ViewRoot_ ”.

{empty}[#50638853_pgfId-1032820]##The default value of the
_rendererType_ property must be set to _null_ .[P1-end]

===== [#50638853_pgfId-1032821]##[#50638853_Methods]##[#50638853_Methods]##Methods

[#50638853_pgfId-1036255]##The following methods are used for adding
UIComponent resources to a target area in the view, and they are also
used for retrieving UIComponent resources from a target area in the
view.

[width="100%",cols="100%",]
|===
a|
[#50638853_pgfId-1032829]##public void addComponentResource(FacesContext
context,

[#50638853_pgfId-1032827]##UIComponent componentResource);

|===

[#50638853_pgfId-1032822]##Add c _omponentResource,_ that is assumed to
represent a resource instance, to the current view. A resource instance
is rendered by a resource Renderer (such as ScriptRenderer,
StylesheetRenderer) as described in the Standard HTML RenderKit. This
method will cause the resource to be rendered in the “head” element of
the view. __

[width="100%",cols="100%",]
|===
a|
[#50638853_pgfId-1032841]##public void addComponentResource(FacesContext
context,

[#50638853_pgfId-1032839]##UIComponent componentResource, String
target);

|===

{empty}[#50638853_pgfId-1034017]##Add c _omponentResource,_ that is
assumed to represent a resource instance, to the current view at the
specified target location. [P1-start-addComponentResource] The resource
must be added using the algorithm outlined in this method’s
Javadocs.[P1-end]

[width="100%",cols="100%",]
|===
|[#50638853_pgfId-1035111]##public List<UIComponent>
getComponentResources(String target);
|===

{empty}[#50638853_pgfId-1034033]##Return a List of _UIComponent_
instances residing under the facet identified by target. Each
_UIComponent_ instance in the List represents a resource.
[P1-start-getCompRes] The List must be formulated in accordance with
this method’s Javadocs. [P1-end]

[#50638853_pgfId-1032860]## _UIViewRoot_ specializes the behavior of the
_UIComponent.queueEvent()_ method to maintain a list of queued events
that can be transmitted later. It also specializes the behavior of the
_processDecodes()_ , _processValidators()_ , _processUpdates()_ , and
_processApplication()_ methods to broadcast queued events to registered
listeners. _UIViewRoot_ clears any remaining events from the event queue
in these methods if _responseComplete()_ or _renderResponse()_ has been
set on the _FacesContext._ Please see link:JSF.htm#50638877_68096[See
Apply Request Values], link:JSF.htm#50638877_27358[See Process
Validations], link:JSF.htm#50638877_44493[See Update Model Values] and
link:JSF.htm#50638877_61764[See Invoke Application] for more details.

===== [#50638853_pgfId-1032628]##[#50638853_4.1.17.4 Events]##Events

[#50638853_pgfId-1036283]## _UIViewRoot_ is a source of _PhaseEvent_
events, which are emitted when the instance moves through all phases of
the request processing lifecycle except _Restore View_ . This phase
cannot emit events from _UIViewRoot_ because the _UIViewRoot_ instance
isn’t created when this phase starts. See
link:JSF.htm#50638859_72521[See PhaseEvent] and
link:JSF.htm#50638859_16974[See PhaseListener]for more details on the
event and listener class.

[width="100%",cols="100%",]
|===
a|
[#50638853_pgfId-1036292]##public void addPhaseListener(PhaseListener
listener);

[#50638853_pgfId-1036293]## 

[#50638853_pgfId-1036294]##public void
removePhaseListener(VPhaseListener listener);

[#50638853_pgfId-1037116]## 

[#50638853_pgfId-1037117]##public List<PhaseListener>
getPhaseListeners();

|===

{empty}[#50638853_pgfId-1036298]##[P1-start-events] _UIViewRoot_ must
listen for the top level _PostAddToViewEvent_ event sent by the _Restore
View_ phase. Refer to _link:JSF.htm#50638877_45193[See Restore View]_
for more details about the publishing of this event. Upon receiving this
event, _UIViewRoot_ must cause any “after” _Restore View_ phase
listeners to be called.[P1-end]

[#50638853_pgfId-1037477]## _UIViewRoot_ is also the source for several
kinds of system events. The system must publish a _PostAddToViewEvent_ ,
with the _UIViewRoot_ as the source, during the _Restore View_ phase,
immediately after the new _UIViewRoot_ is set into the _FacesContext_
for the request. The system must publish a _PreRenderView_ event, with
_UIViewRoot_ as the source, during the _Render Response_ phase,
immediately before _ViewHandler.renderView()_ is called.

===== [#50638853_pgfId-1036579]##[#50638853_Partial Processing]##Partial Processing

{empty}[#50638853_pgfId-1036844]## _UIViewRoot_ adds special behavior to
_processDecodes, processValidators, processUpdates, getRendersChildren
and encodeChildren_ to facilitate partial processing - namely the
ability to have one or more components processed through the _execute_
and/or _render_ phases of the request processing lifecycle. Refer to
link:JSF.htm#50638885_Partial%20View%20Traversal[See Partial View
Traversal], link:JSF.htm#50638885_Partial%20View%20Execute[See Partial
View Processing], link:JSF.htm#50638885_Partial%20View%20Render[See
Partial View Rendering] for an overview of partial processing.
[P1-start-viewroot-partial] _UIViewRoot_ must perform partial processing
as outlined in the Javadocs for the “processXXX” and “encodeXXX” methods
if the current request is a partial request.[P1-end]

=== [#50638853_pgfId-1036851]##

image:JSF-21.gif[image]

Standard UIComponent Model Beans

[#50638853_pgfId-1032642]##Several of the standard _UIComponent_
subclasses described in the previous section reference JavaBean
components to represent the underlying model data that is rendered by
those components. The following subsections define the standard
_UIComponent_ model bean classes.

==== [#50638853_pgfId-1032644]##[#50638853_68539]##DataModel

[#50638853_pgfId-1032645]## _DataModel_ is an abstract base class for
creating wrappers around arbitrary data binding technologies. It can be
used to adapt a wide variety of data sources for use by JavaServer Faces
components that want to support access to an underlying data set that
can be modelled as multiple rows. The data underlying a DataModel
instance is modelled as a collection of row objects that can be accessed
randomly via a zero-relative index

===== [#50638853_pgfId-1032646]##Properties

[#50638853_pgfId-1032696]##An instance of _DataModel_ supports the
following properties:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032649]##Name |[#50638853_pgfId-1032651]##Access
|[#50638853_pgfId-1032653]##Type |[#50638853_pgfId-1032655]##Description
|[#50638853_pgfId-1032657]##rowAvailable |[#50638853_pgfId-1032659]##RO
|[#50638853_pgfId-1032661]##boolean |[#50638853_pgfId-1032663]##Flag
indicating whether the current _rowIndex_ value points at an actual row
in the underlying data.

|[#50638853_pgfId-1032665]## _rowCount_ |[#50638853_pgfId-1032667]##RO
|[#50638853_pgfId-1032669]##int |[#50638853_pgfId-1032671]##The number
of rows of data objects represented by this DataModel instance, or -1 if
the number of rows is unknown.

|[#50638853_pgfId-1032673]## _rowData_ |[#50638853_pgfId-1032675]##RO
|[#50638853_pgfId-1032677]## _Object_ |[#50638853_pgfId-1032679]##An
object representing the data for the currently selected row. _DataModel_
implementations must return an object that be successfully processed as
the “base” parameter for the _PropertyResolver_ in use by this
application. If the current rowIndex value is -1, _null_ is returned.

|[#50638853_pgfId-1032681]## _rowIndex_ |[#50638853_pgfId-1032683]##RW
|[#50638853_pgfId-1032685]## _int_
|[#50638853_pgfId-1032687]##Zero-relative index of the currently
selected row, or -1 if no row is currently selected. When first created,
a _DataModel_ instance must return -1 for this property.

|[#50638853_pgfId-1032689]##wrappedData |[#50638853_pgfId-1032691]##RW
|[#50638853_pgfId-1032693]##Object |[#50638853_pgfId-1032695]##Opaque
property representing the data object wrapped by this DataModel. Each
individual implementation will restrict the types of Object(s) that it
supports.
|===

===== [#50638853_pgfId-1032697]##[#50638853_4.2.1.2 Methods]##Methods

[#50638853_pgfId-1032698]## _DataModel_ must provide an _iterator()_ to
iterate over the row data for this model. __

===== [#50638853_pgfId-1032699]##Events

[#50638853_pgfId-1032700]##No events are generated for this component.

===== [#50638853_pgfId-1032702]##[#50638853_93394]##Concrete Implementations

[#50638853_pgfId-1032703]##[P1-start-datamodel]The JSF implementation
must provide concrete implementations of DataModel (in the
javax.faces.model package) for the following data wrapping scenarios:

[#50638853_pgfId-1032704]## _ArrayDataModel_ -- Wrap an array of Java
objects.

[#50638853_pgfId-1032705]## _ListDataModel_ -- Wrap a _java.util.List_
of Java objects.

[#50638853_pgfId-1032706]## _ResultDataModel_ -- Wrap an object of type
_javax.servlet.jsp.jstl.sql.Result_ (the query results from JSTL’s SQL
tag library)

[#50638853_pgfId-1032707]## _ResultSetDataModel_ -- Wrap an object of
type _java.sql.ResultSet_ (which therefore means that _javax.sql.RowSet_
instances are also supported).

[#50638853_pgfId-1032708]## _ScalarDataModel_ -- Wrap a single Java
object in what appears to be a one-row data set.

[#50638853_pgfId-1032709]##Each concrete _DataModel_ implementation must
extend the _DataModel_ abstract base class, and must provide a
constructor that accepts a single parameter of the object type being
wrapped by that implementation (in addition to a zero-args
constructor).[P1-end] See the JavaDocs for specific implementation
requirements on _DataModel_ defined methods, for each of the concrete
implementation classes.

==== [#50638853_pgfId-1032710]##SelectItem

[#50638853_pgfId-1032711]## _SelectItem_ is a utility class representing
a single choice, from among those made available to the user, for a
_UISelectMany_ or _UISelectOne_ component. It is not itself a
_UIComponent_ subclass.

===== [#50638853_pgfId-1032712]##Properties

[#50638853_pgfId-1032754]##An instance of _SelectItem_ supports the
following properties:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032715]##Name |[#50638853_pgfId-1032717]##Access
|[#50638853_pgfId-1032719]##Type |[#50638853_pgfId-1032721]##Description
|[#50638853_pgfId-1032723]##description |[#50638853_pgfId-1032725]##RW
|[#50638853_pgfId-1032727]##String |[#50638853_pgfId-1032729]##A
description of this selection item, for use in development tools.

|[#50638853_pgfId-1032731]## _disabled_ |[#50638853_pgfId-1032733]##RW
|[#50638853_pgfId-1032735]##boolean |[#50638853_pgfId-1032737]##Flag
indicating that this option should be rendered in a fashion that
disables selection by the user. Default value is _false_ .

|[#50638853_pgfId-1032739]## _label_ |[#50638853_pgfId-1032741]##RW
|[#50638853_pgfId-1032743]## _String_ |[#50638853_pgfId-1032745]##Label
of this selection item that should be rendered to the user.

|[#50638853_pgfId-1032747]## _value_ |[#50638853_pgfId-1032749]##RW
|[#50638853_pgfId-1032751]## _Object_ |[#50638853_pgfId-1032753]##The
server-side value of this item, of the same basic data type as the
parent component’s value. If the parent component type’s value is a
value expression that points at a primitive, this value must be of the
corresponding wrapper type.
|===

===== [#50638853_pgfId-1032755]##Methods

[#50638853_pgfId-1032756]##An instance of _SelectItem_ supports no
additional public processing methods.

===== [#50638853_pgfId-1032757]##Events

[#50638853_pgfId-1032758]##An instance of SelectItem supports no events.

==== [#50638853_pgfId-1032759]##SelectItemGroup

[#50638853_pgfId-1032760]## _SelectItemGroup_ is a utility class
extending _SelectItem_ , that represents a group of subordinate
_SelectItem_ instances that can be rendered as a “sub-menu” or “option
group”. _Renderer_ s will typically ignore the _value_ property of this
instance, but will use the _label_ property to render a heading for the
sub-menu.

===== [#50638853_pgfId-1032761]##Properties

[#50638853_pgfId-1032779]##An instance of _SelectItemGroup_ supports the
following additional properties:

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638853_pgfId-1032764]##Name |[#50638853_pgfId-1032766]##Access
|[#50638853_pgfId-1032768]##Type |[#50638853_pgfId-1032770]##Description
|[#50638853_pgfId-1032772]##selectItems |[#50638853_pgfId-1032774]##RW
|[#50638853_pgfId-1032776]##SelectItem[]
|[#50638853_pgfId-1032778]##Array of SelectItem instances representing
the subordinate selection items that are members of the group
represented by this SelectItemGroup instance.
|===

[#50638853_pgfId-1032780]##Note that, since _SelectItemGroup_ is a
subclass of _SelectItem_ , _SelectItemGroup_ instances can be included
in the _selectItems_ property in order to create hierarchies of
subordinate menus. However, some rendering environments may limit the
depth to which such nesting is supported; for example, HTML/4.01 does
not allow an _<optgroup>_ to be nested inside another _<optgroup>_
within a _<select>_ control.

===== [#50638853_pgfId-1032781]##Methods

[#50638853_pgfId-1032782]##An instance of _SelectItemGroup_ supports no
additional public processing methods.

===== [#50638853_pgfId-1032783]##Events

[#50638853_pgfId-1032784]##An instance of _SelectItemGroup_ supports no
events.

[#50638862_pgfId-1019087]##-[#50638862_48895]##

== [#50638862_pgfId-1019089]##

image:JSF-23.gif[image]

[#50638862_89005]##Expression Language and Managed Bean Facility

image:JSF-24.gif[image]

[#50638862_pgfId-1014086]##In the descriptions of the standard user
interface component model, it was noted that all attributes, and nearly
all properties can have a _value expression_ associated with them (see
link:JSF.htm#50638851_91832[See ValueExpression properties]). In
addition, many properties, such as _action_ , _actionListener_ ,
_validator_ , and _valueChangeListener_ can be defined by a _method
expression_ pointing at a public method in some class to be executed.
This chapter describes the mechanisms and APIs that JavaServer Faces
utilizes in order to evaluate value expressions and method expressions.

[#50638862_pgfId-1007460]##JavaServer Faces relies on the Unified
Expression Language (Unified EL, or just EL) provided by version 2.1 of
the JavaServer Pages specification (JSR-245). The EL is described in a
separate specification document delivered as part of the JSP 2.1 spec.
Please consult that document for complete details about the EL.

[#50638862_pgfId-1007675]##Versions 1.0 and 1.1 of JavaServer Faces
included a built in expression language and required an implementation
of it. The API for this old JSF EL is still preserved as deprecated
classes and methods, and implementations must still support that API.
Please consult the link:JSF.htm#50638881_16987[See Guide to Deprecated
Methods Relating to the Unified EL and their Corresponding Replacements]
for details. This chapter will focus exclusively on how Faces leverages
and integrates with the Unified EL. It does not describe how the Unified
EL operates.

=== [#50638862_pgfId-1014095]##

image:JSF-25.gif[image]

[#50638862_70677]##Value Expressions

==== [#50638862_pgfId-1014096]##Overview

[#50638862_pgfId-1014097]##To support binding of attribute and property
of values to dynamically calculated results, the name of the attribute
or property can be associated with a value expression using the
_setValueExpression()_ method. Whenever the dynamically calculated
result of evaluating the expression is required, the _getValue()_ method
of the _ValueExpression_ is called, which returns the evaluated result.
Such expressions can be used, for example, to dynamically calculate a
component value to be displayed:

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014100]##<h:outputText value=”#\{customer.name}”/>
|===

[#50638862_pgfId-1014101]##which, when this page is rendered, will
retrieve the bean stored under the “customer” key, then acquire the name
property from that bean and render it.

[#50638862_pgfId-1006845]##Besides the component value itself, value
expressions can be used to dynamically compute attributes and
properties. The following example checks a _boolean_ property _manager_
on the current _user_ bean (presumably representing the logged-in user)
to determine whether the _salary_ property of an employee should be
displayed or not:

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1006852]##<h:outputText rendered=”#\{user.manager}”
value=”#\{employee.salary}”/>
|===

[#50638862_pgfId-1014106]##which sets the _rendered_ property of the
component to _false_ if the user is not a manager, and therefore causes
this component to render nothing.

[#50638862_pgfId-1016534]##The Unified Expression Language has a
powerful set of coercion rules that automatically convert the type of
the value to the appropriate type. These rules occasionally rely on the
JavaBeans _PropertyEditor_ facility to perform this conversion. Note
that this conversion is entirely separate from normal JSF Conversion.

[#50638862_pgfId-1007711]##Value expressions can also be used to set a
value from the user into the item obtained by evaluating the expression.
For example:

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1007710]##<h:inputText value=”#\{employee.number}”/>
|===

[#50638862_pgfId-1006876]##When the page is rendered, the expression is
evaluated as an r-value and the result is displayed as the default value
in the text field. When the page is submitted, the expression is
evaluated as an l-value, and the value entered by the user (subject to
conversion and validation as usual) is pushed into the expression.

==== [#50638862_pgfId-1012618]##Value Expression Syntax and Semantics

[#50638862_pgfId-1012617]##Please see Section 1.2 of the Expression
Language Specification, Version 2.1 for the complete specification of
ValueExpression syntax and semantics.

=== [#50638862_pgfId-1014112]##

image:JSF-25.gif[image]

[#50638862_19411]##MethodExpressions

[#50638862_pgfId-1014113]## _Method expressions_ are a very similar to
value expressions, but rather than supporting the dynamic retrieval and
setting of properties, method expressions support the invocation (i.e.
execution) of an arbitrary public method of an arbitrary object, passing
a specified set of parameters, and returning the result from the called
method (if any). They may be used in any phase of the request processing
lifecycle; the standard JSF components and framework employ them
(encapsulated in a _MethodExpression_ object) at the following times:

[#50638862_pgfId-1014114]##During _Apply Request Values_ or _Invoke
Application_ phase (depending upon the state of the _immediate_
property), components that implement the _ActionSource2_ behavioral
interface (see link:JSF.htm#50638851_54136[See ActionSource2]) utilize
_MethodExpressions_ as follows:

[#50638862_pgfId-1014118]##If the _actionExpression_ property is
specified, it must be a _MethodExpression_ expression that identifies an
Application Action method (see link:JSF.htm#50638861_77001[See
Application Actions]) that takes no parameters and returns a String.

[#50638862_pgfId-1014122]##It’s possible to have a method expression act
as an _ActionListener_ by using the classs
_MethodExpressionActionListener_ to wrap a method expression and calling
the _addActionListener()_ method on the _ActionSource_ . The method
expression wrapped inside the _MethodExpressionActionListener must_
identify a public method that accepts an _ActionEvent_ (see
link:JSF.htm#50638851_27996[See Event Classes]) instance, and has a
return type of _void_ . The called method has exactly the same
responsibilities as the _processAction()_ method of an _ActionListener_
instance (see link:JSF.htm#50638851_82628[See Listener Classes]) that
was built in to a separate Java class.

[#50638862_pgfId-1014129]##During the _Apply Request Values_ or _Process
Validations_ phase (depending upon the state of the _immediate_
property), components that implement _EditableValueHolder_ (such as
_UIInput_ and its subclasses) components (see
link:JSF.htm#50638851_45435[See EditableValueHolder]) utilize method
expressions as follows:

[#50638862_pgfId-1014133]##The user can use the
_MethodExpressionValidator_ class to wrap a method expression that
identifies a public method that accepts a _FacesContext_ instance and a
_UIComponent_ instance, and an _Object_ containing the value to be
validated, and has a return type of _void_ . This
_MethodExpressionValidator_ instance can then be added as a normal
_Validator_ using the _EditableValueHolder.addValidator()_ method. The
called method has exactly the same responsibilities as the _validate()_
method of a _Validator_ instance (see link:JSF.htm#50638851_52434[See
Validator Classes]) that was built in to a separate Java class.

[#50638862_pgfId-1014137]##The user can use the
_MethodExpressionValueChangeListener_ class to wrap a method expression
that identifies a public method that accepts a _ValueChangeEvent_ (see
link:JSF.htm#50638851_27996[See Event Classes]) instance, and has a
return type of _void_ . This _MethodExpressionValueChangeListener_
instance can then be added as a normal _ValueChangeListener_ using
EditableValueHolder.addValueChangeListener(). The called method has
exactly the same responsibilities as the _processValueChange()_ method
of a _ValueChangeListener_ instance (see link:JSF.htm#50638851_82628[See
Listener Classes]) that was built in to a separate Java class.

[#50638862_pgfId-1003670]##Here is the set of component properties that
currently support _MethodBinding_ , and the method signatures to which
they must point:

======= [#50638862_pgfId-1003683]##component properties whose type is DEPRECATED MethodBinding

[#50638862_pgfId-1003687]##component property

[#50638862_pgfId-1003689]##method signature

[#50638862_pgfId-1011510]## _DEPRECATED_

[#50638862_pgfId-1011408]## _action_

[#50638862_pgfId-1003693]## _public String <methodName>();_

[#50638862_pgfId-1003695]## _DEPRECATED_

[#50638862_pgfId-1011394]## _actionListener_

[#50638862_pgfId-1003697]## _public void
<methodName>(javax.faces.event.ActionEvent);_

[#50638862_pgfId-1003699]## _DEPRECATED_

[#50638862_pgfId-1011395]## _validator_

[#50638862_pgfId-1003701]## _public void
<methodName>(javax.faces.context.FacesContext,
javax.faces.component.UIComponent, java.lang.Object);_

[#50638862_pgfId-1003703]## _DEPRECATED_

[#50638862_pgfId-1011396]## _valueChangeListener_

[#50638862_pgfId-1003705]## _public void
<methodName>(javax.faces.event.ValueChangeEvent);_

[#50638862_pgfId-1011439]##Note that for any of the parameters for the
above methods may also be a subclass of what is listed above. For the
above properties that are marked as DEPRECATED, wrapper classes have
been added that wrap a MethodExpression and implement the appropriate
listener interface, allowing the wrapped expression to be added as a
strongly typed listener, using the normal _add*()_ pattern Here is the
list of such wrapper classes:

== [#50638862_pgfId-1011412]##MethodExpression wrappers to take the place of DEPRECATED MethodBinding properties

[#50638862_pgfId-1011416]##component listener property

[#50638862_pgfId-1011463]##Wrapper class

[#50638862_pgfId-1011418]##method signature

[#50638862_pgfId-1011426]## _actionListener_

[#50638862_pgfId-1011465]##javax. _faces_
.event.MethodExpressionActionListener

[#50638862_pgfId-1011428]## _public void
<methodName>(javax.faces.event.ActionEvent);_

[#50638862_pgfId-1011431]## _validator_

[#50638862_pgfId-1011467]##javax.faces.validator.MethodExpressionValidator

[#50638862_pgfId-1011433]## _public void
<methodName>(javax.faces.context.FacesContext,
javax.faces.component.UIComponent, java.lang.Object);_

[#50638862_pgfId-1011436]## _valueChangeListener_

[#50638862_pgfId-1011469]##javax.faces.event.MethodExpressionValueChangeListener

[#50638862_pgfId-1011438]## _public void
<methodName>(javax.faces.event.ValueChangeEvent);_

[#50638862_pgfId-1014153]##The _MethodBinding_ typed _action_ property
of _ActionSource_ is deprecated and has been replaced by the
_MethodExpression_ typed _actionExpression_ property of _ActionSource2._

==== [#50638862_pgfId-1014155]##[#50638862_82897]##MethodExpression Syntax and Semantics

[#50638862_pgfId-1012514]##The exact syntax and semantics of
MethodExpression are now the domain of the Unified EL. Please see
Section 1.2.1.2 of the Expression Language Specification, Version 2.1.

=== [#50638862_pgfId-1006457]##

image:JSF-25.gif[image]

[#50638862_57834]##The Managed Bean Facility

[#50638862_pgfId-1020098]##As of version 2.3 of this specification, use
of the managed bean facility as specified in this section is strongly
discouraged. A better and more cohesively integrated solution for
solving the same problem is to use Contexts and Dependency Injection
(CDI), as specified in JSR-365. (See link:JSF.htm#50638856_30771[See
Other Java™ Platform Specifications]).

[#50638862_pgfId-1020102]##Perhaps the biggest value-add of bringing EL
concepts to Faces happens when the EL is combined with the managed bean
facility. This feature allows the user to configure an entire complex
tree of POJO beans, including how they should be scoped and populated
with initial values, and expose them to EL expressions. Please see
_link:JSF.htm#50638862_25716[See Managed Bean Configuration Example]_ .

[#50638862_pgfId-1014169]##The Managed Bean Creation facility is
configured by the existence of _<managed-bean>_ elements in one or more
application configuration resources (see link:JSF.htm#50638850_31842[See
Application Configuration Resources]). Note that a special provision has
been made for application configuration resource files residing within
_META-INF/managed-beans.xml_ entries on the application classpath.
Please see link:JSF.htm#50638850_83984[See Application Configuration
Resource Format] for the normative spec requirement. Such elements
describe the characteristics of a bean to be created, and properties to
be initialized, with the following nested elements:

[#50638862_pgfId-1014173]## _<managed-bean-name>_ -- The key under which
the created bean can be retrieved; also the key in the scope under which
the created bean will be stored, unless the value of
_<managed-bean-scope>_ is set to _none_ .

[#50638862_pgfId-1014174]## _<managed-bean-class>_ -- The fully
qualified class name of the application class used to instantiate a new
instance. This class must conform to JavaBeans design patterns -- in
particular, it must have a public zero-args constructor, and must have
public property setters for any properties referenced with nested
_<managed-property>_ elements -- or it must be a class that implements
_java.util.Map_ or _java.util.List_ .

[#50638862_pgfId-1014175]## _<managed-bean-scope>_ -- The scope (
_request_ , _view_ , _session_ , or _application_ ) under which the
newly instantiated bean will be stored after creation (under the key
specified by the _<managed-bean-name>_ element), or _none_ for a bean
that should be instantiated and returned, but not stored in any scope.
The latter option is useful when dynamically constructing trees of
related objects, as illustrated in the following example. +
The runtime must must allow the value of this element to be an EL
_ValueExpression_ . If so, and the expression evaluates to _null_ , an
informative error message including the expression string and the name
of the bean must be logged. If the expression evaluates to a _Map_ ,
that _Map_ is used as the scope into which the bean will be stored. If
storing the bean into the _Map_ causes an _Exception_ , the exception is
allowed to flow up to the _ExceptionHandler_ . If the _ValueExpression_
does not evaluate to a _Map_ , a _FacesException_ must be thrown with a
message that includes the expression string, the _toString()_ of the
value, and the type of the value.

[#50638862_pgfId-1007988]## _<list-entries_ > or _<map-entries>_ -- Used
to configure managed beans that are themselves instances of
_java.util.List_ or _java.util.Map,_ respectively. See below for details
on the contents of these elements.

[#50638862_pgfId-1014180]## _<managed-property>_ -- Zero or more
elements used to initialize the properties of the newly instantiated
bean (see below).

[#50638862_pgfId-1014186]##After the new managed bean instance is
instantiated, but before it is placed into the specified scope (if any),
each nested _<managed-property>_ element must be processed and a call to
the corresponding property setter must be made to initialize the value
of the corresponding property. If the managed bean has properties not
referenced by _<managed-property>_ elements, the values of such
properties will not be affected by the creation of this managed bean;
they will retain whatever default values are established by the
constructor.

[#50638862_pgfId-1014187]##Each _<managed-property>_ element contains
the following elements used to configure the execution of the
corresponding property setter call:

[#50638862_pgfId-1014188]## _<property-name>_ -- The property name of
the property to be configured. The actual property setter method to be
called will be determined as described in the JavaBeans Specification.

[#50638862_pgfId-1014189]##Exactly one of the following sub-elements
that can be used to initialize the property value in a number of
different ways:

[#50638862_pgfId-1014190]## _<map-entries>_ -- A set of key/value pairs
used to initialize the contents of a property of type _java.util.Map_
(see below for more details).

[#50638862_pgfId-1014191]## _<null-value/>_ -- An empty element
indicating that this property must be explicitly initialized to _null_ .
This element is not allowed if the underlying property is of a Java
primitive type.

[#50638862_pgfId-1014192]## _<value>_ -- A String value that will have
any leading and trailing spaces stripped, and then be converted
(according to the rules described in the JSP Specification for the
<jsp:setProperty> action) to the corresponding data type of the
property, prior to setting it to this value.

[#50638862_pgfId-1014193]## _<list-entries>_ -- A set of values used to
initialize the contents of a property of type array or _java.util.List_
. See below for more information.

[#50638862_pgfId-1014194]##As described above, the _<map-entries>_
element is used to initialize the key-value pairs of a property of type
_java.util.Map_ . This element may contain the following nested
elements:

[#50638862_pgfId-1014195]## _<key-class>_ -- Optional element specifying
the fully qualified class name for keys in the map to be created. If not
specified, _java.lang.String_ is used.

[#50638862_pgfId-1014196]## _<value-class>_ -- Optional element
specifying the fully qualified class name for values in the map to be
created. If not specified, _java.lang.String_ is used.

[#50638862_pgfId-1014197]## _<map-entry>_ -- Zero or more elements that
define the actual key-value pairs for a single entry in the map. Nested
inside is a _<key>_ element to define the key, and then exactly one of
_<null-value>_ , _<value>_ to define the value. These elements have the
same meaning as when nested in a _<managed-property>_ element, except
that they refer to an individual map entry’s value instead of the entire
property value.

[#50638862_pgfId-1014198]##As described above, the _<list-entries>_
element is used to initialize a set of values for a property of type
array or _java.util.List_ . This element may contain the following
nested elements:

[#50638862_pgfId-1014199]## _<value-class>_ -- Optional element
specifying the fully qualified class name for values in the map to be
created. If not specified, _java.lang.String_ is used.

[#50638862_pgfId-1014200]##Zero or more elements of type _<null-value>_
, _<value>_ to define the individual values to be initialized. These
elements have the same meaning as when nested in a _<managed-property>_
element, except that they refer to an individual list element instead of
the entire property value.

[#50638862_pgfId-1014201]##The following general rules apply to the
operation of the Managed Bean Creation facility:

[#50638862_pgfId-1014202]##Properties are assigned in the order that
their _<managed-property>_ elements are listed in the application
configuration resource.

[#50638862_pgfId-1014203]##If a managed bean has writeable properties
that are not mentioned in _<managed-property>_ elements, the values of
those properties are not assigned any values.

[#50638862_pgfId-1008008]##The bean instantiation and population with
properties must be done lazily, when an EL expression causes the bean to
be referenced. For example, this is the case when a _ValueExpression_ or
_MethodExpression_ has its _getValue()_ or _setValue()_ method called.

[#50638862_pgfId-1008009]##Due to the above mentioned laziness
constraint, any error conditions that occur below are only required to
be manifested at runtime. However, it is conceivable that tools may want
to detect these errors earlier; this is perfectly acceptable. The
presense of any of the errors described below, until the end of this
section, must not prevent the application from deploying and being made
available to service requests.

[#50638862_pgfId-1014208]##[P1-start managed bean config error
conditions] It is an error to specify a managed bean class that does not
exist, or that cannot be instantiated with a public, zero-args
constructor.

[#50638862_pgfId-1014209]##It is an error to specify a _<property-name>_
for a property that does not exist, or does not have a public setter
method, on the specified managed bean class.

{empty}[#50638862_pgfId-1014228]##It is an error to specify a _<value>_
element that cannot be converted to the type required by a managed
property, or that, when evaluated, results in a value that cannot be
converted to the type required by a managed property. [P1-end]

[#50638862_pgfId-1013255]##If the type of the property referenced by the
_<managed-property>_ element is a Java enum, the contents of the
_<value>_ element must be a String that yields a valid return from
_java.lang.Enum.valueOf(PROPERTY_CLASS, VALUE)_ where _PROPERTY_CLASS_
is the _java.lang.Class_ for the property and _VALUE_ is the contents of
the _<value>_ element in the application configuration resource. If any
exception is thrown from _Enum.valueOf()_ it is an error.

[#50638862_pgfId-1014246]##[P1-start managed bean scope errors] It is an
error for a managed bean created through this facility to have a
property that points at an object stored in a scope with a (potentially)
shorter life span. Specifically, this means, for an object created with
the specified _<managed-bean-scope>_ , then _<value>_ evaluations can
only point at created objects with the specified managed bean scope:

[#50638862_pgfId-1014247]##none -- none

[#50638862_pgfId-1014248]##application -- none, application

[#50638862_pgfId-1014249]##session -- none, application, session

[#50638862_pgfId-1015469]##view -- none, application, session, view

{empty}[#50638862_pgfId-1014268]##request -- none, application, session,
view, request [P1-end]

[#50638862_pgfId-1008018]##If a bean points to a property whose value is
a mixed expression containing literal strings and expressions, the net
scope of the mixed expression is considered to be the scope of the
narrowest sub-expression, excluding expressions in the none scope.

[#50638862_pgfId-1008019]##[P1-start implicit objects in request scope]
Data accessed via an implicit object is also defined to be in a scope.
The following implicit objects are considered to be in request scope:

[#50638862_pgfId-1008020]## _cookie_

[#50638862_pgfId-1008021]## _facesContext_

[#50638862_pgfId-1008022]## _header_

[#50638862_pgfId-1008023]## _headerValues_

[#50638862_pgfId-1008024]## _param_

[#50638862_pgfId-1008025]## _paramValues_

[#50638862_pgfId-1010785]##request

[#50638862_pgfId-1008026]## _requestScope_

{empty}[#50638862_pgfId-1008027]## _view_ [P1-end]

{empty}[#50638862_pgfId-1008028]##[P1-start implicit objects in session
scope] The only implicit objects in session scope are _session_ and
_sessionScope_ [P1-end]

[#50638862_pgfId-1008029]##[P1-start implicit objects in application
scope] The following implicit objects are considered to be in
application scope:

[#50638862_pgfId-1008030]## _application_

[#50638862_pgfId-1010784]## _applicationScope_

{empty}[#50638862_pgfId-1008031]## _initParam_ [P1-end]

{empty}[#50638862_pgfId-1014382]##[P1-start cyclic references error] It
is an error to configure cyclic references between managed beans.
[P1-end]

{empty}[#50638862_pgfId-1014418]##[P1-start managed bean names
correctness] Managed bean names must conform to the syntax of a Java
language identifier. [P1-end]

[#50638862_pgfId-1008034]##The initialization of bean properties from
_<map-entries>_ and _<list-entries>_ elements must adhere to the
following algorithm, though any confirming implementation may be used.

[#50638862_pgfId-1008035]##For _<map-entries>_ :

[#50638862_pgfId-1008036]##Call the property getter, if it exists.

[#50638862_pgfId-1008037]##If the getter returns _null_ or doesn't
exist, create a _java.util.HashMap_ , otherwise use the returned
_java.util.Map_ .

[#50638862_pgfId-1008038]##Add all entries defined by nested
_<map-entry>_ elements in the order they are listed, converting key
values defined by nested _<key>_ elements to the type defined by
_<key-class>_ and entry values defined by nested _<value>_ elements to
the type defined by _<value-class>_ . If a value is given as a value
expression, evaluate the reference and store the result, converting to
_<value-class_ > if necessary. If _<key-class>_ and/or _<value-class>_
are not defined, use _java.lang.String_ . Add _null_ for each
_<null-value>_ element.

[#50638862_pgfId-1008039]##If a new _java.util.Map_ was created in step
2), set the property by calling the setter method, or log an error if
there is no setter method.

[#50638862_pgfId-1008040]##For _<list-entries>_ :

[#50638862_pgfId-1008041]##Call the property getter, if it exists.

[#50638862_pgfId-1008042]##If the getter returns _null_ or doesn't
exist, create a _java.util.ArrayList_ , otherwise use the returned
_Object_ (an array or a _java.util.List_ ).

[#50638862_pgfId-1008043]##If a _List_ was returned or created in step
2), add all elements defined by nested _<value>_ elements in the order
they are listed, converting values defined by nested _<value>_ elements
to the type defined by _<value-class>_ . If a value is given as a value
expression, evaluate the reference and store the result, converting to
_<value-class_ > if necessary. If a _<value-class>_ is not defined, use
the value as-is (i.e., as a _java.lang.String_ ). Add null for each
_<null-value>_ element.

[#50638862_pgfId-1008044]##If an array was returned in step 2), create a
_java.util.ArrayList_ and copy all elements from the returned array to
the new _List_ , wrapping elements of a primitive type. Add all elements
defined by nested _<value>_ elements as described in step 3).

[#50638862_pgfId-1008045]##If a new _java.util.List_ was created in step
2) and the property is of type _List_ , set the property by calling the
setter method, or log an error if there is no setter method.

[#50638862_pgfId-1008046]##If a new _java.util.List_ was created in step
2) and the property is a java array, convert the _List_ into an array of
the property type, and set it by calling the setter method, or log an
error if there is no setter method.

[#50638862_pgfId-1008047]##If a new _java.util.List_ was created in step
4), convert the _List_ to an array of the proper type for the property
and set the property by calling the setter method, or log an error if
there is no setter method.

==== [#50638862_pgfId-1014437]##[#50638862_25716]##Managed Bean Configuration Example

[#50638862_pgfId-1014438]##The following <managed-bean> elements might
appear in one or more application configuration resources (see
link:JSF.htm#50638850_31842[See Application Configuration Resources]) to
configure the behavior of the Managed Bean Creation facility.

[#50638862_pgfId-1014442]##Assume that your application includes
_CustomerBean_ with properties _mailingAddress_ and _shippingAddress_ of
type _Address_ (along with additional properties that are not shown),
and _AddressBean_ implementation classes with String properties of type
_street_ , _city_ , _state_ , _country_ , and _postalCode_ .

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1014445]##<managed-bean>

[#50638862_pgfId-1014446]## <description>

[#50638862_pgfId-1014447]## A customer bean will be created as needed,
and stored in

[#50638862_pgfId-1014448]## request scope. Its “mailingAddress” and
“streetAddress”

[#50638862_pgfId-1014449]## properties will be initialized by virtue of
the fact that the

[#50638862_pgfId-1014450]## “value” expressions will not encounter any
object under

[#50638862_pgfId-1014451]## key “addressBean” in any scope.

[#50638862_pgfId-1014452]## </description>

[#50638862_pgfId-1014453]##
<managed-bean-name>customer</managed-bean-name>

[#50638862_pgfId-1014454]## <managed-bean-class>

[#50638862_pgfId-1014455]## com.mycompany.mybeans.CustomerBean

[#50638862_pgfId-1014456]## </managed-bean-class>

[#50638862_pgfId-1014457]## <managed-bean-scope> request
</managed-bean-scope>

[#50638862_pgfId-1014458]## <managed-property>

[#50638862_pgfId-1014459]##
<property-name>mailingAddress</property-name>

[#50638862_pgfId-1014460]## <value>#\{addressBean}</value>

[#50638862_pgfId-1014461]## </managed-property>

[#50638862_pgfId-1014462]## <managed-property>

[#50638862_pgfId-1014463]##
<property-name>shippingAddress</property-name>

[#50638862_pgfId-1014464]## <value>#\{addressBean}</value>

[#50638862_pgfId-1014465]## </managed-property>

[#50638862_pgfId-1014466]## <managed-property>

[#50638862_pgfId-1014467]## <property-name>customerType</property-name>

[#50638862_pgfId-1014468]## <value>New</value> <!-- Set to literal value
-->

[#50638862_pgfId-1014469]## </managed-property>

[#50638862_pgfId-1014470]##</managed-bean>

[#50638862_pgfId-1014471]## 

|===

[#50638862_pgfId-1014486]## 

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1014474]##<managed-bean>

[#50638862_pgfId-1014475]## <description>

[#50638862_pgfId-1014476]## A new AddressBean will not be added to any
scope, because we

[#50638862_pgfId-1014477]## only want to create instances when a
CustomerBean creation asks

[#50638862_pgfId-1014478]## for them. Therefore, we set the scope to
“none”.

[#50638862_pgfId-1014479]## </description>

[#50638862_pgfId-1014480]##
<managed-bean-name>addressBean</managed-bean-name>

[#50638862_pgfId-1014481]## <managed-bean-class>

[#50638862_pgfId-1014482]## com.mycompany.mybeans.AddressBean

[#50638862_pgfId-1014483]## </managed-bean-class>

[#50638862_pgfId-1014484]## <managed-bean-scope> none
</managed-bean-scope>

[#50638862_pgfId-1014485]##</managed-bean>

|===

[#50638862_pgfId-1014487]##If a value expression “
_#\{customer.mailingAddress.city}_ ” were to be evaluated by the JSF
implementation, and there was no object stored under key “ _customer_ ”
in request, view, session, or application scope, a new _CustomerBean_
instance will be created and stored in request scope, with its
_mailingAddress_ and _shippingAddress_ properties being initialized to
instances of _AddressBean_ as defined by the configuration elements
shown above. Then, the evaluation of the remainder of the expression can
proceed as usual.

[#50638862_pgfId-1014488]##Although not used by the JSF implementation
at application runtime, it is also convenient to be able to indicate to
JSF tools (at design time) that objects of particular types will be
created and made available (at runtime) by some other means. For
example, an application configuration resource could include the
following information to declare that a JDBC data source instance will
have been created, and stored in application scope, as part of the
application’s own startup processing.

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1014491]##<referenced-bean>

[#50638862_pgfId-1014492]## <description>

[#50638862_pgfId-1014493]## A JDBC data source will be initialized and
made available in

[#50638862_pgfId-1014494]## some scope (presumably application) for use
by the JSF based

[#50638862_pgfId-1014495]## application when it is actually run. This
information is not

[#50638862_pgfId-1014496]## used by the JSF implementation itself; only
by tools.

[#50638862_pgfId-1014497]## </description>

[#50638862_pgfId-1014498]## <referenced-bean-name> dataSource
</referenced-bean-name>

[#50638862_pgfId-1014499]## <referenced-bean-class>

[#50638862_pgfId-1014500]## javax.sql.DataSource

[#50638862_pgfId-1014501]## </referenced-bean-class>

[#50638862_pgfId-1014502]##</referenced-bean>

|===

[#50638862_pgfId-1014503]##This information can be utilized by the tool
to construct user interfaces based on the properties of the referenced
beans.

=== [#50638862_pgfId-1017552]##

image:JSF-25.gif[image]

Managed Bean Annotations[#50638862_25885]##

[#50638862_pgfId-1017558]##JSF 2.0 introduced several annotations, in
the package _javax.faces.bean_ , that act as analogs to the managed bean
configuration syntax in the application configuration resources
described earlier in this chapter. JSF 2.0 is a component specification
of Java EE 6, which also includes a much more powerful and complete set
of annotations, from several other component specifications, most
notably Contexts and Dependency Injection (CDI). These annotations are
also usable with JSF. The annotations in the package _javax.faces.bean_
will be deprecated in a version of the JSF specification after 2.2.
Therefore, developers are strongly recommended avoid using those
annotations and instead use the ones from Java EE 6.

==== [#50638862_pgfId-1017587]##JSF Managed Classes and Java EE Annotations

[#50638862_pgfId-1017553]##JSF Implementations that are running as a
part of Java EE 5 (or later) must allow managed bean implementations to
use the annotations specified in section 14.5 of the Servlet 2.5
Specification to allow the container to inject references to container
managed resources into a managed bean instance before it is made
accessible to the JSF application. Only beans declared to be in
_request_ , _session_ , or _application_ scope are eligible for resource
injection.

[#50638862_pgfId-1016772]##In addition to managed beans being injectable
in this manner, the following JSF artifacts are also injectable.

======= [#50638862_pgfId-1019482]##[#50638862_13494]##JSF Artifacts Eligible for Injection

[#50638862_pgfId-1019484]##Artifact Type

[#50638862_pgfId-1019486]##javax.el.ELResolver

[#50638862_pgfId-1019488]##javax.faces.application.ApplicationFactory

[#50638862_pgfId-1019490]## _javax.faces.application.NavigationHandler_

[#50638862_pgfId-1019492]## _javax.faces.application.ResourceHandler_

[#50638862_pgfId-1019494]## _javax.faces.application.StateManager_

[#50638862_pgfId-1019496]##javax.faces.component.visit.VisitContextFactory

[#50638862_pgfId-1019498]##javax.faces.context.ExceptionHandlerFactory

[#50638862_pgfId-1019500]##javax.faces.context.ExternalContextFactory

[#50638862_pgfId-1019502]##javax.faces.context.FacesContextFactory

[#50638862_pgfId-1019504]##javax.faces.context.PartialViewContextFactory

[#50638862_pgfId-1019506]## _javax.faces.event.ActionListener_

[#50638862_pgfId-1019508]## _javax.faces.event.SystemEventListener_

[#50638862_pgfId-1019531]##javax.faces.lifecycle.ClientWindowFactory

[#50638862_pgfId-1019510]##javax.faces.lifecycle.LifecycleFactory

[#50638862_pgfId-1019512]##javax.faces.event.PhaseListener

[#50638862_pgfId-1019514]##javax.faces.render.RenderKitFactory

[#50638862_pgfId-1019516]##javax.faces.view.ViewDeclarationLanguageFactory

[#50638862_pgfId-1019518]##javax.faces.view.facelets.FaceletCacheFactory

[#50638862_pgfId-1019747]##javax.faces.view.facelets. +
TagHandlerDelegateFactory

{empty}[#50638862_pgfId-1013147]##Please consult the Java 2 Platform
Enterprise Edition Specification 6.0 for complete details of this
feature. Here is a summary of the Java EE annotations one may use in a
managed bean or other artifact from the preceding table. [P1-start valid
annotations in a managed bean]

[#50638862_pgfId-1013232]## _@javax.inject.Inject_

[#50638862_pgfId-1016753]##@javax.inject.Named

[#50638862_pgfId-1016752]##@javax.inject.Qualifier

[#50638862_pgfId-1016754]##@javax.inject.Scope

[#50638862_pgfId-1016759]##@javax.inject.Singleton

[#50638862_pgfId-1016727]##@javax.enterprise.context.ApplicationScoped

[#50638862_pgfId-1016728]##@javax.enterprise.context.ConversationScoped

[#50638862_pgfId-1016733]##@javax.enterprise.context.Dependent

[#50638862_pgfId-1016738]##@javax.enterprise.context.RequestScoped

[#50638862_pgfId-1016745]##@javax.enterprise.context.SessionScoped

[#50638862_pgfId-1016587]## _@javax.annotation.Resource_

[#50638862_pgfId-1013233]## _@javax.annotation.Resources_

[#50638862_pgfId-1013234]## _@javax.ejb.EJB_

[#50638862_pgfId-1013235]## _@javax.ejb.EJBs_

[#50638862_pgfId-1013236]## _@javax.xml.ws.WebServiceRef_

[#50638862_pgfId-1013237]## _@javax.xml.ws.WebServiceRefs_

[#50638862_pgfId-1013238]## _@javax.persistence.PersistenceContext_

[#50638862_pgfId-1013239]## _@javax.persistence.PersistenceContexts_

[#50638862_pgfId-1013240]## _@javax.persistence.PersistenceUnit_

{empty}[#50638862_pgfId-1013241]## _@javax.persistence.PersistenceUnits_
[P1-end]

[#50638862_pgfId-1013231]##Following is an example of valid usages of
this feature in a managed bean or other artifact in the preceding table.

[#50638862_pgfId-1013092]##public class User extends Object \{

[#50638862_pgfId-1013104]## private @EJB ShoppingCart cart;

[#50638862_pgfId-1013105]## private @Resource Inventory inventory;

[#50638862_pgfId-1013106]## private DataSource customerData;

[#50638862_pgfId-1013109]## 

[#50638862_pgfId-1013107]## @Resource(name=”customerData”)

[#50638862_pgfId-1013108]## private void setCustomerData(DataSource
data) \{

[#50638862_pgfId-1013110]## customerData = data;

[#50638862_pgfId-1013111]## }

[#50638862_pgfId-1013112]## 

[#50638862_pgfId-1013113]## public String getOrderSummary() \{

[#50638862_pgfId-1013114]## // Do something with the injected resources

[#50638862_pgfId-1013115]## // And generate a textual summary of the
order

[#50638862_pgfId-1013116]## }

[#50638862_pgfId-1013117]## 

[#50638862_pgfId-1013103]##}

[#50638862_pgfId-1013118]##This example illustrates that the above
annotations can be attached to instance variables or to JavaBeans
setters. The JSF implementation running in a Java EE 5 container must
guarantee that the injections are performed before the bean is handed
back to the user. Generally, this is done by performing the injection
immediately after the lazy instantiation of the managed bean.

==== [#50638862_pgfId-1013148]##[#50638862_32398]##Managed Bean Lifecycle Annotations

[#50638862_pgfId-1013152]##JSF implementations running in a Java EE 5
compliant container must support attaching the _@PostConstruct_ and
_@PreDestroy_ annotations to aid in awareness of the managed-bean
lifecycle.

[#50638862_pgfId-1013160]##Methods on managed beans declared to be in
_none_ , _request_ , _view_ , _session_ , or _application_ scope,
annotated with _@PostConstruct_ , must be called by the JSF
implementation after resource injection is performed (if any) but before
the bean is placed into scope.

{empty}[#50638862_pgfId-1014804]##[P1-start rules governing invocation
of @PostConstruct annotated methods]If the method throws an unchecked
exception, the JSF implementation must not put the managed-bean into
service, a message must be logged, and further methods on that managed
bean instance must not be called. [P1-end]

[#50638862_pgfId-1015475]##Methods on managed beans declared to be in
_request_ , _session_ , or _application_ scope, annotated with
_@PreDestroy_ , must be called by the JSF implementation before the bean
is removed from its scope or before the scope itself is destroyed,
whichever comes first. In the case of a managed bean placed in _view_
scope, methods annotated with _@PreDestroy_ must only be called when the
view scope is destroyed. See the javadoc for
_FacesContext.setViewRoot()_ . This annotation must be supported in all
cases where the above _@PostConstruct_ annotation is supported.

[#50638862_pgfId-1013176]##[P1-start rules governing invocation of
@PreDestroy annotated methods] If the method throws an unchecked
exception, the JSF implementation may log it, but the exception must not
otherwise alter the execution.

{empty}[#50638862_pgfId-1014810]##Refer to the Java EE specification
section 2.5 and the Common Annotations for the JavaTM PlatformTM
specification section 2.5 for more details.[P1-end]

=== [#50638862_pgfId-1014586]##

image:JSF-25.gif[image]

How Faces Leverages the Unified EL

[#50638862_pgfId-1008652]##This section is non-normative and covers the
major players in the Unified EL and how they relate to JavaServer Faces.
The number one goal in this version of the JavaServer Faces
specification is to export the concepts behind the JSF EL into the
Unified EL, which is part of the the JavaServer Pages version 2.1
specification, and then rely on those facilities to get the work done.
Readers interested in how to implement the Unified EL itself must
consult the Unified EL Spec document.

==== [#50638862_pgfId-1008660]##ELContext

[#50638862_pgfId-1008671]##The ELContext is a handy little “holder”
object that gets passed all around the Unified EL API. It has two
purposes.

[#50638862_pgfId-1008692]##To allow technologies that use the Unified
EL, such as JavaServer Faces, the JSF View Declaration Language (JSF
VDL), and JSP, to store any context information specific to that
technology so it can be leveraged during expression evaluation. For
example the expression “ _$\{view.viewId}_ ” is specific to Faces. It
means, “find the _UIViewRoot_ instance for the current view, and return
its _viewId_ ”. The Unified EL doesn’t know about the “view” implicit
object or what a UIViewRoot is, but JavaServer Faces does. The Unified
EL has plugin points that will get called to resolve “view”, but to do
so, JavaServer Faces needs access to the _FacesContext_ from within the
callstack of EL evaluation. Therefore, the _ELContext_ comes to the
rescue, having been populated with the _FacesContext_ earlier in the
request processing lifecycle.

[#50638862_pgfId-1008697]##To allow the pluggable resolver to tell the
Unified EL that it did, in fact, resolve a property and that further
resolvers must not be consulted. This is done by setting the “
_propertyResolved_ ” property to _true_ .

[#50638862_pgfId-1011569]##The complete specification for ELResolver may
be found in Chapter 2 of the Expression Language Specification, Version
2.1.

===== [#50638862_pgfId-1008699]##[#50638862_94350]##Lifetime, Ownership and Cardinality

[#50638862_pgfId-1008703]##An ELContext instance is created the first
time _getELContext_ () is called on the _FacesContext_ for this request.
Please see _link:JSF.htm#50638857_57548[See ELContext]_ for details. Its
lifetime ends the same time the _FacesContext’s_ lifetime ends. The
_FacesContext_ maintains the owning reference to the _ELContext_ . There
is at most one _ELContext_ per _FacesContext_ .

===== [#50638862_pgfId-1014622]##Properties

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638862_pgfId-1014593]##Name |[#50638862_pgfId-1014595]##Access
|[#50638862_pgfId-1014597]##Type |[#50638862_pgfId-1014599]##Description
|[#50638862_pgfId-1014601]## _ELResolver_ |[#50638862_pgfId-1014603]##RO
|[#50638862_pgfId-1014605]## _javax.el.ELResolver_
|[#50638862_pgfId-1014607]##Return the ELResolver instance described in
_link:JSF.htm#50638862_13162[See Faces ELResolver for JSP Pages]_

|[#50638862_pgfId-1014612]## _propertyResolved_
|[#50638862_pgfId-1014614]##RW |[#50638862_pgfId-1014616]##boolean
|[#50638862_pgfId-1014618]##Set by an ELResolver implementation if it
successfully resolved a property. See _link:JSF.htm#50638862_99192[See
ELResolver]_ for how this property is used.
|===

===== [#50638862_pgfId-1014623]##Methods

[#50638862_pgfId-1011599]##Here is a subset of the methods that are
relevant to Faces.

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1008857]##public Object getContext(Class key);

[#50638862_pgfId-1008866]##void putContext(Class key, Object
contextInstance);

[#50638862_pgfId-1011609]##...

|===

[#50638862_pgfId-1008882]##As mentioned in
_link:JSF.htm#50638857_57548[See ELContext]_ , the _putContext()_ method
is called, passing the current _FacesContext_ instance the first time
the system asks the _FacesContext_ for its _ELContext_ . The
_getContext()_ method will be called by any _ELResolver_ instances that
need to access the _FacesContext_ to perform their resolution.

===== [#50638862_pgfId-1008915]##Events

[#50638862_pgfId-1008919]##The creation of an ELContext instance
precipitates the emission of an _ELContextEvent_ from the _FacesContext_
that created it. Please see _link:JSF.htm#50638857_57548[See ELContext]_
for details.

==== [#50638862_pgfId-1008886]##[#50638862_99192]##ELResolver

[#50638862_pgfId-1013373]##Faces 1.1 used the _VariableResolver_ and
_PropertyResolver_ classes as the workhorses of expression evaluation.
The Unified API has the _ELResolver_ instead. The ELResolver concept is
the heart of the Unified EL. When an expression is evaluated, the
ELResolver is responsible for resolving each segment in the expression.
For example, in rendering the component behind the tag “ _<h:outputText
value=”#\{user.address.street}”_ />” the ELResolver is called three
times. Once to resolve “user”, again to resolve the “address” property
of user, and finally, to resolve the “street” property of “address”. The
complete specification for ELResolver may be found in Chapter 2 of the
Expression Language Specification, Version 2.1.

[#50638862_pgfId-1015499]##[N/T-start two ELResolver impls] As described
in more detail in _link:JSF.htm#50638862_13162[See Faces ELResolver for
JSP Pages],_ Faces must provide two implementations of _ELResolver_ .
[P1-end]Which of these two implementations is actually used to resolve
an expression depends on where the expresison is evaluated. If the
expression is evaluated in a markup page, the ELResolver for markup
pages is used. If the expression is evaluated in java VM hosted code
from Faces, another ELResolver is used that is tailored for use inside
of Faces java VM hosted code. During the course of evaluation of an
expression, a variety of sources must be considered to help resolve each
segment of the expression. These sources are linked in a chain-like
fashion. Each link in the chain has the opportunity to resolve the
current segment. If it does so, it must set the “ _propertyResolved_ ”
property on the _ELContext_ , to _true_ . If not, it must not modify the
value of the “ _propertyResolved_ ” property. If the “
_propertyResolved_ ” property is not set to _true_ the return value from
the _ELResolver_ method is ignored by the system.

===== [#50638862_pgfId-1008945]##Lifetime, Ownership, and Cardinality

[#50638862_pgfId-1008949]##ELResolver instances have application
lifetime and scope. The JSP container maintains one top level ELResolver
(into which a Faces specific ELResolver is added) accessible from
_JspContext.getELContext().getELResolver()._ This ELResolver instance is
also used from the JSF VDL, even though JSF VDL pages do not themselves
use JSP. Faces maintains one _ELResolver_ (separate from the one handed
to the JSP container) accessible from
_FacesContext.getELContext().getELResolver() and
Application.getELResolver()_ .

===== [#50638862_pgfId-1008973]##Properties

[#50638862_pgfId-1009042]##ELResolver has no proper JavaBeans properties

===== [#50638862_pgfId-1009074]##Methods

[#50638862_pgfId-1011600]##Here is a subset of the methods that are
relevant to Faces.

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1009072]##public Object getValue(ELContext context,
Object base, Object property);

[#50638862_pgfId-1009073]##void setValue(ELContext context, Object base,
Object property, Object value);

[#50638862_pgfId-1011610]##...

|===

[#50638862_pgfId-1009064]## _getValue()_ looks at the argument _base_
and tries to return the value of the property named by the argument
_property_ . For example, if base is a JavaBean, _property_ would be the
name of the JavaBeans property, and the resolver would end up calling
the _getter_ for that property.

[#50638862_pgfId-1009113]## _setValue()_ looks at the argument _base_
and tries to set the argument _value_ into the property named by the
argument _property_ . For example, if base is a JavaBean, _property_
would be the name of the JavaBeans property, and the resolver would end
up calling the _setter_ for that property.

[#50638862_pgfId-1011611]##There are other methods, such as
_isReadOnly()_ that are beyond the scope of this document, but described
completely in the Unified EL Specification.

===== [#50638862_pgfId-1009149]##Events

[#50638862_pgfId-1009153]## _ELResolver_ precipitates no events.

==== [#50638862_pgfId-1009164]##[#50638862_46255]##ExpressionFactory

[#50638862_pgfId-1009168]##Faces 1.1 used the Application class as a
factory for _ValueBinding_ and _MethodBinding_ instances. The Unified EL
has the _ExpressionFactory_ class instead. It is a factory for
_ValueExpression_ and _MethodExpression_ instances.

===== [#50638862_pgfId-1009163]##Lifetime, Ownership, and Cardinality

[#50638862_pgfId-1009223]## _ExpressionFactory_ instances are
application scoped. The _Application_ object maintains the
_ExpressionFactory_ instance used by Faces (See
_link:JSF.htm#50638861_70672[See Acquiring ExpressionFactory Instance])_
. The _JspApplicationContext_ object maintains the _ExpressionFactory_
used by the JSP container (and therefore by the JSF VDL). It is
permissible for both of these access methods to yield the same java
object instance.

===== [#50638862_pgfId-1009220]##Properties

[#50638862_pgfId-1009230]## _ExpressionFactory_ has no properties.

===== [#50638862_pgfId-1009251]##Methods

[width="100%",cols="100%",]
|===
a|
[#50638862_pgfId-1009249]##public MethodExpression
createMethodExpression(ELContext context, String expression,
FunctionMapper fnMapper, Class[] paramTypes);

[#50638862_pgfId-1009250]##public ValueExpression
createValueExpression(ELContext context, String expression, Class
expectedType, FunctionMapper fnMapper);

|===

[#50638862_pgfId-1011326]##These methods take the human readable
expression string, such as _”#\{user.address.street}”_ and return an
object oriented representation of the expression. Which method one calls
depends on what kind of expression you need. The Faces _Application_
class has convenience methods specific to Faces needs for these
concepts, please see link:JSF.htm#50638861_19498[See Programmatically
Evaluating Expressions] _._

===== [#50638862_pgfId-1011327]##Events

[#50638862_pgfId-1009288]## _ExpressionFactory_ precipitates no events.

=== [#50638862_pgfId-1008583]##

image:JSF-25.gif[image]

[#50638862_59684]##ELResolver Instances Provided by Faces

[#50638862_pgfId-1009367]##This section provides details on what an
implementation of the JavaServer Faces specification must do to support
the Unified EL for usage in a Faces application.

[#50638862_pgfId-1015513]## _link:JSF.htm#50638862_99192[See
ELResolver]_ mentions that a Faces implementation must provide two
implementations of ELResolver. One ELResolver, let’s call it the _Faces
ELResolver For Markup Pages_ , is plugged in to the top level resolver
chain returned from _JspContext.getELContext().getELResolver()_ . This
top level resolver chain is used by the view declaration language
container (JSP or JSF View Declaration Language), and possibly by tag
handlers, to resolve expressions. The other _ELResolver_ , let’s call it
the _ELResolver for Facelets and Programmatic Access_ , is used by
Facelets markup pages, and is returned from
_FacesContext.getELContext().getELResolver()_ and
_Application.getELResolver()_ , and is used to resolve expressions that
appear programmatically. See the javadocs for _javax.el.ELResolver_ for
the specification and method semantics for each method in _ELResolver_ .
The remainder of this section lists the implementation requirements for
these two resolvers.

==== [#50638862_pgfId-1009413]##[#50638862_13162]##Faces ELResolver for JSP Pages

[#50638862_pgfId-1009427]##As mentioned in
_link:JSF.htm#50638862_99192[See ELResolver]_ , during the course of
evaluation of an expression, a variety of sources must be considered to
help resolve each segment of the expression. These sources are linked in
a chain-like fashion. Each link in the chain has the opportunity to
resolve the current segment. The Unified EL provides a container class
to support this multi-source variable resolution:
_javax.el.CompositeELResolver_ . The implementation for the _Faces
ELResolver for JSP Pages_ is described as a set of _ELResolvers_ inside
of a _CompositeELResolver_ instance, but any implementation strategy is
permissible as long as the semantics are preserved.

{empty}[#50638862_pgfId-1009507]##This diagram shows the set of
_ELResolver_ instances that must be added to the _Faces ELResolver for
JSP Pages_ . This instance must be handed to the JSP container via a
call to
_JspFactory.getDefaultFactory().getJspApplicationContext().addELResolver()_
at application startup time. Even though we are making a JSP API call to
install this _ELResolver_ , we do not require using JSP to develop JSF
applications. It also shows the order in which they must be added.
[P2-start there are 18 methods in the below tables, each can
corresponding to a method on a particular ELResolver. With clever
testing, it is possible to write assertions for these. Testing the
legacy VariableResolver and PropertyResolvers is not included in this 18
methods number. These classes may be tested simply by noting that the
methods do indeed get called on a user-provided VariableResolver or
PropertyResolver.] [P1-end]

======= [#50638862_pgfId-1009508]##[#50638862_19081]##Faces ELResolver for JSP Pages

[#50638862_pgfId-1014838]## 

image:JSF-26.gif[image]

[#50638862_pgfId-1009509]##The semantics of each ELResolver are given
below, either in tables that describe what must be done to implement
each particular method on _ELResolver_ , or in prose when such a table
is inappropriate.

===== [#50638862_pgfId-1015714]##[#50638862_28092]##Faces Implicit Object ELResolver For JSP

[#50638862_pgfId-1015724]##This resolver relies on the presence of
another, JSP specific, implicit object ELResolver in the chain by only
resolving the “facesContext” and “view” implicit objects.

======= [#50638862_pgfId-1015784]##Faces ImplicitObjectELResolver for JSP

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1015740]##ELResolver method
|[#50638862_pgfId-1015742]##implementation requirements
|[#50638862_pgfId-1015744]## _getValue_ a|
[#50638862_pgfId-1015746]##If base is non-null, return null.

[#50638862_pgfId-1015747]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1015807]##link:JSF.htm#50638862_99977[See
ImplicitObjectELResolver for Programmatic Access]If base is null and
property is a String equal to

[#50638862_pgfId-1015808]##“facesContext”, call
setPropertyResolved(true) on

[#50638862_pgfId-1015809]##the argument ELContext and return the
FacesContext

[#50638862_pgfId-1015810]##for this request.

[#50638862_pgfId-1015811]##If base is null and property is a String
equal to

[#50638862_pgfId-1015812]##“view”, call setPropertyResolved(true) on the

[#50638862_pgfId-1015813]##argument ELContext and return the UIViewRoot
for

[#50638862_pgfId-1015814]##this request by calling

[#50638862_pgfId-1015753]##facesContext.getUIViewRoot().

{empty}[#50638862_pgfId-1015911]##This ELResolver must also support the
implicit object “resource” as specified in
link:JSF.htm#50638862_50118[See Implicit Object ELResolver for Facelets
and Programmatic Access]

|[#50638862_pgfId-1015756]## _getType_ a|
[#50638862_pgfId-1015758]##If base is non-null, return null.

[#50638862_pgfId-1015759]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1015760]##If base is null and property is a String
equal to “facesContext” or “view”, call setPropertyResolved(true) and
return null;

{empty}[#50638862_pgfId-1015761]##Otherwise, just return null;This
ELResolver must also support the implicit object “resuorce” as specified
in link:JSF.htm#50638862_50118[See Implicit Object ELResolver for
Facelets and Programmatic Access]

|[#50638862_pgfId-1015763]## _setValue_ a|
[#50638862_pgfId-1015765]##If base is null and property is null, throw
PropertyNotFoundException.

{empty}[#50638862_pgfId-1015766]##If base is null and property is a
String equal to “facesContext” or “view”, _throw
javax.el.PropertyNotWriteable, since “view” and “facesContext” are
read-only_ .This ELResolver must also support the implicit object
“resuorce” as specified in link:JSF.htm#50638862_50118[See Implicit
Object ELResolver for Facelets and Programmatic Access]

|[#50638862_pgfId-1015768]## _isReadOnly_ a|
[#50638862_pgfId-1015770]##If base is non-null, return false.

[#50638862_pgfId-1015771]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1015772]##If base is null and property is a String
equal to “facesContext” or “view”, _call setPropertyResolved(true) on
the argument ELContext and return true._

{empty}[#50638862_pgfId-1015773]##Otherwise return false;This ELResolver
must also support the implicit object “resuorce” as specified in
link:JSF.htm#50638862_50118[See Implicit Object ELResolver for Facelets
and Programmatic Access]

|[#50638862_pgfId-1015775]## _getFeatureDescriptors_ a|
[#50638862_pgfId-1015777]##If base is non-null, return null.

[#50638862_pgfId-1015778]##If base is null, return an Iterator
containing three java.beans.FeatureDescriptor instances, one for the
“view” property, one for the “facesContext” property and one for the
“resource” property. It is required that all of the FeatureDescriptor
instances in the Iterator set Boolean.TRUE as the value of the
ELResolver.RESOLVABLE_AT_DESIGN_TIME attribute. The name and displayName
of the FeatureDescriptor must be “view”, “facesContext”, “ or “resource”
as appropriate. FacesContext.class, UIViewRoot.class, or
ResourceHandler.class must be stored as the value of the ELResolver.TYPE
attribute, as approriate. The shortDescription must be a suitable
description depending on the implementation. The expert and hidden
properties must be false. The preferred property must be true.

|[#50638862_pgfId-1015780]## _getCommonPropertyType_ a|
[#50638862_pgfId-1015782]##If base is non-null, return null.

[#50638862_pgfId-1015783]##If base is null and return String.class.

|===

[#50638862_pgfId-1015733]## 

===== [#50638862_pgfId-1009765]##[#50638862_68347]##ManagedBean ELResolver

[#50638862_pgfId-1009936]##This is the means by which the managed bean
creation facility described in _link:JSF.htm#50638862_57834[See The
Managed Bean Facility]_ is called into play during EL resolution.

======= [#50638862_pgfId-1012733]##ManagedBeanELResolver

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1012693]##ELResorver method
|[#50638862_pgfId-1012695]##implementation requirements
|[#50638862_pgfId-1012697]## _getValue_ a|
[#50638862_pgfId-1012699]##If base is non-null, return null.

[#50638862_pgfId-1012700]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012701]##If property matches the name of an entry in
the request, session, or application scopes, in that order, return null.

[#50638862_pgfId-1012702]##If base is null, and property matches one of
the managed-bean-name declarations in the application configuration
resources, instantiate the bean, populate it with properties as
described in _link:JSF.htm#50638862_57834[See The Managed Bean
Facility]_ , store it in the scope specified by the managed-bean-scope
declaration for this this managed-bean, call setPropertyResolved(true)
on the argument ELContext, and return the freshly instantiated
managed-bean.

[#50638862_pgfId-1012706]##Otherwise, return null.

|[#50638862_pgfId-1012708]## _getType_ a|
[#50638862_pgfId-1012710]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012711]##Otherwise return null;

|[#50638862_pgfId-1012713]## _setValue_ a|
[#50638862_pgfId-1012715]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012716]##Otherwise, if base is null, and property
matches one of the managed-bean-name declarations in the application
configuration resources, and a managed bean with that managed-bean-name
does not yet exist in the specified scope, instantiate the bean,
populate it with properties as described in
_link:JSF.htm#50638862_57834[See The Managed Bean Facility]_ , store it
in the scope specified by the managed-bean-scope declaration for this
this managed-bean and return. If the managed bean does exist, take no
action and return. In either case (the bean exists or does not exist),
the actual setting will happen by virtue of the BeanELResolver.

[#50638862_pgfId-1015677]##Otherwise take no action and return.

|[#50638862_pgfId-1012718]## _isReadOnly_ a|
[#50638862_pgfId-1012720]##If base is non-null, return false.

[#50638862_pgfId-1012721]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012722]##If base is null return false. We never set
the propertyResloved property in this method because the set
responsibility is taken care of by the ScopedAttributeELResolver.

|[#50638862_pgfId-1012724]## _getFeatureDescriptors_ a|
[#50638862_pgfId-1012726]##If base is non-null, return null.

[#50638862_pgfId-1012727]##If base is null, return an Iterator
containing java.beans.FeatureDescriptor instances for each managed-bean
in the application-configuration resources. It is required that all of
the FeatureDescriptor instances in the Iterator set Boolean.TRUE as the
value of the ELResolver.RESOLVABLE_AT_DESIGN_TIME attribute. The name
and displayName of the FeatureDescriptor must be the managed-bean-name.
The actual java Class instance for the managed-bean-class must be stored
as the value of the ELResolver.TYPE attribute. The shortDescription of
the FeatureDescriptor must be the description of the managaged-bean
element, if present, null otherwise. The expert and hidden properties
must be false. The preferred property must be true.

|[#50638862_pgfId-1012729]## _getCommonPropertyType_ a|
[#50638862_pgfId-1012795]##If base is non-null, return null.

[#50638862_pgfId-1012732]##If base is null, return Object.class.

|===

===== [#50638862_pgfId-1012808]##Resource ELResolver

[#50638862_pgfId-1015316]##Please see link:JSF.htm#50638862_80045[See
Resource ELResolver] for the specification of this ELResolver.

===== [#50638862_pgfId-1015315]##[#50638862_48536]##ResourceBundle ELResolver for JSP Pages

[#50638862_pgfId-1012811]##This is the means by which resource bundles
defined in the application configuration resources are called into play
during EL resolution.

======= [#50638862_pgfId-1012855]##ResourceBundleELResolver

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1012815]##ELResorver method
|[#50638862_pgfId-1012817]##implementation requirements
|[#50638862_pgfId-1012819]## _getValue_ a|
[#50638862_pgfId-1012896]##If base is non-null, return null.

[#50638862_pgfId-1012897]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012898]##If base is null and property is a String
equal to the value of the <var> element of one of the
<resource-bundle>'s in the application configuration resources, use the
Locale of the current UIViewRoot and the base-name of the
resource-bundle to load the ResourceBundle. Call
setPropertyResolved(true). Return the ResourceBundle. Otherwise, return
null.

[#50638862_pgfId-1012828]## 

|[#50638862_pgfId-1012830]## _getType_ a|
[#50638862_pgfId-1012907]##If base is non-null, return null.

[#50638862_pgfId-1012908]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012909]##If base is null and property is a String
equal to the value of the <var> element of one of the
<resource-bundle>'s in the application configuration resources, call
setPropertyResolved(true) and return ResourceBundle.class.

[#50638862_pgfId-1012833]## 

|[#50638862_pgfId-1012835]## _setValue_ a|
[#50638862_pgfId-1012914]##If base is null and property is null, throw
PropertyNotFoundException. If base is null and property is a String
equal to the value of the <var> element of one of the
<resource-bundle>'s in the application configuration resources throw
javax.el.PropertyNotWriteable, since ResourceBundles are read-only.

[#50638862_pgfId-1012838]## 

|[#50638862_pgfId-1012840]## _isReadOnly_ a|
[#50638862_pgfId-1012926]##If base is non-null, return null. If base is
false and property is null, throw PropertyNotFoundException. If base is
null and property is a String equal to the value of the <var> element of
one of the <resource-bundle>'s in the application configuration
resources, call setPropertyResolved(true) on the argument ELContext and
return true. Otherwise return false;

[#50638862_pgfId-1012844]## 

|[#50638862_pgfId-1012846]## _getFeatureDescriptors_ a|
[#50638862_pgfId-1012931]##If base is non-null, return null.

[#50638862_pgfId-1012932]##If base is null, return an Iterator
containing java.beans.FeatureDescriptor instances, one for each
<resource-bundle> in the <application> element. It is required that all
of these FeatureDescriptor instances set Boolean.TRUE as the value of
the ELResolver.RESOLVABLE_AT_DESIGN_TIME attribute. The name of the
FeatureDescriptor must be the var element of the <resource-bundle>. The
displayName of the FeatureDescriptor must be the display-name of the
<resource-bundle>. ResourceBundle.class must be stored as the value of
the ELResolver.TYPE attribute. The shortDescription must be a suitable
description depending on the implementation. The expert and hidden
properties must be false. The preferred property must be true.

[#50638862_pgfId-1012849]## 

|[#50638862_pgfId-1012851]## _getCommonPropertyType_ a|
[#50638862_pgfId-1012937]##If base is non-null, return null.

[#50638862_pgfId-1012938]##If base is null, return string.Class.

[#50638862_pgfId-1012854]## 

|===

[#50638862_pgfId-1012735]## 

===== [#50638862_pgfId-1012799]##[#50638862_17055]##ELResolvers in the application configuration resources

[#50638862_pgfId-1012736]##The _<el-resolver>_ element in the
application configuration resources will contain the fully qualified
classname to a class with a public no-arg constructor that implements
_javax.el.ELResolver_ . These are added to the _Faces ELResolver for JSP
Pages_ and the Faces ELResolver for Facelets and Programmatic Access in
the order in which they occur in the application configuration
resources.

===== [#50638862_pgfId-1011125]##[#50638862_93305]##VariableResolver Chain Wrapper

[#50638862_pgfId-1011126]##This is the means by which _VariableResolver_
instances that have been specified in _<variable-resolver>_ elements
inside the application configuration resources are allowed to affect the
EL resolution process. If there are one or more _<variable-resolver>_
elements in the application configuration resources, an instance of
ELResolver with the following semantics must be created and added to the
_Faces ELResolver for JSP Pages_ as indicated in the
_link:JSF.htm#50638862_19081[See Faces ELResolver for JSP Pages]_ .

[#50638862_pgfId-1010153]##By virtue of the decorator pattern described
in _link:JSF.htm#50638850_38316[See Delegating Implementation Support]_
, the default _VariableResolver_ will be at the end of the
_VariableResolver_ chain (See _link:JSF.htm#50638862_74815[See
VariableResolver and the Default VariableResolver]_ ), if each custom
_VariableResolver_ chose to honor the full decorator pattern. If the
custom _VariableResolver_ chose not to honor the decorator pattern, the
user is stating that they want to take over complete control of the
variable resolution system. Note that the head of the _VariableResolver_
chain is no longer accessible by calling
_Application.getVariableResolver()_ (Please see
_link:JSF.htm#50638861_32197[See VariableResolver Property]_ for what it
returns). The head of the _VariableResolver_ chain is kept in an
implementation specific manner.

[#50638862_pgfId-1010260]##The semantics of the ELResolver that
functions as the VariableResolver chain wrapper are described in the
following table.

======= [#50638862_pgfId-1010195]##ELResolver that is the VariableResolver Chain Wrapper

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1010157]##ELResorver method
|[#50638862_pgfId-1010159]##implementation requirements
|[#50638862_pgfId-1010161]## _getValue_ a|
[#50638862_pgfId-1010163]##If base is non-null, return null.

[#50638862_pgfId-1010237]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1010164]##Otherwise, call setPropertyResolved(true) on
the argument ELContext.

[#50638862_pgfId-1010248]##Get the ELContext from the FacesContext.

[#50638862_pgfId-1010247]##Get the head of the VariableResolver chain
and call resolveVariable(facesContext, property) and return the result.

[#50638862_pgfId-1010249]##Catch any exceptions that may be thrown by
resolveVariable(), call setPropertyResolved(false) on the argument
ELContext, and rethrow the exception wrapped in an javax.el.ELException.

|[#50638862_pgfId-1010170]## _getType_ a|
[#50638862_pgfId-1011805]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1010295]##return null;

|[#50638862_pgfId-1010175]## _setValue_ |[#50638862_pgfId-1010179]##If
base is null and property is null throw PropertyNotFoundException.

|[#50638862_pgfId-1010181]## _isReadOnly_ a|
[#50638862_pgfId-1010183]##If base is null and property is null throw
PropertyNotFoundException.

[#50638862_pgfId-1011842]##return false;

|[#50638862_pgfId-1010186]## _getFeatureDescriptors_
|[#50638862_pgfId-1010188]##return null;

|[#50638862_pgfId-1010191]## _getCommonPropertyType_
|[#50638862_pgfId-1010193]##If base is null, we return String.class. If
base is non-null, return null;
|===

===== [#50638862_pgfId-1010196]##[#50638862_64880]##PropertyResolver Chain Wrapper

[#50638862_pgfId-1010347]##This is the means by which _propertyResolver_
instances that have been specified in _<property-resolver>_ elements
inside the application configuration resources are allowed to affect the
EL resolution process. If there are one or more _<property-resolver>_
elements in the application configuration resources, an instance of
_ELResolver_ with the following semantics must be created and added to
the _Faces ELResolver for JSP Pages_ as indicated in the
_link:JSF.htm#50638862_19081[See Faces ELResolver for JSP Pages]_ .

[#50638862_pgfId-1010353]##By virtue of the decorator pattern described
in _link:JSF.htm#50638850_38316[See Delegating Implementation Support]_
, the default _propertyResolver_ will be at the end of the
_propertyResolver_ chain (See, _link:JSF.htm#50638862_15408[See
PropertyResolver and the Default PropertyResolver]_ ), if each custom
_propertyResolver_ chose to honor the full decorator pattern. If the
custom _propertyResolver_ chose not to honor the decorator pattern, then
the user is stating that they want to take over complete control of the
_propertyResolution_ system. Note that the head of the
_propertyResolver_ chain is no longer accessible by calling
_Application.getPropertyResolver()_ (Please see
_link:JSF.htm#50638861_92700[See PropertyResolver Property]_ for what it
returns). The head of the property resolver chain is kept in an
implementation specific manner.

[#50638862_pgfId-1010355]##The semantics of the ELResolver that
functions as the property resolver chain wrapper are described in the
following table.

======= [#50638862_pgfId-1010395]##ELResolver that is the PropertyResolver Chain Wrapper

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1010358]##ELResorver method
|[#50638862_pgfId-1010360]##implementation requirements
a|
[#50638862_pgfId-1010362]## _getValue_ ,

[#50638862_pgfId-1010460]##getType,

[#50638862_pgfId-1010461]##isReadOnly,

[#50638862_pgfId-1010474]##setValue

a|
[#50638862_pgfId-1010364]##If base or property are null, return null (or
false if the method returns boolean).

[#50638862_pgfId-1010366]##Call setPropertyResolved(true) on the
argument ELContext.

[#50638862_pgfId-1010367]##Get the ELContext from the FacesContext.

[#50638862_pgfId-1010491]##Get the head of the propertyResolver chain.

[#50638862_pgfId-1010368]##If base is a List or java language array,
coerce the property to an int and call the corresponding method on the
head of the property resolver chain that takes an int for property,
returning the result (except in the case of setValue()).

[#50638862_pgfId-1010495]##Otherwise, call the corresponding method on
the head of the property resolver chain that takes an Object for
property, returning the result (except in the case of setValue()).

[#50638862_pgfId-1010369]##If an Exception is thrown by calling the
above methods on the PropertyResolver chain, catch it, call
setPropertyResolved(false) on the argument ELContext, and rethrow the
Exception wrapped (snuggly) in a javax.el.ELException.

|[#50638862_pgfId-1010388]## _getFeatureDescriptors_
|[#50638862_pgfId-1010390]##return null;

|[#50638862_pgfId-1010392]## _getCommonPropertyType_
|[#50638862_pgfId-1010394]##If base is null, return null. If base is
non-null, return Object.class.
|===

===== [#50638862_pgfId-1010345]##[#50638862_79758]##ELResolvers from Application.addELResolver()

[#50638862_pgfId-1009726]##Any such resolvers are considered at this
point in the _Faces ELResolver for JSP Pages_ in the order in which they
were added.

==== [#50638862_pgfId-1009719]##[#50638862_39121]##ELResolver for Facelets and Programmatic Access

[#50638862_pgfId-1010548]##This section documents the requirements for
the second _ELResolver_ mentioned in _link:JSF.htm#50638862_59684[See
ELResolver Instances Provided by Faces]_ , the one that is used for
Facelets and for programmatic expression evaluation from Faces java
code.

[#50638862_pgfId-1010551]##The implementation for the _ELResolver for
Programmatic Access_ is described as a set of _ELResolvers_ inside of a
_CompositeELResolver_ instance, but any implementation strategy is
permissible as long as the semantics are preserved. .

{empty}[#50638862_pgfId-1014907]##This diagram shows the set of
_ELResolver_ instances that must be added to the _ELResolver for
Programmatic Access_ . This instance must be returned from
_Application.getELResolver()_ and
_FacesContext.getELContext().getELResolver()_ _._ It also shows the
order in which they must be added. [P1-state there are 12 methods in the
below tables that can be tested for assertion. The remainder of the
section is covered by the tests in 5.6.1][P1-end]

[#50638862_pgfId-1022252]## 

======= [#50638862_pgfId-1014912]##[#50638862_77088]## _ELResolver_ for Facelets and Programmatic Access

[#50638862_pgfId-1014913]## 

image:JSF-27.gif[image]

[#50638862_pgfId-1014901]##The semantics of each _ELResolver_ are given
below, either in tables that describe what must be done to implement
each particular method on _ELResolver_ , in prose when such a table is
inappropriate, or as a reference to another section where the semantics
are exactly the same.

===== [#50638862_pgfId-1010630]##[#50638862_50118]##Implicit Object ELResolver for Facelets and Programmatic Access

[#50638862_pgfId-1010682]##This resolver differs from the one in the
link:JSF.htm#50638862_28092[See Faces Implicit Object ELResolver For
JSP] in that it must resolve all of the implicit objects, not just
_facesContext_ and _view_

======= [#50638862_pgfId-1010672]##[#50638862_99977]##ImplicitObjectELResolver for Programmatic Access

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1010633]##ELResolver method
|[#50638862_pgfId-1010635]##implementation requirements
|[#50638862_pgfId-1010637]## _getValue_ a|
[#50638862_pgfId-1010639]##If base is non-null, return null.

[#50638862_pgfId-1010640]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1010641]##If base is null and property is a String
equal to _implicitObject_ , call setPropertyResolved(true) on the
argument ELContext and return _result_ , where _implicitObject_ and
_result_ are as follows:

[#50638862_pgfId-1010710]## 

[#50638862_pgfId-1010711]## _implicitObject_ -> _result_

[#50638862_pgfId-1010745]##application -> externalContext.getContext()

[#50638862_pgfId-1010746]##applicationScope ->
externalContext.getApplicationMap()

[#50638862_pgfId-1010718]##cookie ->
externalContext.getRequestCookieMap()

[#50638862_pgfId-1010719]##facesContext -> the FacesContext for this
request

{empty}[#50638862_pgfId-1015417]##component -> the top of the stack of
UIComponent instances, as pushed via calls to
UIComponent.pushComponentToEL(). See link:JSF.htm#50638851_84171[See
Lifecycle Management Methods]

[#50638862_pgfId-1017348]##flowScope -> +
facesContext.getApplication().getFlowHandler(). +
getCurrentFlowScope().

[#50638862_pgfId-1016490]##cc -> the current composite component
relative to the declaring page in which the expression appears.

[#50638862_pgfId-1016520]##flash -> externalContext.getFlash()

[#50638862_pgfId-1010720]##header ->
externalContext.getRequestHeaderMap()

[#50638862_pgfId-1010796]##headerValues ->
externalContext.getRequestHeaderValuesMap()

[#50638862_pgfId-1010753]##initParam ->
externalContext.getInitParameterMap()

[#50638862_pgfId-1010722]##param ->
externalContext.getRequestParameterMap()

[#50638862_pgfId-1010723]##paramValues ->
externalContext.getRequestParameterValuesMap()

[#50638862_pgfId-1010812]##request -> externalContext.getRequest()

[#50638862_pgfId-1010813]##requestScope ->
externalContext.getRequestMap()

[#50638862_pgfId-1015416]##resource ->
facesContext.getApplication().getResourceHandler()

[#50638862_pgfId-1010724]##session -> externalContext.getSession()

[#50638862_pgfId-1010786]##sessionScope ->
externalContext.getSessionMap()

[#50638862_pgfId-1010725]##view -> facesContext.getViewRoot()

[#50638862_pgfId-1015410]##viewScope ->
facesContext.getViewRoot().getViewMap()

[#50638862_pgfId-1015051]##resource ->
facesContext.getApplication().getResourceHandler()

[#50638862_pgfId-1011931]## 

[#50638862_pgfId-1011939]##If base is null, and property doesn’t match
one of the above _implicitObjects,_ return null.

|[#50638862_pgfId-1010644]## _getType_ a|
[#50638862_pgfId-1010646]##If base is non-null, return null.

[#50638862_pgfId-1010647]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1012231]##If base is null and property is a String
equal to “application”, “component”, “cc”, “cookie”, “facesContext”,
“header”, “headerValues”, “initParam”, “param”, “paramValues”,
“request”, “resource”, “session”, or “view”, _call
setPropertyResolved(true) on the argument ELContext and return null to
indicate that no types are accepted to setValue() for these attributes_
.

[#50638862_pgfId-1012232]##If base is null and property is a String
equal to “requestScope”, “sessionScope”, or “applicationScope”, _call
setPropertyResolved(true) on the argument ELContext and return null._

[#50638862_pgfId-1010821]##Otherwise, null;

|[#50638862_pgfId-1010650]## _setValue_ a|
[#50638862_pgfId-1010652]##If base is non-null, return null.

[#50638862_pgfId-1010653]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1010654]##If base is null and property is a String
equal to

[#50638862_pgfId-1012662]##“applicationScope”, “requestScope”,
“sessionScope”, “application”, “component”, “cc”, “cookie”,
“facesContext”, “header”, “headerValues”, “initParam”, “param”,
“paramValues”, “request”, “resource”, “session”, or “view”, _throw
javax.el.PropertyNotWriteableException, since these implicit objects are
read-only_ .

[#50638862_pgfId-1015628]##Otherwise return null.

|[#50638862_pgfId-1010656]## _isReadOnly_ a|
[#50638862_pgfId-1010658]##If base is non-null, return (or false if the
method returns boolean).

[#50638862_pgfId-1010659]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1010660]##If base is null and property is a String
equal to “applicationScope”, “component”, “cc”, “requestScope”,
“sessionScope”, “application”, “cookie”, “facesContext”, “header”,
“headerValues”, “initParam”, “param”, “paramValues”, “request”,
“resource”, “session”, or “view”, _call setPropertyResolved(true) on the
argument ELContext and return true._

[#50638862_pgfId-1015629]##Otherwise return null.

|[#50638862_pgfId-1010663]## _getFeatureDescriptors_ a|
[#50638862_pgfId-1010665]##If base is non-null, return null.

[#50638862_pgfId-1010666]##If base is null, return an Iterator
containing 17 java.beans.FeatureDescriptor instances, one for eath of
the following properties: application, component, cc, cookie,
facesContext, header, headerValues, initParam, param, paramValues,
request, resource, session, view, applicationScope, sessionScope, and
requestScope. It is required that all of these FeatureDescriptor
instances set Boolean.TRUE as the value of the
ELResolver.RESOLVABLE_AT_DESIGN_TIME attribute. For the name and short
of FeatureDescriptor, return the implicit object name. The appropriate
Class must be stored as the value of the ELResolver.TYPE attribute as
follows:

[#50638862_pgfId-1012343]## 

[#50638862_pgfId-1012289]##implicitObject -> ELResolver.TYPE value

[#50638862_pgfId-1012273]##application -> Object.class

[#50638862_pgfId-1012274]##applicationScope -> Map.class

[#50638862_pgfId-1015463]##component -> UIComponent.class

[#50638862_pgfId-1015975]##cc -> UIComponent.class

[#50638862_pgfId-1012297]##cookie -> Map.class

[#50638862_pgfId-1012306]##facesContext -> FacesContext.class

[#50638862_pgfId-1012303]##header -> Map.class

[#50638862_pgfId-1012309]##headerValues -> Map.class

[#50638862_pgfId-1012279]##initParam -> Map.class

[#50638862_pgfId-1012280]##param -> Map.class

[#50638862_pgfId-1012281]##paramValues -> Map.class

[#50638862_pgfId-1012282]##request -> Object.class

[#50638862_pgfId-1015144]##resource -> Object.class

[#50638862_pgfId-1012283]##requestScope -> Map.class

[#50638862_pgfId-1012284]##session -> Object.class

[#50638862_pgfId-1012285]##sessionScope -> Map.class

[#50638862_pgfId-1012286]##view -> UIViewRoot.class

[#50638862_pgfId-1012342]## 

[#50638862_pgfId-1012271]##The shortDescription must be a suitable
description depending on the implementation. The expert and hidden
properties must be false. The preferred property must be true.

|[#50638862_pgfId-1010668]## _getCommonPropertyType_ a|
[#50638862_pgfId-1011971]##If base is non-null, return null.

[#50638862_pgfId-1010671]##If base is null and return String.class

|===

===== [#50638862_pgfId-1010625]##[#50638862_54925]##Composite Component Attributes ELResolver

[#50638862_pgfId-1016116]##This ELResolver makes it so expressions that
refer to the attributes of a composite component get correctly
evaluated. For example, the expression _#\{cc.attrs.usernameLabel}_
says, “find the current composite component, call its _getAttributes()_
method, within the returned _Map_ look up the value under the key
“usernameLable”. If the value is a _ValueExpression_ , call _getValue()_
on it and the result is returned as the evaluation of the expression.
Otherwise, if the value is _not_ a _ValueExpression_ the value itself is
returned as the evaluation of the expression.”

======= [#50638862_pgfId-1016209]##Composite Component Attributes ELResolver

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1016119]##ELResolver method
|[#50638862_pgfId-1016121]##implementation requirements
|[#50638862_pgfId-1016123]## _getValue_ a|
[#50638862_pgfId-1016427]##If base is non-null, is an instance of
UIComponent, is a composite component, and property is non-null and is
equal to the string “attrs”, return a Map implementation with the
following characteristics.

[#50638862_pgfId-1016428]##Wrap the attributes map of the composite
component and delegate all calls to the composite component attributes
map with the following exceptions:

[#50638862_pgfId-1016556]##get(), put(), and containsKey() are required
to be supported.

[#50638862_pgfId-1016224]##get(): if the result of calling get() on the
component attributes map is null, and a default value was declared in
the composite component metadata, the value will be a ValueExpression.
Evaluate it and return it. Otherwise, simply return the value from the
component attributes map.

[#50638862_pgfId-1016225]##put(): Call getValueExpression() on the
component. If this returns non-null, call setValue() on it, passing the
value argument as the last argument. Otherwise, simply call through to
put on the component attributes map.

[#50638862_pgfId-1016624]##containsKey(): If the attributes map contains
the key, return true. Otherwise, if a default value has been declared
for the attribute, return true. Otherwise, return false.

[#50638862_pgfId-1016435]##The Map implementation must also implement
the interface

[#50638862_pgfId-1016469]##javax.faces.el.CompositeComponentExpressionHolder.

[#50638862_pgfId-1016129]##Otherwise, take no action.

|[#50638862_pgfId-1016156]## _getType_ |[#50638862_pgfId-1016158]##If
the base argument to getType() is not an instance of the composite
component attributes map or the property argument to getType() is not an
instance of java.lang.String, return null. Otherwise, check the top
level component's ValueExpression collection for an expression under the
name given by the property argument to getType(). If the expression
exists, call getType() on the expression. If the property argument to
getType() is not empty, search the composite component's metadata for a
declared type on a <composite:attribute> whose name matches the property
argument to getType(). If the expression and the metadata both yield
results, the metadata takes precedence ONLY if it provides a narrower
result than does the expression, i.e. expression type is assignable from
metadata type. If the metadata result does take precedence, call
ELContext.setPropertyResolved(true). Otherwise, return whichever result
was available, or null.

|[#50638862_pgfId-1016164]## _setValue_ |[#50638862_pgfId-1016166]##Take
no action.

|[#50638862_pgfId-1016172]## _isReadOnly_
|[#50638862_pgfId-1016177]##Take no action and return true.

|[#50638862_pgfId-1016179]## _getFeatureDescriptors_
|[#50638862_pgfId-1016195]##Take no action.

|[#50638862_pgfId-1016205]## _getCommonPropertyType_
|[#50638862_pgfId-1016207]##Return String.class
|===

[#50638862_pgfId-1016210]## 

===== [#50638862_pgfId-1015976]##The CompositeELResolver

[#50638862_pgfId-1010922]##As indicated in
_link:JSF.htm#50638862_77088[See ELResolver for Facelets and
Programmatic Access]_ , following the ImplicitObjectELResolver, the
semantics obtained by adding a _CompositeELResolver_ must be inserted
here. This _ELResolver_ contains the following _ELResolvers_ , described
in the referenced sections.

[#50638862_pgfId-1010932]## _link:JSF.htm#50638862_17055[See ELResolvers
in the application configuration resources]_

[#50638862_pgfId-1012374]## _link:JSF.htm#50638862_93305[See
VariableResolver Chain Wrapper]_

[#50638862_pgfId-1012377]## _link:JSF.htm#50638862_64880[See
PropertyResolver Chain Wrapper]_

[#50638862_pgfId-1012380]## _link:JSF.htm#50638862_79758[See ELResolvers
from Application.addELResolver()]_

===== [#50638862_pgfId-1010952]##ManagedBean ELResolver

[#50638862_pgfId-1010959]##This resolver has the same semantics as the
one in _link:JSF.htm#50638862_68347[See ManagedBean ELResolver]_ .

===== [#50638862_pgfId-1015060]##[#50638862_80045]##Resource ELResolver

[#50638862_pgfId-1015061]##This resolver is a means by which Resource
instances are encoded into a faces request such that a subsequent faces
resource request from the browser can be satisfied using the
ResourceHandler as described in _link:JSF.htm#50638877_44233[See
Resource Handling]_ .

======= [#50638862_pgfId-1015112]##ResourceELResolver

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1015067]##ELResorver method
|[#50638862_pgfId-1015069]##implementation requirements
|[#50638862_pgfId-1015071]## _getValue_ a|
[#50638862_pgfId-1015073]##If base and property are not null, and base
is an instance of ResourceHandler (as will be the case with an
expression such as #\{resource[‘ajax.js’]}, perform the following.
(Note: This is possible due to the ImplicitObjectELResolver returning
the ResourceHandler, see link:JSF.htm#50638862_50118[See Implicit Object
ELResolver for Facelets and Programmatic Access])

[#50638862_pgfId-1015074]##If _property_ does not contain a colon
character ‘:’, treat _property_ as the _resourceName_ and pass
_property_ to _ResourceHandler.createResource(_ _resourceName_ _)_ .

[#50638862_pgfId-1015075]##If _property_ contains a single colon
character ‘:’, treat the content before the ‘:’ as the _libraryName_ and
the content after the ‘:’ as the _resourceName_ and pass both to
_ResourceHandler.createResource(_ _resourceName, libraryName)_ . If the
value of _libraryName_ is the literal string “this” (without the
quotes), discover the library name of the current resource (or the
contract name of the current resource, the two are mutually exclusive)
and replace “this” with that library name (or contract name) before
calling _ResourceHandler.createResource()_ . In the case of resource
library contracts, _libraryName_ will actually be the contract name.

[#50638862_pgfId-1015076]##If _property_ contains more than one colon
character ‘:’, throw a localized _ELException_ , including _property_ .
__

[#50638862_pgfId-1015077]##If one of the above steps results in the
creation of a non-null Resource instance, call
ELContext.setPropertyResolved(true). Call the getRequestPath() method on
the Resource instance, pass the result through
ExternalContext.encodeResourceUrl() and return the result.

|[#50638862_pgfId-1015087]## _getType_
|[#50638862_pgfId-1015090]##Return null. This resolver only performs
lookups.

|[#50638862_pgfId-1015092]## _setValue_ |[#50638862_pgfId-1015095]##Take
no action.

|[#50638862_pgfId-1015097]## _isReadOnly_
|[#50638862_pgfId-1015101]##Return false in all cases.

|[#50638862_pgfId-1015103]## _getFeatureDescriptors_
|[#50638862_pgfId-1015106]##Return null.

|[#50638862_pgfId-1015108]## _getCommonPropertyType_ a|
[#50638862_pgfId-1015110]##If base is non-null, return null.

[#50638862_pgfId-1015111]##If base is null, return Object.class.

|===

[#50638862_pgfId-1015057]## 

===== [#50638862_pgfId-1012949]##[#50638862_73834]##el.ResourceBundleELResolver

[#50638862_pgfId-1012953]##This entry in the chain must have the
semantics the same as the class _javax.el.ResourceBundleELResolver_ .
The default implementation just includes an instance of this resolver in
the chain.

===== [#50638862_pgfId-1012957]##[#50638862_10282]##ResourceBundle ELResolver for Programmatic Access

[#50638862_pgfId-1012961]##This resolver has the same semantics as the
one in link:JSF.htm#50638862_48536[See ResourceBundle ELResolver for JSP
Pages].

===== [#50638862_pgfId-1010990]##[#50638862_38613]##Stream, StaticField, Map, List, Array, and Bean ELResolvers

[#50638862_pgfId-1010994]##These ELResolver instances are provided by
the Unified EL API and must be added in the following order:

{empty}[#50638862_pgfId-1018855]##[P1-start_EL_3_0] If running on a
container that supports EL 3.0: The return from
_ExpressionFactory.getStreamELResolver_ ,
_javax.el.StaticFieldELResolver_ . [P1-end_EL_3_0]

[#50638862_pgfId-1018851]## _javax.el.MapELResolver,
javax.el.ListELResolver, javax.el.ArrayELResolver,
javax.el.BeanELResolver_ . These actual ELResolver instances must be
added. It is not compliant to simply add other resolvers that preserve
these semantics.

===== [#50638862_pgfId-1010995]##[#50638862_81269]##ScopedAttribute ELResolver

[#50638862_pgfId-1010999]##This ELResolver is responsible for doing the
scoped lookup that makes it possible for expressions to pick up anything
stored in the request, session, or application scopes by name.

======= [#50638862_pgfId-1011045]##Scoped Attribute ELResolver

[width="100%",cols="50%,50%",options="header",]
|===
|[#50638862_pgfId-1011006]##ELResorver method
|[#50638862_pgfId-1011008]##implementation requirements
|[#50638862_pgfId-1011010]## _getValue_ a|
[#50638862_pgfId-1011012]##If base is non-null, return null.

[#50638862_pgfId-1011013]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1018459]##Use the argument property as the key in a
call to externalContext.getRequestMap().get(). If this returns non-null,
call setPropertyResolved(true) on the argument ELContext and return the
value.

[#50638862_pgfId-1018465]##Use the argument property as the key in a
call to facesContext.getViewRoot().getViewMap().get() (accounting for
the potential for null returns safely). If this returns non-null, call
setPropertyResolved(true) on the argument ELContext and return the
value.

[#50638862_pgfId-1011068]##Use the argument property as the key in a
call to externalContext.getSessionMap().get(). If this returns non-null,
call setPropertyResolved(true) on the argument ELContext and return the
value.

[#50638862_pgfId-1011075]##Use the argument property as the key in a
call to externalContext.getApplicationMap().get(). If this returns
non-null, call setPropertyResolved(true) on the argument ELContext and
return the value.

[#50638862_pgfId-1011082]##Otherwise call setPropertyResloved(true) and
return null;

|[#50638862_pgfId-1011017]## _getType_ a|
[#50638862_pgfId-1011019]##If base is non-null, return null.

[#50638862_pgfId-1011020]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1011021]##Otherwise, setPropertyResolved(true) and
return Object.class to indicate that any type is permissable to pass to
a call to setValue().

|[#50638862_pgfId-1011023]## _setValue_ a|
[#50638862_pgfId-1011025]##If base is non-null, return null.

[#50638862_pgfId-1011026]##If base is null and property is null, throw
PropertyNotFoundException.

[#50638862_pgfId-1011027]##Consult the Maps for the request, session,
and application, in order, looking for an entry under the key property.
If found, replace that entry with argument value. If not found, call
externalContext.getRequestMap().put(property, value).

[#50638862_pgfId-1012002]##Call setPropertyResolved(true) and return;

|[#50638862_pgfId-1011029]## _isReadOnly_ a|
[#50638862_pgfId-1011031]##If base is false, setPropertyResolved(true)
return false;

[#50638862_pgfId-1012005]##Otherwise, return false;

|[#50638862_pgfId-1011036]## _getFeatureDescriptors_ a|
[#50638862_pgfId-1011038]##If base is non-null, return null.

[#50638862_pgfId-1011039]##If base is null, return an Iterator of
java.beans.FeatureDescriptor instances for all attributes in all scopes.
The FeatureDescriptor name and shortName is the name of the scoped
attribute. The actual runtime type of the attribute must be stored as
the value of the ELResolver.TYPE attribute. Boolean.TRUE must be set as
the value of the ELResolver.RESOLVABLE_AT_DESIGN_TIME attribute. The
shortDescription must be a suitable description depending on the
implementation. The expert and hidden properties must be false. The
preferred property must be true.

|[#50638862_pgfId-1011041]## _getCommonPropertyType_ a|
[#50638862_pgfId-1011043]##If base is non-null, return null.

[#50638862_pgfId-1011044]##If base is null return String.class.

|===

==== [#50638862_pgfId-1011002]##[#50638862_41438]##CDI for EL Resolution

[#50638862_pgfId-1022280]##If the any of the managed beans in the
application have the _@javax.faces.annotation.FacesConfig_ annotation,
the ImplicitObjectELResolver from link:JSF.htm#50638862_50118[See
Implicit Object ELResolver for Facelets and Programmatic Access] is not
present in the chain. Instead, CDI is used to perform EL resolution in
the same manner is in link:JSF.htm#50638862_99977[See
ImplicitObjectELResolver for Programmatic Access] with the following
additional implicit objects:

[#50638862_pgfId-1022617]## _externalContext_

[#50638862_pgfId-1022637]##the current _ExternalContext_ from the
current _FacesContext_

=== [#50638862_pgfId-1014685]##

image:JSF-25.gif[image]

Current Expression Evaluation APIs

==== [#50638862_pgfId-1011167]##ELResolver

[#50638862_pgfId-1011183]##This class is the Unified EL’s answer to
Faces’s _VariableResolver_ and _PropertyResolver_ . It turns out that
variable resolution can be seen as a special case of property resolution
with the base object being _null_ . Please see
_link:JSF.htm#50638862_99192[See ELResolver]_ for more details _._

==== [#50638862_pgfId-1011171]##ValueExpression

[#50638862_pgfId-1022847]##This class is the Unified EL’s answer to
Faces’s _ValueBinding_ . It is the main object oriented abstraction for
al EL expression that results in a value either being retrieved or set.
Please see Chapter 2 of the Expression Language Specification, Version
2.1.

==== [#50638862_pgfId-1022848]##MethodExpression

[#50638862_pgfId-1011223]##This class is the Unified EL’s answer to
Faces’s _MethodBinding_ . It is the main object oriented abstraction for
al EL expression that results in a method being invoked. Please see
Chapter 2 of the Expression Language Specification, Version 2.1.

==== [#50638862_pgfId-1011179]##Expression Evaluation Exceptions

[#50638862_pgfId-1014690]##Four exception classes are defined to report
errors related to the evaluation of value exceptions:

[#50638862_pgfId-1014691]## _javax.el.ELException_ (which extends
_java.lang.Exception_ )—used to report a problem evaluating a value
exception dynamically.

[#50638862_pgfId-1014692]## _MethodNotFoundException_ (which extends
_javax.el.ELException_ )—used to report that a requested public method
does not exist in the context of evaluation of a method expression.

[#50638862_pgfId-1014693]## _javax.el.PropertyNotFoundException_ (which
extends _javax.el.ELException_ )—used to report that a requested
property does not exist in the context of evaluation of a value
expression.

[#50638862_pgfId-1011253]## _javax.el.PropertyNotWriteableException_
(which extends _javax.el.ELException_ )—used to indicate that the
requested property could not be written to when evaluating the
expression.

=== [#50638862_pgfId-1011132]##

image:JSF-25.gif[image]

Deprecated Expression Evaluation APIs

[#50638862_pgfId-1014703]##Applications written for version 1.0 and 1.1
of the Faces specification must continue to run in this version of the
specification. This means deprecated APIs. This section describes the
migration story for these APIs that implementations must follow to allow
1.0 and 1.1 based applications to run.

==== [#50638862_pgfId-1014705]##[#50638862_74815]##VariableResolver and the Default VariableResolver

[#50638862_pgfId-1014706]##User-provided VariableResolver instances will
still continue to work by virtue of _link:JSF.htm#50638862_93305[See
VariableResolver Chain Wrapper]_ . The decorator pattern described in
_link:JSF.htm#50638850_38316[See Delegating Implementation Support]_
must be supported. Users wishing to affect EL resolution are advised to
author a custom ELResolver instead. These will get picked up as
specified in _link:JSF.htm#50638862_17055[See ELResolvers in the
application configuration resources]_ .

[#50638862_pgfId-1010033]##The JSF implementation must provide a default
_VariableResolver_ implementation that gets the _ELContext_ from the
argument _FacesContext_ and calls _setPropertyResolved(false)_
on[#50638862_72052]## it

[#50638862_pgfId-1014721]##The _VariableResolver_ chain is no longer
accessible from _Application.getVariableResolver()_ . The chain must be
kept in an implementation dependent manner, but accessible to the
ELResolver described in _link:JSF.htm#50638862_93305[See
VariableResolver Chain Wrapper]_ .

==== [#50638862_pgfId-1014726]##[#50638862_15408]##PropertyResolver and the Default PropertyResolver

[#50638862_pgfId-1014727]##User-provided propertyResolver instances will
still continue to work by virtue of _link:JSF.htm#50638862_93305[See
VariableResolver Chain Wrapper]_ . The decorator pattern described in
_link:JSF.htm#50638850_38316[See Delegating Implementation Support]_
must be supported. Users wishing to affect EL resolution are advised to
author a custom ELResolver instead. These will get picked up as
specified in _link:JSF.htm#50638862_17055[See ELResolvers in the
application configuration resources]_ .

[#50638862_pgfId-1010437]##The JSF implementation must provide a default
_propertyResolver_ implementation that gets the _ELContext_ from the
argument _FacesContext_ and calls _setPropertyResolved(false)_ on it.

[#50638862_pgfId-1014742]##The _PropertyResolver_ chain is no longer
accessible from _Application.getpropertyResolver()_ . The chain must be
kept in an implementation dependent manner, but accessible to to the
ELResolver described in _link:JSF.htm#50638862_64880[See
PropertyResolver Chain Wrapper]_ .

==== [#50638862_pgfId-1014747]##[#50638862_51501]##ValueBinding

[#50638862_pgfId-1006644]##The _ValueBinding_ class encapsulates the
actual evaluation of a value binding. Instances of _ValueBinding_ for
specific references are acquired from the _Application_ instance by
calling the _createValueBinding_ method (see
link:JSF.htm#50638861_87499[See Acquiring ValueBinding Instances]).

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014754]##public Object getValue(FacesContext context)
throws EvaluationException, PropertyNotFoundException;
|===

[#50638862_pgfId-1014759]##Evaluate the value binding used to create
this _ValueBinding_ instance, relative to the specified _FacesContext_ ,
and return the referenced value.

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014762]##public void setValue(FacesContext context,
Object value) throws EvaluationException, PropertyNotFoundException;
|===

[#50638862_pgfId-1014763]##Evaluate the value binding used to create
this _ValueBinding_ instance, relative to the specified _FacesContext_ ,
and update the referenced value to the specified new value.

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014766]##public boolean isReadOnly(FacesContext
context) throws EvaluationException, PropertyNotFoundException;
|===

[#50638862_pgfId-1014767]##Evaluate the value binding used to create
this _ValueBinding_ instance, relative to the specified _FacesContext_ ,
and return _true_ if the corresponding property is known to be
immutable. Otherwise, return _false_ .

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014770]##public Class getType(FacesContext context)
throws EvaluationException, PropertyNotFoundException;
|===

[#50638862_pgfId-1014771]##Evaluate the value binding used to create
this _ValueBinding_ instance, relative to the specified _FacesContext_ ,
and return the _Class_ that represents the data type of the referenced
value, if it can be determined. Otherwise, return _null_ .

==== [#50638862_pgfId-1014773]##[#50638862_35971]##MethodBinding

[#50638862_pgfId-1014774]##The _MethodBinding_ class encapsulates the
actual evaluation of a method binding. Instances of _MethodBinding_ for
specific references are acquired from the _Application_ instance by
calling the _createMethodBinding()_ method. Note that instances of
_MethodBinding_ are immutable, and contain no references to a
_FacesContext_ (which is passed in as a parameter when the reference
binding is evaluated).

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014777]##public Object invoke(FacesContext context,
Object params[]) throws EvaluationException, MethodNotFoundException;
|===

[#50638862_pgfId-1014780]##Evaluate the method binding (see
link:JSF.htm#50638862_82897[See MethodExpression Syntax and Semantics])
and call the identified method, passing the specified parameters. Return
any value returned by the invoked method, or return _null_ if the
invoked method is of type _void_ .

[width="100%",cols="100%",]
|===
|[#50638862_pgfId-1014784]##public Class getType(FacesContext context)
throws MethodNotFoundException;
|===

[#50638862_pgfId-1003399]##Evaluate the method binding (see
link:JSF.htm#50638862_82897[See MethodExpression Syntax and Semantics])
and return the _Class_ representing the return type of the identified
method. If this method is of type _void_ , return _null_ instead.

==== [#50638862_pgfId-1014793]##Expression Evaluation Exceptions

[#50638862_pgfId-1014794]##Four exception classes are defined to report
errors related to the evaluation of value exceptions [Note that these
exceptions are deprecated]:

[#50638862_pgfId-1014795]## _EvaluationException_ (which extends
_FacesException_ )—used to report a problem evaluating a value exception
dynamically.

[#50638862_pgfId-1014796]## _MethodNotFoundException_ (which extends
_EvaluationException_ )—used to report that a requested public method
does not exist in the context of evaluation of a method expression.

[#50638862_pgfId-1014797]## _PropertyNotFoundException_ (which extends
_EvaluationException_ )—used to report that a requested property does
not exist in the context of evaluation of a value expression.

[#50638862_pgfId-1006698]## _ReferenceSyntaxException_ (which extends
_EvaluationException_ )—used to report a syntax error in a value
exception.

=== [#50638862_pgfId-1020122]##

image:JSF-25.gif[image]

[#50638862_65324]##CDI Integration

[#50638862_pgfId-1020145]##As of version 2.3 of this specification, JSF
must run in a container that supports CDI version 2.0. This requirement
allows CDI to provide all the functionality of the managed bean facility
from link:JSF.htm#50638862_57834[See The Managed Bean Facility] and
link:JSF.htm#50638862_25885[See Managed Bean Annotations] but in a
better integrated way with the rest of the Java EE platform. Delegating
these features to CDI allows them to evolve independently of JSF. The
remainder of this section specifies some details of CDI integration
pertinent to JSF.

==== [#50638862_pgfId-1020656]##[#50638862_61291]##JSF Objects Valid for @Inject Injection

[#50638862_pgfId-1020711]##It must be possible to inject the following
JSF objects into other objects using _@Inject_ .

====== [#50638862_pgfId-1020932]##Maps Returned by Various JSF Accessors

[#50638862_pgfId-1021012]##The annotations in package
_javax.faces.annotation_ are used to cause _@Inject_ injection of the
corresponding _Map_ into a field. Generics may be used.

====== [#50638862_pgfId-1021190]##JSF Objects

[#50638862_pgfId-1021213]##It must be possible to _@Inject_ the
following JSF and Java EE objects into CDI beans.

[#50638862_pgfId-1022048]## _javax.faces.application.ResourceHandler_

[#50638862_pgfId-1021988]##javax.faces.context.ExternalContext

[#50638862_pgfId-1022006]##javax.faces.context.FacesContext

[#50638862_pgfId-1022020]##javax.faces.context.Flash

[#50638862_pgfId-1021624]##javax.servlet.http. _HttpSession_

====== [#50638862_pgfId-1021321]##Support for Injection into JSF Managed Objects

[#50638862_pgfId-1021375]##It must be possible to use _@Inject_ when
specifying the following kinds of JSF managed objects.

[#50638862_pgfId-1021514]##Validators declared with @
_javax.faces.validator.FacesValidator(managed=”true”)_

[#50638862_pgfId-1021608]##Converters declared with @
_javax.faces.convert.FacesConverter(managed=”true”)_

[#50638862_pgfId-1021885]##FacesBehaviors declared with @
_javax.faces.component.behavior.FacesBehavior(managed=”true”)_

==== [#50638862_pgfId-1021959]##[#50638862_18430]##EL Resolution

[#50638862_pgfId-1021982]##The following implicit objects must be
resolved using CDI

[#50638862_pgfId-1022151]##application

[#50638862_pgfId-1022152]##cc

[#50638862_pgfId-1022153]##component

[#50638862_pgfId-1022154]##facesContext

[#50638862_pgfId-1022155]##flash

[#50638862_pgfId-1022156]##flowScope

[#50638862_pgfId-1022157]##header

[#50638862_pgfId-1022158]##headerValues

[#50638862_pgfId-1022159]##initParam

[#50638862_pgfId-1022160]##param

[#50638862_pgfId-1022161]##paramValues

[#50638862_pgfId-1022162]##session

[#50638862_pgfId-1022163]##view

[#50638862_pgfId-1022144]##viewScope

[#50638857_pgfId-1010958]##[#50638857_52390]## 

== [#50638857_pgfId-1010960]##

image:JSF-28.gif[image]

[#50638857_26989]##Per-Request State Information

image:JSF-29.gif[image]

[#50638857_pgfId-1008040]##During request processing for a JSF page, a
context object is used to represent request-specific information, as
well as provide access to services for the application. This chapter
describes the classes which encapsulate this contextual information.

=== [#50638857_pgfId-1008042]##

image:JSF-30.gif[image]

[#50638857_28153]##FacesContext

[#50638857_pgfId-1008043]##JSF defines the
_javax.faces.context.FacesContext_ abstract base class for representing
all of the contextual information associated with processing an incoming
request, and creating the corresponding response. A _FacesContext_
instance is created by the JSF implementation, prior to beginning the
request processing lifecycle, by a call to the _getFacesContext_ method
of _FacesContextFactory_ , as described in
link:JSF.htm#50638857_47678[See FacesContextFactory]. When the request
processing lifecycle has been completed, the JSF implementation will
call the _release_ method, which gives JSF implementations the
opportunity to release any acquired resources, as well as to pool and
recycle _FacesContext_ instances rather than creating new ones for each
request.

==== [#50638857_pgfId-1008052]##Application[#50638857_]##[#50638857_External Context]##

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008051]##public Application getApplication();
|===

{empty}[#50638857_pgfId-1008075]##[P1-start-application]The JSF
implementation must ensure that the _Application_ instance for the
current web application is available via this method, as a convenient
alternative to lookup via an _ApplicationFactory_ .[P1-end]

==== [#50638857_pgfId-1009156]##Attributes[#50638857_]##[#50638857_External Context]##

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1009155]##public Map<Object,Object> getAttributes();
|===

{empty}[#50638857_pgfId-1009157]##[P1-start-attributes]Return a mutable
_Map_ representing the attributes associated wth this _FacesContext_
instance. This _Map_ is useful to store attributes that you want to go
out of scope when the Faces lifecycle for the current request ends,
which is not always the same as the request ending, especially in the
case of _Servlet_ filters that are invoked after the Faces lifecycle for
this request completes. Accessing this _Map_ does not cause any events
to fire, as is the case with the other maps: for request, session, and
application scope.[P1-end]

==== [#50638857_pgfId-1008096]##[#50638857_57548]##ELContext

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008095]##public ELContext getELContext();
|===

[#50638857_pgfId-1006532]##Return the _ELContext_ instance for this
_FacesContext_ instance. This _ELContext_ instance has the same lifetime
and scope as the _FacesContext_ instance with which it is associated,
and may be created lazily the first time this method is called for a
given _FacesContext_ instance. [P1-start-elcontext]Upon creation of the
ELContext instance, the implementation must take the following action:

[#50638857_pgfId-1006536]##Call the
_ELContext.putContext(java.lang.Class, java.lang.Object)_ method on the
instance, passing in _FacesContext.class_ and the _this_ reference for
the _FacesContext_ instance itself.

{empty}[#50638857_pgfId-1006556]##If the _Collection_ returned by
_javax.faces.Application.getELContextListeners()_ is non-empty, create
an instance of _ELContextEvent_ and pass it to each _ELContextListener_
instance in the _Collection_ by calling the
_ELContextListener.contextCreated(javax.el.ELContextEvent)_
method.[P1-end]

==== [#50638857_pgfId-1008127]##[#50638857_82964]##ExternalContext

{empty}[#50638857_pgfId-1008154]##It is sometimes necessary to interact
with APIs provided by the containing environment in which the JavaServer
Faces application is running. In most cases this is the servlet API, but
it is also possible for a JavaServer Faces application to run inside of
a portlet. JavaServer Faces provides the _ExternalContext_ abstract
class for this purpose. [P1-start-externalContext]This class must be
implemented along with the _FacesContext_ class, and must be accessible
via the _getExternalContext_ method in _FacesContext_ .[P1-end]

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008136]##public ExternalContext getExternalContext();
|===

{empty}[#50638857_pgfId-1008155]##[P1-start externalContext during Init]
The default implementation must return a valid value when this method is
called during startup time. See the javadocs for this method for the
complete specification. [P1-end]

[#50638857_pgfId-1008892]##The _ExternalContext_ instance provides
immediate access to all of the components defined by the containing
environment (servlet or portlet) within which a JSF-based web
application is deployed. The following table lists the container objects
available from _ExternalContext_ . Note that the Access column refers to
whether the returned object is mutable. None of the properties may be
set through _ExternalContext_ . itself.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638857_pgfId-1008158]##Name |[#50638857_pgfId-1008160]##Access
|[#50638857_pgfId-1008162]##Type |[#50638857_pgfId-1008164]##Description
|[#50638857_pgfId-1008166]## _applicationMap_
|[#50638857_pgfId-1008168]##RW |[#50638857_pgfId-1008170]##
_java.util.Map_ |[#50638857_pgfId-1008172]##The application context
attributes for this application.

|[#50638857_pgfId-1008174]## _authType_ |[#50638857_pgfId-1008176]##RO
|[#50638857_pgfId-1008178]## _String_ |[#50638857_pgfId-1008180]##The
method used to authenticate the currently logged on user (if any).

|[#50638857_pgfId-1008182]## _context_ |[#50638857_pgfId-1008184]##RW
|[#50638857_pgfId-1008186]## _Object_ |[#50638857_pgfId-1008188]##The
application context object for this application.

|[#50638857_pgfId-1008190]## _initParameterMap_
|[#50638857_pgfId-1008192]##RO |[#50638857_pgfId-1008194]##
_java.util.Map_ |[#50638857_pgfId-1008196]##The context initialization
parameters for this application

|[#50638857_pgfId-1008198]## _remoteUser_ |[#50638857_pgfId-1008200]##RO
|[#50638857_pgfId-1008202]## _String_ |[#50638857_pgfId-1008204]##The
login name of the currently logged in user (if any).

|[#50638857_pgfId-1008206]## _request_ |[#50638857_pgfId-1008208]##RW
|[#50638857_pgfId-1008210]## _Object_ |[#50638857_pgfId-1008212]##The
request object for this request.

|[#50638857_pgfId-1008214]## _requestContextPath_
|[#50638857_pgfId-1008216]##RO |[#50638857_pgfId-1008218]## _String_
|[#50638857_pgfId-1008220]##The context path for this application.

|[#50638857_pgfId-1008222]## _requestCookieMap_
|[#50638857_pgfId-1008224]##RO |[#50638857_pgfId-1008226]##
_java.util.Map_ |[#50638857_pgfId-1008228]##The cookies included with
this request.

|[#50638857_pgfId-1008230]## _requestHeaderMap_
|[#50638857_pgfId-1008232]##RO |[#50638857_pgfId-1008234]##
_java.util.Map_ |[#50638857_pgfId-1008236]##The HTTP headers included
with this request (value is a String).

|[#50638857_pgfId-1008238]## _requestHeaderValuesMap_
|[#50638857_pgfId-1008240]##RO |[#50638857_pgfId-1008242]##
_java.util.Map_ |[#50638857_pgfId-1008244]##.The HTTP headers included
with this request (value is a String array).

|[#50638857_pgfId-1008246]## _requestLocale_
|[#50638857_pgfId-1008248]##RW |[#50638857_pgfId-1008250]##
_java.util. +
Locale_ |[#50638857_pgfId-1008252]##The preferred Locale for this
request.

|[#50638857_pgfId-1008254]## _requestLocales_
|[#50638857_pgfId-1008256]##RW |[#50638857_pgfId-1008258]##
_java.util. +
Iterator_ |[#50638857_pgfId-1008260]##The preferred Locales for this
request, in descending order of preference.

|[#50638857_pgfId-1008262]## _requestMap_ |[#50638857_pgfId-1008264]##RW
|[#50638857_pgfId-1008266]## _java.util.Map_
|[#50638857_pgfId-1008268]##The request scope attributes for this
request.

|[#50638857_pgfId-1008270]## _requestParameterMap_
|[#50638857_pgfId-1008272]##RO |[#50638857_pgfId-1008274]##
_java.util.Map_ |[#50638857_pgfId-1008276]##The request parameters
included in this request (value is a String).

|[#50638857_pgfId-1008278]## _requestParameterNames_
|[#50638857_pgfId-1008280]##RO |[#50638857_pgfId-1008282]## _Iterator_
|[#50638857_pgfId-1008284]##The set of request parameter names included
in this request.

|[#50638857_pgfId-1008286]## _requestParameterValuesMap_
|[#50638857_pgfId-1008288]##RO |[#50638857_pgfId-1008290]##
_java.util.Map_ |[#50638857_pgfId-1008292]##The request parameters
included in this request (value is a String array).

|[#50638857_pgfId-1008294]## _requestPathInfo_
|[#50638857_pgfId-1008296]##RO |[#50638857_pgfId-1008298]## _String_
|[#50638857_pgfId-1008300]##The extra path information from the request
URI for this request.

|[#50638857_pgfId-1008302]## _requestServletPath_
|[#50638857_pgfId-1008304]##RO |[#50638857_pgfId-1008306]## _String_
|[#50638857_pgfId-1008308]##The servlet path information from the
request URI for this request.

|[#50638857_pgfId-1008310]## _response_ |[#50638857_pgfId-1008312]##RW
|[#50638857_pgfId-1008314]## _Object_ |[#50638857_pgfId-1008316]##The
response object for the current request.

|[#50638857_pgfId-1008318]## _sessionMap_ |[#50638857_pgfId-1008320]##RW
|[#50638857_pgfId-1008322]## _java.util.Map_
|[#50638857_pgfId-1008324]##The session scope attributes for this
requestlink:#pgfId-1008327[5].

|[#50638857_pgfId-1008329]## _userPrincipal_
|[#50638857_pgfId-1008331]##RO |[#50638857_pgfId-1008333]##
_java.security.Principal_ |[#50638857_pgfId-1008335]##The Principal
object containing the name of the currently logged on user (if any).
|===

[#50638857_pgfId-1008884]##See the JavaDocs for the normative
specification.

===== [#50638857_pgfId-1010821]##Flash

[#50638857_pgfId-1010822]##The _Flash_ provides a way to pass temporary
objects between the user views generated by the faces lifecycle.
Anything one places in the flash will be exposed to the next view
encountered by the same user session and then cleared out..

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638857_pgfId-1010825]##Name |[#50638857_pgfId-1010827]##Access
|[#50638857_pgfId-1010829]##Type |[#50638857_pgfId-1010831]##Description
|[#50638857_pgfId-1010833]## _flash_ |[#50638857_pgfId-1010835]##R
|[#50638857_pgfId-1010837]## _Flash_ |[#50638857_pgfId-1010839]##See the
javadocs for the complete specification.
|===

[#50638857_pgfId-1010819]## 

==== [#50638857_pgfId-1008891]##ViewRoot

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008470]##public UIViewRoot getViewRoot();

[#50638857_pgfId-1008471]## 

[#50638857_pgfId-1008472]##public void setViewRoot(UIViewRoot root);

|===

[#50638857_pgfId-1008474]##During the _Restore View_ phase of the
request processing lifecycle, the state management subsystem of the JSF
implementation will identify the component tree (if any) to be used
during the inbound processing phases of the lifecycle, and call
_setViewRoot()_ to establish it.

==== [#50638857_pgfId-1008478]##Message Queue

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008477]##public void addMessage(String clientId,
FacesMessage message);
|===

[#50638857_pgfId-1008479]##During the _Apply Request Values_ , _Process
Validations_ , _Update Model Values_ , and _Invoke Application_ phases
of the request processing lifecycle, messages can be queued to either
the component tree as a whole (if _clientId_ is _null_ ), or related to
a specific component based on its client identifier.

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008482]##public Interator<String>
getClientIdsWithMessages();

[#50638857_pgfId-1008483]## 

[#50638857_pgfId-1008484]##public Severity getMaximumSeverity();

[#50638857_pgfId-1008485]## 

[#50638857_pgfId-1008486]##public Iterator<FacesMessage>
getMessages(String clientId);

[#50638857_pgfId-1008487]## 

[#50638857_pgfId-1008488]##public Iterator<FacesMessage> getMessages();

|===

[#50638857_pgfId-1008511]##[P1-start-messageQueue]The
_getClientIdsWithMessages()_ method must return an _Iterator_ over the
client identifiers for which at least one _Message_ has been queued.
This method must be implemented so the clientIds are returned in the
order of calls to _addMessage().[P1-end]_ The _getMaximumSeverity()_
method returns the highest severity level on any _Message_ that has been
queued, regardless of whether or not the message is associated with a
specific client identifier or not. The _getMessages(String)_ method
returns an _Iterator_ over queued _Message_ s, either those associated
with the specified client identifier, or those associated with no client
identifier if the parameter is _null_ . The _getMessages()_ method
returns an _Iterator_ over all queued _Messages_ , whether or not they
are associated with a particular client identifier. Both of the
_getMessage()_ variants must be implemented such that the messages are
returned in the order in which they were added via calls to
_addMessage()_ .

[#50638857_pgfId-1008515]##For more information about the _Message_
class, see link:JSF.htm#50638857_74571[See FacesMessage].

==== [#50638857_pgfId-1008519]##RenderKit

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008518]##public RenderKit getRenderKit();
|===

[#50638857_pgfId-1008520]##Return the _RenderKit_ associated with the
render kit identifier in the current _UIViewRoot_ (if any).

[#50638857_pgfId-1008521]## 

==== [#50638857_pgfId-1008532]##[#50638857_12181]##[#50638857_6.1.8 ResponseStream and ResponseWriter]##ResponseStream and ResponseWriter

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008525]##public ResponseStream getResponseStream();

[#50638857_pgfId-1008526]## 

[#50638857_pgfId-1008527]##public void setResponseStream(ResponseStream
responseStream);

[#50638857_pgfId-1008528]## 

[#50638857_pgfId-1008529]##public ResponseWriter getResponseWriter();

[#50638857_pgfId-1008530]## 

[#50638857_pgfId-1008531]##public void setResponseWriter(ResponseWriter
responseWriter);

[#50638857_pgfId-1009712]## 

[#50638857_pgfId-1009713]##public void enableResponseWriting(boolean
enable);

|===

[#50638857_pgfId-1008533]##JSF supports output that is generated as
either a byte stream or a character stream. _UIComponent_ s or
_Renderer_ s that wish to create output in a binary format should call
_getResponseStream()_ to acquire a stream capable of binary output.
Correspondingly, _UIComponent_ s or _Renderer_ s that wish to create
output in a character format should call _getResponseWriter()_ to
acquire a writer capable of character output.

[#50638857_pgfId-1008534]##Due to restrictions of the underlying servlet
APIs, either binary or character output can be utilized for a particular
response—they may not be mixed.

[#50638857_pgfId-1008538]##Please see link:JSF.htm#50638861_15560[See
ViewHandler] to learn when _setResponseWriter()_ and
_setResponseStream()_ are called.

[#50638857_pgfId-1009714]##The enableResponseWriting method is useful to
enable or disable the writing of content to the current _ResponseWriter_
instance in this FacesContext. [P1-start-enableWriting]If the enable
argument is false, content should not be written to the response if an
attempt is made to use the current _ResponseWriter._

==== [#50638857_pgfId-1008549]##[#50638857_15477]##Flow Control Methods

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008542]##public void renderResponse();

[#50638857_pgfId-1008543]## 

[#50638857_pgfId-1008544]##public void responseComplete();

[#50638857_pgfId-1008545]## 

[#50638857_pgfId-1008546]##public boolean getRenderResponse();

[#50638857_pgfId-1008547]## 

[#50638857_pgfId-1008548]##public boolean getResponseComplete();

|===

[#50638857_pgfId-1008550]##Normally, the phases of the request
processing lifecycle are executed sequentially, as described in
link:JSF.htm#50638877_40710[See Request Processing Lifecycle].” However,
it is possible for components, event listeners, and validators to affect
this flow by calling one of these methods.

[#50638857_pgfId-1008554]##The _renderResponse()_ method signals the JSF
implementation that, at the end of the current phase (in other words,
after all of the processing and event handling normally performed for
this phase is completed), control should be transferred immediately to
the _Render Response_ phase, bypassing any intervening phases that have
not yet been performed. For example, an event listener for a tree
control that was designed to process user interface state changes (such
as expanding or contracting a node) on the server would typically call
this method to cause the current page to be redisplayed, rather than
being processed by the application.

[#50638857_pgfId-1008555]##The _responseComplete()_ method, on the other
hand, signals the JSF implementation that the HTTP response for this
request has been completed by some means other than rendering the
component tree, and that the request processing lifecycle for this
request should be terminated when the current phase is complete. For
example, an event listener that decided an HTTP redirect was required
would perform the appropriate actions on the response object (i.e.
calling _ExternalContext.redirect()_ ) and then call this method.

{empty}[#50638857_pgfId-1008592]##In some circumstances, it is possible
that both _renderResponse()_ and _responseComplete()_ might have been
called for the request. [P1-start-flowControl]In this case, the JSF
implementation must respect the _responseComplete()_ call (if it was
made) before checking to see if _renderResponse()_ was called.[P1-end]

[#50638857_pgfId-1008593]##The _getRenderResponse()_ and
_getResponseComplete()_ methods allow a JSF-based application to
determine whether the renderResponse() or responseComplete() methods,
respectively, have been called already for the current request.

==== [#50638857_pgfId-1009219]##[#50638857_Partial Processing Constants And Methods]##Partial Processing Methods

[#50638857_pgfId-1009223]## 

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1009229]##public PartialViewContext
getPartialViewContext();
|===

{empty}[#50638857_pgfId-1009576]##[P1-start-getpartialViewContext]The
getPartialViewContext()method must return an instance of
PartialViewContext either by creating a new instance, or returning an
existing instance from the FacesContext.[P1-end-getpartialViewcontext]

==== [#50638857_pgfId-1010171]##[#50638857_Partial View Context]##Partial View Context

[#50638857_pgfId-1010130]##The PartialViewContext contains the
constants, properties and methods to facilitate partial view processing
and partial view rendering. Refer to
link:JSF.htm#50638885_Partial%20View%20Execute[See Partial View
Processing] and link:JSF.htm#50638885_Partial%20View%20Render[See
Partial View Rendering]. Refer to the JavaDocs for the
javax.faces.context.PartialViewContext class for method requirements.

==== [#50638857_pgfId-1008600]##[#50638857_66290]##Access To The Current FacesContext Instance

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008597]##public static FacesContext
getCurrentInstance();

[#50638857_pgfId-1008598]## 

[#50638857_pgfId-1008599]##protected static void
setCurrentInstance(FacesContext context);

|===

{empty}[#50638857_pgfId-1008637]##Under most circumstances, JSF
components, and application objects that access them, are passed a
reference to the _FacesContext_ instance for the current request.
However, in some cases, no such reference is available. The
_getCurrentInstance()_ method may be called by any Java class in the
current web application to retrieve an instance of the _FacesContext_
for this request. [P1-start-currentInstance]The JSF implementation must
ensure that this value is set correctly before _FacesContextFactory_
returns a _FacesContext_ instance, and that the value is maintained in a
thread-safe manner.[P1-end]

{empty}[#50638857_pgfId-1008878]##[P1-start facesContextDuringInit] The
default implementation must allow this method to be called during
application startup time, before any requests have been serviced. If
called during application startup time, the instance returned must have
the special properties as specified on the javadocs for
_FacesContext.getCurrentInstance()_ The . [P1-end]

==== [#50638857_pgfId-1008901]##[#50638857_59249]##CurrentPhaseId

[#50638857_pgfId-1008905]##The default lifecycle implementation is
responsible for setting the _currentPhaseId_ property on the
_FacesContext_ instance for this request, as specified in
link:JSF.htm#50638877_42543[See Standard Request Processing Lifecycle
Phases]. The following table describes this property.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638857_pgfId-1008916]##Name |[#50638857_pgfId-1008918]##Access
|[#50638857_pgfId-1008920]##Type |[#50638857_pgfId-1008922]##Description
|[#50638857_pgfId-1008924]## _currentPhaseId_
|[#50638857_pgfId-1008926]##RW |[#50638857_pgfId-1008928]## _PhaseId_
|[#50638857_pgfId-1008930]##The _PhaseId_ constant for the current phase
of the request processing lifecycle __
|===

==== [#50638857_pgfId-1008639]##[#50638857_32961]##ExceptionHandler

[#50638857_pgfId-1009925]##The _FacesContextFactory_ ensures that each
newly created _FacesContext_ instance is initialized with a fresh
instance of _ExceptionHandler_ , created from _ExceptionHandlerFactory_
.The following table describes this property.

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638857_pgfId-1009928]##Name |[#50638857_pgfId-1009930]##Access
|[#50638857_pgfId-1009932]##Type |[#50638857_pgfId-1009934]##Description
|[#50638857_pgfId-1009936]## _exceptionHandler_
|[#50638857_pgfId-1009938]##RW |[#50638857_pgfId-1009940]##
_ExceptionHandler_ |[#50638857_pgfId-1009942]##Set by
_FacesContextFactory.getFacesContext()_ , this class is the default
exception handler for any unexpected Exceptions that happen during the
Faces lifecycle. See the Javadocs for _ExceptionHandler_ for details.
|===

[#50638857_pgfId-1009944]##Please see link:JSF.htm#50638859_16974[See
PhaseListener] for the circumstances under which _ExceptionHandler_ is
used.

=== [#50638857_pgfId-1010216]##

image:JSF-30.gif[image]

[#50638857_91184]##ExceptionHandler

[#50638857_pgfId-1010220]## _ExceptionHandler_ is the central point for
handling _unexpected_ _Exceptions_ that are thrown during the Faces
lifecycle. The _ExceptionHandler_ must _not_ be notified of any
_Exceptions_ that occur during application startup or shutdown.

[#50638857_pgfId-1010252]##Several places in the Faces specification
require an _Exception_ to be thrown as a result of normal lifecycle
processing. [P1-start_expected_exceptions]The following expected
_Exception_ cases must not be handled by the ExceptionHandler.

[#50638857_pgfId-1010253]##All cases where a _ValidatorException_ is
specified to be thrown or caught

[#50638857_pgfId-1010264]##All cases where a _ConverterException_ is
specified to be thrown or caught

[#50638857_pgfId-1010282]##The case when a MissingResourceException is
thrown during the processing of the _<f:loadBundle />_ tag.

[#50638857_pgfId-1010790]##If an exception is thrown when the runtime is
processing the _@PreDestroy_ annotation on a managed bean.

[#50638857_pgfId-1010994]##All classes when an
_AbortProcessingException_ is thrown.

[#50638857_pgfId-1010287]##All other _Exception_ cases must not be
swallowed, and must be allowed to flow up to the _Lifecycle.execute_ ()
method where the individual lifecycle phases are implemented.
[P1-end_expected_exceptions] At that point, all _Exceptions_ are passed
to the _ExceptionHandler_ as described in
link:JSF.htm#50638859_16974[See PhaseListener].

[#50638857_pgfId-1010737]##Any code that is not a part of the core Faces
implementation may leverage the _ExceptionHandler_ in one of two ways.

==== [#50638857_pgfId-1010339]##Default ExceptionHandler implementation

[#50638857_pgfId-1010343]##The default ExceptionHandler must implement
the following behavior for each of its methods

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010347]##public ExceptionQueuedEvent
getHandledExceptionEvent();
|===

[#50638857_pgfId-1010362]##Return the first “handled”
_ExceptionQueuedEvent_ , that is, the one that was actually re-thrown.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010384]##public Iterable<ExceptionQueuedEvent>
getHandledExceptionEvents();
|===

[#50638857_pgfId-1010379]##The default implementation must return an
_Iterable_ over all _ExceptionEvents_ that have been handled by the
_handle()_ method.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010429]##public Throwable getRootCause(Throwable t);
|===

[#50638857_pgfId-1010423]##Unwrap the argument _t_ until the unwrapping
encounters an _Object_ whose _getClass()_ is not equal to
_FacesException.class_ or _javax.el.ELException.class_ . If there is no
root cause, _null_ is returned.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010419]##public Iterable<ExceptionQueuedEvent>
getUnhandledExceptionEvents();
|===

[#50638857_pgfId-1010500]##Return an _Iterable_ over all
_ExceptionEvents_ that have not yet been handled by the _handle()_
method.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010499]##public void handle() throws FacesException;
|===

[#50638857_pgfId-1010391]##Inspect all unhandled _ExceptionQueuedEvent_
instances in the order in which they were queued by calls to
_Application.publishEvent(ExceptionQueuedEvent.class, eventContext)_ .

[#50638857_pgfId-1010514]##For each _ExceptionQueuedEvent_ in the list,
call its _getContext()_ method and call _getException()_ on the returned
result. Upon encountering the first such _Exception_ the corresponding
_ExceptionQueuedEvent_ must be set so that a subsequent call to
_getHandledExceptionEvent()_ or _getHandledExceptionEvents()_ returns
that _ExceptionQueuedEvent_ instance. The implementation must also
ensure that subsequent calls to _getUnhandledExceptionEvents()_ do not
include that _ExceptionQueuedEvent_ instance. Let _toRethrow_ be either
the result of calling _getRootCause()_ on the _Exception_ , or the
_Exception_ itself, whichever is non- _null_ . Re-wrap _toThrow_ in a
_ServletException_ or ( _PortletException_ , if in a portlet
environment) and throw it, allowing it to be handled by any
_<error-page>_ declared in the web application deployment descriptor or
by the default error page as described elsewhere in this section.

[#50638857_pgfId-1010392]##There are two exceptions to the above
processing rules. In both cases, the _Exception_ must be logged and not
re-thrown.

[#50638857_pgfId-1010550]##If an unchecked _Exception_ occurs as a
result of calling a method annotated with _PreDestroy_ on a managed
bean.

[#50638857_pgfId-1010564]##If the _Exception_ originates inside the
_ELContextListener.removeElContextListener()_ method __

[#50638857_pgfId-1010393]##The _FacesException_ must be thrown if and
only if a problem occurs while performing the algorithm to handle the
_Exception_ , not as a means of conveying a handled Exception itself.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010589]##public boolean isListenerForSource(Object
source);
|===

[#50638857_pgfId-1010380]##The default implementation must return _true_
if and only if the source argument is an instance of
_ExceptionEventContext_ .

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010617]##public void processEvent(SystemEvent
ExceptionQueuedEvent) throws AbortProcessingException;
|===

[#50638857_pgfId-1010628]##The default implementation must store the
argument _ExceptionQueuedEvent_ in a strongly ordered queue for later
processing by the _handle()_ method. __

==== [#50638857_pgfId-1010594]##Backwards Compatible ExceptionHandler

[#50638857_pgfId-1010656]##[P1-startPreJsf2ExceptionHandler]The runtime
must provide an _ExceptionHandlerFactory_ implementation with the fully
qualified java classname of
_javax.faces.webapp.PreJsf2ExceptionHandlerFactory_ that creates
_ExceptionHandler_ instances that behave exactly like the default
_ExceptionHandler_ except that the _handle()_ method behaves as follows.

[#50638857_pgfId-1010657]##Versions of JSF prior to 2.0 stated in
link:JSF.htm#50638859_16974[See PhaseListener] “Any exceptions thrown
during the _beforePhase()_ listeners must be caught, logged, and
swallowed...Any exceptions thrown during the _afterPhase()_ liseteners
must be caught, logged, and swallowed.” The _PreJsf2ExceptionHandler_
restores this behavior for backwards compatibilty.

{empty}[#50638857_pgfId-1010658]##The implementation must allow users to
install this _ExceptionHandlerFactory_ into the application by nesting
_<exception-handler-factory>javax.faces.webapp.PreJsf2ExceptionHandlerFactory</exception-handler-factory>_
inside the <factory> element in the application configuration
resource.[P1-endPreJsf2ExceptionHandler]

==== [#50638857_pgfId-1010667]##Default Error Page

[#50638857_pgfId-1010668]##If no _<error-page>_ elements are declared in
the web application deployment descriptor, the runtime must provide a
default error page that contains the following information.

[#50638857_pgfId-1010669]##The stack trace of the _Exception_

[#50638857_pgfId-1010670]##The _UIComponent_ tree at the time the
_ExceptionQueuedEvent_ was handled.

[#50638857_pgfId-1010671]##All scoped variables in request, view,
session and application scope.

[#50638857_pgfId-1010672]##If the error happens during the execution of
the view declaration language page (VDL)

[#50638857_pgfId-1010673]##The physical file being traversed at the time
the _Exception_ was thrown, such as _/user.xhtml_

[#50638857_pgfId-1010674]##The line number within that physical file at
the time the _Exception_ was thrown

[#50638857_pgfId-1010675]##Any available error message(s) from the VDL
page, such as: “The prefix "foz" for element "foz:bear" is not bound.”

[#50638857_pgfId-1010676]##The viewId at the time the
_ExceptionQueuedEvent_ was handled

[#50638857_pgfId-1010652]##If _Application.getProjectStage()_ returns
_ProjectStage.Development_ , the runtime must guarantee that the above
debug information is available to be included in any Facelet based error
page using the _<ui:include />_ with a _src_ attribute equal to the
string “ _javax.faces.error.xhtml_ ”.

=== [#50638857_pgfId-1010374]##

image:JSF-30.gif[image]

[#50638857_74571]##FacesMessage

[#50638857_pgfId-1009946]##Each message queued within a _FacesContext_
is an instance of the _javax.faces.application.FacesMessage_ class. The
presence of one or more _FacesMessage_ instances on the _FacesContext_
indicates a failure of some kind during the lifecycle. In particular, a
validation or conversion failure is required to cause a _FacesMessage_
to be added to the _FacesContext_ . __

[#50638857_pgfId-1010949]##It offers the following constructors:

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1009949]##public FacesMessage();

[#50638857_pgfId-1009950]## 

[#50638857_pgfId-1009951]##public FacesMessage(String summary, String
detail);

[#50638857_pgfId-1009952]## 

[#50638857_pgfId-1009953]##public FacesMessage(Severity severity, String
summary, String detail);

|===

[#50638857_pgfId-1008648]##The following method signatures are supported
to retrieve and set the properties of the completed message:

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008651]##public String getDetail();

[#50638857_pgfId-1008652]##public void setDetail(String detail);

[#50638857_pgfId-1008653]## 

[#50638857_pgfId-1008654]##public Severity getSeverity();

[#50638857_pgfId-1008655]##public void setSeverity(Severity severity);

[#50638857_pgfId-1008656]## 

[#50638857_pgfId-1008657]##public String getSummary();

[#50638857_pgfId-1008658]##public void setSummary(String summary);

|===

[#50638857_pgfId-1008659]##The message properties are defined as
follows:

[#50638857_pgfId-1008660]## _detail_ —Localized detail text for this
_FacesMessage_ (if any). This will generally be additional text that can
help the user understand the context of the problem being reported by
this _FacesMessage_ , and offer suggestions for correcting it.

[#50638857_pgfId-1008661]## _severity_ —A value defining how serious the
problem being reported by this _FacesMessage_ instance should be
considered. Four standard severity values ( _SEVERITY_INFO_ ,
_SEVERITY_WARN_ , _SEVERITY_ERROR_ , and _SEVERITY_FATAL_ ) are defined
as a typesafe enum in the _FacesMessage_ class.

[#50638857_pgfId-1008662]## _summary_ —Localized summary text for this
_FacesMessage_ . This is normally a relatively short message that
concisely describes the nature of the problem being reported by this
_FacesMessage_ .

=== [#50638857_pgfId-1008663]##

image:JSF-30.gif[image]

ResponseStream

[#50638857_pgfId-1008664]## _ResponseStream_ is an abstract class
representing a binary output stream for the current response. It has
exactly the same method signatures as the _java.io.OutputStream_ class.

=== [#50638857_pgfId-1008666]##

image:JSF-30.gif[image]

[#50638857_12780]##ResponseWriter

[#50638857_pgfId-1008667]## _ResponseWriter_ is an abstract class
representing a character output stream for the current response. A
_ResponseWriter_ instance is obtained via a factory method on
_RenderKit._ Please see link:JSF.htm#50638855_48699[See RenderKit]”. It
supports both low-level and high level APIs for writing character based
information

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008673]##public void close() throws IOException;

[#50638857_pgfId-1008674]## 

[#50638857_pgfId-1008675]##public void flush() throws IOException;

[#50638857_pgfId-1008676]## 

[#50638857_pgfId-1008677]##public void write(char c[]) throws
IOException;

[#50638857_pgfId-1008678]## 

[#50638857_pgfId-1008679]##public void write(char c[], int off, int len)
throws IOException;

[#50638857_pgfId-1008680]## 

[#50638857_pgfId-1008681]##public void write(int c) throws IOException;

[#50638857_pgfId-1008682]## 

[#50638857_pgfId-1008683]##public void write(String s) throws
IOException;

[#50638857_pgfId-1008684]## 

[#50638857_pgfId-1008685]##public void write(String s, int off, int len)
throws IOException;

|===

[#50638857_pgfId-1010857]##The _ResponseWriter_ class extends
_java.io.Writer_ , and therefore inherits these method signatures for
low-level output. The _close()_ method flushes the underlying output
writer, and causes any further attempts to output characters to throw an
_IOException_ . The _flush_ method flushes any buffered information to
the underlying output writer, and commits the response. The _write_
methods write raw characters directly to the output writer.

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1010860]##public abstract String getContentType();

[#50638857_pgfId-1010861]##public abstract String
getCharacterEncoding();

|===

[#50638857_pgfId-1010874]##Return the content type or character encoding
used to create this ResponseWriter.

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1010872]##public void startCDATA();

[#50638857_pgfId-1010873]##public void endCDATA();

|===

[#50638857_pgfId-1010866]##Start and end an XML CDATA Section..

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1010864]##public void startDocument() throws
IOException;

[#50638857_pgfId-1010865]##public void endDocument() throws IOException;

|===

[#50638857_pgfId-1008696]##Write appropriate characters at the beginning
( _startDocument_ ) or end ( _endDocument_ ) of the current response.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008699]##public void startElement(String name,
UIComponent componentForElement) throws IOException;
|===

[#50638857_pgfId-1008700]##Write the beginning of a markup element (the
_<_ character followed by the element name), which causes the
_ResponseWriter_ implementation to note internally that the element is
open. This can be followed by zero or more calls to _writeAttribute_ or
_writeURIAttribute_ to append an attribute name and value to the
currently open element. The element will be closed (i.e. the trailing
_>_ added) on any subsequent call to _startElement_ (), _writeComment_
(), _writeText_ (), _endDocument_ (), _close()_ , _flush()_ , or
_write()_ . The _componentForElement_ parameter tells the
_ResponseWriter_ which _UIComponent_ this element corresponds to, if
any. This parameter may be null to indicate that the element has no
corresponding component. The presence of this parameter allows tools to
provide their own implementation of _ResponseWriter_ to allow the design
time environment to know which component corresponds to which piece of
markup.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008703]##public void endElement(String name) throws
IOException;
|===

[#50638857_pgfId-1008704]##Write a closing for the specified element,
closing any currently opened element first if necessary.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008707]##public void writeComment(Object comment)
throws IOException;
|===

[#50638857_pgfId-1008708]##Write a comment string wrapped in appropriate
comment delimiters, after converting the comment object to a _String_
first. Any currently opened element is closed first.

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008711]##public void writeAttribute(String name,
Object value, String componentPropertyName) throws IOException;

[#50638857_pgfId-1008712]## 

[#50638857_pgfId-1008713]##public void writeURIAttribute(String name,
Object value, String componentPropertyName) throws IOException;

|===

[#50638857_pgfId-1008714]##These methods add an attribute name/value
pair to an element that was opened with a previous call to
_startElement()_ , throwing an exception if there is no currently open
element. The _writeAttribute()_ method causes character encoding to be
performed in the same manner as that performed by the _writeText()_
methods. The _writeURIAttribute()_ method assumes that the attribute
value is a URI, and performs URI encoding (such as _%_ encoding for
HTML). The _componentPropertyName_ , if present, denotes the property on
the associated _UIComponent_ for this element, to which this attribute
corresponds. The _componentPropertyName_ parameter may be null to
indicate that this attribute has no corresponding property.

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008717]##public void writeText(Object text, String
property) throws IOException;

[#50638857_pgfId-1008718]## 

[#50638857_pgfId-1008719]##public void writeText(char text[], int off,
int len) throws IOException;

|===

[#50638857_pgfId-1008720]##Write text (converting from _Object_ to
_String_ first, if necessary), performing appropriate character encoding
and escaping. Any currently open element created by a call to
_startElement_ is closed first.

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008723]##public abstract ResponseWriter
cloneWithWriter(Writer writer);
|===

[#50638857_pgfId-1008724]##Creates a new instance of this
_ResponseWriter_ , using a different _Writer_ .

=== [#50638857_pgfId-1008726]##

image:JSF-30.gif[image]

[#50638857_47678]##FacesContextFactory

[#50638857_pgfId-1008762]##[P1-start-facesContextFactory]A single
instance of _javax.faces.context.FacesContextFactory_ must be made
available to each JSF-based web application running in a servlet or
portlet container.[P1-end] This class is primarily of use by JSF
implementors—applications will not generally call it directly. The
factory instance can be acquired, by JSF implementations or by
application code, by executing:

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1008765]##FacesContextFactory factory =

[#50638857_pgfId-1008766]##(FacesContextFactory)

[#50638857_pgfId-1008767]##FactoryFinder.getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);

|===

[#50638857_pgfId-1008768]##pThe _FacesContextFactory_ implementation
class provides the following method signature to create (or recycle from
a pool) a _FacesContext_ instance:

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1008771]##public FacesContext getFacesContext(Object
context, Object request, Object response, Lifecycle lifecycle);
|===

[#50638857_pgfId-1003744]##Create (if necessary) and return a
_FacesContext_ instance that has been configured based on the specified
parameters. In a servlet environment, the first argument is a
_ServletContext_ , the second a _ServletRequest_ and the third a
_ServletResponse_ .

=== [#50638857_pgfId-1009851]##

image:JSF-30.gif[image]

[#50638857_95602]##ExceptionHandlerFactory

[#50638857_pgfId-1009852]##[P1-start-exceptionHandlerFactory]A single
instance of _javax.faces.context.ExceptionHandlerFactory_ must be made
available to each JSF-based web application running in a servlet or
portlet container.[P1-end] The factory instance can be acquired, by JSF
implementations or by application code, by executing:

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1009855]##ExceptionHandlerFactory factory =

[#50638857_pgfId-1009856]##(ExceptionHandlerFactory)

[#50638857_pgfId-1009857]##FactoryFinder.getFactory(FactoryFinder.EXCEPTION_HANDLER_FACTORY);

|===

[#50638857_pgfId-1009841]##The _ExceptionHandlerFactory_ implementation
class provides the following method signature to create an
_ExceptionHandler_ instance:

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1009844]##public ExceptionHandler
getExceptionHandler(FacesContext currentContext);
|===

[#50638857_pgfId-1009845]##Create and return a _ExceptionHandler_
instance that has been configured based on the specified parameters.

=== [#50638857_pgfId-1009833]##

image:JSF-30.gif[image]

[#50638857_ExternalContextFactory]##ExternalContextFactory

[#50638857_pgfId-1010713]##[P1-start-externalContextFactory]A single
instance of _javax.faces.context.ExternalContextFactory_ must be made
available to each JSF-based web application running in a servlet or
portlet container.[P1-end] This class is primarily of use by JSF
implementors—applications will not generally call it directly. The
factory instance can be acquired, by JSF implementations or by
application code, by executing:

[width="100%",cols="100%",]
|===
a|
[#50638857_pgfId-1010716]##ExternalContextFactory factory =

[#50638857_pgfId-1010717]##(ExternalContextFactory)

[#50638857_pgfId-1010718]##FactoryFinder.getFactory(FactoryFinder.EXTERNAL_CONTEXT_FACTORY);

|===

[#50638857_pgfId-1010722]##pThe _ExternalContextFactory_ implementation
class provides the following method signature to create (or recycle from
a pool) a _FacesContext_ instance:

[width="100%",cols="100%",]
|===
|[#50638857_pgfId-1010725]##public ExternalContext
getExternalContext(Object context, Object request, Object response);
|===

[#50638857_pgfId-1010726]##Create (if necessary) and return an
_ExternalContext_ instance that has been configured based on the
specified parameters. In a servlet environment, the first argument is a
_ServletContext_ , the second a _ServletRequest_ and the third a
_ServletResponse_ .

[#50638857_pgfId-1010711]## 

[#50638861_pgfId-1015877]## 

[#50638861_pgfId-1015879]##[#50638861_37124]## 

== [#50638861_pgfId-1015881]##

image:JSF-31.gif[image]

[#50638861_74973]##Application Integration

image:JSF-32.gif[image]

[#50638861_pgfId-1019632]##Previous chapters of this specification have
described the component model, request state information, and the next
chapter describes the rendering model for JavaServer Faces user
interface components. This chapter describes APIs that are used to link
an application’s business logic objects, as well as convenient pluggable
mechanisms to manage the execution of an application that is based on
JavaServer Faces. These classes are in the _javax.faces.application_
package.

[#50638861_pgfId-1021150]##Access to application related information is
centralized in an instance of the _Application_ class, of which there is
a single instance per application based on JavaServer Faces.
Applications will typically provide one or more implementations of
_ActionListener_ (or a method that can be referenced by an _action_
expression) in order to respond to _ActionEvent_ events during the
_Apply Request Values_ or _Invoke Application_ phases of the request
processing lifecycle. Finally, a standard implementation of
_NavigationHandler_ (replaceable by the application or framework) is
provided to manage the selection of the next view to be rendered.

=== [#50638861_pgfId-1015885]##

image:JSF-33.gif[image]

[#50638861_99347]##Application

[#50638861_pgfId-1020563]##There must be a single instance of
_Application_ per web application that is utilizing JavaServer Faces. It
can be acquired by calling the _getApplication()_ method on the
_FacesContext_ instance for the current request, or the
_getApplication()_ method of the _ApplicationFactory_ (see
link:JSF.htm#50638861_18935[See ApplicationFactory]), and provides
default implementations of features that determine how application logic
interacts with the JSF implementation. Advanced applications (or
application frameworks) can install replacements for these default
implementations, which will be used from that point on. Access to
several integration objects is available via JavaBeans property getters
and setters, as described in the following subsections.

==== [#50638861_pgfId-1015896]##[#50638861_40874]##ActionListener Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1015893]##public ActionListener getActionListener();

[#50638861_pgfId-1015894]## 

[#50638861_pgfId-1015895]##public void setActionListener(ActionListener
listener);

|===

[#50638861_pgfId-1015902]##Return or replace an _ActionListener_
instance that will be utilized to process _ActionEvent_ events during
the _Apply Request Values_ or _Invoke Application_ phase of the request
processing lifecycle. [P1-start default ActionListener requirements] The
JSF implementation must provide a default implementation
_ActionListener_ that performs the following functions:

[#50638861_pgfId-1015903]##The _processAction()_ method must first call
_FacesContext.renderResponse()_ in order to bypass any intervening
lifecycle phases, once the method returns.

[#50638861_pgfId-1015904]##The _processAction()_ method must next
determine the logical outcome of this event, as follows:

[#50638861_pgfId-1015905]##If the originating component has a non-null
_action_ property, retrieve the _MethodBinding_ and call _invoke()_ to
perform the application-specified processing in this action method. If
the method returns non- _null_ , call _toString()_ on the result and use
the value returned as the logical outcome. See
link:JSF.htm#50638851_73522[See Properties] for a decription of the
_action_ property.

[#50638861_pgfId-1015909]##Otherwise, the logical outcome is _null_ .

{empty}[#50638861_pgfId-1015928]##The processAction() method must
finally retrieve the _NavigationHandler_ instance for this application,
and pass the logical outcome value (determined above) as a parameter to
the _handleNavigation()_ method of the _NavigationHandler_ instance. If
the originating component has an attribute whose name is equal to the
value of the symbolic constant
_ActionListener.TO_FLOW_DOCUMENT_ID_ATTR_NAME_ , invoke
_handleNavigation(FacesContext, String, String, String)_ passing the
value of the attribute as the last parameter. Otherwise, invoke
_handleNavigation(FacesContext, String, String)_ . In either case, the
first _String_ argument is the expression string of the _fromAction_ and
the second _String_ argument is the logical outcome.[P1-end]

[#50638861_pgfId-1011840]##See the Javadocs for getActionListener() for
important backwards compatability information.

==== [#50638861_pgfId-1015951]##DefaultRenderKitId Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1015948]##public String getDefaultRenderKitId();

[#50638861_pgfId-1015949]## 

[#50638861_pgfId-1015950]##public void setDefaultRenderKitId(String
defaultRenderKitId);

|===

[#50638861_pgfId-1011304]##An application may specify the render kit
identifier of the _RenderKit_ to be used by the _ViewHandler_ to render
views for this application. If not specified, the default render kit
identifier specified by _RenderKitFactory.HTML_BASIC_RENDER_KIT_ will be
used by the default _ViewHandler_ implementation.

[#50638861_pgfId-1011319]##[P1-start defaultRenderKit called after
startup] Unless the application has provided a custom _ViewHandler_ that
supports the use of multiple RenderKit instances in the same
application, this method may only be called at application startup,
before any Faces requests have been processed. [P1-end] This is a
limitation of the current Specification, and may be lifted in a future
release.

==== [#50638861_pgfId-1025230]##FlowHandler Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1025227]##public FlowHandler getFlowHandler();

[#50638861_pgfId-1025228]## 

[#50638861_pgfId-1025229]##public void setFlowHandler(FlowHandler
handler);

|===

[#50638861_pgfId-1025231]##Return or replace the _FlowHandler_ that will
be used by the _NavigationHandler_ to make decisions about navigating
application flow. See link:JSF.htm#50638861_52748[See FlowHandler] for
an overview of the flow feature.

[#50638861_pgfId-1025221]##[P1-start flowHandler called after startup]
_setFlowHandler()_ may only be called at application startup, before any
Faces requests have been processed. [P1-end] This is a limitation of the
current Specification, and may be lifted in a future release.
_getFlowHandler()_ may be called at any time after application startup.

==== [#50638861_pgfId-1015987]##NavigationHandler Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1015984]##public NavigationHandler
getNavigationHandler();

[#50638861_pgfId-1015985]## 

[#50638861_pgfId-1015986]##public void
setNavigationHandler(NavigationHandler handler);

|===

[#50638861_pgfId-1015990]##Return or replace the _NavigationHandler_
instance (see link:JSF.htm#50638861_26626[See NavigationHandler]) that
will be passed the logical outcome of the application _ActionListener_
as described in the previous subsection. A default implementation must
be provided, with functionality described in
link:JSF.htm#50638861_53439[See Default NavigationHandler Algorithm]:

==== [#50638861_pgfId-1016000]##StateManager Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1015997]##public StateManager getStateManager();

[#50638861_pgfId-1015998]## 

[#50638861_pgfId-1015999]##public void setStateManager(StateManager
manager);

|===

[#50638861_pgfId-1016001]##Return or replace the _StateManager_ instance
that will be utilized during the _Restore View_ and _Render Response_
phases of the request processing lifecycle to manage state persistence
for the components belonging to the current view. A default
implementation must be provided, which operates as described in
link:JSF.htm#50638861_63655[See StateManager].

==== [#50638861_pgfId-1012135]##[#50638861_35420]##ELResolver Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1012142]##public ELResolver getELResolver();

[#50638861_pgfId-1012143]## 

[#50638861_pgfId-1012144]##public void addELResolver(ELResolver
resolver);

|===

{empty}[#50638861_pgfId-1012153]##[N/T-start elresolver test] Return the
ELResolver instance to be used for all EL resolution. This is actually
an instance of javax.el.CompositeELResolver that must contain the
ELResolver instances as specified in _link:JSF.htm#50638862_39121[See
ELResolver for Facelets and Programmatic Access]_ . [N/T-end]

{empty}[#50638861_pgfId-1012248]##[N/T-start addELResolver ordering]
addELResolver must cause the argument resolver to be added at the end of
the list in the javax.el.CompositeELResolver returned from
getELResolver(). See the diagram in _link:JSF.htm#50638862_39121[See
ELResolver for Facelets and Programmatic Access]_ [N/T-end]

==== [#50638861_pgfId-1012280]##ELContextListener Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1012290]##public addELContextListener(ELContextListener
listener);

[#50638861_pgfId-1012291]## 

[#50638861_pgfId-1012292]##public void
removeELContextListener(ELContextListener listener);

[#50638861_pgfId-1012301]## 

[#50638861_pgfId-1012309]##public ELContextListener[]
getELContextListeners();

|===

[#50638861_pgfId-1012311]##addELContextListener() registers an
ELContextListener for the current Faces application. This listener will
be notified on creation of ELContext instances, and it will be called
once per request.

[#50638861_pgfId-1012332]##removeELContextListener() removes the
argument listener from the list of ELContextListeners. If listener is
null, no exception is thrown and no action is performed. If listener is
not in the list, no exception is thrown and no action is performed.

[#50638861_pgfId-1012365]##getELContextListeners() returns an array
representing the list of listeners added by calls to
addELContextListener().

==== [#50638861_pgfId-1016097]##[#50638861_85228]##ViewHandler Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016094]##public ViewHandler getViewHandler();

[#50638861_pgfId-1016095]## 

[#50638861_pgfId-1016096]##public void setViewHandler(ViewHandler
handler);

|===

{empty}[#50638861_pgfId-1016124]##See link:JSF.htm#50638861_15560[See
ViewHandler] for the description of the ViewHandler. The JSF
implementation must provide a default _ViewHandler_ implementation. This
implementation may be replaced by calling _setViewHandler()_ before the
first time the _Render Response_ phase has executed. [P1-start
setViewHandler() called after startup] If a call is made to
_setViewHandler()_ after the first time the _Render Response_ phase has
executed, the call must be ignored by the implementation. [P1-end]

==== [#50638861_pgfId-1017748]##[#50638861_32155]##ProjectStage Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017745]##public ProjectStage getProjectStage();

[#50638861_pgfId-1017747]## 

|===

{empty}[#50638861_pgfId-1017740]## [P1-start getProjectStage]This method
must return the enum constant from the class
_javax.faces.application.ProjectStage_ as specified in the corresponding
application init parameter, JNDI entry, or default Value. See
link:JSF.htm#50638850_59981[See Application Configuration
Parameters].[P1-end]

==== [#50638861_pgfId-1011873]##[#50638861_70672]##Acquiring ExpressionFactory Instance

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1011882]##public ExpressionFactory
getExpressionFactory();
|===

[#50638861_pgfId-1011874]##Return the ExpressionFactory instance for
this application. This instance is used by the evaluateExpressionGet (
_link:JSF.htm#50638861_19498[See Programmatically Evaluating
Expressions]_ ) convenience method.

{empty}[#50638861_pgfId-1011921]##[P1-start getExpressionFactory
requirements] The default implementation simply returns the
ExpressionFactory from the JSP container by calling
JspFactory.getDefaultFactory().getJspApplicationContext(servletContext).getExpressionFactory().
[P1-end]

==== [#50638861_pgfId-1016171]##[#50638861_19498]##Programmatically Evaluating Expressions

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016170]##public Object
evaluateExpressionGet(FacesContext context, String expression, Class
expectedType)
|===

[#50638861_pgfId-1012915]##Get a value by evaluating an expression.

[#50638861_pgfId-1012765]##Call
_getExpressionFactory().createValueExpression()_ passing the argument
_expression_ and _expectedType_ . Call _FacesContext.getELContext()_ and
pass it to _ValueExpression.getValue()_ , returning the result.

[#50638861_pgfId-1012945]##It is also possible and sometimes desireable
to obtain the actual _ValueExpression_ or _MethodExpression_ instance
directly. This can be accomplished by using the
_createValueExpression()_ or _createMethodExpression()_ methods on the
_ExpressionFactory_ returned from _getExpressionFactory()._

==== [#50638861_pgfId-1016177]##[#50638861_19251]##Object Factories

[#50638861_pgfId-1016178]##The _Application_ instance for a web
application also acts as an object factory for the creation of new JSF
objects such as components, converters, validators and behaviors..

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016181]##public UIComponent createComponent(String
componentType);

[#50638861_pgfId-1017996]##public UIComponent createComponent(String
componentType,

[#50638861_pgfId-1018001]## String rendererType);

[#50638861_pgfId-1016182]## 

[#50638861_pgfId-1016183]##public Converter createConverter(Class
targetClass);

[#50638861_pgfId-1016184]## 

[#50638861_pgfId-1016185]##public Converter createConverter(String
converterId);

[#50638861_pgfId-1016186]## 

[#50638861_pgfId-1016187]##public Validator createValidator(String
validatorId);

[#50638861_pgfId-1020550]## 

[#50638861_pgfId-1020551]##public Behavior createBehavior(String
behaviorId);

|===

[#50638861_pgfId-1016191]##Each of these methods creates a new instance
of an object of the requested typelink:#pgfId-1016190[6], based on the
requested identifier. The names of the implementation class used for
each identifier is normally provided by the JSF implementation
automatically (for standard classes described in this Specification), or
in one or more application configuration resources (see
link:JSF.htm#50638850_31842[See Application Configuration Resources])
included with a JSF web application, or embedded in a JAR file
containing the corresponding implementation classes.

[#50638861_pgfId-1018096]##All variants _createConverter()_ must take
some action to inspect the converter for _@ResourceDependency_ and
_@ListenerFor_ annotations.

[#50638861_pgfId-1012110]## 

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1012118]##public UIComponent
createComponent(ValueExpression componentExpression, FacesContext
context, String componentType);
|===

[#50638861_pgfId-1016199]##[P1-start createComponent(ValueExpression)
requirements] This method has the following behavior:

[#50638861_pgfId-1016200]##Call the _getValue()_ method on the specified
_ValueExpression_ , in the context of the specified _FacesContext_ . If
this results in a non-null _UIComponent_ instance, return it as the
value of this method.

{empty}[#50638861_pgfId-1016228]##If the getValue() call did not return
a component instance, create a new component instance of the specified
component type, pass the new component to the s _etValue()_ method of
the specified ValueExpression, and return it.[P1-end]

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1018019]##public UIComponent
createComponent(FacesContext context, Resource componentResource);
|===

[#50638861_pgfId-1018012]##All variants _createComponent()_ must take
some action to inspect the component for _@ResourceDependency_ and
_@ListenerFor_ annotations. Please see the JavaDocs and
link:JSF.htm#50638851_97048[See Composite Component Metadata] for the
normative specification relating to this method.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016221]##public void addComponent(String
componentType, String componentClass);

[#50638861_pgfId-1016222]## 

[#50638861_pgfId-1016223]##public void addConverter(Class targetClass,
String converterClass);

[#50638861_pgfId-1016224]## 

[#50638861_pgfId-1016225]##public void addConverter(String converterId,
String converterClass);

[#50638861_pgfId-1016226]## 

[#50638861_pgfId-1016227]##public void addValidator(String validatorId,
String validatorClass);

[#50638861_pgfId-1020552]## 

[#50638861_pgfId-1020553]##public void addBehavior(String behaviorId,
String behaviorClass);

|===

[#50638861_pgfId-1016233]##JSF-based applications can register
additional mappings of identifiers to a corresponding fully qualified
class name, or replace mappings provided by the JSF implementation in
order to customize the behavior of standard JSF features. These methods
are also used by the JSF implementation to register mappings based on
_<component>_ , _<converter>_ , _<behavior>_ and _<validator>_ elements
discovered in an application configuration resource.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016236]##public Iterator<String> getComponentTypes();

[#50638861_pgfId-1016237]## 

[#50638861_pgfId-1016238]##public Iterator<String> getConverterIds();

[#50638861_pgfId-1016239]## 

[#50638861_pgfId-1016240]##public Iterator<Class> getConverterTypes();

[#50638861_pgfId-1016241]## 

[#50638861_pgfId-1016242]##public Iterator<String> getValidatorIds();

[#50638861_pgfId-1020558]## 

[#50638861_pgfId-1020559]##public Iterator<String> getBehaviorIds();

|===

[#50638861_pgfId-1016243]##JSF-based applications can ask the
_Application_ instance for a list of the registered identifiers for
components, converters, and validators that are known to the instance.

===== [#50638861_pgfId-1020609]##[#50638861_68197]##Default Validator Ids

[#50638861_pgfId-1020633]##From the list of mappings of _validatorId_ to
fully qualified class name, added to the application via calls to
_addValidator()_ , the application maintains a subset of that list under
the heading of default validator ids. The following methods provide
access to the default validator ids registered on an application:

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1020637]## _public void addDefaultValidatorId(String
validatorId);_

[#50638861_pgfId-1020638]##public Map<String,String>
getDefaultValidatorInfo();

|===

[#50638861_pgfId-1020640]##The required callsites for these methods are
specified in link:JSF.htm#50638851_63282[See Validation Registration].

==== [#50638861_pgfId-1016244]##Internationalization Support

[#50638861_pgfId-1016245]##The following methods and properties allow an
application to describe its supported locales, and to provide
replacement text for standard messages created by JSF objects.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016248]##public Iterator<Locale>
getSupportedLocales();

[#50638861_pgfId-1016249]##public void
setSupportedLocales(Collection<Locale> newLocales);

[#50638861_pgfId-1016250]##public Locale getDefaultLocale();

[#50638861_pgfId-1016251]##public void setDefaultLocale(Locale
newLocale);

|===

[#50638861_pgfId-1016252]##JSF applications may state the _Locale_ s
they support (and the default _Locale_ within the set of supported
_Locale_ s) in the application configuration resources file. The setters
for the following methods must be called when the configuration
resources are parsed. Each time the setter is called, the previous value
is overwritten.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016255]##public String getMessageBundle();

[#50638861_pgfId-1016256]## 

[#50638861_pgfId-1016257]##public void setMessageBundle(String
messageBundle);

|===

[#50638861_pgfId-1016258]##Specify the fully qualified name of the
ResourceBundle from which the JSF implementation will acquire message
strings that correspond to standard message keys See
link:JSF.htm#50638877_24181[See Localized Application Messages] for a
list of the standard message keys recognized by JSF.

==== [#50638861_pgfId-1017785]##[#50638861_42183]##System Event Methods

[#50638861_pgfId-1017796]##System events are described in
link:JSF.htm#50638851_52454[See System Events]. This section describes
the methods defined on _Application_ that support system events

===== [#50638861_pgfId-1017828]##Subscribing to system events

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017821]##public abstract void subscribeToEvent(Class<?
extends SystemEvent> systemEventClass, SystemEventListener listener)

[#50638861_pgfId-1017827]##public abstract void subscribeToEvent(Class<?
extends SystemEvent> systemEventClass, Class sourceClass,
SystemEventListener listener);

[#50638861_pgfId-1017846]##public abstract void publishEvent(Class<?
extends SystemEvent> systemEventClass, SystemEventListenerHolder
source);

[#50638861_pgfId-1018183]##public void publishEvent(Class<? extends
SystemEvent> systemEventClass, Class<?> sourceBaseType, Object source)

|===

[#50638861_pgfId-1017798]##The first variant of _subscribeToEvent()_
subscribes argument _listener_ to have its _isListenerForSource()_
method, and (depending on the result from _isListenerForSource()_ ) its
_processEvent()_ method called any time any call is made to
_Application.publishEvent(Class<? extends SystemEvent> systemEventClass,
SystemEventListenerHolder source)_ where the first argument in the call
to _publishEvent()_ is equal to the first argument to
_subscribeToEvent()_ . [P1-start eventClassAndInheritance] _NOTE_ : The
implementation must not support subclasses for the _systemEventClass_
and/or _sourceClass_ arguments to _subscribeToEvent()_ or
_publishEvent()_ .[P1-end] For example, consider two event types,
_SuperEvent_ and _SubEvent extends SuperEvent_ . If a listener
subscribes to _SuperEvent.class_ events, but later someone publishes a
_SubEvent.class_ event (which extends _SuperEvent_ ), the listener for
_SuperEvent.class_ must not be called.

[#50638861_pgfId-1017845]##The second variant of _subscribeToEvent()_ is
equivalent to the first, with the additional constraint the the
_sourceClass_ argument to _publishEvent()_ must be equal to the _Class_
object obtained by calling _getClass()_ on the _source_ argument to
_publishEvent()_ .

[#50638861_pgfId-1017874]##See the javadocs for both variants of
_subscribeForEvent()_ for the complete specification of these methods.

[#50638861_pgfId-1017893]## _publishEvent()_ is called by the system at
several points in time during the runtime of a JSF application. The
specification for when _publishEvent()_ is called is given in the
javadoc for the event classes that are listed in
link:JSF.htm#50638851_27996[See Event Classes]. See the javadoc for
_publishEvent()_ for the complete specification.

===== [#50638861_pgfId-1017854]##Unsubscribing from system events

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017870]##public abstract void
unsubscribeFromEvent(Class<? extends SystemEvent> systemEventClass,
SystemEventListener listener);

[#50638861_pgfId-1017853]##public abstract void
unsubscribeFromEvent(Class<? extends SystemEvent> systemEventClass,
Class sourceClass, SystemEventListener listener);

|===

[#50638861_pgfId-1017847]##See the javadocs for both variants of
_unsubscribeFromEvent()_ for the complete specification.

=== [#50638861_pgfId-1017838]##

image:JSF-33.gif[image]

[#50638861_18935]##ApplicationFactory

[#50638861_pgfId-1017799]##A single instance of
_javax.faces.application.ApplicationFactory_ must be made available to
each JSF-based web application running in a servlet or portlet
container. The factory instance can be acquired by JSF implementations
or by application code, by executing:

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017802]##ApplicationFactory factory =
(ApplicationFactory)

[#50638861_pgfId-1017803]##
FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);

|===

[#50638861_pgfId-1016274]##The _ApplicationFactory_ implementation class
supports the following methods:

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016271]##public Application getApplication();

[#50638861_pgfId-1016272]## 

[#50638861_pgfId-1016273]##public void setApplication(Application
application);

|===

[#50638861_pgfId-1016275]##Return or replace the _Application_ instance
for the current web application. The JSF implementation must provide a
default _Application_ instance whose behavior is described in
link:JSF.htm#50638861_99347[See Application].

[#50638861_pgfId-1016279]##Note that applications will generally find it
more convenient to access the _Application_ instance for this
application by calling the _getApplication()_ method on the
_FacesContext_ instance for the current request.

=== [#50638861_pgfId-1016281]##

image:JSF-33.gif[image]

[#50638861_77001]##Application Actions

[#50638861_pgfId-1016282]##An _application action_ is an
application-provided method on some Java class that performs some
application-specified processing when an _ActionEvent_ occurs, during
either the _Apply Request Values_ or the _Invoke Application_ phase of
the request processing lifecycle (depending upon the _immediate_
property of the _ActionSource_ instance initiating the event).

[#50638861_pgfId-1016283]##Application action is not a formal JSF API;
instead any method that meets the following requirements may be used as
an Action by virtue of evaluating a method binding expression:

[#50638861_pgfId-1016284]##The method must be public.

[#50638861_pgfId-1016285]##The method must take no parameters.

[#50638861_pgfId-1016286]##The method must return _Object_ .

[#50638861_pgfId-1016287]##The action method will be called by the
default _ActionListener_ implementation, as described in
link:JSF.htm#50638861_40874[See ActionListener Property] above. Its
responsibility is to perform the desired application actions, and then
return a logical “outcome” (represented as a _String_ ) that can be used
by a _NavigationHandler_ in order to determine which view should be
rendered next. The action method to be invoked is defined by a
_MethodBinding_ that is specified in the _action_ property of a
component that implements _ActionSource_ . Thus, a component tree with
more than one such _ActionSource_ component can specify individual
action methods to be invoked for each activated component, either in the
same Java class or in different Java classes.

=== [#50638861_pgfId-1016292]##

image:JSF-33.gif[image]

[#50638861_26626]##NavigationHandler

==== [#50638861_pgfId-1016293]##[#50638861_65053]##Overview

[#50638861_pgfId-1016294]##Most JSF applications can be thought of as a
directed graph of views, each node of which roughly corresponds to the
user’s perception of “location” within the application. Applications
that use the Faces Flows feature have additional kinds of nodes in the
directed graph. In any case, navigating the nodes of this graph is the
responsibility of the _NavigationHandler_ . A single _NavigationHandler_
instance is responsible for consuming the logical outcome returned by an
application action that was invoked, along with additional state
information that is available from the _FacesContext_ instance for the
current request, and (optionally) selecting a new view to be rendered.
If the outcome returned by the applicationaction is _null_ or the empty
string, and none of the navigation cases that map to the current view
identifier have a non-null condition expression, the same view must be
re-displayed. This is a change from the old behavior. As of JSF 2.0, the
NavigationHandler is consulted even on a _null_ outcome, but under this
circumstance it only checks navigation cases that do not specify an
outcome (no <from-outcome>) and have a condition expression (specified
with <if>). This is the only case where the same view (and component
tree) is re-used.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016297]##public void handleNavigation(FacesContext
context, String fromAction, String outcome);
|===

[#50638861_pgfId-1016298]##The _handleNavigation_ method may select a
new view by calling _createView()_ on the _ViewHandler_ instance for
this application, optionally customizing the created view, and then
selecting it by calling the _setViewRoot()_ method on the _FacesContext_
instance that is passed. Alternatively, the _NavigationHandler_ can
complete the actual response (for example, by issuing an HTTP redirect),
and call _responseComplete()_ on the _FacesContext_ instance.

[#50638861_pgfId-1016299]##After a return from the _handleNavigation_
method, control will normally proceed to the _Render Response_ phase of
the request processing lifecycle (see link:JSF.htm#50638877_70838[See
Render Response]), which will cause the newly selected view to be
rendered. If the _NavigationHandler_ called the _responseComplete()_
method on the _FacesContext_ instance, however, the _Render Response_
phase will be bypassed.

[#50638861_pgfId-1020204]##Prior to JSF 2, the NavigationHandler's sole
task was to execute the navigation for a given scenario. JSF 2
introduces the _ConfigurableNavigationHandler_ interface, which extends
the contract of the _NavigationHandler_ to include two additional
methods that accomodate runtime inspection of the NavigationCases that
represent the rule-based navigation metamodel. The method
_getNavigationCase_ consults the _NavigationHandler_ to determine which
_NavigationCase_ the _handleNavigation_ method would resolve for a given
"from action" expression and logical outcome combination. The method
_getNavigationCases_ returns a java.util.Map of all the _NavigationCase_
instances known to this _NavigationHandler_ . Each key in the map is a
from view ID and the cooresponding value is a java.util.Set of
NavigationCases for that from view ID.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1020267]##public NavigationCase
getNavigationCase(FacesContext context, String fromAction, String
outcome);

[#50638861_pgfId-1020268]##public Map<String, Set<NavigationCase>>
getNavigationCases();

|===

{empty}[#50638861_pgfId-1020273]##[P1-start-configurablenavhandler]A JSF
2 compliant-implemention must ensure that its _NavigationHandler_
implements the _ConfigurableNavigationHandler_ interface. The
_handleNavigation_ and _getNavigation_ Case methods should use the same
logic to resolve a _NavigationCase_ , which is outlined in the next
section.[P1-end]

==== [#50638861_pgfId-1016304]##[#50638861_53439]##Default NavigationHandler Algorithm

[#50638861_pgfId-1016305]##JSF implementations must provide a default
_NavigationHandler_ implementation that maps the action reference that
was utilized (by the default _ActionListener_ implementation) to invoke
an application action, the logical outcome value returned by that
application action, as well as other state information, into the view
identifier for the new view or flow node to be selected. The remainder
of this section describes the functionality provided by this default
implementation.

[#50638861_pgfId-1039400]##The behavior of the default
_NavigationHandler_ implementation is configured, at web application
startup time, from the contents of zero or more _application
configuration resources_ (see link:JSF.htm#50638850_31842[See
Application Configuration Resources]). The configuration information is
represented as zero or more _<navigation-rule>_ elements, each keyed to
a matching pattern for the _view identifier_ of the current view
expressed in a _<from-view-id>_ element. This matching pattern must be
either an exact match for a view identifier (such as “/index.jsp” if you
are using the default _ViewHandler_ ), or the prefix of a component view
id, followed by an asterisk (“*”) character. A matching pattern of “*”,
or the lack of a _<from-view-id>_ element inside a _<navigation-rule>_
rule, indicates that this rule matches any possible component view
identifier.

[#50638861_pgfId-1039408]##Version 2.2 of the specification introduced
the Faces Flows feature. [P1-start-FlowNavigationConstraints] With
respect to the navigation algorithm, any text that references a _view
identifier_ , such as _<from-view-id>_ or _<to-view-id>_ , can also
refer to a flow node, subject to these constraints.

[#50638861_pgfId-1040071]##When outside of a flow, _view identifier_ has
the additional possibility of being a flow id.

{empty}[#50638861_pgfId-1040198]##When inside a flow, a _view
identifier_ has the additional possibility of being the id of any node
within the current flow.[P1-end]

[#50638861_pgfId-1019696]##If the specification needs to refer to a
_view identifier_ that is an actual VDL view (and not a VDL view or a
flow, or flow node), the term _vdl view identifier_ will be used.

[#50638861_pgfId-1041444]##Nested within each _<navigation-rule>_
element are zero or more _<navigation-case>_ elements that contain
additional matching criteria based on the action reference expression
value used to select an application action to be invoked (if any), and
the logical outcome returned by calling the _invoke()_ method of that
application action _link:#pgfId-1019699[7]_ . As of JSF 2, navigation
cases support a condition element, <if>, whose content must be a single,
contiguous value expression expected to resolve to a boolean value (if
the content does not match this requirement, the condition is
ignored)link:#pgfId-1019717[8]. When the <if> element is present, the
value expression it contains must evaluate to true when the navigation
case is being consulted in order for the navigation case to
matchlink:#pgfId-1019712[9]. Finally, the <navigation-case> element
contains a <to-view-id> element, whose content is either the view
identifier or a value expression that resolves to the view identifier.
If the navigation case is a match, this view identifier is to be
selected and stored in the FacesContext for the current request
following the invocation of the NavigationHandler. See below for an
example of the configuration information for the default
_NavigationHandler_ might be configured.

[#50638861_pgfId-1016314]##It is permissible for the application
configuration resource(s) used to configure the default
_NavigationHandler_ to include more than one _<navigation-rule>_ element
with the same _<from-view-id>_ matching pattern. For the purposes of the
algorithm described below, all of the nested _<navigation-case>_
elements for all of these rules shall be treated as if they had been
nested inside a single _<navigation-rule>_ element.

[#50638861_pgfId-1016332]##[P1-start navigation handler requirements]
The default _NavigationHandler_ implementation must behave as if it were
performing the following algorithm (although optimized implementation
techniques may be utilized):

[#50638861_pgfId-1019731]##If no navigation case is matched by a call to
the handleNavigation() method, this is an indication that the current
view should be redisplayed. As of JSF 2.0, a null outcome does not
unconditionally cause all navigation rules to be skipped.

[#50638861_pgfId-1016334]##Find a _<navigation-rule>_ element for which
the view identifier (of the view in the _FacesContext_ instance for the
current request) matches the _<from-view-id>_ matching pattern of the
_<navigation-rule>_ . Rule instances are considered in the following
order:

[#50638861_pgfId-1016335]##An exact match of the view identifier against
a _<from-view-id>_ pattern that does not end with an asterisk (“*”)
character.

[#50638861_pgfId-1016336]##For _<from-view-id>_ patterns that end with
an asterisk, an exact match on characters preceding the asterisk against
the prefix of the view id. If the patterns for multiple navigation rules
match, pick the longest matching prefix first.

[#50638861_pgfId-1016337]##If there is a _<navigation-rule>_ with a
_<from-view-id>_ pattern of only an asterisklink:#pgfId-1016340[10], it
matches any view identifier.

[#50638861_pgfId-1016341]##From the _<navigation-case>_ elements nested
within the matching _<navigation-rule>_ element, locate a matching
navigation case by matching the _<from-action>_ and _<from-outcome>_
values against the _fromAction_ and outcome parameter values passed to
the _handleNavigation()_ method. To match an outcome value of null, the
_<from-outcome>_ must be absent and the _<if>_ element present.
Regardless of outcome value, if the _<if>_ element is present, evaluate
the content of this element as a value expression and only select the
navigation case if the expression resolves to true. Navigation cases are
checked in the following order:

[#50638861_pgfId-1016342]##Cases specifying both a _<from-action>_ value
and a _<from-outcome>_ value are matched against the _action_ expression
and _outcome_ parameters passed to the _handleNavigation()_ method (both
parameters must be not null, and both must be equal to the corresponding
condition values, in order to match).

[#50638861_pgfId-1016343]##Cases that specify only a _<from-outcome>_
value are matched against the _outcome_ parameter passed to the
_handleNavigation()_ method (which must be not null, and equal to the
corresponding condition value, to match).

[#50638861_pgfId-1016344]##Cases that specify only a _<from-action>_
value are matched against the _action_ expression parameter passed to
the _handleNavigation()_ method (which must be non-null, and equal to
the corresponding condition value, to match; if the <if> element is
absent, only match a non-null outcome; otherwise, match any outcome).

[#50638861_pgfId-1016345]##Any remaining case is assumed to match so
long as the outcome parameter is non-null or the <if> element is
present.

[#50638861_pgfId-1040932]##For cases that match up to this point and
contain an <if> element, the condition value expression must be
evaluated and the resolved value true for the case to match.

[#50638861_pgfId-1040933]##If a matching _<navigation-case>_ element was
located, proceed as follows.

{empty}[#50638861_pgfId-1040938]##If the _<to-view-id>_ element is the
id of a flow, discover that flow’s start node and resolve it to a _vdl
view identifier_ by following the algorithm in
link:JSF.htm#50638861_50667[See Requirements for Explicit Navigation in
Faces Flow Call Nodes other than ViewNodes]

[#50638861_pgfId-1041319]##If the _<to-view-id>_ element is a non-view
flow node, resolve it to a _vdl view identifier_ by following the
algorithm in link:JSF.htm#50638861_50667[See Requirements for Explicit
Navigation in Faces Flow Call Nodes other than ViewNodes].

[#50638861_pgfId-1021315]##If _UIViewAction.isProcessingBroadcast()_
returns _true_ , call _getFlash().setKeepMessages(true)_ on the current
_FacesContext_ . Compare the viewId of the current viewRoot with the
_<to-view-id>_ of the matching _<navigation-case>_ . If they differ,
take any necessary actions to effectively restart the JSF lifecycle on
the _<to-view-id>_ of the matching _<navigation-case>_ . Care must be
taken to preserve any view parameters or navigation case parameters,
clear the view map of the _UIViewRoot_ , and call _setRenderAll(true)_
on the _PartialViewContext_ . Implementations may choose to meet this
requirement by treating this case as if a _<redirect />_ was specified
on the matching _<navigation-case>_ . If the viewIds do not differ,
continue on to the next bullet point.

[#50638861_pgfId-1021310]##Clear the view map if the viewId of the new
_UIViewRoot_ differs from the viewId of the current _UIViewRoot_ .

[#50638861_pgfId-1034253]##If the _<redirect/>_ element was _not_
specified in this _<navigation-case>_ (or the application is running in
a Portlet environment, where redirects are not possible), use the
_<to-view-id>_ element of the matching case to request a new
_UIViewRoot_ instance from the _ViewHandler_ instance for this
application. Call _transition()_ on the _FlowHandler_ , passing the
current _FacesContext_ , the current flow, the new flow and the
_facesFlowCallNode_ corresponding to this faces flow call, if any. Pass
the new _UIViewRoot_ to the _setViewRoot()_ method of the _FacesContext_
instance for the current request.

[#50638861_pgfId-1034393]##Then, exit the algorithm. If the content of
<to-view-id> is a value expression, first evaluate it to obtain the
value of the view id.

[#50638861_pgfId-1051166]##If the _<redirect/>_ element _was_ specified
in this _<navigation-case>_ , or this invocation of _handleNavigation()_
was due to a _UIViewAction_ broadcast event where the new _viewId_ is
different from the current _viewId_ , resolve the _<to-view-id>_ to a
view identifier, using the algorithm in _link:JSF.htm#50638861_50667[See
Requirements for Explicit Navigation in Faces Flow Call Nodes other than
ViewNodes]_ . Call _getRedirectURL()_ on the _ViewHandler_ , passing the
current _FacesContext_ , the _<to-view-id>_ , any name=value parameter
pairs specified within _<view-param>_ elements within the _<redirect>_
element, and the value of the _include-view-params_ attribute of the
_<redirect />_ element if present, _false_ , if not. If this navigation
is a flow transition (where current flow is not the same as the new
flow), include the relevant flow metadata as entries in the _parameters_
.

[#50638861_pgfId-1051331]##If current flow is not null and new flow is
null, include the following entries:
_FlowHandler.TO_FLOW_DOCUMENT_ID_REQUEST_PARAM_NAME:
FlowHandler.NULL_FLOW +
FlowHandler.FLOW_ID_REQUEST_PARAM_NAME: “”_ (the empty string)

[#50638861_pgfId-1051483]##If current flow is null and new flow is not
null, include the following entries: +
_FlowHandler.TO_FLOW_DOCUMENT_ID_REQUEST_PARAM_NAME:_ The to flow
document id +
_FlowHandler.FLOW_ID_REQUEST_PARAM_NAME:_ the flow id for the flow that
is the destination of the transition.

[#50638861_pgfId-1051796]##If the _parameters_ map has entries for
either of these keys, both of the entries must be replaced with the new
values. This allows the call to _FlowHandler.clientWindowTransition()_
to perform correctly when the GET request after the redirect happens.

[#50638861_pgfId-1051343]##The return from _getRedirectURL()_ is the
value to be sent to the client to which the redirect will occur. Call
_getFlash().setRedirect(true)_ on the current _FacesContext_ . Cause the
current response to perform an HTTP redirect to this path, and call
_responseComplete()_ on the _FacesContext_ instance for the current
request. If the content of <to-view-id> is a value expression, first
evaluate it to obtain the value of the view id.

[#50638861_pgfId-1016348]##If no matching _<navigation-case>_ element
was located, return to Step 1 and find the next matching
_<navigation-rule>_ element (if any). If there are no more matching rule
elements, execute the following algorithm to search for an implicit
match based on the current _outcome_ . This implicit matching algorithm
also includes navigating within the current faces flow, and returning
from the current faces flow.

[#50638861_pgfId-1019475]##Let _outcome_ be _viewIdToTest_ .

[#50638861_pgfId-1019479]##Examine the _viewIdToTest_ for the presence
of a “?” character, indicating the presence of a URI query string. If
one is found, remove the query string from _viewIdToTest_ , including
the leading “ _?_ ” and let it be _queryString_ , look for the string “
_faces-redirect=true_ ” within the query string. If found, let
_isRedirect_ be _true_ , otherwise let _isRedirect_ be _false_ . Look
for the string “ _includeViewParams=true_ ” or “
_faces-include-view-params=true_ ”. If either are found, let
_includeViewParams_ be _true_ , otherwise let _includeViewParams_ be
_false_ . When performing preemptive navigation, redirect is implied,
even if the navigation case doesn't indicate it, and the query string
must be preserved. Refer to link:JSF.htm#50638853_UIOutcomeTarget[See
UIOutcomeTarget] for more information on preemptive navigation.

[#50638861_pgfId-1019490]##If _viewIdToTest_ does not have a “file
extension”, take the file extension from the current _viewId_ and append
it properly to _viewIdToTest_ .

[#50638861_pgfId-1019491]##If _viewIdToTest_ does not begin with “/”,
take the current _viewId_ and look for the last “ _/_ ”. If not found,
prepend a “ _/_ ” and continue. Otherwise remove all characters in
_viewId_ after, but not including, “ _/_ ”, then append _viewIdToTest_
and let the result be _viewIdToTest_ .

[#50638861_pgfId-1019503]##Obtain the current ViewHandler and call its
_deriveViewId()_ method, passing the current _FacesContext_ and
_viewIdToTest_ . If _UnsupportedOperationException_ is thrown, which
will be the case if the _ViewHandler_ is a Pre JSF 2.0 _ViewHandler_ ,
the implementation must ensure the algorithm described for
_ViewHandler.deriveViewId()_ specified in
_link:JSF.htm#50638861_36790[See Default ViewHandler Implementation]_ is
performed. Let the result be _implicitViewId_ .

[#50638861_pgfId-1034139]##If _implicitViewId_ is non- _null_ , discover
if _fromOutcome_ is equal to the flow-id of an existing flow in the
_FlowHandler_ . If so find the start node of the flow. If the start node
is a _ViewNode_ , let _viewIdToTest_ be the _vdlDocumentId_ value of the
_ViewNode_ . Call _deriveViewId_ as in the preceding step and let the
result be _implicitViewId_ . If _fromOutcome_ is not equal to the
flow-id of an existing flow in the _FlowHandler_ , and we are currently
in a flow, discover if this is call to a _faces-flow-return_ node. If
so, obtain the _fromOutcome_ of the _faces-flow-return_ node, re-apply
this algorithm to derive the value of the _implicitViewId_ and continue.

[#50638861_pgfId-1034140]##If the _implicitViewId_ is non- _null_ , take
the following action. If _isRedirect_ is _true_ , append the
_queryString_ to _implicitViewId_ . Let _implicitNavigationCase_ be a
conceptual _<navigation-case>_ element whose _fromViewId_ is the current
_viewId_ , _fromAction_ is passed through from the arguments to
_handleNavigation()_ , _fromOutcome_ is passed through from the
arguments to _handleNavigation(), toViewId_ is _implicitViewId_ , and
_redirect_ is the value of _isRedirect,_ and _include-view-params_ is
_includeViewParams_ . Treat _implicitNavigationCase_ as a matching
navigation case and return to the first step above that starts with “If
a matching _<navigation-case>_ element was located...”.

[#50638861_pgfId-1033814]##If _UIViewAction.isProcessingBroadcast()_
returns _true_ , call _getFlash().setKeepMessages(true)_ on the current
_FacesContext_ . Compare the viewId of the current viewRoot with the
effective _<to-view-id>_ of the matching _<navigation-case>_ . If they
differ, take any necessary actions effectively restart the JSF lifecycle
on the effective _<to-view-id>_ of the matching _<navigation-case>_ .
Care must be taken to preserve any view parameters or navigation case
parameters, clear the view map of the _UIViewRoot_ , and call
_setRenderAll(true)_ on the _PartialViewContext_ .

[#50638861_pgfId-1035156]##If none of the above steps found a matching
_<navigation-case>_ , perform the steps in
link:JSF.htm#50638861_50667[See Requirements for Explicit Navigation in
Faces Flow Call Nodes other than ViewNodes] to find a matching
_<navigation-case>_ .

[#50638861_pgfId-1021306]##If none of the above steps found a matching
_<navigation-case>_ , if _ProjectStage_ is not _Production_ render a
message in the page that explains that there was no match for this
outcome.

[#50638861_pgfId-1020328]##A rule match always causes a new view to be
created, losing the state of the old view. This includes clearing out
the view map.

[#50638861_pgfId-1020334]##Query string parameters may be contributed by
three different sources: the outcome (implicit navigation), a nested
_<f:param>_ on the component tag (e.g., _<h:link>_ , _<h:button>_ ,
_<h:commandLink>_ , _<h:commandButton>_ ), and view parameters. When a
redirect URL is built, whether it be by the N _avigationHandler_ on a
redirect case or a _UIOutcomeTarget_ renderer, the query string
parameter sources should be consulted in the following order:

[#50638861_pgfId-1020351]##the outcome (implicit navigation)

[#50638861_pgfId-1020359]##view parameter

[#50638861_pgfId-1020364]##nested _<f:param>_

[#50638861_pgfId-1020369]##If a query string parameter is found in two
or more sources, the latter source must replace all instances of the
query string parameter from the previous source(s).

{empty}[#50638861_pgfId-1020329]##[P1-end]

===== [#50638861_pgfId-1041143]##[#50638861_50667]##Requirements for Explicit Navigation in Faces Flow Call Nodes other than ViewNodes

[#50638861_pgfId-1041236]##[P1-start ExplicitNavigationNonViewFlowNode
requirements] These steps must be performed in this order to determine
the _vdl view identifier_ when navigating to a flow node that is not a
view node.

[#50638861_pgfId-1045741]##Algorithm for resolving a _nodeId_ to a _vdl
view identifier_ .

[#50638861_pgfId-1045812]##If _nodeId_ is a view node, let _vdl view
identifier_ be the value of _nodeId_ and exit the algorithm.

[#50638861_pgfId-1041825]##If the node is a _SwitchNode_ , iterate over
the _NavigationCase_ instances returned from its _getCases()_ method.
For each, one call _getCondition()_ . If the result is _true_ , let
_nodeId_ be the value of its _fromOutcome_ property.

[#50638861_pgfId-1041897]##If the node is a _MethodCallNode_ , let
_nodeId_ be the value invoking the value of its _methodExpression_
property. If the result is _null_ , let _nodeId_ be the value of the
_MethodCallNode_ ’s _outcome_ property.

[#50638861_pgfId-1046947]##If the node is a _FlowCallNode_ , save it
aside as _facesFlowCallNode_ . Let _flowId_ be the value of its
_calledFlowId_ property and _flowDocumentId_ be the value of its
_calledFlowDocumentId_ property. If no _flowDocumentId_ exists for the
node, let it be the string resulting from _flowId + “/” + flowId +
“.xhtml”_ . Ask the _FlowHandler_ for a _Flow_ for this _flowId_ ,
_flowDocumentId_ pair. Obtain a reference to the start node and execute
this algorithm again, on that start node.

[#50638861_pgfId-1046948]##If the node is a _ReturnNode_ obtain its
navigation case and call _FlowHandler.pushReturnMode()_ . This enables
the navigation to proceed with respect to the calling flow’s navigation
rules, or the application’s navigation rules if there is no calling
flow. Start the navigation algorithm over using it as the basis but pass
the value of the symbolic constant
_javax.faces.flow.FlowHandler.NULL_FLOW_ as the value of the
_toFlowDocumentId_ argument. If this does not yield a navigation case,
call _FlowHandler.getLastDisplayedViewId()_ , which will return the last
displayed view id of the calling flow, or _null_ if there is no such
flow. In a _finally_ block, when the re-invocation of the navigation
algorithms completes, call _FlowHandler.popReturnMode()_ .

===== [#50638861_pgfId-1042573]##[#50638861_40209]##Requirements for Entering a Flow

[#50638861_pgfId-1042610]##[P1-start FlowEntryRequirements] If any of
the preceding navigation steps cause a flow to be entered, the
implementation must perform the following steps, in this order, before
continuing with navigation.

[#50638861_pgfId-1042819]##Make it so any _@FlowScoped_ beans for this
flow are able to be activated when an EL expression that references them
is evaluated.

[#50638861_pgfId-1042885]##Call the initializer for the flow, if any.

[#50638861_pgfId-1042996]##Proceed to the start node of the flow, which
may be any flow node type.

[#50638861_pgfId-1043463]##An attempt to navigate into a flow other than
via the identified start node of that throw should cause a
_FacesException_ .

{empty}[#50638861_pgfId-1042952]##[P1-end]

===== [#50638861_pgfId-1042935]##Requirements for Exiting a Flow

[#50638861_pgfId-1042965]##[P1-start FlowExitRequirements] If any of the
preceding navigation steps cause a flow to be exited, the implementation
must perform the following steps, in this order, before continuing with
navigation.

[#50638861_pgfId-1043083]##Call the finalizer for the flow, if any.

[#50638861_pgfId-1043388]##De-activate any _@FlowScoped_ beans for the
current flow.

[#50638861_pgfId-1043694]##If exiting via a return node ensure the
return parameters are correctly passed back to the caller.

{empty}[#50638861_pgfId-1043902]##[P1-end]

===== [#50638861_pgfId-1043833]##Requirements for Calling A Flow from the Current Flow

[#50638861_pgfId-1043920]##[P1-start FlowExitRequirements] If any of the
preceding navigation steps cause a flow to be called from another flow,
the _transition()_ method on _FlowHandler_ will ensure parameters are
correctly passed.

{empty}[#50638861_pgfId-1043895]##[P1-end]

==== [#50638861_pgfId-1020331]##[#50638861_83916]##Example NavigationHandler Configuration

[#50638861_pgfId-1021758]##The following _<navigation-rule>_ elements
might appear in one or more application configuration resources (see
link:JSF.htm#50638850_31842[See Application Configuration Resources]) to
configure the behavior of the default _NavigationHandler_
implementation:

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021764]##<navigation-rule>

[#50638861_pgfId-1021765]## 

[#50638861_pgfId-1021766]## <description>

[#50638861_pgfId-1021767]## APPLICATION WIDE NAVIGATION HANDLING

[#50638861_pgfId-1021768]## </description>

[#50638861_pgfId-1021769]## <from-view-id> * </from-view-id>

[#50638861_pgfId-1021770]## 

[#50638861_pgfId-1021771]## <navigation-case>

[#50638861_pgfId-1021772]## <description>

[#50638861_pgfId-1021773]## Assume there is a “Logout” button on every
page that

[#50638861_pgfId-1021774]## invokes the logout Action.

[#50638861_pgfId-1021775]## </description>

[#50638861_pgfId-1021776]## <display-name>Generic Logout
Button</display-name>

[#50638861_pgfId-1021777]##
<from-action>#\{userBean.logout}</from-action>

[#50638861_pgfId-1021778]## <to-view-id>/logout.jsp</to-view-id>

[#50638861_pgfId-1021779]## </navigation-case>

[#50638861_pgfId-1021780]## 

[#50638861_pgfId-1021781]## <navigation-case>

[#50638861_pgfId-1021782]## <description>

[#50638861_pgfId-1021783]## Handle a generic error outcome that might be
returned

[#50638861_pgfId-1021784]## by any application Action.

[#50638861_pgfId-1021785]## </description>

[#50638861_pgfId-1021786]## <display-name>Generic Error
Outcome</display-name>

[#50638861_pgfId-1021787]## <from-outcome>loginRequired</from-outcome>

[#50638861_pgfId-1021788]##
<to-view-id>/must-login-first.jsp</to-view-id>

[#50638861_pgfId-1021789]## </navigation-case>

[#50638861_pgfId-1021790]## 

[#50638861_pgfId-1021791]## <navigation-case>

[#50638861_pgfId-1021792]## <description>

[#50638861_pgfId-1021793]## Illustrate paramaters

[#50638861_pgfId-1021794]## </description>

[#50638861_pgfId-1021795]##
<from-outcome>redirectPasswordStrength</from-outcome>

[#50638861_pgfId-1021796]## <redirect>

[#50638861_pgfId-1021797]##
<view-param><name>userId</name><value>someValue</value> +
</view-param>

[#50638861_pgfId-1021798]##
<include-view-params>true</include-view-params>

[#50638861_pgfId-1021799]## </redirect>

[#50638861_pgfId-1021800]## </navigation-case>

[#50638861_pgfId-1021801]## 

[#50638861_pgfId-1021802]##</navigation-rule>

|===

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021805]##<navigation-rule>

[#50638861_pgfId-1021806]## 

[#50638861_pgfId-1021807]## <description>

[#50638861_pgfId-1021808]## LOGIN PAGE NAVIGATION HANDLING

[#50638861_pgfId-1021809]## </description>

[#50638861_pgfId-1021810]## <from-view-id> /login.jsp </from-view-id>

[#50638861_pgfId-1021811]## 

[#50638861_pgfId-1021812]## <navigation-case>

[#50638861_pgfId-1021813]## <description>

[#50638861_pgfId-1021814]## Handle case where login succeeded.

[#50638861_pgfId-1021815]## </description>

[#50638861_pgfId-1021816]## <display-name>Successful
Login</display-name>

[#50638861_pgfId-1021817]##
<from-action>#\{userBean.login}</from-action>

[#50638861_pgfId-1021818]## <from-outcome>success</from-outcome>

[#50638861_pgfId-1021819]## <to-view-id>/home.jsp</to-view-id>

[#50638861_pgfId-1021820]## </navigation-case>

[#50638861_pgfId-1021821]## 

[#50638861_pgfId-1021822]## <navigation-case>

[#50638861_pgfId-1021823]## <description>

[#50638861_pgfId-1021824]## User registration for a new user succeeded.

[#50638861_pgfId-1021825]## </description>

[#50638861_pgfId-1021826]## <display-name>Successful New User
Registration</display-name>

[#50638861_pgfId-1021827]##
<from-action>#\{userBean.register}</from-action>

[#50638861_pgfId-1021828]## <from-outcome>success</from-outcome>

[#50638861_pgfId-1021829]## <to-view-id>/welcome.jsp</to-view-id>

[#50638861_pgfId-1021830]## </navigation-case>

[#50638861_pgfId-1021831]## 

[#50638861_pgfId-1021832]## <navigation-case>

[#50638861_pgfId-1021833]## <description>

[#50638861_pgfId-1021834]## User registration for a new user failed
because of a

[#50638861_pgfId-1021835]## duplicate username.

[#50638861_pgfId-1021836]## </description>

[#50638861_pgfId-1021837]## <display-name>Failed New User
Registration</display-name>

[#50638861_pgfId-1021838]##
<from-action>#\{userBean.register}</from-action>

[#50638861_pgfId-1021839]##
<from-outcome>duplicateUserName</from-outcome>

[#50638861_pgfId-1021840]##
<to-view-id>/try-another-name.jsp</to-view-id>

[#50638861_pgfId-1021841]## </navigation-case>

[#50638861_pgfId-1021842]## 

[#50638861_pgfId-1021843]##</navigation-rule>

|===

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021846]##<navigation-rule>

[#50638861_pgfId-1021847]## 

[#50638861_pgfId-1021848]## <description>

[#50638861_pgfId-1021849]## Assume there is a search form on every page.
These navigation

[#50638861_pgfId-1021850]## cases get merged with the application-wide
rules above because

[#50638861_pgfId-1021851]## they use the same “from-view-id” pattern.
The same thing would

[#50638861_pgfId-1021852]## also happen if “from-view-id” was omitted
here, because that is

[#50638861_pgfId-1021853]## equivalent to a matching pattern of “*”.

[#50638861_pgfId-1021854]## </description>

[#50638861_pgfId-1021855]## <from-view-id> * </from-view-id>

[#50638861_pgfId-1021856]## 

[#50638861_pgfId-1021857]## <navigation-case>

[#50638861_pgfId-1021858]## <display-name>Search Form
Success</display-name>

[#50638861_pgfId-1021859]## <from-action>#\{searchForm.go}</from-action>

[#50638861_pgfId-1021860]## <from-outcome>success</from-outcome>

[#50638861_pgfId-1021861]## <to-view-id>/search-results.jsp</to-view-id>

[#50638861_pgfId-1021862]## </navigation-case>

[#50638861_pgfId-1021863]## 

[#50638861_pgfId-1021864]## <navigation-case>

[#50638861_pgfId-1021865]## <display-name>Search Form
Failure</display-name>

[#50638861_pgfId-1021866]## <from-action>#\{searchForm.go}</from-action>

[#50638861_pgfId-1021867]## <to-view-id>/search-problem.jsp</to-view-id>

[#50638861_pgfId-1021868]## </navigation-case>

[#50638861_pgfId-1021869]## 

[#50638861_pgfId-1021870]##</navigation-rule>

|===

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021873]##<navigation-rule>

[#50638861_pgfId-1021874]## 

[#50638861_pgfId-1021875]## <description>

[#50638861_pgfId-1021876]## Searching works slightly differently in part
of the site.

[#50638861_pgfId-1021877]## </description>

[#50638861_pgfId-1021878]## <from-view-id> /movies/* </from-view-id>

[#50638861_pgfId-1021879]## 

[#50638861_pgfId-1021880]## <navigation-case>

[#50638861_pgfId-1021881]## <display-name>Search Form
Success</display-name>

[#50638861_pgfId-1021882]## <from-action>#\{searchForm.go}</from-action>

[#50638861_pgfId-1021883]## <from-outcome>success</from-outcome>

[#50638861_pgfId-1021884]##
<to-view-id>/movie-search-results.jsp</to-view-id>

[#50638861_pgfId-1021885]## </navigation-case>

[#50638861_pgfId-1021886]## 

[#50638861_pgfId-1021887]## <navigation-case>

[#50638861_pgfId-1021888]## <display-name>Search Form
Failure</display-name>

[#50638861_pgfId-1021889]## <from-action>#\{searchForm.go}</from-action>

[#50638861_pgfId-1021890]## <to-view-id>/search-problem.jsp</to-view-id>

[#50638861_pgfId-1021891]## </navigation-case>

[#50638861_pgfId-1021892]## 

[#50638861_pgfId-1021893]##</navigation-rule>

|===

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021896]##public void savePizza();

[#50638861_pgfId-1021897]## 

[#50638861_pgfId-1021898]##<navigation-rule>

[#50638861_pgfId-1021899]## <description>

[#50638861_pgfId-1021900]## Pizza topping selection navigation handling

[#50638861_pgfId-1021901]## </description>

[#50638861_pgfId-1021902]##
<from-view-id>/selectToppings.xhtml</from-view-id>

[#50638861_pgfId-1021903]## <navigation-case>

[#50638861_pgfId-1021904]## <description>

[#50638861_pgfId-1021905]##Case where pizza is saved but there is
additional cost

[#50638861_pgfId-1021906]## </description>

[#50638861_pgfId-1021907]## <display-name>Pizza saved w/
extras</display-name>

[#50638861_pgfId-1021908]##
<from-action>#\{pizzaBuilder.savePizza}</from-action>

[#50638861_pgfId-1021909]## <if>#\{pizzaBuilder.additionalCost}</if>

[#50638861_pgfId-1021910]##
<to-view-id>/approveExtras.xhtml</to-view-id>

[#50638861_pgfId-1021911]## </navigation-case>

[#50638861_pgfId-1021912]## <navigation-case>

[#50638861_pgfId-1021913]## <description>

[#50638861_pgfId-1021914]##Case where pizza is saved and additional
pizzas are needed

[#50638861_pgfId-1021915]## </description>

[#50638861_pgfId-1021916]## <display-name>

[#50638861_pgfId-1021917]##Pizza saved, additional pizzas needed

[#50638861_pgfId-1021918]##</display-name>

[#50638861_pgfId-1021919]##
<from-action>#\{pizzaBuilder.savePizza}</from-action>

[#50638861_pgfId-1021920]## <if>#\{not order.complete}</if>

[#50638861_pgfId-1021921]## <to-view-id>/createPizza.xhtml</to-view-id>

[#50638861_pgfId-1021922]## </navigation-case>

[#50638861_pgfId-1021923]## <navigation-case>

[#50638861_pgfId-1021924]## <description>

[#50638861_pgfId-1021925]## Handle case where pizza is saved and order
is complete

[#50638861_pgfId-1021926]## </description>

[#50638861_pgfId-1021927]## <display-name>Pizza complete</display-name>

[#50638861_pgfId-1021928]##
<from-action>#\{pizzaBuilder.savePizza}</from-action>

[#50638861_pgfId-1021929]## <if>#\{order.complete}</if>

[#50638861_pgfId-1021930]## <to-view-id>/cart.xhtml</to-view-id>

[#50638861_pgfId-1021931]## </navigation-case>

[#50638861_pgfId-1021932]##</navigation-rule>

[#50638861_pgfId-1021933]## 

|===

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021936]##public String placeOrder();

[#50638861_pgfId-1021937]## 

[#50638861_pgfId-1021938]##<navigation-rule>

[#50638861_pgfId-1021939]## <description>

[#50638861_pgfId-1021940]## Cart navigation handling

[#50638861_pgfId-1021941]## </description>

[#50638861_pgfId-1021942]## <from-view-id>/cart.xhtml</from-view-id>

[#50638861_pgfId-1021943]## <navigation-case>

[#50638861_pgfId-1021944]## <description>

[#50638861_pgfId-1021945]## Handle case where account has one click
delivery enabled

[#50638861_pgfId-1021946]## </description>

[#50638861_pgfId-1021947]## <display-name>Place order w/ one-click
delivery</display-name>

[#50638861_pgfId-1021948]##
<from-action>#\{pizzaBuilder.placeOrder}</from-action>

[#50638861_pgfId-1021949]## <if>#\{account.oneClickDelivery}</if>

[#50638861_pgfId-1021950]## <to-view-id>/confirmation.xhtml</to-view-id>

[#50638861_pgfId-1021951]## </navigation-case>

[#50638861_pgfId-1021952]## <navigation-case>

[#50638861_pgfId-1021953]## <description>

[#50638861_pgfId-1021954]## Handle case where delivery information is
required

[#50638861_pgfId-1021955]## </description>

[#50638861_pgfId-1021956]## <display-name>

[#50638861_pgfId-1021957]##Place order w/o one-click delivery

[#50638861_pgfId-1021958]##</display-name>

[#50638861_pgfId-1021959]##
<from-action>#\{pizzaBuilder.placeOrder}</from-action>

[#50638861_pgfId-1021960]## <if>#\{not account.oneClickDelivery}</if>

[#50638861_pgfId-1021961]## <to-view-id>/delivery.xhtml</to-view-id>

[#50638861_pgfId-1021962]## </navigation-case>

[#50638861_pgfId-1021963]##</navigation-rule>

[#50638861_pgfId-1021964]## 

|===

=== [#50638861_pgfId-1021966]##

image:JSF-33.gif[image]

[#50638861_52748]##FlowHandler

[#50638861_pgfId-1021991]##Any JSF application can be modeled as a
directed graph where the nodes are views and the edges are transitions
between the views. Faces Flows introduces several other kinds of nodes
to this directed graph, providing support for encapsulating related
views and edges together. Applications can be created as composites of
modules of functionality, with each module consisting of well defined
entry and exit conditions, and the ability to share state among the
nodes within each module. This feature is heavily influenced by the
design of ADF Task Flows in Oracle’s Fusion Middleware and also by
Spring Web Flow and Apache MyFaces CODI. The normative specification for
this feature proceeds from the Javadoc for the class
_javax.faces.flow.FlowHandler_ , and also from related requirements in
link:JSF.htm#50638861_26626[See NavigationHandler]. This section
provides a non-normative usage example and walkthrough of feature so
that all the other parts of the specification that intersect with this
feature can be discovered.

==== [#50638861_pgfId-1025667]##Non-normative example

[#50638861_pgfId-1025680]##Here is a simple example to introduce the
feature. It does not touch on all aspects of the feature. The example
has two flows, each of which calls the other, passing parameters. Any
view outside of a flow may navigate to either of the flows, named flow-a
and flow-b.

image:JSF-34.gif[image]

[#50638861_pgfId-1028074]##This diagram uses the following conventions.

[#50638861_pgfId-1028140]##view nodes are boxes

[#50638861_pgfId-1028146]##faces flow return nodes are circles

[#50638861_pgfId-1028149]##faces flow call nodes are boxes with the
corners chopped off

[#50638861_pgfId-1028152]## _@FlowScoped_ beans are rectangles
semi-circular short sides

[#50638861_pgfId-1028201]##the start node is marked “start”

[#50638861_pgfId-1028204]##inbound and outbound parameters are listed by
name

[#50638861_pgfId-1028207]##arrows show valid traversals among the nodes.

[#50638861_pgfId-1027665]##These flows are identical, except for the
names of their constituents, and each has the following properties.

[#50638861_pgfId-1027258]##Three view nodes, one of which is the
implicit start node

[#50638861_pgfId-1027369]##One faces flow return node, each of which
returns the outcome “return1”

[#50638861_pgfId-1027404]##One flow call node, which calls the other
flow, with two outbound parameters, named to match up with the other
flow

[#50638861_pgfId-1028733]##Two inbound parameters, named to match up
with the other flow

[#50638861_pgfId-1028734]##The different kinds of nodes mentioned in the
preceding discussion are defined in the javadoc for class
_javax.faces.flow.FlowHandler_ .

[#50638861_pgfId-1045542]##Consider this simple web app, called
_basic_faces_flow_call.war_ , containing the above mentioned flows. The
file layout for of the app is shown next. The example is shown using
maven war packaging

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1028859]##basic_faces_flow_call/ +
pom.xml +
src/main/webapp/ +
index.xhtml +
return1.xhtml +
WEB-INF/beans.xml +
flow-a/ +
flow-a.xhtml +
next_a.xhtml +
next_b.xhtml +
flow-b/ +
flow-b-flow.xml +
next_a.xhtml +
next_b.xhtml +
src/main/java/com/sun/faces/basic_faces_flow_call/ +
FlowA.java +
Flow_a_Bean.java +
Flow_b_Bean.java
|===

[#50638861_pgfId-1028735]##To complete the example, the execution of the
flows is examined. When the application containing these flows is
deployed, the runtime discovers the flow definitions and adds them to
the internal flow data structure. One flow is defined in
_flow-b-flow.xml_ . This is an XML file conforming to the Application
Configuration Resources syntax described in
link:JSF.htm#50638850_31842[See Application Configuration Resources].
The other flow is defined in _FlowA.java_ , a class with a method with
the _@FlowDefinition_ annotation. When the flow discovery is complete,
an application scoped, thread safe data structure containing the flow
definitions is available from the _javax.faces.flow.FlowHandler_
singleton. This data structure is navigable by the runtime via the
_javax.faces.flow.Flow_ API.

[#50638861_pgfId-1030456]##When the user agent visits
_http://localhost:8080/basic_faces_flow_call/faces/index.xhtml_ , they
see a page with two buttons, the actions of which are _flow-a_ , and
_flow-b_ , respectively. Clicking either button causes entry to the
corresponding flow. In this case, the user clicks the _flow-a_ button.
The _@FlowScoped_ bean _Flow_a_Bean_ is instantiated by the container
and navigation proceeds immediately to the start node, in this case
_flow-a.xhtml_ . The user proceeds directly to click a button taking
them to _next_a.xhtml_ , and then to _next_b.xhtml_ . On that page there
is a button whose action is _callB_ . Clicking this button activates the
correspondingly named faces flow call node, which prepares the specified
outbound parameters, de-activates _Flow_a_Bean_ and calls _flow-b_ .

[#50638861_pgfId-1031333]##Upon entry to _flow-b_ , the _@FlowScoped_
bean _Flow_b_Bean_ is instantiated by the container, the outbound
parameters from _flow-a_ are matched up with corresponding inbound
parameters on _flow-b_ and navigation proceeds immediately to the start
node, in this case _flow-b.xhtml_ . The user proceeds directly to click
a button taking them to _next_a.xhtml_ , and then to _next_b.xhtml_ . On
that page there is a button whose action is _taskFlowReturn1_ . Clicking
this button causes _Flow_b_Bean_ to be deactivated and navigation to the
view named _return1_ to be performed.

==== [#50638861_pgfId-1031882]##Non-normative Feature Overview

[#50638861_pgfId-1031912]##The normative requirements of the feature are
stated in the context of the part of the specification impacted. This
section gives the reader a non-normative overview of the feature that
touches on all the parts of the specification that intersect with this
feature.

[#50638861_pgfId-1031969]## _Startup Time_

[#50638861_pgfId-1031962]##At startup time, the runtime will discover
flows available for this application. _This behavior is normatively
specified in link:JSF.htm#50638850_31461[See Faces Flows] and in the XML
schema for the application configuration resources._

[#50638861_pgfId-1031999]## _Invoke Application Time_

[#50638861_pgfId-1042560]##The default _ActionListener_ may need to take
special action when calling into a flow. _This behavior is normatively
specified in link:JSF.htm#50638861_40874[See ActionListener Property]._

[#50638861_pgfId-1046582]##The default _NavigationHandler_
implementation must use the _FlowHandler_ during its operation. _This
behavior is normatively specified in link:JSF.htm#50638861_53439[See
Default NavigationHandler Algorithm]_ .

=== [#50638861_pgfId-1021975]##

image:JSF-33.gif[image]

[#50638861_15560]##ViewHandler

[#50638861_pgfId-1021967]## _ViewHandler_ is the pluggability mechanism
for allowing implementations of or applications using the JavaServer
Faces specification to provide their own handling of the activities in
the _Render Response_ and _Restore View_ phases of the request
processing lifecycle. This allows for implementations to support
different response generation technologies, as well as different state
saving/restoring approaches.

[#50638861_pgfId-1016498]##A JSF implementation must provide a default
implementation of the _ViewHandler_ interface. __ See
link:JSF.htm#50638861_85228[See ViewHandler Property] for information on
replacing this default implementation with another implementation.

==== [#50638861_pgfId-1016503]##[#50638861_26354]##Overview

[#50638861_pgfId-1016508]## ViewHandler defines the public APIs
described in the following paragraphs

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016506]##public Locale calculateLocale(FacesContext
context);

[#50638861_pgfId-1016507]##public String
calculateRenderKitId(FacesContext context);

|===

[#50638861_pgfId-1016509]##These methods are called from _createView()_
to allow the new view to determine the _Locale_ to be used for all
subsequent requests, and to find out which _renderKitId_ should be used
for rendering the view.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016512]##public void initView(FacesContext) throws
FacesException;

[#50638861_pgfId-1016513]##public String
calculateCharacterEncoding(FacesContext context);

|===

[#50638861_pgfId-1019565]##The _initView()_ method must be called as the
first method in the implementation of the _Restore View Phase_ of the
request processing lifecycle, immediately after checking for the
existence of the _FacesContext_ parameter. See the javadocs for this
method for the specification.. __

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1019564]##public String deriveViewId(FacesContext
context, String input);
|===

[#50638861_pgfId-1016514]##The _deriveViewId()_ method is an
encapsulation of the viewId derivation algorithm in previous versions of
the specification. This method looks at the argument _input_ , and the
current request and derives the _viewId_ upon which the lifecycle will
be run. __

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016517]##public UIViewRoot createView(FacesContext
context, String viewId);
|===

[#50638861_pgfId-1016518]##Create and return a new _UIViewRoot_
instance, initialized with information from the specified _FacesContext_
and view identifier parameters.

[#50638861_pgfId-1018243]##If the view being requested is a Facelet
view, the _createView()_ method must ensure that the _UIViewRoot_ is
fully populated with all the children defined in the VDL page before
_createView()_ returns.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016521]##public String getActionURL(FacesContext
context, String viewId);
|===

[#50638861_pgfId-1020995]##Returns a URL, suitable for encoding and
rendering, that (if activated) will cause the JSF request processing
lifecycle for the specified _viewId_ to be executed

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1020994]##public String
getBookmarkableURL(FacesContext context, String viewId,
Map<String,List<String>> parameters, boolean includeViewParams);
|===

[#50638861_pgfId-1021113]##Return a JSF action URL derived from the
viewId argument that is suitable to be used as the target of a link in a
JSF response. The URL, if activated, would cause the browser to issue an
initial request to the specified viewId

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1021112]##public String getRedirectURL(FacesContext
context, String viewId, Map<String, List<String>> parameters, boolean
includeViewParams);
|===

[#50638861_pgfId-1021099]##Return a JSF action URL derived from the
_viewId_ argument that is suitable to be used by the _NavigationHandler_
to issue a redirect request to the URL using an initial request.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1021102]##public String getResourceURL(FacesContext
context, String path);
|===

[#50638861_pgfId-1021103]##Returns a URL, suitable for encoding and
rendering, that (if activated) will retrieve the specified web
application resource.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1021106]##public void renderView(FacesContext context,
UIViewRoot viewToRender) throws IOException, FacesException;
|===

[#50638861_pgfId-1016530]##This method must be called during the _Render
Response_ phase of the request processing lifecycle. It must provide a
valid _ResponseWriter_ or _ResponseStream_ instance, storing it in the
_FacesContext_ instance for the current request (see
link:JSF.htm#50638857_12181[See ResponseStream and ResponseWriter]), and
then perform whatever actions are required to cause the view currently
stored in the _viewRoot_ of the _FacesContext_ instance for the current
request to be rendered to the corresponding writer or stream. It must
also interact with the associated _StateManager_ (see
link:JSF.htm#50638861_63655[See StateManager]), by calling the
_getSerializedView()_ and _saveView()_ methods, to ensure that state
information for current view is saved between requests.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016539]##public UIViewRoot restoreView(FacesContext
context, String viewId) throws IOException;
|===

[#50638861_pgfId-1016540]##This method must be called from the _Restore
View_ phase of the request processing lifecycle. __ It must perform
whatever actions are required to restore the view associated with the
specified _FacesContext_ and _viewId_ .

[#50638861_pgfId-1016541]##It is the caller’s responsibility to ensure
that the returned _UIViewRoot_ instance is stored in the _FacesContext_
as the new _viewRoot_ property. In addition, if _restoreView()_ returns
_null_ (because there is no saved state for this view identifier), the
caller must call _createView()_ , and call _renderResponse()_ on the
_FacesContext_ instance for this request.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016544]##public void writeState(FacesContext context)
throws IOException;
|===

[#50638861_pgfId-1016545]##Take any appropriate action to either
immediately write out the current view’s state information (by calling
_StateManager.writeState()_ ), or noting where state information may
later be written. This method must be called once per call to the
_encodeEnd()_ method of any renderer for a _UIForm_ component, in order
to provide the _ViewHandler_ an opportunity to cause saved state to be
included with each submitted form.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1018428]##public ViewDeclarationLanguage
getViewDeclarationLanguage();

[#50638861_pgfId-1018429]## 

|===

[#50638861_pgfId-1021445]##See the javadocs for this method for the
specification.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1021443]##public Set<String>
getProtectedViewsUnmodifiable();

[#50638861_pgfId-1021453]##public void addProtectedView(String
urlPattern);

[#50638861_pgfId-1021454]##public boolean removeProtectedView(String
urlPattern)

[#50638861_pgfId-1021444]## 

|===

[#50638861_pgfId-1018431]##See the javadocs for these methods for the
specification.

==== [#50638861_pgfId-1016547]##[#50638861_36790]##Default ViewHandler Implementation

[#50638861_pgfId-1016548]##The terms _view identifier_ and _viewId_ are
used interchangeably below and mean the context relative path to the web
application resource that produces the view, such as a JSP page or a
Facelets page. In the JSP case, this is a context relative path to the
jsp page representing the view, such as _/foo.jsp_ . In the Facelets
case, this is a context relative path to the XHTML page representing the
view, such as _/foo.xhtml_ .

[#50638861_pgfId-1011401]##JSF implementations must provide a default
_ViewHandler_ implementation, along with a default
_ViewDeclarationLanguageFactory_ implementation that vends
_ViewDeclarationLanguage_ implementations designed to support the
rendering of JSP pages containing JSF components and Facelets pages
containing JSF components. The default _ViewHandler_ is specified in
this section and the default _ViewDeclarationLanguage_ implementations
are specified in the following section.

===== [#50638861_pgfId-1021369]##[#50638861_35329]##ViewHandler Methods that Derive Information From the Incoming Request

[#50638861_pgfId-1018352]##[P1-start ViewHandler.deriveViewId()
requirements] The _deriveViewId()_ method must fulfill the following
responsibilities:

[#50638861_pgfId-1017475]##If the argument input is _null_ , return
_null_ .

[#50638861_pgfId-1020949]##If prefix mapping (such as “/faces/*”) is
used for _FacesServlet_ , normalize the _viewId_ according to the
following algorithm, or its semantic equivalent, and return it.

[#50638861_pgfId-1020952]##Remove any number of occurrences of the
prefix mapping from the viewId. For example, if the incoming value was
_/faces/faces/faces/view.xhtml_ the result would be simply _view.xhtml_
.

[#50638861_pgfId-1017402]##If suffix mapping (such as “*.faces”) is used
for _FacesServlet_ , the _viewId_ is set using following algorithm.

[#50638861_pgfId-1018263]##Let _requestViewId_ be the value of argument
_input_ .

[#50638861_pgfId-1018248]##Consult the javadocs for
_ViewHandler.FACELETS_VIEW_MAPPINGS_PARAM_NAME_ and perform the steps
necessary to obtain a value for that param (or its alias as in the
javadocs). Let this be _faceletsViewMappings_ .

[#50638861_pgfId-1019648]##Obtain the value of the context
initialization parameter named by the symbolic constant
_ViewHandler.DEFAULT_SUFFIX_PARAM_NAME_ (if no such context
initialization parameter is present, use the value of the symbolic
constant _ViewHandler.DEFAULT_SUFFIX_ ). Let this be
_jspDefaultSuffixes_ . For each entry in the list from
_jspDefaultSuffixes_ , replace the suffix of _requestViewId_ with the
current entry from _jspDefaultSuffixes_ . For discussion, call this
_candidateViewId_ . For each entry in _faceletsViewMappings_ , If the
current entry is a prefix mapping entry, skip it and continue to the
next entry. If _candidateViewId_ is exactly equal to the current entry,
consider the algorithm complete with the result being _candidateViewId_
. If the current entry is a wild-card extension mapping, apply it
non-destructively to _candidateViewId_ and look for a physical resource
with that name. If present, consider the algorithm complete with the
result being the name of the physical resource. Otherwise look for a
physical resource with the name _candidateViewId_ . If such a resource
exists, consider the algorithm complete with the result being
_candidateViewId_ . If there are no entries in _faceletsViewMappings_ ,
look for a physical resource with the name _candidateViewId_ . If such a
resource exists, _candidateViewId_ is the correct _viewId_ .

[#50638861_pgfId-1018478]##Otherwise, obtain the value of the context
initialization parameter named by the symbolic constant
_ViewHandler.FACELETS_SUFFIX_PARAM_NAME_ . (if no such context
initialization parameter is present, use the value of the symbolic
constant _ViewHandler.DEFAULT_FACELETS_SUFFIX_ ). Let this be
_faceletsDefaultSuffix_ . Replace the suffix of _requestViewId_ with
_faceletsDefaultSuffix_ . For discussion, call this _candidateViewId_ .
If a physical resource exists with that name, _candidateViewId_ is the
correct _viewId_ .

[#50638861_pgfId-1019588]##Otherwise, if a physical resource exists with
the name _requestViewId_ let that value be _viewId_ .

[#50638861_pgfId-1020941]##Otherwise return _null_ .

[#50638861_pgfId-1051980]##If an exact mapping (such as /foo) is used
for FacesServlet, the viewId is set using following algorithm.

[#50638861_pgfId-1051981]##Let _requestViewId_ be the value of the
argument input.

[#50638861_pgfId-1051982]##Obtain the value of the context
initialization parameter named by the symbolic constant
_ViewHandler.FACELETS_SUFFIX_PARAM_NAME_ . (if no such context
initialization parameter is present, use the value of the symbolic
constant _ViewHandler.DEFAULT_FACELETS_SUFFIX_ ). Let this be
_faceletsDefaultSuffix_ .

[#50638861_pgfId-1051983]##Obtain the value of the context
initialization parameter named by the symbolic constant
_ViewHandler.DEFAULT_SUFFIX_PARAM_NAME_ (if no such context
initialization parameter is present, use the value of the symbolic
constant _ViewHandler.DEFAULT_SUFFIX_ ). Let this be _defaultSuffixes_ .

[#50638861_pgfId-1051984]##Add _faceletsDefaultSuffix_ to
_defaultSuffixes_ .

[#50638861_pgfId-1051985]##For each entry in the list from
_defaultSuffixes_ , add that current entry to the end of _requestViewId_
. For discussion, call this _candidateViewId_ . Look for a physical
resource with the name _candidateViewId_ . If such a resource exists,
consider the algorithm complete with the result being _candidateViewId_
.

[#50638861_pgfId-1051986]##Otherwise, if a physical resource exists with
the name _requestViewId_ let that value be _viewId_ . Otherwise return
_null_ .

{empty}[#50638861_pgfId-1051973]##[P1-end]

[#50638861_pgfId-1021418]##The getViewDeclarationLanguage() must fulfill
the following responsibilites.

[#50638861_pgfId-1021426]##See the javadocs for the normative
specification for this method.

{empty}[#50638861_pgfId-1021229]##[P1-start
ViewHandler.deriveLogicalViewId() requirements] The
_deriveLogicalViewId()_ method is identical to _deriveViewId()_ except
that it does not check for the existence of the resource. [P1-end]

[#50638861_pgfId-1019589]##[P1-start
ViewHandler.calculateCharacterEncoding() requirements] The
_calculateCharacterEncoding()_ method must fulfill the following
responsibilities:

[#50638861_pgfId-1016568]##Examine the _Content-Type_ request header. If
it has a _charset_ parameter extract it and return it.

{empty}[#50638861_pgfId-1013451]##If not, test for the existence of a
session by calling _getSession(false)_ on the _ExternalContext_ for this
_FacesContext_ . If the session is non- _null_ , look in the _Map_
returned by the _getSessionMap()_ method of the _ExternalContext_ for a
value under the key given by the value of the symbolic constant
_javax.faces.application.ViewHandler.CHARACTER_ENCODING_KEY_ . If a
value is found, convert it to a String and return it. [P1-end]

[#50638861_pgfId-1016599]##[P1-start calculateLocale() requirements] The
_calculateLocale()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1016600]##Attempt to match one of the locales returned
by the _getLocales()_ method of the _ExternalContext_ instance for this
request, against the supported locales for this application as defined
in the application configuration resources. Matching is performed by the
algorithm described in Section JSTL.8.3.2 of the JSTL Specification. If
a match is found, return the corresponding _Locale_ object.

[#50638861_pgfId-1016601]##Otherwise, if the application has specified a
default locale in the application configuration resources, return the
corresponding _Locale_ object.

{empty}[#50638861_pgfId-1016620]##Otherwise, return the value returned
by calling _Locale.getDefault()_ .[P1-end]

[#50638861_pgfId-1016638]##[P1-start calculateRenderKitId()
requirements] The _calculateRenderKitId()_ method must fulfill the
following responsibilities:

[#50638861_pgfId-1016639]##Return the value of the request parameter
named by the symbolic constant
_ResponseStateManager.RENDER_KIT_ID_PARAM_ if it is not _null_ .

[#50638861_pgfId-1016640]##Otherwise, return the value returned by
_Application.getDefaultRenderKitId()_ if it is not _null_ .

[#50638861_pgfId-1016641]##Otherwise, return the value specified by the
symbolic constant _RenderKitFactory.HTML_BASIC_RENDER_KIT._

===== [#50638861_pgfId-1021373]##ViewHandler Methods that are Called to Fill a Specific Role in the Lifecycle

{empty}[#50638861_pgfId-1017516]##[P1-start createView() requirements]
The _createView()_ method must obtain a reference to the
_ViewDeclarationLanguage_ for this _viewId_ and call its
_ViewDeclarationLanguage.createView()_ method, returning the result and
not swallowing any exceptions thrown by that method.[P1-end]

[#50638861_pgfId-1021386]##[P1-start initView() requirements] The
_initView()_ method must fulfill the following responsibilities:

{empty}[#50638861_pgfId-1021387]##See the javadocs for this method for
the specification.[P1-end]

{empty}[#50638861_pgfId-1021388]##[P1-start renderView() requirements]
The _renderView()_ method must obtain a reference to the
_ViewDeclarationLanguage_ for the _viewId_ of the argument
_viewToRender_ and call its _ViewDeclarationLanguage.restoreView()_
method, returning the result and not swallowing any exceptions thrown by
that method.[P1-end]

{empty}[#50638861_pgfId-1021389]##[P1-start restoreView()
requirements]The _restoreView()_ method must obtain a reference to the
_ViewDeclarationLanguage_ for the _viewId_ of the argument
_viewToRender_ and call its _ViewDeclarationLanguage.restoreView()_
method, returning the result and not swallowing any exceptions thrown by
that method.[P1-end]

[#50638861_pgfId-1021406]##The _writeState()_ method must fulfill the
following responsibilities:

{empty}[#50638861_pgfId-1021407]##Obtain the saved state stored in a
thread-safe manner during the invocation of _renderView()_ and pass it
to the _writeState()_ method of the _StateManager_ for this application.
[N/T-end]

===== [#50638861_pgfId-1021392]##[#50638861_46125]##ViewHandler Methods Relating to Navigation

[#50638861_pgfId-1016706]##[P1-start getActionURL() requirements] The
_getActionURL()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1016707]##If the specified _viewId_ does not start with
a “/”, throw _IllegalArgumentException_ .

[#50638861_pgfId-1052062]##If exact mapping (such as /foo) is used for
FacesServlet, the following algorithm must be followed to derive the
result.

[#50638861_pgfId-1052063]##Retrieve the collection of existing mappings
of the FacesServlet, e.g. using _ServletRegistration#getMappings()_ .
Let this be _facesServletMappings_ . If the argument _viewId_ has an
extension, then obtain the value of the context initialization parameter
named by the symbolic constant _ViewHandler.FACELETS_SUFFIX_PARAM_NAME_
. (if no such context initialization parameter is present, use the value
of the symbolic constant _ViewHandler.DEFAULT_FACELETS_SUFFIX_ ). Let
this be _faceletsDefaultSuffix_ .

[#50638861_pgfId-1052065]##Obtain the value of the context
initialization parameter named by the symbolic constant
_ViewHandler.DEFAULT_SUFFIX_PARAM_NAME_ (if no such context
initialization parameter is present, use the value of the symbolic
constant _ViewHandler.DEFAULT_SUFFIX_ ). Let this be _defaultSuffixes_ .

[#50638861_pgfId-1052066]##Add _faceletsDefaultSuffix_ to
_defaultSuffixes_ .

[#50638861_pgfId-1052067]##For each entry in the list from
_defaultSuffixes_ , if the extension of the argument _viewId_ is equal
to this entry, remove the extension from _viewId_ . For discussion, call
this _candidateViewId_ .

[#50638861_pgfId-1052068]##Look if the _candidateViewId_ is present in
_facesServletMappings_ . If so,the result is _contextPath +
candidateViewId_ .

[#50638861_pgfId-1052069]##If the argument _viewId_ has no extension,
then look if the _viewId_ is present in _facesServletMappings_ . If so,
the result is _contextPath + viewId_ .

[#50638861_pgfId-1052070]##If no result has been obtained, pick any
prefix mapping or extension mapping from _facesServletMappings_ . If no
such mapping is found, throw an _IllegalStateException_ .

[#50638861_pgfId-1052071]##If such mapping is found remove the "*"
character from that mapping, take that as the new mapping and continue
with evaluating this mapping as specified below for "if prefix mapping
[...] is used" and for "if suffix mapping [...] is used

[#50638861_pgfId-1052058]## 

[#50638861_pgfId-1016708]##If prefix mapping (such as “/faces/*”) is
used for _FacesServlet_ , prepend the context path of the current
application, and the specified prefix, to the specified viewId and
return the completed value. For example “
_/cardemo/faces/chooseLocale.jsp_ ”.

[#50638861_pgfId-1016727]##If suffix mapping (such as “*.faces”) is used
for _FacesServlet_ , the following algorithm must be followed to derive
the result.

[#50638861_pgfId-1018288]##If the argument _viewId_ has no extension,
the result is _contextPath + viewId + mapping_ , where _contextPath_ is
the context path of the current application, _viewId_ is the argument
_viewId_ and _mapping_ is the value of the mapping (such as “*.faces”).

[#50638861_pgfId-1018292]##If the argument _viewId_ has an extension,
and this extension is not _mapping_ , the result is _contextPath +
viewId.substring(0, period) + mapping_ .

[#50638861_pgfId-1018307]##If the argument _viewId_ has an extension,
and this extension is _mapping_ , the result is _contextPath + viewId_ .

[#50638861_pgfId-1018284]##For example “ _/cardemo/chooseLocale.faces_ ”

[#50638861_pgfId-1021467]##If the current view is one of the views to
which view protection must be applied, the returned URL must contain the
parameter with a name equal to the value of the constant defined by
_ResponseStateManager.NON_POSTBACK_VIEW_TOKEN_PARAM_ . The value of this
parameter must be the return value from a call to
_ResponseStateManager.getCryptographicallyStrongTokenFromSession()_ .
This parameter is inspected during the restore view phase (see
link:JSF.htm#50638877_45193[See Restore View]).

{empty}[#50638861_pgfId-1021460]##[P1-end]

[#50638861_pgfId-1021006]##[P1-start getBookmarkableURL() requirements]
The _getBookmarkableURL()_ method must fulfill the following
responsibilities:

[#50638861_pgfId-1021028]##If argument _includeViewParams_ is _true_ ,
obtain the view paramaters corresponding to the argument _viewId_ and
append them to the _Map_ given in argument _parameters_ . Let the
resultant _Map_ be called _paramsToEncode_ .

[#50638861_pgfId-1021029]##If the _viewId_ of the current _FacesContext_
is not equal to the argument _viewId_ , get the
_ViewDeclarationLanguage_ for the argument _viewId_ , obtain its
_ViewMetadata_ , call _createMetadataView()_ on it, then call
_ViewMetadata.getViewParameters()_ passing the return from
_createMetadataView()_ . Let the result of this method be _toViewParams_
.

[#50638861_pgfId-1021046]##If the _viewId_ of the current _FacesContext_
is equal to the argument _viewId_ , call
_ViewMetadata.getViewParameters()_ passing the current _UIViewRoot_ .
Let the result of this method be _toViewParams_ .

[#50638861_pgfId-1021055]##If _toViewParams_ is empty, take no further
action to add view parameters to this URL. Iterate over each
_UIViewParameter_ element in _toViewParams_ and take the following
actions on each element.

[#50638861_pgfId-1021069]##If the _Map_ given by _parameters_ has a key
equal to the _name_ property of the current element, take no action on
the current element and continue iterating.

[#50638861_pgfId-1021070]##If the current _UIViewParameter_ has a
_ValueExpression_ under the key _“value”_ (without the quotes), let
_value_ be the result of calling _getStringValueFromModel()_ on the
current _UIViewParameter_ .

[#50638861_pgfId-1021071]##Otherwise, if the current _viewId_ is the
same as the argument _viewId_ , let _value_ be the result of calling
_getStringValue()_ on the current _UIViewParameter_ .

[#50638861_pgfId-1021074]##Otherwise, if the current _viewId_ is
different from the argument _viewId_ , locate the _UIViewParameter_
instance in the current view whose name is equivalent to the current
element and let _value_ be the result of calling _getStringValue()_ on
the located _UIViewParameter_ .

[#50638861_pgfId-1021078]##If the above steps yielded a non- _null_
_value_ , find the _List<String>_ value in the _parameters_ map under
the key given by the _name_ property of the current _UIViewParameter_
element. If such a _List_ exists, add _value_ to it. Otherwise create a
_List<String>_ , add _value_ to it, and add it to the _parameters_ map
under the appropriate key.

[#50638861_pgfId-1021079]##If argument _includeViewParams_ is _false_ ,
take no action to add additional entries to _paramaters_ . Let
_paramsToEncode_ be _parameters_ .

[#50638861_pgfId-1021083]##Call _getActionURL()_ on the argument
_viewId_ . Let the result be _actionEncodedViewId_ .

[#50638861_pgfId-1021088]##Call _encodeBookmarkableURL()_ on the current
_ExternalContext_ , passing _actionEncodedViewId_ as the first argument
and _paramsToEncode_ as the second. Let the result be
_bookmarkEncodedURL_ .

{empty}[#50638861_pgfId-1021089]##Pass _bookmarkEncodedURL_ to
_ExternalContext.encodeActionURL()_ and return the result.[P1-end]

[#50638861_pgfId-1021124]##[P1-start getRedirectURL() requirements] The
_getRedirectURL()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1021125]##Take exactly the same action as in
_getBookmarkableURL()_ up to and including the call to _getActionURL()_
. Thereafter take the following actions.

[#50638861_pgfId-1021136]##Call _encodeRedirectURL()_ on the current
_ExternalContext_ , passing _actionEncodedViewId_ as the first argument
and _paramsToEncode_ as the second. Let the result be
_redirectEncodedURL_ .

{empty}[#50638861_pgfId-1021137]##Pass _redirectEncodedURL_ to
_ExternalContext.encodeActionURL()_ and return the result.[P1-end]

[#50638861_pgfId-1021030]##[P1-start getResourceURL() requirements] The
_getResourceURL()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1044242]##If the specified path starts with a “/”,
prefix it with the context path for the current web application, and
return the result.

{empty}[#50638861_pgfId-1044243]##Otherwise, return the specified _path_
value unchanged.[P1-end]

===== [#50638861_pgfId-1044245]##[#50638861_41052]##ViewHandler Methods that relate to View Protection

{empty}[#50638861_pgfId-1044346]##[P1-start addProtectedView()
requirements] See the javadocs for _addProtectedView()_ for the
normative specification. [P1-end]

{empty}[#50638861_pgfId-1044357]##[P1-start removeProtectedView()
requirements] See the javadocs for _removeProtectedView()_ for the
normative specification. [P1-end]

{empty}[#50638861_pgfId-1044381]##[P1-start
getProtectedViewsUnmodifiable() requirements] See the javadocs for
_getProtectedViewsUnmodifiable()_ for the normative specification.
[P1-end]

[#50638861_pgfId-1044150]##See the _View Protection_ section within
link:JSF.htm#50638877_45193[See Restore
View]link:JSF.htm#50638877_45193[See Restore View] for the normative
specification of this feature.

=== [#50638861_pgfId-1018561]##

image:JSF-33.gif[image]

[#50638861_54292]##ViewDeclarationLanguage

[#50638861_pgfId-1018565]##To support the introduction of Facelets into
the core specification, whilst preserving backwards compatibility with
existing JSP applications, the concept of the _View Declaration
Language_ was formally introduced in version 2 of the specification. A
View Declaration Language (VDL) is a syntax used to declare user
interfaces comprised of instances of JSF _UIComponent_ s. Under this
definition, both JSP and Facelets are examples of an implementation of a
VDL. Any of the responsibilities of the _ViewHandler_ that specifically
deal with the VDL sub-system are now the domain of the VDL
implementation. These responsibilities are defined on the
_ViewDeclarationLanguage_ class.

==== [#50638861_pgfId-1018678]##ViewDeclarationLanguageFactory

[#50638861_pgfId-1018682]## _ViewDeclarationLanguageFactory_ is a
factory object that creates (if needed) and returns a new
_ViewDeclarationLanguage_ instance based on the VDL found in a specific
view.

[#50638861_pgfId-1018729]##The factory mechanism specified in
link:JSF.htm#50638850_10.2.4.1%20FactoryFinder[See FactoryFinder] and
the decoration mechanism specified in link:JSF.htm#50638850_38316[See
Delegating Implementation Support] are used to allow decoration or
replacement of the _ViewDeclarationLanguageFactory_ .

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1018735]##public ViewDeclarationLanguage
getViewDeclarationLanguage(String viewId)
|===

[#50638861_pgfId-1018767]##Return the _ViewDeclarationLanguage_ instance
suitable for handling the VDL contained in the page referenced by the
argument viewId. [P1-start_required_ViewDeclarationLanguageImpls]The
default implementation must return a valid _ViewDeclarationLanguage_
instance for views written in either JSP or Facelets.
[P1-end_required_ViewDeclarationLanguageImpls]Whether the instance
returned is the same for a JSP or a Facelet view is an implementation
detail.

==== [#50638861_pgfId-1018755]##[#50638861_61706]##Default ViewDeclarationLanguage Implementation

[#50638861_pgfId-1018759]##For each of the methods on
_ViewDeclarationLanguage_ , the required behavior is broken into three
segments:

[#50638861_pgfId-1018780]##Behavior required of all compliant
implementations

[#50638861_pgfId-1018784]##Behavior required of the implementation that
handles Facelet views

[#50638861_pgfId-1018785]##Behavior required of the implementation that
handles JSP views

[#50638861_pgfId-1018789]##Any implementation strategy is valid as long
as these requirements are met.

===== [#50638861_pgfId-1020809]##[#50638861_76340]##ViewDeclarationLanguage.createView()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1020808]##public UIViewRoot createView(FacesContext
context, String viewId)
|===

[#50638861_pgfId-1020810]##[P1-start createView() requirements] The
_createView()_ method must fulfill the following responsibilities.

[#50638861_pgfId-1020811]##All implementations must:

[#50638861_pgfId-1020812]##If there is an existing _UIViewRoot_
available on the _FacesContext_ , this method must copy its _locale_ and
_renderKitId_ to this new view root. If not, this method must call
_calculateLocale()_ and _calculateRenderKitId()_ , and store the results
as the values of the _locale_ and _renderKitId_ , properties,
respectively, of the newly created _UIViewRoot_ .

[#50638861_pgfId-1020813]##If no _viewId_ could be identified, or the
_viewId_ is exactly equal to the servlet mapping, send the response
error code _SC_NOT_FOUND_ with a suitable message to the client.

[#50638861_pgfId-1020814]##Create a new _UIViewRoot_ object instance
using _Application.createComponent(UIViewRoot.COMPONENT_TYPE)_ .

[#50638861_pgfId-1020940]##Pass the argument _viewId_ to the
_setViewId()_ method on the new _UIViewRoot_ instance.

[#50638861_pgfId-1020820]##The new _UIViewRoot_ instance must be passed
to _FacesContext.setViewRoot()_ . This enables the broadest possible
range of implementations for how tree creation is actually implemented.

[#50638861_pgfId-1020821]##The JSP and implementation is not required to
take any additional action.

[#50638861_pgfId-1023568]##The Facelet implementation must call
_calculateResourceLibraryContracts()_ , passing the argument _viewId_ ,
and unconditionally set the result as the _resourceLibraryContracts_
property on the _FacesContext_ . The implementation must obtain the
_ViewDeclarationLanguage_ reference on which to invoke
_calculateResourceLibraryContracts()_ from the _ViewHandler_ . This
ensures the methods can be correctly decorated.

[#50638861_pgfId-1020822]##All implementations must:

[#50638861_pgfId-1020823]##Return the newly created _UIViewRoot_ .

{empty}[#50638861_pgfId-1022660]##[P1-end]

===== [#50638861_pgfId-1022679]##[#50638861_99703]##ViewDeclarationLanguage.calculateResourceLibraryContracts()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1022695]##public List<String>
calculateResourceLibraryContracts(FacesContext context, viewId)
|===

[#50638861_pgfId-1022689]##The JSP implementation must return _null_ .

[#50638861_pgfId-1022820]##The Facelet implementation must examine the
resource library contracts data structure, which was populated as
specified in link:JSF.htm#50638850_48089[See Resource Library
Contracts], and find the _<contract-mapping>_ element that matches the
argument _viewId_ . When processing the nested _<url-pattern>_ matches
must be made using the following rules in this order.

[#50638861_pgfId-1045242]##An exact match.

[#50638861_pgfId-1045348]##The longest match

[#50638861_pgfId-1045353]##The value * matches all incoming viewIds

[#50638861_pgfId-1045188]##The value returned from this method is the
list whose contents are taken from the _contracts_ attribute of the
matching _<contract-mapping>_ element.

===== [#50638861_pgfId-1022684]##ViewDeclarationLanguage.buildView()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1022683]##public void buildView(FacesContext context,
UIComponent root)
|===

[#50638861_pgfId-1019329]##[P1-start buildView() requirements] The
_buildView()_ method must fulfill the following responsibilities.

[#50638861_pgfId-1018841]##All implementations must:

[#50638861_pgfId-1018803]##The implementation must guarantee that the
page is executed in such a way that the _UIComponent_ tree described in
the VDL page is completely built and populated, rooted at the new
_UIViewRoot_ instance created previously.

[#50638861_pgfId-1020898]##The runtime must guarantee that the view must
be fully populated before the _afterPhase()_ method of any
_PhaseListeners_ attached to the application or to the _UIViewRoot_ (via
_UIViewRoot.setAfterPhaseListener()_ or _UIViewRoot.addPhaseListener()_
) are called.

[#50638861_pgfId-1020879]##The Facelets implementation must guarantee
the markup comprising the view is executed with the UIComponent
instances in the view being encountered in the same depth-first order as
in other lifecycle methods defined on _UIComponent_ , and added to the
view (but not rendered at this time), during the traversal. .

{empty}[#50638861_pgfId-1018982]##[P1-end]

===== [#50638861_pgfId-1019203]##[#50638861_41800]##ViewDeclarationLanguage.getComponentMetadata()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1019348]##public BeanInfo
getComponentMetadata(FacesContext context, Resource componentResource)
|===

[#50638861_pgfId-1019209]##[P1-start getComponentMetaData()
requirements] The _getComponentMetadata()_ method must fulfill the
following responsibilities:

[#50638861_pgfId-1019207]##All implementations must:

[#50638861_pgfId-1019226]##Return a reference to the component metadata
for the composite component represented by the argument
_componentResource_ , or _null_ if the metadata cannot be found. The
implementation may share and pool what it ends up returning from this
method to improve performance.

[#50638861_pgfId-1019222]##The Facelets implementation must

[#50638861_pgfId-1019223]##Support argument _componentResource_ being a
Facelet markup file that is to be interpreted as a composite component
as specified in link:JSF.htm#50638851_97048[See Composite Component
Metadata].

{empty}[#50638861_pgfId-1019253]##The JSP implementation is not required
to support argument _componentResource_ being a JSP markup file. In this
case, _null_ must be returned from this method.[P1-end]

===== [#50638861_pgfId-1020410]##ViewDeclarationLanguage.getViewMetadata() and getViewParameters()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1020409]##public ViewMetadata
getViewMetadata(FacesContext context, String viewId)
|===

[#50638861_pgfId-1020411]##[P1-start getViewtMetaData() requirements]
The _getViewMetadata()_ method must fulfill the following
responsibilities:

[#50638861_pgfId-1020412]##All implementations must:

[#50638861_pgfId-1020413]##Return a reference to the view metadata for
the view represented by the argument _viewId_ , or _null_ if the
metadata cannot be found. The implementation may share and pool what it
ends up returning from this method to improve performance.

[#50638861_pgfId-1020414]##The Facelets implementation must support
argument _viewId_ being a Facelet markup file from which the view
metadata should be extracted.

{empty}[#50638861_pgfId-1020746]##The JSP implementation is not required
to support argument _viewId_ being a JSP markup file. In this case,
_null_ must be returned from this method.[P1-end]

====== [#50638861_pgfId-1020727]##ViewMetadata Contract

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1020737]##public UIViewRoot createMetadataView()
|===

[#50638861_pgfId-1020733]##The content of the metadata is provided by
the page author as a special _<f:facet/>_ of the _UIViewRoot_ . The name
of this facet is given by the value of the symbolic constant
_UIViewRoot.METADATA_FACET_NAME_ . The _UIViewRoot_ return from this
method must have that facet, and its children as its only children. This
facet may contain _<f:viewParameter>_ or _<f:viewAction>_ children. Each
such element is the metadata will cause a _UIViewParameter_ or
_UIViewAction_ (respectively) to be added to the view. Because
_UIViewParameter_ extends _UIInput_ it is valid to attach any of the
kinds of attached objects to an _<f:viewParameter>_ that are valid for
any element that represents any other kind of _UIInput_ in the view.
Because _UIViewAction_ implements _ActionSource2_ , it is valid to
attach any of the kinds of attached objects to an _<f:viewAction>_ that
are valid for any element that represents any other kind of
_ActionSource2_ in the view.

{empty}[#50638861_pgfId-1020399]##]

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1020528]##public Collection<UIViewParameter>
getViewParameters(UIViewRoot)
|===

[#50638861_pgfId-1020530]##Convenience method that uses the view
metadata specification above to obtain the _List<UIViewParameter>_ for
the argument viewId.

===== [#50638861_pgfId-1019265]##ViewDeclarationLanguage.getScriptComponentResource()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1019361]##public Resource
getScriptComponentResource(FacesContext context, Resource
componentResource)
|===

[#50638861_pgfId-1019275]##[P1-start getScriptComponentResource()
requirements] The _getScriptComponentResource()_ method must fulfill the
following responsibilities:

[#50638861_pgfId-1019276]##The Facelets implementation must:

[#50638861_pgfId-1019277]##Take implementation specific action to
discover a _Resource_ given the argument _componentResource_ . The
returned _Resource_ if non- _null_ , must point to a script file that
can be turned into something that extends _UIComponent_ and implements
_NamingContainer_ .

{empty}[#50638861_pgfId-1019283]##The JSP implementation is not required
to support this method. In this case, _null_ must be returned from this
method.[P1-end]

[#50638861_pgfId-1019269]## 

===== [#50638861_pgfId-1019190]##ViewDeclarationLanguage.renderView()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1019381]##public void renderView(FacesContext context,
String viewId)
|===

[#50638861_pgfId-1018987]##[P1-start renderView() requirements] The
_renderView()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1019021]##All implementations must:

[#50638861_pgfId-1019029]##Return immediately if calling _isRendered()_
on the argument _UIViewRoot_ returns _false_ .

[#50638861_pgfId-1019045]##The JSP implementation must:

[#50638861_pgfId-1018988]##If the current request is a _ServletRequest_
, call the _set()_ method of the _javax.servlet.jsp.jstl.core.Config_
class, passing the current _ServletRequest_ , the symbolic constant
_Config.FMT_LOCALE_ , and the _locale_ property of the specfied
_UIViewRoot_ . This configures JSTL with the application’s preferred
locale for rendering this response.

[#50638861_pgfId-1018989]##Update the JSTL locale attribute in request
scope so that JSTL picks up the new locale from the _UIViewRoot_ . This
attribute must be updated before the JSTL _setBundle_ tag is called
because that is when the new _LocalizationContext_ object is created
based on the locale.

[#50638861_pgfId-1018991]##Create a wrapper around the current response
from the _ExternalContext_ and set it as the new response in the
_ExternalContext_ . Otherwise, omit this step. This wrapper must buffer
all content written to the response so that it is ready for output at a
later point. This is necessary to allow any content appearing after the
_<f:view>_ tag to appear in the proper position in the page.

[#50638861_pgfId-1018992]##Execute the JSP page to build the view by
treating the _viewId_ as a context-relative path (starting with a slash
character), by passing it to the _dispatch()_ method of the
_ExternalContext_ associated with this request. Otherwise, continue to
the next step. This causes control to pass to the JSP container, and
then to _UIComponentClassicTagBase_ . Please consult the javadocs for
that class for the specification of how to handle building the view by
executing the JSP page.

[#50638861_pgfId-1018993]##Store the wrapped response in a thread-safe
manner for use below. Otherwise, omit this step. The default
implementation uses the request scope for this purpose.

[#50638861_pgfId-1018994]##Restore the original response into the
_ExternalContext_ .

[#50638861_pgfId-1018995]##If the _FacesContext_ has a non- _null_
_ResponseWriter_ create a new writer using its _cloneWithWriter()_
method, passing the response’s _Writer_ as the argument. Otherwise, use
the current _RenderKit_ to create a new _ResponseWriter_ .

[#50638861_pgfId-1018996]##Set the new _ResponseWriter_ into the
_FacesContext_ , saving the old one aside.

[#50638861_pgfId-1018997]##All implementations must:

[#50638861_pgfId-1019054]##Call _saveView()_ on the _StateManager_ for
this application, saving the result in a thread-safe manner for use in
the _writeState()_ method of _ViewHandler_ .

[#50638861_pgfId-1018998]##Call _startDocument()_ on the
_ResponseWriter_ .

[#50638861_pgfId-1019088]##The Facelets implementation must:

[#50638861_pgfId-1019092]##Call _encodeAll()_ on the _UIViewRoot_ .

[#50638861_pgfId-1019061]##The JSP implementation must:

[#50638861_pgfId-1019000]##Output any content in the wrapped response
from above to the response, removing the wrapped response from the
thread-safe storage.

[#50638861_pgfId-1019070]##All implementations must:

[#50638861_pgfId-1019001]##Call _endDocument()_ on the _ResponseWriter_
.

[#50638861_pgfId-1019077]##The JSP implementation must:

[#50638861_pgfId-1019002]##If the old _ResponseWriter_ was not _null_ ,
place the old _ResponseWriter_ back into the _FacesContext_ .

[#50638861_pgfId-1019093]##The Facelets implementation must

{empty}[#50638861_pgfId-1019097]##Close the writer used to write the
response.[P1-end]

===== [#50638861_pgfId-1019197]##[#50638861_51384]##ViewDeclarationLanguage.restoreView()

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1019392]##public UIViewRoot restoreView(FacesContext
context, String viewId)
|===

[#50638861_pgfId-1019126]##[P1-start restoreView() requirements]The
_restoreView()_ method must fulfill the following responsibilities:

[#50638861_pgfId-1019138]##The JSP implementation must:

[#50638861_pgfId-1019131]##If no _viewId_ could be identified, return
_null_ .

[#50638861_pgfId-1019132]##Call the _restoreView()_ method of the
associated _StateManager_ , passing the _FacesContext_ instance for the
current request and the calculated _viewId_ , and return the returned
_UIViewRoot_ , which may be _null_ .

[#50638861_pgfId-1047582]##The Facelets implementation must:

[#50638861_pgfId-1047627]##Call _ResponseStateManager.isStateless()_ .
If the result is _false_ , proceed as specified in the JSP
implementation. Otherwise, take the following steps and return.

[#50638861_pgfId-1047820]##Obtain a reference to the
_ViewDeclarationLanguage_ from the _ViewDeclarationLanguageFactory_ .
This is necessary to allow for proper decoration. It is not acceptable
to simply use the java language _this_ keyword.

[#50638861_pgfId-1048082]##Call _createView()_ on the
_ViewDeclarationLanguage_ instance, passing the _context_ and _viewId_
arguments. Let _viewRoot_ be the result.

[#50638861_pgfId-1048203]##Call _FacesContext.setViewRoot(_ _viewRoot_
_)_ .

[#50638861_pgfId-1048284]##Call _buildView()_ on the
_ViewDeclarationLanguage_ , passing the _context_ and _viewRoot_ .

[#50638861_pgfId-1048371]##Return the _viewRoot_ .

{empty}[#50638861_pgfId-1047568]##[P1-end]

[#50638861_pgfId-1018886]## 

=== [#50638861_pgfId-1018744]##

image:JSF-33.gif[image]

[#50638861_63655]##StateManager

[#50638861_pgfId-1018738]## _StateManager_ directs the process of saving
and restoring the view between requests. The _StateManager_ instance for
an application is retrieved from the _Application_ instance, and
therefore cannot know any details of the markup language created by the
_RenderKit_ being used to render a view. Therefore, the _StateManager_
utilizes a helper object (see link:JSF.htm#50638855_88992[See
ResponseStateManager]), that is provided by the _RenderKit_
implementation, and is therefore aware of the markup language details.
The JSF implementation must provide a default _StateManager_
implementation that supports the behavior described below.

==== [#50638861_pgfId-1016875]##[#50638861_71617]##Overview

[#50638861_pgfId-1016876]##Conceptually, the state of a view can be
divided into two pieces:

[#50638861_pgfId-1016877]## _Tree Structure_ . This includes component
parent-child relationships, including facets.

[#50638861_pgfId-1016878]## _Component State_ . This includes:

[#50638861_pgfId-1010952]##Component attributes and properties, and

[#50638861_pgfId-1016883]## _Validator_ s, _Converter_ s,
_FacesListener_ s, and other objects attached to a component. The manner
in which these _attached objects_ are saved is up to the component
implementation. For attached objects that may have state, the
_StateHolder_ interface (see link:JSF.htm#50638851_95437[See
StateHolder]) is provided to allow these objects to preserve their own
attributes and properties. If an attached object does not implement
_StateHolder_ , but does implement _Serializable_ , it is saved using
standard serialization. Attached objects that do not implement either
_StateHolder_ or _Serializable_ must have a public, zero-arg
constructor, and will be restored only to their initial, default object
statelink:#pgfId-1016889[11].

[#50638861_pgfId-1016890]##It is beneficial to think of this separation
between tree structure and tree state to allow the possibility that
implementations can use a different mechanism for persisting the
structure than is used to persist the state. For example, in a system
where the tree structure is stored statically, as an XML file, for
example, the system could keep a DOM representation of the trees
representing the webapp UI in memory, to be used by all requests to the
application.

===== [#50638861_pgfId-1048396]##[#50638861_32414]##Stateless Views

[#50638861_pgfId-1048416]##Version 2.2 of the specification adds support
for stateless views. In such a view, the _UIComponent_ state for the
components is not saved. This feature must be used with full awareness
of the statefulness requirements of the components in the view. If a
component requires state to operate correctly, it must not be used in a
stateless view. Furthermore, it is not required that _@ViewScoped_
managed beans work at all with stateless views. This feature only works
with Facelet based views, not JSP based views.

[#50638861_pgfId-1049251]##To mark a view as stateless, the existing
_transient_ property from _UIComponent_ is exposed to the view author by
means of the _transient_ attribute on the _<f:view>_ tag from the Faces
Core tag library. The following spec sections contain more normative
requirements for stateless views.

[#50638861_pgfId-1049520]##The vdldocs for the Facelet variant of the
_<f:view>_ tag.

[#50638861_pgfId-1049691]##The javadocs for
_ResponseStateManager.writeState(FacesContext, Object)_

[#50638861_pgfId-1049529]##The javadocs for
_ResponseStateManager.isStateless(FacesContext)_

{empty}[#50638861_pgfId-1049555]##link:JSF.htm#50638861_51384[See
ViewDeclarationLanguage.restoreView()]

[#50638861_pgfId-1049565]##The javadocs for
_javax.faces.view.ViewScoped_

[#50638861_pgfId-1049626]##The javadocs for
_javax.faces.bean.ViewScoped_

==== [#50638861_pgfId-1016892]##[#50638861_53238]##State Saving Alternatives and Implications

[#50638861_pgfId-1016893]##JSF implementations support two primary
mechanisms for saving state, based on the value of the
_javax.faces.STATE_SAVING_METHOD_ initialization parameter (see
link:JSF.htm#50638850_59981[See Application Configuration Parameters]).
The possible values for this parameter give a general indication of the
approach to be used, while allowing JSF implementations to innovate on
the technical details:

[#50638861_pgfId-1016897]## _client_ -- Cause the saved state to be
included in the rendered markup that is sent to the client (such as in a
hidden input field for HTML). The state information must be included in
the subsequent request, making it possible for JSF to restore the view
without having saved information on the server side. It is advisable
that this information be encrypted and tamper evident, since it is being
sent down to the client, where it may persist for some time.The default
implementation Serializes the view in _client_ mode.

[#50638861_pgfId-1016898]## _server_ -- Cause the saved state to be
stored on the server in between requests. Implementations that wish to
enable their saved state to fail over to a different container instance
must keep this in mind when implementing their server side state saving
strategy. Serializing the view in server mode is optional but must be
possible by setting the _context-param
javax.faces.SERIALIZE_SERVER_STATE_ to _true_ . In the _server_ mode,
this serialized view is stored in the session and a unique key to
retrieve the view is sent down to the client. By storing the serialized
view in the session, failover may happen using the usual mechanisms
provided by the container.

[#50638861_pgfId-1022540]##Serializable in the preceding text means the
values of all component attributes and properties (as well as the saved
state of attached objects) must implement _java.io.Serializable_ such
that if the aggregate saved state were written to an
_ObjectOutputStream_ , a _NotSerializableException_ would not be thrown.

==== [#50638861_pgfId-1016904]##[#50638861_82303]##State Saving Methods.

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016903]##public Object saveView(FacesContext
context);
|===

{empty}[#50638861_pgfId-1016927]##[P1-start saveView() requirements]
This method causes the tree structure and component state of the view
contained in the argument _FacesContext_ to be collected, stored, and
returned in a _java.lang.Object_ instance that must implement
_java.io.Serializable_ . If _null_ is returned from this method, there
is no state to save.[P1-end]

[#50638861_pgfId-1013104]##The returned object must represent the entire
state of the view, such that a request processing lifecycle can be run
against it on postback. Special care must be taken to guarantee that
objects attached to component instances, such as listeners, converters,
and validators, are also saved. The _StateHolder_ interface is provided
for this reason.

[#50638861_pgfId-1016945]##This method must also enforce the rule that
component ids within a _NamingContainer_ must be unique

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016948]##public void writeState(FacesContext context,
Object state) throws IOException;
|===

[#50638861_pgfId-1016949]##Save the state represented in the specified
_Object_ instance, in an implementation dependent manner.

==== [#50638861_pgfId-1016954]##[#50638861_22101]##State Restoring Methods

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016953]##public UIViewRoot restoreView(FacesContext
context, String viewId);
|===

[#50638861_pgfId-1016955]##Restore the tree structure and the component
state of the view for this _viewId_ to be restored, in an implementation
dependent manner. If there is no saved state information available for
this _viewId_ , this method returns _null_ .

[#50638861_pgfId-1016956]##The default implementation of this method
calls through to _restoreTreeStructure()_ and, if necessary
_restoreComponentState()._

==== [#50638861_pgfId-1016960]##Convenience Methods

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1016959]##public boolean
isSavingStateInClient(FacesContext context);
|===

{empty}[#50638861_pgfId-1013170]##[P1-start isSavingStateInClient()
requirements] Return _true_ if and only if the value of the
_ServletContext_ init parameter named by the value of the constant
_StateManager.STATE_SAVING_METHOD_PARAM_NAME_ is equal to the value of
the constant _STATE_SAVING_METHOD_CLIENT_ . Return _false_ otherwise.
[P1-end]

[width="100%",cols="100%",]
|===
|[#50638861_pgfId-1018040]##public String getViewState(FacesContext
context);
|===

[#50638861_pgfId-1018050]##Return the current view state as a String.
[P1-start-getViewState] This method must call
ResposeStateManger.getViewState.[P1-end] Refer to
link:JSF.htm#50638855_88992[See ResponseStateManager] for more details.

=== [#50638861_pgfId-1018117]##

image:JSF-33.gif[image]

ResourceHandler

[#50638861_pgfId-1018149]##The normative specification for this class is
in the javadoc for _javax.faces.application.ResourceHandler_ . See also
link:JSF.htm#50638877_44233[See Resource Handling].

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1018153]##public ResourceHandler getResourceHandler();

[#50638861_pgfId-1018154]## 

[#50638861_pgfId-1018155]##public void
setResourceHandler(ResourceHandler impl);

|===

=== [#50638861_pgfId-1013148]##

image:JSF-33.gif[image]

[#50638861_Partial Traversal]##[#50638861_Default Partial Traversal Strategy]##Deprecated
APIs

==== [#50638861_pgfId-1017004]##[#50638861_92700]##PropertyResolver Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1016999]##public PropertyResolver
getPropertyResolver();

{empty}[#50638861_pgfId-1017000]##[deprecated]

[#50638861_pgfId-1017001]## 

[#50638861_pgfId-1017002]##public void
setPropertyResolver(PropertyResolver resolver);

{empty}[#50638861_pgfId-1017003]##[deprecated]

|===

[#50638861_pgfId-1017053]##[N/T-start getPropertyResolver()
requirements] getPropertyResolver() must return a _PropertyResolver_
instance that wraps the _ELResolver_ instance that Faces provides to the
unified EL. [N/T-end] The _PropertyResolver_ instance will be utilized
to evaluate each . or [] operator when processing value expressions.
This method has been deprecated for getELResolver() (see
link:JSF.htm#50638861_35420[See ELResolver Property]).

[#50638861_pgfId-1017066]##setPropertyResolver() replaces the
_PropertyResolver_ instance that will be utilized to evaluate each _._
or _[]_ operator when processing a value binding expression. A default
implementation must be provided, which operates as described in
link:JSF.htm#50638862_15408[See PropertyResolver and the Default
PropertyResolver]. This method has been deprecated. See the Javadocs for
setPropertyResolver().

==== [#50638861_pgfId-1017075]##[#50638861_32197]##VariableResolver Property

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017070]##public VariableResolver
getVariableResolver();

{empty}[#50638861_pgfId-1017071]##[deprecated]

[#50638861_pgfId-1017072]## 

[#50638861_pgfId-1017073]##public void
setVariableResolver(VariableResolver resolver);

{empty}[#50638861_pgfId-1017074]##[deprecated]

|===

{empty}[#50638861_pgfId-1017113]##[N/T-start getVariableResolver()
requirements] getVariableResolver() must return the _VariableResolver_
that wraps the ELResolver instance that Faces provides to the unified
EL. The _VariableResolver_ instance will be utilized to convert the
first name in a value expression into a corresponding object. The
implementation must pass _null_ as the base argument for any methods
invoked on the underlying ELResolver _._ This method has been deprecated
for getELResolver(). [N/T-end]

[#50638861_pgfId-1017139]##setVariableResolver replaces the
_VariableResolver_ instance that will be utilized to resolve method and
value bindings. A default implementation must be provided, which
operates as described in link:JSF.htm#50638862_74815[See
VariableResolver and the Default VariableResolver]. The method has been
deprecated. See the Javadocs for setVariableResolver().

==== [#50638861_pgfId-1017145]##[#50638861_87499]##Acquiring ValueBinding Instances

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017143]##public ValueBinding createValueBinding(String
ref);

{empty}[#50638861_pgfId-1017144]##[deprecated]

|===

{empty}[#50638861_pgfId-1012455]##Create and return a _ValueBinding_
that can be used to evaluate the specified value binding expression.
Call through to _createValueExpression_ , passing the argument ref,
Object.class for the expectedType, and null for the fnMapper. To avoid
nondeterministic behavior, it is recommended that applications (or
frameworks) wishing to plug in their own resolver implementations do so
before _createValueBinding()_ is called for the first time. This method
has been deprecated for _createValueExpression()_
(link:JSF.htm#50638861_19498[See Programmatically Evaluating
Expressions]

==== [#50638861_pgfId-1017175]##Acquiring MethodBinding Instances

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017173]##public MethodBinding
createMethodBinding(String ref, Class params[]);

{empty}[#50638861_pgfId-1017174]##[deprecated]

|===

[#50638861_pgfId-1017181]##Create and return a _MethodBinding_ that can
be used to evaluate the specified method binding expression, and invoke
the specified method. The implementation must call through to
_createMethodExpression,_ passing the given arguments, and wrap the
result in a MethodBinding implementation, returning it. The method that
is invoked must have parameter signatures that are compatible with the
classes in the _params_ parameterlink:#pgfId-1017184[12] (which may be
_null_ or a zero-length array if the method to be called takes no
parameters). The actual parameters to be passed when the method is
executed are specified on the _invoke()_ call of the returned
_MethodBinding_ instance.

[#50638861_pgfId-1017185]##To avoid nondeterministic behavior, it is
recommended that applications (or frameworks) wishing to plug in their
own resolver implementations do so before calling
_createMethodBinding()_ for the first time. This method has been
deprecated.

==== [#50638861_pgfId-1012972]##Object Factories

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1012970]##public UIComponent
createComponent(ValueBinding componentBinding, FacesContext context,
String componentType);

{empty}[#50638861_pgfId-1012971]##[deprecated]

|===

[#50638861_pgfId-1017220]##Special version of the factory for
UIComponent instances that is used when evaluating component binding
expression properties. The implementation of this method must wrap the
argument componentBinding in an implementation of ValueExpression and
call through to createComponent(javax.el.ValueExpression,
javax.faces.FacesContext, java.lang.String). This method has been
deprecated for createComponent() using ValueExpression (see
link:JSF.htm#50638861_19251[See Object Factories])

==== [#50638861_pgfId-1017225]##StateManager

[#50638861_pgfId-1017226]##This method causes the tree structure and
component state of the view contained in the argument _FacesContext_ to
be collected, stored, and returned in a _StateManager.SerializedView_
instance. If _null_ is returned from this method, there is no state to
save.

[#50638861_pgfId-1017227]##This method must also enforce the rule that
component ids within a _NamingContainer_ must be unique

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017230]##public void writeState(FacesContext context,
StateManager.SerializedView state) throws IOException;

{empty}[#50638861_pgfId-1017231]##[deprecated]

|===

[#50638861_pgfId-1017232]##Save the state represented in the specified
_SerializedView_ instance, in an implementation dependent manner.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017235]##protected Object
getTreeStructureToSave(FacesContext context);

{empty}[#50638861_pgfId-1017236]##[deprecated]

|===

[#50638861_pgfId-1017237]##This method must create a _Serializable_
object that represents the tree structure of the component tree for this
view. Tree structure is comprised of parent-child relationships,
including facets. The _id_ of each component and facet must also be
saved to allow the naming containers in the tree to be correctly
restored when this view is restored.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017240]##protected Object
getComponentStateToSave(FacesContext context);

{empty}[#50638861_pgfId-1017241]##[deprecated]

|===

[#50638861_pgfId-1017242]##This method must create a _Serializable_
object representing the component state (attributes, properties, and
attached objects) of the component tree for this view. Attached objects
that wish to save and restore their own state must implement
_StateHolder_ .

==== [#50638861_pgfId-1013023]##[#50638861_37766]##ResponseStateManager

[#50638861_pgfId-1017247]##This method causes the tree structure and
component state of the view contained in the argument _FacesContext_ to
be collected, stored, and returned in a _StateManager.SerializedView_
instance. If _null_ is returned from this method, there is no state to
save.

[#50638861_pgfId-1017248]##This method must also enforce the rule that
component ids within a _NamingContainer_ must be unique

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017251]##public void writeState(FacesContext context,
StateManager.SerializedView state) throws IOException;

{empty}[#50638861_pgfId-1017252]##[deprecated]

|===

[#50638861_pgfId-1017253]##Save the state represented in the specified
_SerializedView_ instance, in an implementation dependent manner.

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1017256]##protected Object
getTreeStructureToRestore(FacesContext context, String viewId);

{empty}[#50638861_pgfId-1017257]##[deprecated]

|===

[#50638861_pgfId-1018567]##The implementation must inspect the current
request and return the tree structure Object passed to it on a previous
invocation of _writeState()_ ..

[width="100%",cols="100%",]
|===
a|
[#50638861_pgfId-1018570]##protected Object
getComponentStateToRestore(FacesContext context, String viewId);

{empty}[#50638861_pgfId-1018571]##[deprecated]

|===

[#50638861_pgfId-1013213]##The implementation must inspect the current
request and return the component state Object passed to it on a previous
invocation of _writeState()_ .

[#50638855_pgfId-1017081]## 

[#50638855_pgfId-1017083]## [#50638855_43345]##

== [#50638855_pgfId-1015689]##

image:JSF-35.gif[image]

[#50638855_56441]##Rendering Model

image:JSF-36.gif[image]

[#50638855_pgfId-1015690]##JavaServer Faces supports two programming
models for decoding component values from incoming requests, and
encoding component values into outgoing responses - the _direct
implementation_ and _delegated implementation_ models. When the _direct
implementation_ model is utilized, components must decode and encode
themselves. When the _delegated implementation_ programming model is
utilized, these operations are delegated to a _Renderer_ instance
associated (via the _rendererType_ property) with the component. This
allows applications to deal with components in a manner that is
predominantly independent of how the component will appear to the user,
while allowing a simple operation (selection of a particular _RenderKit_
) to customize the decoding and encoding for a particular client device
or localized application user.

[#50638855_pgfId-1015691]##Component writers, application developers,
tool providers, and JSF implementations will often provide one or more
_RenderKit_ implementations (along with a corresponding library of
_Renderer_ instances). In many cases, these classes will be provided
along with the _UIComponent_ classes for the components supported by the
_RenderKit_ . Page authors will generally deal with _RenderKit_ s
indirectly, because they are only responsible for selecting a render kit
identifier to be associated with a particular page, and a _rendererType_
property for each _UIComponent_ that is used to select the corresponding
_Renderer_ .

=== [#50638855_pgfId-1015693]##

image:JSF-37.gif[image]

[#50638855_48699]##RenderKit

{empty}[#50638855_pgfId-1016586]##A _RenderKit_ instance is optionally
associated with a view, and supports components using the _delegated
implementation_ programming model for the decoding and encoding of
component values. It also supports _Behavior_ instances for the
rendering of client side behavior and decoding for queuing
_BehaviorEvents._ Refer to
link:JSF.htm#50638851_Component%20Behavior%20Model[See Component
Behavior Model] for more details about this feature.
[P1-start-renderkit]Each JSF implementation must provide a default
_RenderKit_ instance (named by the render kit identifier associated with
the String constant _RenderKitFactory.HTML_BASIC_RENDER_KIT_ as
described below) that is utilized if no other _RenderKit_ is
selected.[P1-end]

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016589]##public Renderer getRenderer(String family,
String rendererType);
|===

[#50638855_pgfId-1015722]##Return the _Renderer_ instance corresponding
to the specified component _family_ and _rendererType (if any),_ which
will typically be the value of the _rendererType_ property of a
_UIComponent_ about to be decoded or encoded

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016607]##public ClientBehaviorRenderer
getClientBehaviorRenderer(String type);
|===

[#50638855_pgfId-1016633]##Return the _ClientBehaviorRenderer_ instance
corresponding to the specified behavior type.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016632]##public void addRenderer(String family,
String rendererType, Renderer renderer);
|===

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016649]##public void addClientBehaviorRenderer(String
type, ClientBehaviorRenderer renderer);
|===

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016654]##public Iterator<String>
getClientBehaviorRendererTypes();
|===

[#50638855_pgfId-1016635]##Applications that wish to go beyond the
capabilities of the standard _RenderKit_ that is provided by every JSF
implementation may either choose to create their own _RenderKit_
instances and register them with the _RenderKitFactory_ instance (see
link:JSF.htm#50638855_15408[See RenderKitFactory]), or integrate
additional (or replacement) supported _Renderer_ instances into an
existing _RenderKit_ instance. For example, it will be common for an
application that requires custom component classes and _Renderer_ s to
register them with the standard _RenderKit_ provided by the JSF
implementation, at application startup time See
link:JSF.htm#50638850_57167[See Example Application Configuration
Resource]for an example of a _faces-config.xml_ configuration resource
that defines two additional Renderer instances to be registered in the
default _RenderKit_ .

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016644]##public ResponseWriter
createResponseWriter(Writer writer, String contentTypeList, String
characterEncoding);
|===

[#50638855_pgfId-1015736]##Use the provided _Writer_ to create a new
_ResponseWriter_ instance for the specified character encoding.

[#50638855_pgfId-1015773]##The _contentTypeList_ parameter is an "Accept
header style" list of content types for this response, or _null_ if the
_RenderKit_ should choose the best fit. [P1-start-contentTypeList]The
_RenderKit_ must support a value for the _contentTypeList_ argument that
comes straight from the _Accept_ HTTP header, and therefore requires
parsing according to the specification of the _Accept_ header.[P1-end]
Please see Section 14.1 of RFC 2616 (the HTTP 1.1 RFC) for the
specification of the _Accept_ header.

{empty}[#50638855_pgfId-1015774]##Implementors are advised to consult
the _getCharacterEncoding()_ method of class
_javax.faces.servlet.ServletResponse_ to get the required value for the
characterEncoding parameter for this method. Since the _Writer_ for this
response will already have been obtained (due to it ultimately being
passed to this method), we know that the character encoding cannot
change during the rendering of the response. Please see
link:JSF.htm#50638857_12780[See ResponseWriter]

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015780]##public ResponseStream
createResponseStream(OuputStream out);
|===

[#50638855_pgfId-1015784]##Use the provided _OutputStream_ to create a
new _ResponseStream_ instance.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015783]##public ResponseStateManager
getResponseStateManager();
|===

[#50638855_pgfId-1016406]##Return an instance of _ResponseStateManager_
to handle rendering technology specific state management decisions..

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1016405]##public Iterator<String>
getComponentFamilies();

[#50638855_pgfId-1016414]##public Iterator<String>
getRendererTypes(String componentFamily);

|===

[#50638855_pgfId-1015785]##The first method returns an _Iterator_ over
the _component-family_ entries supported by this _RenderKit_ . The
second one can be used to get an _Iterator_ over the _renderer-type_
entries for each of the _component-family_ entries returned from the
first method.

=== [#50638855_pgfId-1015787]##

image:JSF-37.gif[image]

[#50638855_8.2 Renderer]##Renderer

[#50638855_pgfId-1015788]##A _Renderer_ instance implements the decoding
and encoding functionality of components, during the _Apply Request
Values_ and _Render Response_ phases of the request processing
lifecycle, when the component has a non- _null_ value for the
_rendererType_ property.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015791]##public void decode(FacesContext context,
UIComponent component);
|===

[#50638855_pgfId-1015792]##For components utilizing the _delegated
implementation_ programming model, this method will be called during the
_apply request values_ phase of the request processing lifecycle, for
the purpose of converting the incoming request information for this
component back into a new local value. See the API reference for the
_Renderer.decode()_ method for details on its responsibilities.

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1015795]##public void encodeBegin(FacesContext context,
UIComponent component) throws IOException;

[#50638855_pgfId-1015796]## 

[#50638855_pgfId-1015797]##public void encodeChildren(FacesContext
context, UIComponent component) throws IOException;

[#50638855_pgfId-1015798]## 

[#50638855_pgfId-1015799]##public void encodeEnd(FacesContext context,
UIComponent component) throws IOException;

|===

[#50638855_pgfId-1015800]##For components utilizing the _delegated
implementation_ programming model, these methods will be called during
the _Render Response_ phase of the request processing lifecycle. These
methods have the same responsibilities as the corresponding
_encodeBegin()_ , _encodeChildren()_ , and _encodeEnd()_ methods of
_UIComponent_ (described in link:JSF.htm#50638851_49266[See Component
Specialization Methods] and the corresponding Javadocs) when the
component implements the _direct implementation_ programming model.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015806]##public String convertClientId(FacesContext
context, String clientId);
|===

[#50638855_pgfId-1015807]##Converts a component-generated client
identifier into one suitable for transmission to the client.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015810]##public boolean getRendersChildren();
|===

[#50638855_pgfId-1013058]##Return a flag indicating whether this
Renderer is responsible for rendering the children of the component it
is asked to render.

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1014329]## public Object getConvertedValue(FacesContext
context,

[#50638855_pgfId-1014330]##UIComponent component, Object submittedValue)
throws ConverterException;

|===

[#50638855_pgfId-1014395]##Attempt to convert previously stored state
information into an object of the type required for this component
(optionally using the registered _Converter_ for this component, if
there is one). If conversion is successful, the new value should be
returned from this method; if not, a _ConverterException_ should be
thrown.

[#50638855_pgfId-1016445]##A _Renderer_ may listen for events using the
_ListenerFor_ annotation. Refer to the Javadocs for the _ListenerFor_
class for more details.

=== [#50638855_pgfId-1017024]##

image:JSF-37.gif[image]

[#50638855_BehaviorRenderer]##[#50638855_ClientBehaviorRenderer]##ClientBehaviorRenderer

[#50638855_pgfId-1017025]##A _ClientBehaviorRenderer_ instance produces
client side behavior for components in the form of script content. It
also participates in decoding and as such has the ability to enqueue
server side _BehaviorEvents._ ..

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1017028]##public String
getScript(ClientBehaviorContext behaviorContext, ClientBehavior
behavior);
|===

[#50638855_pgfId-1016743]##Produce the script content that performs the
client side behavior. This method is called during the _Render Response_
phase of the request processing lifecycle.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016742]##public void decode(FacesContext context,
UIComponent component, ClientBehavior behavior);
|===

[#50638855_pgfId-1016998]##This method will be called during the _apply
request values_ phase of the request processing lifecycle, for the
primary purpose of enqueuing _BehaviorEvents._ All client behavior
renderer implementations must extend from the _ClientBehaviorRenderer_
interface _._

==== [#50638855_pgfId-1016999]##ClientBehaviorRenderer Registration

[#50638855_pgfId-1016844]##ClientBehaviorRenderer implementations may be
registered in the JSF faces-config.xml or with an annotation.

====== [#50638855_pgfId-1016845]##XML Registration

[#50638855_pgfId-1016849]## 

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1016852]##<render-kit>

[#50638855_pgfId-1016853]##<render-kit-id>HTML_BASIC</render-kit-id>

[#50638855_pgfId-1016857]##<client-behavior-renderer>

[#50638855_pgfId-1016945]##<client-behavior-renderer-type>custom.behavior.Greet</client-behavior-renderer-type>

[#50638855_pgfId-1016944]##<client-behavior-renderer-class>greet.GreetRenderer</client-behavior-renderer-class>

[#50638855_pgfId-1016949]##</client-behavior-renderer>

[#50638855_pgfId-1016956]##...

|===

====== [#50638855_pgfId-1016971]##Registration By Annotation

[#50638855_pgfId-1016989]##JSF provides the
_javax.faces.render.FacesBehaviorRenderer annotation._

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1016979]##@FacesClientBehaviorRenderer(value=”Hello”)

[#50638855_pgfId-1016980]##public class MyRenderer extends
ClientBehaviorRenderer \{

[#50638855_pgfId-1016981]##...

[#50638855_pgfId-1016982]##}

|===

=== [#50638855_pgfId-1016974]##

image:JSF-37.gif[image]

[#50638855_88992]##ResponseStateManager

[#50638855_pgfId-1015831]## _ResponseStateManager_ is the helper class
to _javax.faces.application.StateManager_ that knows the specific
rendering technology being used to generate the response. It is a
singleton abstract class. This class knows the mechanics of saving
state, whether it be in hidden fields, session, or some combination of
the two.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015834]##public Object getState(FacesContext
context);
|===

[#50638855_pgfId-1015860]##Please see the javadoc for this method for
the normative specification.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015842]##public void writeState(FacesContext context,
Object state) throws IOException;
|===

[#50638855_pgfId-1015949]##Please see the javadoc for this method for
the normative specification.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1015948]##public boolean isPostback(FacesContext
context);
|===

[#50638855_pgfId-1014667]##Return _true_ if the current request is a
postback. The default implementation returns _true_ if this
_ResponseStateManager_ instance wrote out state on a previous request to
which this request is a postback. Return false otherwise.

[#50638855_pgfId-1014535]##Please see _link:JSF.htm#50638861_37766[See
ResponseStateManager]_ for deprecated methods in _ResponseStateManager_
.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016424]##public String getViewState(FacesContext
context);
|===

[#50638855_pgfId-1016432]##Return the view state as a String without any
markup related to the rendering technology supported by this
ResponseStateManager.

=== [#50638855_pgfId-1015955]##

image:JSF-37.gif[image]

[#50638855_15408]##RenderKitFactory

[#50638855_pgfId-1015978]##[P1-start-renderkitFactory]A single instance
of _javax.faces.render.RenderKitFactory_ must be made available to each
JSF-based web application running in a servlet or portlet
container.[P1-end] The factory instance can be acquired by JSF
implementations, or by application code, by executing

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1015981]##RenderKitFactory factory = (RenderKitFactory)

[#50638855_pgfId-1015982]##
FactoryFinder.getFactory(FactoryFinder.RENDER_KIT_FACTORY);

|===

[#50638855_pgfId-1015987]##The _RenderKitFactory_ implementation class
supports the following methods:

[width="100%",cols="100%",]
|===
a|
[#50638855_pgfId-1015985]##public RenderKit getRenderKit(FacesContext
context, String renderKitId);

[#50638855_pgfId-1015986]## 

|===

[#50638855_pgfId-1015988]##Return a _RenderKit_ instance for the
specified render kit identifier, possibly customized based on the
dynamic characteristics of the specified, (yet possibly null)
_FacesContext_ . For example, an implementation might choose a different
_RenderKit_ based on the “User-Agent” header included in the request, or
the _Locale_ that has been established for the response view. Note that
applications which depend on this feature are not guaranteed to be
portable across JSF implementations.

[#50638855_pgfId-1016027]##[P1-start-renderkitDefault]Every JSF
implementation must provide a _RenderKit_ instance for a default render
kit identifier that is designated by the _String_ constant
_RenderKitFactory.HTML_BASIC_RENDER_KIT_ .[P1-end] Additional render kit
identifiers, and corresponding instances, can also be made available.

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016026]##public Iterator<String> getRenderKitIds();
|===

{empty}[#50638855_pgfId-1016067]##This method returns an _Iterator_ over
the set of render kit identifiers supported by this factory.
[P1-start-renderkitIds]This set must include the value specified by
_RenderKitFactory.HTML_BASIC_RENDER_KIT_ .[P1-end]

[width="100%",cols="100%",]
|===
|[#50638855_pgfId-1016049]##public void addRenderKit(String renderKitId,
RenderKit renderKit);
|===

[#50638855_pgfId-1016068]##Register a _RenderKit_ instance for the
specified render kit identifier, replacing any previous RenderKit
registered for that identifier.

=== [#50638855_pgfId-1016070]##

image:JSF-37.gif[image]

[#50638855_61767]##Standard HTML RenderKit Implementation

[#50638855_pgfId-1016071]##To ensure application portability, all JSF
implementations are required to include support for a _RenderKit_ , and
the associated _Renderers_ , that meet the requirements defined in this
section, to generate textual markup that is compatible with HTML 4.01.
JSF implementors, and other parties, may also provide additional
_RenderKit_ libraries, or additional _Renderer_ s that are added to the
standard _RenderKit_ at application startup time, but applications must
ensure that the standard _Renderer_ s are made available for the web
application to utilize them.

[#50638855_pgfId-1013801]##The required behavior of the standard HTML
RenderKit is specified in a set of external HTML pages that accompany
this specification, entitled “The Standard HTML RenderKit”. The behavior
described in these pages is normative, and are required to be fulfilled
by all implementations of JSF.

=== [#50638855_pgfId-1016090]##

image:JSF-37.gif[image]

[#50638855_61850]##The Concrete HTML Component Classes

[#50638855_pgfId-1011628]##For each valid combination of _UIComponent_
subclass and standard renderer given in the previous section, there is a
concrete class in the package _javax.faces.component.html_ package. Each
class in this package is a subclass of an corresponding class in the
_javax.faces.component_ package, and adds strongly typed JavaBeans
properties for all of the renderer-dependent properties. These classes
also implement the _BehaviorHolder_ interface, enabling them to have
_Behavior attached to them. Refer to_
link:JSF.htm#50638851_Component%20Behavior%20Model[See Component
Behavior Model] __ for additional details..

======= [#50638855_pgfId-1016094]##Concrete HTML Component Classes

[#50638855_pgfId-1016100]##javax.faces.component class

[#50638855_pgfId-1016102]##renderer-type

[#50638855_pgfId-1016104]##javax.faces.component.html class

[#50638855_pgfId-1016106]##UICommand

[#50638855_pgfId-1016108]##javax.faces.Button

[#50638855_pgfId-1016110]##HtmlCommandButton

[#50638855_pgfId-1016112]##UICommand

[#50638855_pgfId-1016114]##javax.faces.Link

[#50638855_pgfId-1016116]##HtmlCommandLink

[#50638855_pgfId-1016118]##UIData

[#50638855_pgfId-1016120]##javax.faces.Table

[#50638855_pgfId-1016122]##HtmlDataTable

[#50638855_pgfId-1016124]##UIForm

[#50638855_pgfId-1016126]##javax.faces.Form

[#50638855_pgfId-1016128]##HtmlForm

[#50638855_pgfId-1016130]##UIGraphic

[#50638855_pgfId-1016132]##javax.faces.Image

[#50638855_pgfId-1016134]##HtmlGraphicImage

[#50638855_pgfId-1016136]##UIInput

[#50638855_pgfId-1016138]##javax.faces.Hidden

[#50638855_pgfId-1016140]##HtmlInputHidden

[#50638855_pgfId-1016142]##UIInput

[#50638855_pgfId-1016144]##javax.faces.Secret

[#50638855_pgfId-1016146]##HtmlInputSecret

[#50638855_pgfId-1016148]##UIInput

[#50638855_pgfId-1016150]##javax.faces.Text

[#50638855_pgfId-1016152]##HtmlInputText

[#50638855_pgfId-1016154]##UIInput

[#50638855_pgfId-1016156]##javax.faces.Textarea

[#50638855_pgfId-1016158]##HtmlInputTextarea

[#50638855_pgfId-1016160]##UIMessage

[#50638855_pgfId-1016162]##javax.faces.Message

[#50638855_pgfId-1016164]##HtmlMessage

[#50638855_pgfId-1016166]##UIMessages

[#50638855_pgfId-1016168]##javax.faces.Messages

[#50638855_pgfId-1016170]##HtmlMessages

[#50638855_pgfId-1016172]##UIOutput

[#50638855_pgfId-1016174]##javax.faces.Format

[#50638855_pgfId-1016176]##HtmlOutputFormat

[#50638855_pgfId-1016178]##UIOutput

[#50638855_pgfId-1016180]##javax.faces.Label

[#50638855_pgfId-1016182]##HtmlOutputLabel

[#50638855_pgfId-1016184]##UIOutput

[#50638855_pgfId-1016186]##javax.faces.Link

[#50638855_pgfId-1016188]##HtmlOutputLink

[#50638855_pgfId-1016190]##UIOutput

[#50638855_pgfId-1016192]##javax.faces.Text

[#50638855_pgfId-1016194]##HtmlOutputText

[#50638855_pgfId-1016526]##UIOutcomeTarget

[#50638855_pgfId-1016528]##javax.faces.Link

[#50638855_pgfId-1016530]##HtmlOutcomeTargetLink

[#50638855_pgfId-1016532]##UIOutcomeTarget

[#50638855_pgfId-1016534]##javax.faces.Button

[#50638855_pgfId-1016536]##HtmlOutcomeTargetButton

[#50638855_pgfId-1016196]##UIPanel

[#50638855_pgfId-1016198]##javax.faces.Grid

[#50638855_pgfId-1016200]##HtmlPanelGrid

[#50638855_pgfId-1016202]##UIPanel

[#50638855_pgfId-1016204]##javax.faces.Group

[#50638855_pgfId-1016206]##HtmlPanelGroup

[#50638855_pgfId-1016208]##UISelectBoolean

[#50638855_pgfId-1016210]##javax.faces.Checkbox

[#50638855_pgfId-1016212]##HtmlSelectBooleanCheckbox

[#50638855_pgfId-1016214]##UISelectMany

[#50638855_pgfId-1016216]##javax.faces.Checkbox

[#50638855_pgfId-1016218]##HtmlSelectManyCheckbox

[#50638855_pgfId-1016220]##UISelectMany

[#50638855_pgfId-1016222]##javax.faces.Listbox

[#50638855_pgfId-1016224]##HtmlSelectManyListbox

[#50638855_pgfId-1016226]##UISelectMany

[#50638855_pgfId-1016228]##javax.faces.Menu

[#50638855_pgfId-1016230]##HtmlSelectManyMenu

[#50638855_pgfId-1016232]##UISelectOne

[#50638855_pgfId-1016234]##javax.faces.Listbox

[#50638855_pgfId-1016236]##HtmlSelectOneListbox

[#50638855_pgfId-1016238]##UISelectOne

[#50638855_pgfId-1016240]##javax.faces.Menu

[#50638855_pgfId-1016242]##HtmlSelectOneMenu

[#50638855_pgfId-1016244]##UISelectOne

[#50638855_pgfId-1016246]##javax.faces.Radio

[#50638855_pgfId-1016248]##HtmlSelectOneRadio

{empty}[#50638855_pgfId-1016271]##[P1-start-htmlComponent]As with the
standard components in the _javax.faces.component_ package, each HTML
component implementation class must define a static public final String
constant named _COMPONENT_TYPE_ , whose value is “ _javax.faces._ ”
concatenated with the class name. HTML components, however, must not
define a _COMPONENT_FAMILY_ constant, or override the _getFamily()_
method they inherit from their superclass.[P1-end]

[#50638855_pgfId-1014299]## 

[#50638860_pgfId-1032082]##[#50638860_87102]## 

== [#50638860_pgfId-1032084]##

image:JSF-38.gif[image]

[#50638860_43229]##Integration with JSP

image:JSF-39.gif[image]

[#50638860_pgfId-1032085]##Any JavaServer Faces implementations that
claims compliance with this specification must include a complete
JavaServer Pages implementation, and expose this implementation to the
runtime of any JSF application. JSF applications, however, need not use
JSP as their View Declaration Language (VDL). In fact, a JSF application
is free to use whatever technology it likes for its VDL, as long as that
VDL itself complies with the JSF specification.

[#50638860_pgfId-1036633]##This version of the specification requires
that implementations support two View Declaration Language syntaxes

[#50638860_pgfId-1036635]##JSP

[#50638860_pgfId-1036639]##Facelets XHTML

[#50638860_pgfId-1036256]##This chapter describes the JSP support
required by JavaServer Faces. This JSP support is enabled by providing
custom actions so that a JSF user interface can be easy defined in a JSP
page by adding tags corresponding to JSF UI components. Custom actions
provided by a JSF implementation may be mixed with standard JSP actions
and custom actions from other libraries, as well as template text for
layout, in the same JSP page.

[#50638860_pgfId-1036641]##Facelets XHTML is specified in
link:JSF.htm#50638887_31965[See Facelets and its use in Web
Applications]. This chapters builds on the previous one. Facelets relies
on concepts specified in JSP.

[#50638860_pgfId-1032086]##For JSP version 2.0 and onward, the file
extension “ _.jsf_ ” is reserved, and may optionally be used (typically
by authoring tools) to represent VDL pages containing JSF
contentlink:#pgfId-1032089[13]. When running in a JSP 1.2 environment,
JSP authors must give their JSP pages that contain JSF content a
filename ending in “ _.jsp_ ”.

=== [#50638860_pgfId-1032091]##

image:JSF-40.gif[image]

[#50638860_51115]##UIComponent Custom Actions

[#50638860_pgfId-1032092]##A JSP custom action (aka custom tag or tag)
for a JSF _UIComponent_ is constructed by combining properties and
attributes of a Java UI component class with the rendering attributes
supported by a specific _Renderer_ from a concrete _RenderKit_ . For
example, assume the existence of a concrete _RenderKit_ ,
_HTMLRenderKit_ , which supports three _Renderer_ types for the
_UIInput_ component:

======= [#50638860_pgfId-1032095]##Example Renderer Types

[#50638860_pgfId-1032099]##RendererType

[#50638860_pgfId-1032101]##Render-Dependent Attributes

[#50638860_pgfId-1032103]##“Text”

[#50638860_pgfId-1032105]##“size”

[#50638860_pgfId-1032107]##“Secret”

[#50638860_pgfId-1032109]##“size”, “secretChar”

[#50638860_pgfId-1032111]##“Textarea”

[#50638860_pgfId-1032113]##“size”, “rows”

[#50638860_pgfId-1032114]##The tag library descriptor (TLD) file for the
corresponding tag library, then, would define three custom actions—one
per _Renderer_ . Below is an example of a portion of the custom action
definition for the _inputText_ taglink:#pgfId-1032117[14]:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032120]##<tag>

[#50638860_pgfId-1032121]## <name>inputText</name>

[#50638860_pgfId-1032122]##
<tag-class>acme.html.tags.InputTag</tag-class>

[#50638860_pgfId-1032123]## <bodycontent>JSP</bodycontent>

[#50638860_pgfId-1032124]## <attribute>

[#50638860_pgfId-1032125]## <name>id</name>

[#50638860_pgfId-1032126]## <required>false</required>

[#50638860_pgfId-1032127]## <rtexprvalue>true</rtexprvalue>

[#50638860_pgfId-1032128]## </attribute>

[#50638860_pgfId-1032129]## <attribute>

[#50638860_pgfId-1032130]## <name>value</name>

[#50638860_pgfId-1032131]## <required>false</required>

[#50638860_pgfId-1032132]## <deferred-value>

[#50638860_pgfId-1032133]## <type>java.lang.Object</type>

[#50638860_pgfId-1032134]## <deferred-value>

[#50638860_pgfId-1032135]## </attribute>

[#50638860_pgfId-1032136]## <attribute>

[#50638860_pgfId-1032137]## <name>size</name>

[#50638860_pgfId-1032138]## <required>false</required>

[#50638860_pgfId-1032139]## <deferred-value>

[#50638860_pgfId-1032140]## <type>java.lang.Integer</type>

[#50638860_pgfId-1032141]## <deferred-value>

[#50638860_pgfId-1032142]## </attribute>

[#50638860_pgfId-1032143]## ...

[#50638860_pgfId-1032144]##</tag>

|===

[#50638860_pgfId-1032145]##Note that the _size_ attribute is derived
from the _Renderer_ of type “Text”, while the _id_ and _value_
attributes are derived from the _UIInput_ component class itself. Also
note that the _id_ attribute has _rtexprvalue_ set to _true_ . This is
to allow _$\{}_ expressions in the _id_ attribute so that _<c:forEach>_
can include faces components that incorporate the index into their id.
_RenderKit_ implementors will generally provide a JSP tag library which
includes component custom actions corresponding to each of the component
classes (or types) supported by each of the _RenderKit_ ’s _Renderers_ .
See link:JSF.htm#50638855_48699[See RenderKit] and
link:JSF.htm#50638855_8.2%20Renderer[See Renderer] for details on the
_RenderKit_ and _Renderer_ APIs. JSF implementations must provide such a
tag library for the standard HTML RenderKit (see
link:JSF.htm#50638860_66883[See Standard HTML RenderKit Tag Library]).

=== [#50638860_pgfId-1032155]##

image:JSF-40.gif[image]

Using UIComponent Custom Actions in JSP Pages

[#50638860_pgfId-1032156]##The following subsections define how a page
author utilizes the custom actions provided by the _RenderKit_
implementor in the JSP pages that create the user interface of a
JSF-based web application.

==== [#50638860_pgfId-1032157]##Declaring the Tag Libraries

[#50638860_pgfId-1032158]##This specification hereby reserves the
following Uniform Resource Identifier (URI) values to refer to the
standard tag libraries for the custom actions defined by JavaServer
Faces:

[#50638860_pgfId-1032159]## _http://java.sun.com/jsf/core_ -- URI for
the _JavaServer Faces Core Tag Library_

[#50638860_pgfId-1032160]## _http://java.sun.com/jsf/html_ -- URI for
the _JavaServer Faces Standard HTML RenderKit Tag Library_

[#50638860_pgfId-1032161]##The page author must use the standard JSP
_taglib_ directive to declare the URI of each tag library to be
utilized, as well as the prefix used (within this page) to identify
custom actions from this library. For example,

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032164]##<%@ taglib uri=”http://java.sun.com/jsf/core”
prefix=”f” %>

[#50638860_pgfId-1032165]##<%@ taglib uri=”http://java.sun.com/jsf/html”
prefix=”h” %>

|===

[#50638860_pgfId-1032166]##declares the unique resource identifiers of
the tag libraries being used, as well as the prefixes to be used within
the current page for referencing actions from these
librarieslink:#pgfId-1032169[15].

==== [#50638860_pgfId-1032170]##Including Components in a Page

[#50638860_pgfId-1032171]##A JSF _UIComponent_ custom action can be
placed at any desired position in a JSP page that contains the _taglib_
directive for the corresponding tag library, subject to the following
restrictions:

[#50638860_pgfId-1032172]##When using a single JSP page to create the
entire view, JSF component custom actions must be nested inside the
_<f:view>_ custom action from the JSF Core Tag Library.

[#50638860_pgfId-1032177]##The following example illustrates the general
use of a UIComponent custom action in a JSP page. In this scenario:

[width="100%",cols="100%",]
|===
|[#50638860_pgfId-1032180]##<h:inputText id=”username”
value=”#\{logonBean.username}”/>
|===

[#50638860_pgfId-1032181]##represents a _UIInput_ field, to be rendered
with the “Text” renderer type, and points to the username property of a
backing bean for the actual value. The _id_ attribute specifies the
component id of a _UIComponent_ instance, from within the component
tree, to which this custom action corresponds. If no _id_ __ is
specified, one will be automatically generated by the custom action
implementation.

[#50638860_pgfId-1032182]##Custom actions that correspond to JSF
_UIComponent_ instances must subclass
_javax.faces.webapp.UIComponentELTag_ (see
link:JSF.htm#50638850_78423[See UIComponentELTag])

[#50638860_pgfId-1032186]##During the _Render Response_ phase of the
request processing lifecycle, the appropriate encoding methods of the
component (or its associated _Renderer_ ) will be utilized to generate
the representation of this component in the response page. In addition,
the first time a particular page is rendered, the component tree may
also be dynamically constructed.

[#50638860_pgfId-1032187]##All markup other than _UIComponent_ custom
actions is processed by the JSP container, in the usual way. Therefore,
you can use such markup to perform layout control, or include non-JSF
content, in conjunction with the actions that represent UI components.

==== [#50638860_pgfId-1032188]##Creating Components and Overriding Attributes

[#50638860_pgfId-1032189]##As _UIComponent_ custom actions are
encountered during the processing of a JSP page, the custom action
implementation must check the component tree for the existence of a
corresponding _UIComponent_ , and (if not found) create and configure a
new component instance corresponding to this custom action. The details
of this process (as implemented in the findComponent() method of
UIComponentClassicTagBase, for easy reuse) are as follows:

[#50638860_pgfId-1032190]##If the component associated with this
component custom action has been identified already, return it
unchanged.

[#50638860_pgfId-1032191]##Identify the _component identifier_ for the
component related to this UIComponent custom action, as follows:

[#50638860_pgfId-1032192]##If the page author has specified a value for
the _id_ attribute, use that value.

[#50638860_pgfId-1032193]##Otherwise, call the _createUniqueId()_ method
of the _UIViewRoot_ at the root of the component tree for this view, and
use that value.

[#50638860_pgfId-1032194]##If this _UIComponent_ custom action is
creating a _facet_ (that is, we are nested inside an _<f:facet>_ custom
action), determine if there is a facet of the component associated with
our parent _UIComponent_ custom action, with the specified facet name,
and proceed as follows:

[#50638860_pgfId-1032195]##If such a facet already exists, take no
additional action.

[#50638860_pgfId-1032196]##If no such facet already exists, create a new
_UIComponent_ (by calling the _createComponent()_ method on the
_Application_ instance for this web application, passing the value
returned by _getComponentType()_ , set the component identifier to the
specified value, call _setProperties()_ passing the new component
instance, and add the new component as a facet of the component
associated with our parent _UIComponent_ custom action, under the
specified facet name.

[#50638860_pgfId-1032197]##If this _UIComponent_ custom action is not
creating a facet (that is, we are not nested inside an _<f:facet>_
custom action), determine if there is a child component of the component
associated with our parent _UIComponent_ custom action, with the
specified component identifier, and proceed as follows:

[#50638860_pgfId-1032198]##If such a child already exists, take no
additional action.

[#50638860_pgfId-1032199]##If no such child already exists, create a new
_UIComponent_ (by calling the _createComponent()_ method on the
_Application_ instance for this web application, passing the value
returned by _getComponentType()_ , set the component identifier to the
specified value, call _setProperties()_ passing the new component
instance, and add the new component as a child of the component
associated with our parent _UIComponent_ custom action.

==== [#50638860_pgfId-1032200]##Deleting Components on Redisplay

[#50638860_pgfId-1032201]##In addition to the support for dynamically
creating new components, as described above, UIComponent custom actions
will also _delete_ child components (and facets) that are already
present in the component tree, but are not rendered on this display of
the page. For example, consider a UIComponent custom action that is
nested inside a JSTL _<c:if>_ custom action whose condition is true when
the page is initially rendered. As described in this section, a new
UIComponent will have been created and added as a child of the
_UIComponent_ corresponding to our parent _UIComponent_ custom action.
If the page is re-rendered, but this time the _<c:if>_ condition is
_false_ , the previous child component will be removed.

==== [#50638860_pgfId-1032202]##Representing Component Hierarchies

[#50638860_pgfId-1032203]##Nested structures of _UIComponent_ custom
actions will generally mirror the hierarchical relationships of the
corresponding _UIComponent_ instances in the view that is associated
with each JSP page. For example, assume that a _UIForm_ component (whose
component id is _logonForm_ ) contains a _UIPanel_ component used to
manage the layout. You might specify the contents of the form like this:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032206]##<h:form id=”logonForm”>

[#50638860_pgfId-1032207]## <h:panelGrid columns=”2”>

[#50638860_pgfId-1032208]## <h:outputLabel for=”username”>

[#50638860_pgfId-1032209]## <h:outputText value=”Username:”/>

[#50638860_pgfId-1032210]## </h:outputLabel>

[#50638860_pgfId-1032211]## <h:inputText id=”username”

[#50638860_pgfId-1032212]## value=”#\{logonBean.username}”/>

[#50638860_pgfId-1032213]## <h:outputLabel for=”password”>

[#50638860_pgfId-1032214]## <h:outputText value=”Password:”/>

[#50638860_pgfId-1032215]## </h:outputLabel>

[#50638860_pgfId-1032216]## <h:inputSecret id=”password”

[#50638860_pgfId-1032217]## value=”#\{logonBean.password}”/>

[#50638860_pgfId-1032218]## <h:commandButton id=”submitButton”
type=”SUBMIT”

[#50638860_pgfId-1032219]## action=”#\{logonBean.logon}”/>

[#50638860_pgfId-1032220]## <h:commandButton id=”resetButton”
type=”RESET”/>

[#50638860_pgfId-1032221]## </h:panelGrid>

[#50638860_pgfId-1032222]##</h:form>

|===

==== [#50638860_pgfId-1032223]##Registering Converters, Event Listeners, and Validators

[#50638860_pgfId-1032226]##Each JSF implementation is required to
provide the core tag library (see link:JSF.htm#50638860_17251[See JSF
Core Tag Library]), which includes custom actions that (when executed)
create instances of a specified _Converter_ , _ValueChangeListener,_
_ActionListener_ or _Validator_ implementation class, and register the
created instance with the _UIComponent_ associated with the most
immediately surrounding _UIComponent_ custom action.

[#50638860_pgfId-1032228]##Using these facilities, the page author can
manage all aspects of creating and configuring values associated with
the view, without having to resort to Java code. For example:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032231]##<h:inputText id=”username”
value=”#\{logonBean.username}”>

[#50638860_pgfId-1032232]## <f:validateLength minimum=”6”/>

[#50638860_pgfId-1032233]##</h:inputText>

|===

[#50638860_pgfId-1032234]##associates a validation check (that the value
entered by the user must contain at least six characters) with the
username _UIInput_ component being described.

[#50638860_pgfId-1032235]##Following are usage examples for the
_valueChangeListener_ and _actionListener_ custom actions.

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032238]##<h:inputText id=”maxUsers”>

[#50638860_pgfId-1032239]## <f:convertNumber integerOnly=”true”/>

[#50638860_pgfId-1032240]## <f:valueChangeListener

[#50638860_pgfId-1032241]## type="custom.MyValueChangeListener"/>

[#50638860_pgfId-1032242]##</h:inputText>

[#50638860_pgfId-1032243]##<h:commandButton label="Login">

[#50638860_pgfId-1032244]## <f:actionListener
type="custom.MyActionListener"/>

[#50638860_pgfId-1032245]##</h:commandButton>

|===

[#50638860_pgfId-1032246]##This example causes a _Converter_ and a
_ValueChangeListener_ of the user specified type to be instantiated and
added as to the enclosing _UIInput_ component, and an _ActionListener_
is instantiated and added to the enclosing _UICommand_ component. If the
user specified type does not implement the proper listener interface a
_JSPException_ must be thrown.

==== [#50638860_pgfId-1032248]##[#50638860_16377]##Using Facets

[#50638860_pgfId-1032249]##A _Facet_ is a subordinate UIComponent that
has a special relationship to its parent _UIComponent_ , as described in
link:JSF.htm#50638851_55906[See Facet Management]. Facets can be defined
in a JSP page using the _<f:facet>_ custom action. Each facet action
must have one and only one child UIComponent custom
actionlink:#pgfId-1032255[16]. For example:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032258]##<h:dataTable ...>

[#50638860_pgfId-1032259]## <f:facet name=”header”>

[#50638860_pgfId-1032260]## <h:outputText value=”Customer List”/>

[#50638860_pgfId-1032261]## </f:facet>

[#50638860_pgfId-1032262]## <h:column>

[#50638860_pgfId-1032263]## <f:facet name=”header”>

[#50638860_pgfId-1032264]## <h:outputText value=”Account Id”/>

[#50638860_pgfId-1032265]## </f:facet>

[#50638860_pgfId-1032266]## <h:outputText id=”accountId” value=
”#\{customer.accountId}”/>

[#50638860_pgfId-1032267]## </h:column>

[#50638860_pgfId-1032268]## ...

[#50638860_pgfId-1032269]##</h:dataTable>

|===

==== [#50638860_pgfId-1032271]##[#50638860_13406]##Interoperability with JSP Template Text and Other Tag Libraries

[#50638860_pgfId-1032272]##It is permissible to use other tag libraries,
such as the JSP Standard Tag Library (JSTL) in the same JSP page with
_UIComponent_ custom actions that correspond to JSF components, subject
to certain restrictions. When JSF component actions are nested inside
custom actions from other libraries, or combined with template text, the
following behaviors must be supported:

[#50638860_pgfId-1032273]##JSF component custom actions nested inside a
custom action that conditionally renders its body (such as JSTL’s
_<c:if>_ or _<c:choose>_ ) must contain a manually assigned _id_
attribute.

[#50638860_pgfId-1032274]##Interoperation with the JSTL
Internationalization-Capable Formatting library (typically used with the
“ _fmt_ ” prefix) is restricted as follows:

[#50638860_pgfId-1022037]## The _<fmt:parseDate>_ and
_<fmt:parseNumber>_ custom actions should not be used. The corresponding
JSF facility is to use an _<h:inputText>_ component custom action with
an appropriate _DateTimeConverter_ or _NumberConverter_ .

[#50638860_pgfId-1022043]##The _<fmt:requestEncoding>_ custom action
should not be used. By the time it is executed, the request parameters
will have already been parsed, so any change in the setting here will
have no impact. JSF handles character set issues automatically in most
cases. To use a fixed character set in exceptional circumstances, use
the a “ _<%@ page contentType=”[content-type];[charset]” %>_ ”
directive.

[#50638860_pgfId-1022072]##The _<fmt:setLocale/>_ custom action should
not be used. Even though it might work in some circumstances, it would
result in JSF and JSTL assuming different locales. If the two locales
use different character sets, the results will be undefined.
Applications should use JSF facilities for setting the _locale_ property
on the _UIViewRoot_ component to change locales for a particular user.

==== [#50638860_pgfId-1032279]##Composing Pages from Multiple Sources

[#50638860_pgfId-1032280]##JSP pages can be composed from multiple
sources using several mechanisms:

[#50638860_pgfId-1032281]##The _<%@include%>_ directive performs a
compile-time inclusion of a specified source file into the page being
compiledlink:#pgfId-1032284[17]. From the perspective of JSF, such
inclusions are transparent—the page is compiled as if the inclusions had
been performed before compilation was initiated.

[#50638860_pgfId-1032285]##Several mechanisms (including the
_<jsp:include>_ standard action, the JSTL _<c:import>_ custom action
when referencing a resource in the same webapp, and a call to
_RequestDispatcher.include()_ for a resource in the same webapp) perform
a runtime dynamic inclusion of the results of including the response
content of the requested page resource in place of the include action.
Any JSF components created by execution of JSF component custom actions
in the included resource will be grafted onto the component tree, just
as if the source text of the included page had appeared in the calling
page at the position of the include action.

[#50638860_pgfId-1032286]##For mechanisms that aggregate content by
other means (such as use of an _HttpURLConnection_ , a
_RequestDispatcher.include()_ on a resource from a different web
application, or accessing an external resource with the JSTL
_<c:import>_ custom action on a resource from a different web
application, only the response content of the aggregation request is
available. Therefore, any use of JSF components in the generation of
such a response are not combined with the component tree for the current
page.

=== [#50638860_pgfId-1032287]##

image:JSF-40.gif[image]

[#50638860_62679]##UIComponent Custom Action Implementation Requirements

[#50638860_pgfId-1032288]##The custom action implementation classes for
_UIComponent_ custom actions must conform to all of the requirements
defined in the JavaServer Pages Specification. In addition, they must
meet the following JSF-specific requirements:

[#50638860_pgfId-1032289]##Extend the _UIComponentELTag_ or
_UIComponentELBodyTag_ base class, so that JSF implementations can
recognize _UIComponent_ custom actions versus others.

[#50638860_pgfId-1032290]##Provide a public _getComponentType()_ method
that returns a String-valued component type registered with the
_Application_ instance for this web application. The value returned by
this method will be passed to _Application.createComponent()_ when a new
_UIComponent_ instance associated with this custom action is to be
created.

[#50638860_pgfId-1032291]##Provide a public _getRendererType()_ method
that returns a String-valued renderer type registered with the
_RenderKit_ instance for the currently selected _RenderKit,_ or _null_
if there should be no associated _Renderer_ . The value returned by this
method will be used to set the _rendererType_ property of any
UIComponent created by this custom action.

[#50638860_pgfId-1032292]##Provide setter methods taking a
_javax.el.ValueExpression_ or _javax.el.MethodExpression_ parameter for
all set-able (from a custom action) properties of the corresponding
_UIComponent_ class, and all additional set-able (from a custom action)
attributes supported by the corresponding _Renderer_ .

[#50638860_pgfId-1036420]##On the method that causes a _UIComponent_
instance to be added to the tree, verify that the component id of that
_UIComponent_ is unique within the scope of the closest ancestor
component that is a _NamingContainer_ . If this constraint is not met,
throw _JspException_ . __

[#50638860_pgfId-1032293]##Provide a protected _setProperties()_ method
of type _void_ that takes a _UIComponent_ instance as parameter. The
implementation of this method must perform the following tasks:

[#50638860_pgfId-1032294]##Call _super.setProperties()_ , passing the
same _UIComponent_ instance received as a parameter.

[#50638860_pgfId-1032295]##For each non-null custom action attribute
that corresponds to a property based attribute to be set on the
underlying component, call either _setValueExpression()_ or
_getAttributes().put()_ , depending on whether or not a value expression
was specified as the custom action attribute value (performing any
required type conversion). For example, assume that title is the name of
a render-dependent attribute for this component:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032298]##public void setTitle(javax.el.ValueExpression
title) \{

[#50638860_pgfId-1032299]## this.title = title;

[#50638860_pgfId-1032300]##}

[#50638860_pgfId-1032301]## 

[#50638860_pgfId-1032302]##protected void setProperties(UIComponent
component) throws JspException \{

[#50638860_pgfId-1032303]## super.setProperties(component);

[#50638860_pgfId-1032304]## if (title != null) \{

[#50638860_pgfId-1032305]## try \{

[#50638860_pgfId-1032306]## component.setValueExpression(“title”,
title);

[#50638860_pgfId-1032307]## }

[#50638860_pgfId-1032308]## catch (ELException e) \{

[#50638860_pgfId-1032309]## throw new JspException(e);

[#50638860_pgfId-1032310]## }

[#50638860_pgfId-1032311]## ...

[#50638860_pgfId-1032312]##}

|===

[#50638860_pgfId-1032313]##For each non-null custom action attribute
that corresponds to a method based attribute to be set on the underlying
component, the value of the attribute must be a method reference
expression. We have a number of wrapper classes to turn a
MethodExpression into the appropriate listener. For example, assume that
_valueChangeListener_ is the name of an attribute for this component:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032316]##public void
setValueChangeListener(javax.el.MethodExpression me) \{

[#50638860_pgfId-1032317]## valueChangeListener = me;

[#50638860_pgfId-1032318]##}

[#50638860_pgfId-1032319]## 

[#50638860_pgfId-1032320]##protected void setProperties(UIComponent
component) \{

[#50638860_pgfId-1032321]## super.setProperties(component);

[#50638860_pgfId-1032322]## MethodExpressionValueChangeListener listener
=

[#50638860_pgfId-1032323]## new
MethodExpressionValueChangeListener(valueChangeListener);

[#50638860_pgfId-1032324]## input.addValueChangeListener(listener);

[#50638860_pgfId-1032325]## ...

[#50638860_pgfId-1032326]##}

|===

[#50638860_pgfId-1032327]##Non-null custom action attributes that
correspond to a writable property to be set on the underlying component
are handled in a similar fashion. For example, assume a custom action
for the _UIData_ component is being created that needs to deal with the
_rows_ property (which is of type _int_ ):

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1032330]##public void setRows(javax.el.ValueExpression
rows) \{

[#50638860_pgfId-1032331]## this.rows = rows;

[#50638860_pgfId-1032332]##}

[#50638860_pgfId-1032333]## 

[#50638860_pgfId-1032334]##protected void setProperties(UIComponent
component) \{

[#50638860_pgfId-1032335]## super.setProperties(component);

[#50638860_pgfId-1032336]## if (rows != null) \{

[#50638860_pgfId-1032337]## try \{

[#50638860_pgfId-1032338]## component.setValueExpression(“rows”, rows);

[#50638860_pgfId-1032339]## } catch (ELException e) \{

[#50638860_pgfId-1032340]## throw new JspException(e);

[#50638860_pgfId-1032341]## }

[#50638860_pgfId-1032342]## }

[#50638860_pgfId-1032343]## ...

[#50638860_pgfId-1032344]##}

|===

[#50638860_pgfId-1032345]##Optionally, provide a public _release()_
method of type _void_ , taking no parameters, to be called when the JSP
page handler releases this custom action instance. If implemented, the
method must perform the following tasks:

[#50638860_pgfId-1032346]##Call _super.release()_ to invoke the
superclass’s release functionality.

[#50638860_pgfId-1032347]##Clear the instance variables representing the
values for set-able custom action attributes (for example, by setting
String values to null).

[#50638860_pgfId-1032348]##Optionally provide overridden implementations
for the following method to fine tune the behavior of your _UIComponent_
custom action implementation class: _encodeComponent()_ .

[#50638860_pgfId-1032349]##It is technically possible to override other
public and protected methods of the _UIComponentELTag_ or
_UIComponentBodyELTag_ base class; however, it is likely that overriding
these methods will interfere with the functionality that other portions
of the JSF implementation are assuming to be present, so overriding
these methods is strongly discouraged.

[#50638860_pgfId-1032350]##The definition of each _UIComponent_ custom
action in the corresponding tag library descriptor (TLD) must conform to
the following requirements:

[#50638860_pgfId-1032351]##The _<body-content>_ element for the custom
action itself must specify _JSP_ .

[#50638860_pgfId-1024933]##For each attribute that is intended to be
passed on to the underlying faces component:

[#50638860_pgfId-1024956]##The attribute may not be named _id_ . This
name is reserved for Faces use.

[#50638860_pgfId-1025616]##If the attribute represents a method
expression, it must have a _<deferred-method>_ element containing a
_<method-signature>_ element that describes the signature of the method
pointed to by the expression, as described in section JSP.C.1 in the JSP
2.1 specification.

[#50638860_pgfId-1025617]##Otherwise, the attribute must be a value
based attribute, and must have a _<deferred-value>_ element containing a
<type> element which describes the expected type to which the expression
will evaluate. Please see section JSP.C.1 in the JSP 2.1 specification
for details.

==== [#50638860_pgfId-1025111]##[#50638860_38721]##Considerations for Custom Actions written for JavaServer Faces 1.1 and 1.0

[#50638860_pgfId-1025123]##Versions 1.0 and 1.1 of the JavaServer Faces
spec included their own EL that happend to have similar semantics to the
JSP EL, but the implementation was bundled into the Faces
implementation. This version leverages a new Unified EL facility
provided by JSP. This change has necessitated deprecating some methods
and classes, including the classes Custom Actions as their base class
for tags that expose Faces components to the JSP page. This section
explains how custom actions built for Faces 1.0 and 1.1 can continue to
run Faces 1.2.

===== [#50638860_pgfId-1025124]##Past and Present Tag constraints

[#50638860_pgfId-1025128]##Faces 1.0 and 1.1 were targeted at JSP
version 1.2 and Servlet version 2.3. This decision brought about several
constraints for faces tag attributes:

[#50638860_pgfId-1025129]##all tag attributes had to declare
_rtexprvalue_ to be _false._

[#50638860_pgfId-1025144]##all tag attributes had to take the type
_java.lang.String_ .

[#50638860_pgfId-1025139]##Faces had to choose a new expression
delimiter, _#\{}_ , to prevent the JSP container from prematurely
evaluating the expression. This became known as deferred evaluation.

[#50638860_pgfId-1025143]##Because Faces had introduced its own version
of the EL, the custom tag action layer had to do a lot of extra work to
“value binding enable” its attributes, calling Faces EL APIs to turn the
String attribute value into an instance of _ValueBinding_ or
_MethodBinding_ .

[#50638860_pgfId-1025219]##Faces provided the _UIComponentTag_ and
_UIComponentBodyTag_ base classes that were designed to adhere to the
above rules.

[#50638860_pgfId-1025554]##Tags that use the Unified EL have the
following constraints:

[#50638860_pgfId-1025555]##all tag attributes must not have an
_rtexprvalue_ attribute

[#50638860_pgfId-1025556]##all tag attributes must accept
_javax.el.ValueExpression_ or _javax.el.MethodExpression_ as their type
(depending on if the attribute refers to a method or a value).

[#50638860_pgfId-1025564]##all tag attributes (except for _id_ ) must
have a _<deferred-value>_ or _<deferred-method>_ element. See
_link:JSF.htm#50638860_17251[See JSF Core Tag Library]_ in the
description for the _Attributes_ column.

[#50638860_pgfId-1025195]##The JSP Container will hand the tag setter a
_javax.el.ValueExpression_ or _javax.el.MethodExpression_ directly, so
there is no need to use the Faces API to create them.

[#50638860_pgfId-1025226]##The _UIComponentTag_ and _UIComponentBodyTag_
classes are deprecated and Faces provides new base class,
UIComponentELTag to the new rules for taglibs in Faces.

[#50638860_pgfId-1025205]##It’s very important to note that we still are
using #\{} as the delimiters for expressions that appear in a JSP page
in the value of a tag attribute, but when the Java API is used, either
$\{} or #\{} may be used for delimiters.

===== [#50638860_pgfId-1025211]##[#50638860_32212]##Faces 1.0 and 1.1 Taglib migration story

[#50638860_pgfId-1025215]##It is imperitive that applications written
for Faces 1.0 and 1.1 continue to run on Faces 1.2. From the JSP
perspective, this means

[#50638860_pgfId-1025241]##that JSP pages using the standard h: and f:
tags must work without change

[#50638860_pgfId-1025255]##that JSP pages using custom faces taglibs
must work without change

[#50638860_pgfId-1025246]##The first item is enabled by re-writing the
h: and f: taglibs which must be provided by the Faces implementor.

[#50638860_pgfId-1025256]##The second item is enabled as follows. For
discussion the term _jsp-version_ is used to denote the _jsp-version_
element in a JSP 1.2 (and earlier) TLD, as well as the _version_ element
in a JSP 2.0 (and later) TLD. The JSP container must examine the
_jsp-version_ element of the TLD for a taglib. If the _jsp-version_ is
less than 2.1, the taglib is deemed to be a Faces 1.0 or 1.1 taglib and
the container must ignore all expressions that use #\{} as delimiters,
except for those appearing in tag attribute with a property setter that
takes a _javax.el.ValueExpression_ or _javax.el.MethodExpression_ . If
the _jsp-version_ is 2.1 or greater, the taglib is deemed to be a Faces
1.2 or later taglib and the JSP container is aware of #\{} expressions.

=== [#50638860_pgfId-1032357]##

image:JSF-40.gif[image]

[#50638860_17251]##JSF Core Tag Library

[#50638860_pgfId-1032362]##[P1-start jsf_core taglib requirements] All
JSF implementations must provide a tag library containing core actions
(described below) that are independent of a particular _RenderKit_ . The
corresponding tag library descriptor must meet the following
requirements:

[#50638860_pgfId-1032363]##Must declare a tag library version (
_<tlib-version>_ ) value of _1.2_ .

[#50638860_pgfId-1032365]##Must declare a URI ( _<uri>_ ) value of
_http://java.sun.com/jsf/core_ .

{empty}[#50638860_pgfId-1032384]##Must be included in the _META-INF_
directory of a JAR file containing the corresponding implementation
classes, suitable for inclusion with a web application, such that the
tag library descriptor will be located automatically by the algorithm
described in Section 7.3 of the _JavaServer Pages Specification_
(version 2.1). [P1-end]

{empty}[#50638860_pgfId-1032420]##[P1-start no javascript in jsf_core
taglib] The tags in the implementation of this tag library must not
cause JavaScript to be rendered to the client. Doing so would break the
requirement that the JSF Core Tag library is independent of any specific
RenderKit. [P1-end]

[#50638860_pgfId-1032421]##Each custom action included in the JSF Core
Tag Library is documented in a subsection below, with the following
outline for each action:

[#50638860_pgfId-1032422]##Name—The name of this custom action, as used
in a JSP page.

[#50638860_pgfId-1032423]##Short Description—A summary of the behavior
implemented by this custom action.

[#50638860_pgfId-1032424]##Syntax—One or more examples of using this
custom action, with the required and optional sets of attributes that
may be used together. If the tag may have an _id_ attribute, its value
may be a literal string, or an immediate, non-defferd expression, such
as “ _userName_ ” or “ _user$\{i}_ ” without the quotes.

[#50638860_pgfId-1032425]##Body Content—The type of nested content for
this custom action, using one of the standard values _empty_ , _JSP_ ,
or _tagdependent_ as described in the JSP specification. This section
also describes restrictions on the types of content (template text, JSF
core custom actions, JSF _UIComponent_ custom actions, and/or other
custom actions) that can be nested in the body of this custom action.

[#50638860_pgfId-1032426]##Attributes—A table containing one row for
each defined attribute for this custom action. The following columns
provide descriptive information about each attribute:

[#50638860_pgfId-1032427]##Name—Name of this attribute, as it must be
used in the page. If the name of the attribute is in _italics_ , it is
required.

[#50638860_pgfId-1025313]##Expr—The type of dynamic expression (if any)
that can be used in this attribute value. Legal values are VE (this may
be a literal or a value expression), ME (this may be a method
expression), or NONE (this attribute accepts literal values only). If
the _Expr_ column is VE, the corresponding _<attribute>_ declaration in
the TLD must contain a _<deferred-value>_ element, optionally containing
a _<type>_ element that contains the fully qualified java class name of
the expected type of the expression. If _<type>_ is omitted,
Object.class is assumed. If the _Expr_ column is ME, the corresponding
_<attribute>_ declaration in the TLD must contain a _<deferred-method>_
element, containing a _<method-signature>_ element that describes the
exact method signature for the method. In this case, the _Description_
column the description column contains the method signature.

[#50638860_pgfId-1032446]##Type—Fully qualified Java class or primitive
type of this attribute.

[#50638860_pgfId-1032447]##Description—The functional meaning of this
attribute’s value.

[#50638860_pgfId-1032448]##Constraints—Additional constraints enforced
by this action, such as combinations of attributes that may be used
together.

[#50638860_pgfId-1032449]##Description—Details about the functionality
provided by this custom action.

==== [#50638860_pgfId-1032450]##[#50638860_67059]##<f:actionListener>

[#50638860_pgfId-1032451]##Register an _ActionListener_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1032452]##Syntax

[#50638860_pgfId-1032453]##<f:actionListener
type=”fully-qualified-classname” binding=”value Expression”/>

======= [#50638860_pgfId-1032454]##Body Content

[#50638860_pgfId-1032455]##empty.

======= [#50638860_pgfId-1032481]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1032458]##Name |[#50638860_pgfId-1032460]##Expr
|[#50638860_pgfId-1032462]##Type |[#50638860_pgfId-1032464]##Description
|[#50638860_pgfId-1032466]## _type_ |[#50638860_pgfId-1032468]## _VE_
|[#50638860_pgfId-1032470]## _String_ |[#50638860_pgfId-1032472]##Fully
qualified Java class name of an _ActionListener_ to be created and
registered

|[#50638860_pgfId-1032474]##binding |[#50638860_pgfId-1032476]## _VE_
|[#50638860_pgfId-1032478]## _ValueExpression_
|[#50638860_pgfId-1032480]##A _ValueExpression_ expression that
evaluates to an object that implements
_javax.faces.event.ActionListener_
|===

======= [#50638860_pgfId-1032482]##Constraints

[#50638860_pgfId-1032483]##Must be nested inside a _UIComponent_ custom
action.

[#50638860_pgfId-1032484]##The corresponding _UIComponent_
implementation class must implement _ActionSource_ , and therefore
define a public _addActionListener()_ method that accepts an
_ActionListener_ parameter.

[#50638860_pgfId-1032485]##The specified listener class must implement
_javax.faces.event.ActionListener_ .

[#50638860_pgfId-1023439]## _type_ and/or binding must be specified.

[#50638860_pgfId-1025821]##[P1-start f:actionListener constraints] If
this tag is not nested inside a _UIComponent_ custom action, or the
_UIComponent_ implementation class does not correctly implement
_ActionSource_ , or the specified listener class does not implement
_javax.faces.event.ActionListener_ , throw a _JspException_ . [P1-end]
Note that if the binding attribute is used, the scope of the
_ValueExpression_ must be chosen carefully so as not to introduce
undesireable results. In general, when using the binding attribute, do
not point to beans in request or narrower scope.

======= [#50638860_pgfId-1032546]##Description

[#50638860_pgfId-1023557]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true,_ check the
binding attribute.

[#50638860_pgfId-1032572]##If binding is set, create a _ValueExpression_
by invoking _Application.createValueExpression_ () with binding as the
expression argument, and _Object.class_ as the expectedType argument.
Use the _ValueExpression_ to obtain a reference to the _ActionListener_
instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.event.ActionListener_ , register it by calling
_addActionListener()._ If there was an exception thrown, rethrow the
exception as a _JspException._

[#50638860_pgfId-1032587]##If the listener instance could not be
created, check the _type_ attribute _._ If the _type_ attribute is set,
instantiate an instance of the specified class, and register it by
calling _addActionListener()_ . If the binding attribute was also set,
evaluate the expression into a _ValueExpression_ and store the listener
instance by calling _setValue()_ on the _ValueExpression_ . If there was
an exception thrown, rethrow the exception as a _JspException._

[#50638860_pgfId-1023817]##As an alternative to using the binding and/or
type attributes, you may also register a method in a backing bean class
to receive _ActionEvent_ notifications, by using the _actionListener_
attribute on the corresponding _UIComponent_ custom action.

==== [#50638860_pgfId-1032604]##[#50638860_79967]##<f:attribute>

[#50638860_pgfId-1032605]##Add an attribute or _ValueExpression_ on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1032606]##Syntax

[#50638860_pgfId-1032607]##<f:attribute name=”attribute-name”
value=”attribute-value”/>

======= [#50638860_pgfId-1032608]##Body Content

[#50638860_pgfId-1032609]##empty.

======= [#50638860_pgfId-1032635]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1032612]##Name |[#50638860_pgfId-1032614]##Expr
|[#50638860_pgfId-1032616]##Type |[#50638860_pgfId-1032618]##Description
|[#50638860_pgfId-1032620]## _name_ |[#50638860_pgfId-1032622]## _VE_
|[#50638860_pgfId-1032624]## _String_ |[#50638860_pgfId-1032626]##Name
of the component attribute to be set

|[#50638860_pgfId-1032628]## _value_ |[#50638860_pgfId-1032630]## _VE_
|[#50638860_pgfId-1032632]## _Object_ |[#50638860_pgfId-1032634]##Value
of the component attribute to be set
|===

======= [#50638860_pgfId-1032636]##Constraints

[#50638860_pgfId-1032637]##Must be nested inside a _UIComponent_ custom
action.

======= [#50638860_pgfId-1032638]##Description

[#50638860_pgfId-1032639]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . Call
the _getValue()_ method on the argument _name_ to obtain the name of the
attribute. If the associated component already has a component attribute
with that name, take no action. Otherwise, call the _isLiteralText()_
method on the argument _value_ . If it returns _true_ , store the value
in the component’s attribute Map under the name derived above. If it
returns _false_ , store the _ValueExpression_ in the component’s
_ValueExpression_ Map under the name derived above.

[#50638860_pgfId-1032640]##There is no standard implementation class for
this action. It must be provided by the implementation.

==== [#50638860_pgfId-1032642]##[#50638860_91848]##<f:convertDateTime>

[#50638860_pgfId-1032643]##Register a _DateTimeConverter_ instance on
the _UIComponent_ associated with the closest parent _UIComponent_
custom action.

======= [#50638860_pgfId-1032644]##Syntax

[#50638860_pgfId-1032645]##<f:convertDateTime

{empty}[#50638860_pgfId-1032646]##
[dateStyle=”\{default|short|medium|long|full}”]

{empty}[#50638860_pgfId-1032647]## [locale=”\{ _locale_ ” | string}]

{empty}[#50638860_pgfId-1032648]## [pattern=” _pattern_ ”]

{empty}[#50638860_pgfId-1032649]##
[timeStyle=”\{default|short|medium|long|full}”]

{empty}[#50638860_pgfId-1032650]## [timeZone=”\{ _timeZone_ | string}”]

{empty}[#50638860_pgfId-1032651]##
[type=”\{date|time|both|localDate|localDateTime|localTime|offsetTime|offsetDateTime| +
zonedDateTime}”]

[#50638860_pgfId-1032652]## [binding=”Value Expression”]/>

======= [#50638860_pgfId-1032653]##Body Content

[#50638860_pgfId-1032654]##empty.

======= [#50638860_pgfId-1032720]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1032657]##Name |[#50638860_pgfId-1032659]##Expr
|[#50638860_pgfId-1032661]##Type |[#50638860_pgfId-1032663]##Description
|[#50638860_pgfId-1032665]##date-Style |[#50638860_pgfId-1032667]##VE
|[#50638860_pgfId-1032669]##String
|[#50638860_pgfId-1032671]##Predefined formatting style which determines
how the date component of a date string is to be formatted and parsed.
Applied only if type is "date", "both", "localDate", "localDateTime", or
"zonedDateTime". Valid values are "default", "short", "medium", "long",
and "full". Default value is "default". If a java.time formatter is
being used, yet the dateStyle is set to "default", the value "medium" is
assumed.

|[#50638860_pgfId-1032673]##locale |[#50638860_pgfId-1032675]##VE
|[#50638860_pgfId-1032677]##Locale or String
|[#50638860_pgfId-1032679]##Locale whose predefined styles for dates and
times are used during formatting or parsing. If not specified, the
Locale returned by FacesContext.getViewRoot().getLocale() will be used.
Value must be either a VE expression that evaluates to a
java.util.Locale instance, or a String that is valid to pass as the
first argument to the constructor java.util.Locale(String language,
String country). The empty string is passed as the second argument.

|[#50638860_pgfId-1032681]##pattern |[#50638860_pgfId-1032683]##VE
|[#50638860_pgfId-1032685]##String |[#50638860_pgfId-1032687]##Custom
formatting pattern which determines how the date/time string should be
formatted and parsed.

|[#50638860_pgfId-1032689]##time-Style |[#50638860_pgfId-1032691]##VE
|[#50638860_pgfId-1032693]##String
|[#50638860_pgfId-1032695]##Predefined formatting style which determines
how the time component of a date string is to be formatted and parsed.
Applied only if type is "time", "both", "localTime" or "offsetTime".
Valid values are "default", "short", "medium", "long", and "full".
Default value is "default". If a java.time formatter is being used, yet
the timeStyle is set to "default", the value "medium" is assumed.

|[#50638860_pgfId-1032697]##time-Zone |[#50638860_pgfId-1032699]##VE
|[#50638860_pgfId-1032701]##timezone or String
|[#50638860_pgfId-1032703]##Time zone in which to interpret any time
information in the date string. Value must be either a VE expression
that evaluates to a java.util.TimeZone instance, or a String that is a
timezone ID as described in the javadocs for
java.util.TimeZone.getTimeZone().

|[#50638860_pgfId-1032705]##type |[#50638860_pgfId-1032707]##VE
|[#50638860_pgfId-1032709]##String |[#50638860_pgfId-1032711]##Specifies
what contents the string value will be formatted to include, or parsed
expecting. Valid values are "date", "time", "both", "localDate",
"localDateTime", "localTime", "offsetTime", "offsetDateTime", and
"zonedDateTime". The values starting with "local", "offset" and "zoned"
correspond to Java SE 8 Date Time API classes in package java.time with
the name derived by upper casing the first letter. For example,
java.time.LocalDate for the value "localDate". Default value is "date".

|[#50638860_pgfId-1032713]##binding |[#50638860_pgfId-1032715]##VE
|[#50638860_pgfId-1032717]##ValueExpression
|[#50638860_pgfId-1032719]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Converter_
|===

======= [#50638860_pgfId-1032721]##Constraints

[#50638860_pgfId-1032722]##Must be nested inside a _UIComponent_ custom
action whose component class implements _ValueHolder_ , and whose value
is a _java.util.Date_ (or appropriate subclass).

[#50638860_pgfId-1032723]##If _pattern_ is specified, the pattern syntax
must use the pattern syntax specified by _java.text.SimpleDateFormat_ or
_java.time.format.DateTimeFormatter_ depending on the value of type.

[#50638860_pgfId-1032724]##If _pattern_ is not specified, formatted
strings will contain a date value, a time value, or both depending on
the specified _type_ . When date or time values are included, they will
be formatted according to the specified _dateStyle_ and _timeStyle_ ,
respectively.

[#50638860_pgfId-1023992]##if _type_ is not specified:

[#50638860_pgfId-1023993]##if _dateStyle_ is set and _timeStyle_ is not,
_type_ defaults to _date_

[#50638860_pgfId-1022654]##if _timeStyle_ is set and _dateStyle_ is not,
_type_ defaults to _time_

[#50638860_pgfId-1025883]##if both _dateStyle_ and _timeStyle_ are set,
_type_ defaults to _both_

{empty}[#50638860_pgfId-1025884]##[P1-start f:convertDateTime
constraints] If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _ValueHolder_ , throw a _JspException_ [P1-end]

======= [#50638860_pgfId-1032775]##Description

[#50638860_pgfId-1032776]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createConverter()_ and register the returned Converter instance on the
associated UIComponent.

[#50638860_pgfId-1032781]##[P1-start f:convertDateTime implementation
requirements ]The implementation class for this action must meet the
following requirements:

[#50638860_pgfId-1032782]##Must extend
_javax.faces.webapp.ConverterELTag_ .

[#50638860_pgfId-1032783]##The _createConverter()_ method must:

[#50638860_pgfId-1024032]##If _binding_ is non-null, call _getValue()_
on it to obtain a reference to the _Converter_ instance. If there is no
exception thrown, and _binding.getValue()_ returned a non-null object
that implements _javax.faces.convert.Converter_ , it must then cast the
returned instance to _javax.faces.convert.DateTimeConverter_ and
configure its properties based on the specified attributes for this
custom action, and return the configured instance. If there was an
exception thrown, rethrow the exception as a _JspException._

[#50638860_pgfId-1032822]##use the _converterId_ if the converter
instance could not be created from the _binding_ attribute. Call the
_createConverter()_ method of the _Application_ instance for this
application, passing converter id “javax.faces.DateTime”. If the binding
attribute was also set, store the converter instance by calling
_binding.setValue()_ . It must then cast the returned instance to
_javax.faces.convert.DateTimeConverter_ and configure its properties
based on the specified attributes for this custom action, and return the
configured instance. If there was an exception thrown, rethrow the
exception as a _JspException._

[#50638860_pgfId-1022023]##If the type attribute is not specified, it
defaults as follows:

[#50638860_pgfId-1022024]## If dateStyle is specified but timeStyle is
not specified, default to date.

[#50638860_pgfId-1022028]##If dateStyle is not specified but timeStyle
is specified, default to time.

{empty}[#50638860_pgfId-1022029]##If both dateStyle and timeStyle are
specified, default to both. [P1-end]

==== [#50638860_pgfId-1032841]##[#50638860_63143]##<f:convertNumber>

[#50638860_pgfId-1032842]##Register a _NumberConverter_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1032843]##Syntax

[#50638860_pgfId-1032844]##<f:convertNumber

{empty}[#50638860_pgfId-1032845]## [currencyCode=” _currencyCode_ ”]

{empty}[#50638860_pgfId-1032846]## [currencySymbol=” _currencySymbol_ ”]

{empty}[#50638860_pgfId-1032847]## [groupingUsed=”\{true|false}”]

{empty}[#50638860_pgfId-1032848]## [integerOnly=”\{true|false}”]

{empty}[#50638860_pgfId-1032849]## [locale=” _locale_ ”]

{empty}[#50638860_pgfId-1032850]## [maxFractionDigits=”
_maxFractionDigits_ ”]

{empty}[#50638860_pgfId-1032851]## [maxIntegerDigits=”
_maxIntegerDigits_ ”]

{empty}[#50638860_pgfId-1032852]## [minFractionDigits=”
_minFractionDigits_ ”]

{empty}[#50638860_pgfId-1032853]## [minIntegerDigits=”
_minIntegerDigits_ ”]

{empty}[#50638860_pgfId-1032854]## [pattern=” _pattern_ ”]

{empty}[#50638860_pgfId-1032855]## [type=”\{number|currency|percent}”]

[#50638860_pgfId-1032856]## [binding=”Value Expression”]/>

======= [#50638860_pgfId-1032857]##Body Content

[#50638860_pgfId-1032858]##empty.

======= [#50638860_pgfId-1032964]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1032861]##Name |[#50638860_pgfId-1032863]##Expr
|[#50638860_pgfId-1032865]##Type |[#50638860_pgfId-1032867]##Description
|[#50638860_pgfId-1032869]##currencyCode |[#50638860_pgfId-1032871]##VE
|[#50638860_pgfId-1032873]##String |[#50638860_pgfId-1032875]##ISO 4217
currency code, applied only when formatting currencies.

|[#50638860_pgfId-1032877]##currencySymbol
|[#50638860_pgfId-1032879]##VE |[#50638860_pgfId-1032881]##String
|[#50638860_pgfId-1032883]##Currency symbol, applied only when
formatting currencies.

|[#50638860_pgfId-1032885]##groupingUsed |[#50638860_pgfId-1032887]##VE
|[#50638860_pgfId-1032889]##boolean
|[#50638860_pgfId-1032891]##Specifies whether formatted output will
contain grouping separators.

|[#50638860_pgfId-1032893]##integerOnly |[#50638860_pgfId-1032895]##VE
|[#50638860_pgfId-1032897]##boolean
|[#50638860_pgfId-1032899]##Specifies whether only the integer part of
the value will be parsed.

|[#50638860_pgfId-1032901]##locale |[#50638860_pgfId-1032903]##VE
|[#50638860_pgfId-1032905]##java.util.Locale
|[#50638860_pgfId-1032907]##Locale whose predefined styles for numbers
are used during formatting or parsing. If not specified, the Locale
returned by FacesContext.getViewRoot().getLocale() will be used.

|[#50638860_pgfId-1032909]##maxFractionDigits
|[#50638860_pgfId-1032911]##VE |[#50638860_pgfId-1032913]##int
|[#50638860_pgfId-1032915]##Maximum number of digits that will be
formatted in the fractional portion of the output.

|[#50638860_pgfId-1032917]##maxIntegerDigits
|[#50638860_pgfId-1032919]##VE |[#50638860_pgfId-1032921]##int
|[#50638860_pgfId-1032923]##Maximum number of digits that will be
formatted in the integer portion of the output

|[#50638860_pgfId-1032925]##minFractionDigits
|[#50638860_pgfId-1032927]##VE |[#50638860_pgfId-1032929]##int
|[#50638860_pgfId-1032931]##Minimum number of digits that will be
formatted in the fractional portion of the output.

|[#50638860_pgfId-1032933]##minIntegerDigits
|[#50638860_pgfId-1032935]##VE |[#50638860_pgfId-1032937]##int
|[#50638860_pgfId-1032939]##Minimum number of digits that will be
formatted in the integer portion of the output.

|[#50638860_pgfId-1032941]##pattern |[#50638860_pgfId-1032943]##VE
|[#50638860_pgfId-1032945]##String |[#50638860_pgfId-1032947]##Custom
formatting pattern which determines how the number string should be
formatted and parsed.

|[#50638860_pgfId-1032949]##type |[#50638860_pgfId-1032951]##VE
|[#50638860_pgfId-1032953]##String |[#50638860_pgfId-1032955]##Specifies
whether the value will be parsed and formatted as a number, currency, or
percentage.

|[#50638860_pgfId-1032957]##binding |[#50638860_pgfId-1032959]##VE
|[#50638860_pgfId-1032961]##ValueExpression
|[#50638860_pgfId-1032963]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Converter_
|===

======= [#50638860_pgfId-1032965]##Constraints

[#50638860_pgfId-1032966]##Must be nested inside a _UIComponent_ custom
action whose component class implements _ValueHolder_ , and whose value
is a numeric wrapper class or primitive.

[#50638860_pgfId-1032967]##If _pattern_ is specified, the pattern syntax
must use the pattern syntax specified by _java.text.DecimalFormat_ .

[#50638860_pgfId-1032968]##If _pattern_ is not specified, formatting and
parsing will be based on the specified _type_ .

{empty}[#50638860_pgfId-1025904]##[P1-start f:convertNumber constraints]
If this tag is not nested inside a _UIComponent_ custom action, or the
_UIComponent_ implementation class does not correctly implement
_ValueHolder_ , throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1033019]##Description

[#50638860_pgfId-1033020]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createConverter()_ and register the returned Converter instance on the
associated UIComponent.

[#50638860_pgfId-1033025]##[P1-start f:convertNumber implementation] The
implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1033026]##Must extend
_javax.faces.webapp.ConverterELTag_ .

[#50638860_pgfId-1033027]##The _createConverter()_ method must:

[#50638860_pgfId-1024087]##If _binding_ is non-null, call
_binding.getValue()_ to obtain a reference to the _Converter_ instance.
If there is no exception thrown, and _binding.getValue()_ returned a
non-null object that implements _javax.faces.convert.Converter_ , it
must then cast the returned instance to
_javax.faces.convert.NumberConverter_ and configure its properties based
on the specified attributes for this custom action, and return the
configured instance. If there was an exception thrown, rethrow the
exception as a _JspException._

{empty}[#50638860_pgfId-1033071]##use the _converterId_ if the converter
instance could not be created from the _binding_ attribute. Call the
_createConverter()_ method of the _Application_ instance for this
application, passing converter id “javax.faces.Number”. If the binding
attribute was also set, store the converter instance by calling
_binding.setValue()_ . It must then cast the returned instance to
_javax.faces.convert.NumberConverter_ and configure its properties based
on the specified attributes for this custom action, and return the
configured instance. If there was an exception thrown, rethrow the
exception as a _JspException_ . [P1-end]

==== [#50638860_pgfId-1033073]##[#50638860_50858]##<f:converter>

[#50638860_pgfId-1033074]##Register a named _Converter_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1033075]##Syntax

[#50638860_pgfId-1033076]##<f:converter converterId=”converterId”
binding=”Value Expression”/>

======= [#50638860_pgfId-1033077]##Body Content

[#50638860_pgfId-1033078]##empty

======= [#50638860_pgfId-1033104]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033081]##Name |[#50638860_pgfId-1033083]##Expr
|[#50638860_pgfId-1033085]##Type |[#50638860_pgfId-1033087]##Description
|[#50638860_pgfId-1033089]## _converterId_ |[#50638860_pgfId-1033091]##
_VE_ |[#50638860_pgfId-1033093]## _String_
|[#50638860_pgfId-1033095]##Converter identifier of the converter to be
created.

|[#50638860_pgfId-1033097]##binding |[#50638860_pgfId-1033099]##VE
|[#50638860_pgfId-1033101]##ValueExpression
|[#50638860_pgfId-1033103]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Converter_
|===

======= [#50638860_pgfId-1033105]##Constraints

[#50638860_pgfId-1033106]##Must be nested inside a _UIComponent_ custom
action whose component class implements _ValueHolder_ .

[#50638860_pgfId-1024249]## _converterId_ and/or binding must be
specified.

{empty}[#50638860_pgfId-1025912]##[P1-start f:converter constraints] If
this tag is not nested inside a _UIComponent_ custom action, or the
_UIComponent_ implementation class does not correctly implement
_ValueHolder_ , throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1033170]##Description

[#50638860_pgfId-1033171]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createConverter()_ and register the returned Converter instance on the
associated UIComponent.

[#50638860_pgfId-1033176]##[P1-start f:converter implementation] The
implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1033177]##Must extend
_javax.faces.webapp.ConverterJspTag_ .

[#50638860_pgfId-1033178]##The _createConverter()_ method must:

{empty}[#50638860_pgfId-1033237]##If _binding_ is non-null, call
_binding.getValue()_ to obtain a reference to the _Converter_ instance.
If there is no exception thrown, and _binding.getValue()_ returned a
non-null object that implements _javax.faces.convert.Converter_ ,
register it by calling _setConverter()._ If there was an exception
thrown, rethrow the exception as a _JspException._ Use the _converterId_
attribute if the converter instance could not be created from the
_binding_ attribute _._ If the _converterId_ attribute is set, call the
_createConverter()_ method of the _Application_ instance for this
application, passing converter id specified by their converterId
attribute. If the binding attribute was also set, store the converter
instance by calling _binding.setValue()_ . Register the converter
instance by calling _setConverter()._ If there was an exception thrown,
rethrow the exception as a _JspException_ . [P1-end]

==== [#50638860_pgfId-1033239]##[#50638860_62776]##<f:facet>

[#50638860_pgfId-1033243]##Register a named facet (see
link:JSF.htm#50638851_55906[See Facet Management]) on the _UIComponent_
associated with the closest parent _UIComponent_ custom action.

======= [#50638860_pgfId-1033244]##Syntax

[#50638860_pgfId-1033245]##<f:facet name=”facet-name”/>

======= [#50638860_pgfId-1033246]##Body Content

[#50638860_pgfId-1033247]##JSP. However, only a single UIComponent
custom action (and any related nested JSF custom actions) is allowed; no
template text or other custom actions may be present.

======= [#50638860_pgfId-1033265]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033250]##Name |[#50638860_pgfId-1033252]##Expr
|[#50638860_pgfId-1033254]##Type |[#50638860_pgfId-1033256]##Description
|[#50638860_pgfId-1033258]## _name_ |[#50638860_pgfId-1033260]## _NONE_
|[#50638860_pgfId-1033262]## _String_ |[#50638860_pgfId-1033264]##Name
of the facet to be created
|===

======= [#50638860_pgfId-1033266]##Constraints

[#50638860_pgfId-1033284]##[P1-start f:facet constraints] Must be nested
inside a _UIComponent_ custom action.

{empty}[#50638860_pgfId-1033303]##Exactly one _UIComponent_ custom
action must be nested inside this custom action (although the nested
component custom action could itself have nested children). [P1-end]

======= [#50638860_pgfId-1033304]##Description

[#50638860_pgfId-1033305]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the associated component does not already have a facet with a name
specified by this custom action’s _name_ attribute, create a facet with
this name from the _UIComponent_ custom action that is nested within
this custom action.

{empty}[#50638860_pgfId-1033341]##[P1-start f:facet implementation] The
implementation class must be, or extend, _javax.faces.webapp.FacetTag_ .
[P1-end]

==== [#50638860_pgfId-1033343]##[#50638860_73157]##<f:loadBundle>

[#50638860_pgfId-1033344]##Load a resource bundle localized for the
locale of the current view, and expose it (as a Map) in the request
attributes for the current request.

======= [#50638860_pgfId-1033345]##Syntax

[#50638860_pgfId-1033346]##<f:loadBundle basename=”resource-bundle-name”
var=” _attributeKey_ ”/>

======= [#50638860_pgfId-1033347]##Body Content

[#50638860_pgfId-1033348]##empty

======= [#50638860_pgfId-1033374]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033351]##Name |[#50638860_pgfId-1033353]##Expr
|[#50638860_pgfId-1033355]##Type |[#50638860_pgfId-1033357]##Description
|[#50638860_pgfId-1033359]## _basename_ |[#50638860_pgfId-1033361]##
_VE_ |[#50638860_pgfId-1033363]## _String_
|[#50638860_pgfId-1033365]##Base name of the resource bundle to be
loaded.

|[#50638860_pgfId-1033367]##var |[#50638860_pgfId-1033369]##NONE
|[#50638860_pgfId-1033371]##String |[#50638860_pgfId-1033373]##Name of a
request scope attribute under which the resource bundle will be exposed
as a Map.
|===

======= [#50638860_pgfId-1033375]##Constraints

{empty}[#50638860_pgfId-1033411]##[P1-start f:loadBundle constraints]
Must be nested inside an _<f:view>_ custom action. [P1-end]

======= [#50638860_pgfId-1033412]##Description

[#50638860_pgfId-1033413]##Load the resource bundle specified by the
_basename_ attribute, localized for the Locale of the _UIViewRoot_
component of the current view, and expose its key-values pairs as a
_Map_ under the attribute key specified by the _var_ attribute. In this
way, value binding expressions may be used to conveniently retrieve
localized values. If the named bundle is not found, throw _JspException_
.

[#50638860_pgfId-1022005]##If the _get()_ method for the _Map_ instance
exposed by this custom action is passed a key value that is not present
(that is, there is no underlying resource value for that key), the
literal string “???foo???” (where “foo” is replaced by the key the
String representation of the key that was requested) must be returned,
rather than the standard _Map_ contract return value of _null_ .

==== [#50638860_pgfId-1033431]##<f:param>

[#50638860_pgfId-1033432]##Add a child _UIParameter_ component to the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1033433]##Syntax

====== [#50638860_pgfId-1033434]##Syntax 1: Unnamed value

[#50638860_pgfId-1033435]##<f:param
[id=”componentIdOrImmediateExpression”] value=”parameter-value”

[#50638860_pgfId-1033436]## [binding=” _componentReference”]_ />

====== [#50638860_pgfId-1033437]##Syntax 2: Named value

{empty}[#50638860_pgfId-1033438]##<f:param
[id=”componentIdOrImmediateExpression”]

[#50638860_pgfId-1033439]## [binding=” _componentReference”]_

[#50638860_pgfId-1033440]## name=”parameter-name”
value=”parameter-value”/>

======= [#50638860_pgfId-1033441]##Body Content

[#50638860_pgfId-1033442]##empty.

======= [#50638860_pgfId-1033484]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033445]##Name |[#50638860_pgfId-1033447]##Expr
|[#50638860_pgfId-1033449]##Type |[#50638860_pgfId-1033451]##Description
|[#50638860_pgfId-1033453]##binding |[#50638860_pgfId-1033455]##VE
|[#50638860_pgfId-1033457]##ValueExpression
|[#50638860_pgfId-1033459]##ValueExpression expression to a backing bean
property bound to the component instance for the UIComponent created by
this custom action

|[#50638860_pgfId-1033461]## _id_ |[#50638860_pgfId-1033463]## _NONE_
|[#50638860_pgfId-1033465]## _String_
|[#50638860_pgfId-1033467]##Component identifier of a _UIParameter_
component

|[#50638860_pgfId-1033469]## _name_ |[#50638860_pgfId-1033471]## _VE_
|[#50638860_pgfId-1033473]## _String_ |[#50638860_pgfId-1033475]##Name
of the parameter to be set

|[#50638860_pgfId-1033477]## _value_ |[#50638860_pgfId-1033479]## _VE_
|[#50638860_pgfId-1033481]## _String_ |[#50638860_pgfId-1033483]##Value
of the parameter to be set
|===

======= [#50638860_pgfId-1033485]##Constraints

{empty}[#50638860_pgfId-1033508]##[P1-start f:param constraints] Must be
nested inside a _UIComponent_ custom action. [P1-end]

======= [#50638860_pgfId-1033509]##Description

[#50638860_pgfId-1033510]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create a new
_UIParameter_ component, and attach it as a child of the associated
_UIComponent_ . It is up to the parent _UIComponent_ to determine how it
will handle its _UIParameter_ child _ren._

[#50638860_pgfId-1033528]##[P1-start f:param implementation] The
implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1033529]##Must extend _javax.faces.UIComponentELTag_ .

[#50638860_pgfId-1033530]##The _getComponentType()_ method must return “
_Parameter_ ”.

{empty}[#50638860_pgfId-1033549]##The _getRendererType()_ method must
return _null_ . [P1-end]

==== [#50638860_pgfId-1033550]##<f:phaseListener>

[#50638860_pgfId-1033551]##Register a _PhaseListener_ instance on the
_UIViewRoot_ associated with the closest parent _UIViewRoot_ custom
action.

======= [#50638860_pgfId-1033552]##Syntax

[#50638860_pgfId-1033553]##<f:phaseListener
type=”fully-qualified-classname”

[#50638860_pgfId-1033554]##binding=”Value expression”/>

======= [#50638860_pgfId-1033555]##Body Content

[#50638860_pgfId-1033556]##empty.

======= [#50638860_pgfId-1033582]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033559]##Name |[#50638860_pgfId-1033561]##Expr
|[#50638860_pgfId-1033563]##Type |[#50638860_pgfId-1033565]##Description
|[#50638860_pgfId-1033567]## _type_ |[#50638860_pgfId-1033569]## _VE_
|[#50638860_pgfId-1033571]## _String_ |[#50638860_pgfId-1033573]##Fully
qualified Java class name of an _PhaseListener_ to be created and
registered

|[#50638860_pgfId-1033575]##binding |[#50638860_pgfId-1033577]## _VE_
|[#50638860_pgfId-1033579]## _ValueExpression_
|[#50638860_pgfId-1033581]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.event.PhaseListener_
|===

======= [#50638860_pgfId-1033583]##Constraints

[#50638860_pgfId-1033601]##[P1-start f:phaseListener constraints] Must
be nested inside a _UIViewRoot_ custom action.

[#50638860_pgfId-1033602]##The specified listener class must implement
_javax.faces.event.PhaseListener_ .

{empty}[#50638860_pgfId-1023885]## _type_ and/or binding must be
specified. [P1-end]

======= [#50638860_pgfId-1033633]##Description

[#50638860_pgfId-1023887]##Locate the one and only _UIViewRoot_ custom
action instance by walking up the tag tree until you find a
_UIComponentTagBase_ instance that has no parent. If the _getCreated()_
method of this instance returns _true,_ check the binding attribute.

[#50638860_pgfId-1033654]##If binding is set, call _binding.getValue()_
to obtain a reference to the _PhaseListener_ instance. If there is no
exception thrown, and _binding.getValue()_ returned a non-null object
that implements _javax.faces.event.PhaseListener_ , register it by
calling _addPhaseListener()._ If there was an exception thrown, rethrow
the exception as a _JspException._

[#50638860_pgfId-1033664]##If the listener instance could not be
created, check the _type_ attribute _._ If the _type_ attribute is set,
instantiate an instance of the specified class, and register it by
calling _addPhaseListener()_ . If the binding attribute was also set,
store the listener instance by calling _binding.setValue()_ . If there
was an exception thrown, rethrow the exception as a _JspException._

==== [#50638860_pgfId-1033666]##[#50638860_96808]##<f:selectItem>

[#50638860_pgfId-1033667]##Add a child _UISelectItem_ component to the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1033668]##Syntax

====== [#50638860_pgfId-1033669]##Syntax 1: Directly Specified Value

{empty}[#50638860_pgfId-1033670]##<f:selectItem
[id=”componentIdOrImmediateExpression”]

[#50638860_pgfId-1033671]## [binding=” _componentReference”]_

{empty}[#50638860_pgfId-1033672]## [itemDisabled=”\{true|false}”]

[#50638860_pgfId-1033673]## itemValue=” _itemValue”_

[#50638860_pgfId-1033674]## itemLabel=” _itemLabel”_

[#50638860_pgfId-1033675]## [itemDescription=” _itemDescription”]_ />

====== [#50638860_pgfId-1033676]##Syntax 2: Indirectly Specified Value

{empty}[#50638860_pgfId-1033677]##<f:selectItem
[id=”componentIdOrImmediateExpression”]

[#50638860_pgfId-1033678]## [binding=” _componentReference”]_

[#50638860_pgfId-1033679]## value=” _selectItemValue”/>_

======= [#50638860_pgfId-1033680]## Body Content

[#50638860_pgfId-1033681]##empty

======= [#50638860_pgfId-1033755]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033684]##Name |[#50638860_pgfId-1033686]##Expr
|[#50638860_pgfId-1033688]##Type |[#50638860_pgfId-1033690]##Description
|[#50638860_pgfId-1033692]##binding |[#50638860_pgfId-1033694]##VE
|[#50638860_pgfId-1033696]## _ValueExpression_
|[#50638860_pgfId-1033698]## _ValueExpression_ expression to a backing
bean property bound to the component instance for the UIComponent
created by this custom action.

|[#50638860_pgfId-1033700]## _id_ |[#50638860_pgfId-1033702]## _NONE_
|[#50638860_pgfId-1033704]## _String_
|[#50638860_pgfId-1033706]##Component identifier of a _UISelectItem_
component.

|[#50638860_pgfId-1033708]## _itemDescription_
|[#50638860_pgfId-1033710]## _VE_ |[#50638860_pgfId-1033712]## _String_
|[#50638860_pgfId-1033714]##Description of this option (for use in
development tools).

|[#50638860_pgfId-1033716]##itemDisabled |[#50638860_pgfId-1033718]##VE
|[#50638860_pgfId-1033720]##boolean |[#50638860_pgfId-1033722]##Flag
indicating whether the option created by this component is disabled.

|[#50638860_pgfId-1033724]##itemLabel |[#50638860_pgfId-1033726]##VE
|[#50638860_pgfId-1033728]##String |[#50638860_pgfId-1033730]##Label to
be displayed to the user for this option.

|[#50638860_pgfId-1033732]##itemValue |[#50638860_pgfId-1033734]##VE
|[#50638860_pgfId-1033736]##Object |[#50638860_pgfId-1033738]##Value to
be returned to the server if this option is selected by the user.

|[#50638860_pgfId-1033740]##value |[#50638860_pgfId-1033742]##VE
|[#50638860_pgfId-1033744]##javax.faces.model.SelectItem
|[#50638860_pgfId-1033746]##Value binding pointing at a SelectItem
instance containing the information for this option.

|[#50638860_pgfId-1033748]##escape |[#50638860_pgfId-1033750]##VE
|[#50638860_pgfId-1033752]##boolean
|[#50638860_pgfId-1033754]##ValueExpression pointing to a boolean that
tells whether or not the label of this selectItem should be escaped per
HTML rules. Default is true.
|===

======= [#50638860_pgfId-1033756]##Constraints

{empty}[#50638860_pgfId-1033779]##[P1-start f:selectItem constraints]
Must be nested inside a _UIComponent_ custom action that creates a
_UISelectMany_ or _UISelectOne_ component instance.[P1-end]

======= [#50638860_pgfId-1033780]##Description

[#50638860_pgfId-1033781]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create a new
_UISelectItem_ component, and attach it as a child of the associated
_UIComponent_ .

[#50638860_pgfId-1033799]##[P1-start f:selectItem implementation] The
implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1033800]##Must extend _javax.faces.UIComponentELTag_ .

[#50638860_pgfId-1033801]##The _getComponentType()_ method must return “
_SelectItem_ ”.

{empty}[#50638860_pgfId-1033820]##The _getRendererType()_ method must
return _null_ .[P1-end]

==== [#50638860_pgfId-1033821]##<f:selectItems>

[#50638860_pgfId-1033822]##Add a child _UISelectItems_ component to the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1033823]##Syntax

{empty}[#50638860_pgfId-1033824]##<f:selectItems
[id=”componentIdOrImmediateExpression”]

[#50638860_pgfId-1033825]## [binding=” _componentReference”]_

[#50638860_pgfId-1033826]## value=” _selectItemsValue”_ />

======= [#50638860_pgfId-1033827]## Body Content

[#50638860_pgfId-1033828]##empty

======= [#50638860_pgfId-1033866]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033831]##Name |[#50638860_pgfId-1033833]##Expr
|[#50638860_pgfId-1033835]##Type |[#50638860_pgfId-1033837]##Description
|[#50638860_pgfId-1033839]##binding |[#50638860_pgfId-1033841]##VE
|[#50638860_pgfId-1033843]## _ValueExpression_
|[#50638860_pgfId-1033845]## _ValueExpression_ expression to a backing
bean property bound to the component instance for the UIComponent
created by this custom action.

|[#50638860_pgfId-1033847]## _id_ |[#50638860_pgfId-1033849]## _NONE_
|[#50638860_pgfId-1033851]## _String_
|[#50638860_pgfId-1033853]##Component identifier of a _UISelectItem_
component.

|[#50638860_pgfId-1033855]## _value_ |[#50638860_pgfId-1033857]##VE
|[#50638860_pgfId-1033859]##javax.faces.model.SelectItem, see
description for specific details a|
[#50638860_pgfId-1033861]##Value binding expression pointing at one of
the following instances:

[#50638860_pgfId-1033862]##an individual javax.faces.model.SelectItem

[#50638860_pgfId-1033863]##a java language array of
javax.faces.model.SelectItem

[#50638860_pgfId-1033864]##a java.util.Collection of
javax.faces.model.SeleccItem

[#50638860_pgfId-1033865]##A java.util.Map where the keys are converted
to Strings and used as labels, and the corresponding values are
converted to Strings and used as values for newly created
javax.faces.model.SelectItem instances. The instances are created in the
order of the iterator over the keys provided by the Map.

|===

======= [#50638860_pgfId-1033867]##Constraints

[#50638860_pgfId-1033868]##Must be nested inside a _UIComponent_ custom
action that creates a _UISelectMany_ or _UISelectOne_ component
instance.

======= [#50638860_pgfId-1033869]##Description

[#50638860_pgfId-1033870]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create a new
_UISelectItems_ component, and attach it as a child of the associated
_UIComponent_ .

[#50638860_pgfId-1033888]##[P1-start f:selectItems implementation]The
implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1033889]##Must extend _javax.faces.UIComponentELTag_ .

[#50638860_pgfId-1033890]##The _getComponentType()_ method must return “
_javax.faces.SelectItems_ ”.

{empty}[#50638860_pgfId-1033909]##The _getRendererType()_ method must
return _null_ . [P1-end]

==== [#50638860_pgfId-1033911]##[#50638860_21180]##<f:setPropertyActionListener>

[#50638860_pgfId-1033912]##Tag implementation that creates a special
_ActionListener_ instance and registers it on the _ActionSource_
associated with our most immediate surrounding instance of a tag whose
implementation class is a subclass of _UIComponentTag_ . This tag
creates no output to the page currently being created. This tag is
useful for pushing a specific value into a managed bean on page submit.

======= [#50638860_pgfId-1033913]##Syntax

[#50638860_pgfId-1033914]##<f:setPropertyActionListener target=”Value
Expression” value=”value Expression”/>

======= [#50638860_pgfId-1033915]##Body Content

[#50638860_pgfId-1033916]##empty.

======= [#50638860_pgfId-1033942]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1033919]##Name |[#50638860_pgfId-1033921]##Expr
|[#50638860_pgfId-1033923]##Type |[#50638860_pgfId-1033925]##Description
|[#50638860_pgfId-1033927]## _value_ |[#50638860_pgfId-1033929]## _VE_
|[#50638860_pgfId-1033931]## _ValueExpression_
|[#50638860_pgfId-1033933]##The _ValueExpression_ from which the value
is taken.

|[#50638860_pgfId-1033935]##target |[#50638860_pgfId-1033937]## _VE_
|[#50638860_pgfId-1033939]## _ValueExpression_
|[#50638860_pgfId-1033941]##The _ValueExpression_ into which the
evaluated value from the “ _value_ ” attribute is stored when the
listener executes.
|===

======= [#50638860_pgfId-1033943]##Constraints

[#50638860_pgfId-1033944]##Must be nested inside a _UIComponent_ custom
action.

[#50638860_pgfId-1033945]##The corresponding _UIComponent_
implementation class must implement _ActionSource_ , and therefore
define a public _addActionListener()_ method that accepts an
_ActionListener_ parameter.

[#50638860_pgfId-1026389]##The tag implementation must only create and
register the _ActionListener_ instance the first time the component for
this tag is created

[#50638860_pgfId-1026391]##When the listener executes:

[#50638860_pgfId-1035394]##Call _getValue()_ on the " _value_ "
_ValueExpression_ .

[#50638860_pgfId-1035401]##If value of the "value" expression is null,
call _setValue()_ on the "target" _ValueExpression_ with the null value.

[#50638860_pgfId-1035414]##If the value of the "value" expression is not
null, call _getType()_ on the "value" and "target" _ValueExpressions_ to
determine their property types.

[#50638860_pgfId-1035425]##Coerce the value of the "value" expression to
the "target" expression value type following the Expression Language
coercion rules. Call _setValue()_ on the "target" _ValueExpression_ with
the resulting value.

[#50638860_pgfId-1035592]##If either conversion or the execution of
setValue() fails throw an AbortProcessingException.

[#50638860_pgfId-1026387]##This tag creates no output to the page
currently being created. It is used solely for the side effect of
_ActionListener_ creation and addition.

{empty}[#50638860_pgfId-1026342]##[P1-start f:setPropertyActionListener
constraints]If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _ActionSource_ , or the specified listener class does not
implement _javax.faces.event.ActionListener_ , throw a _JspException_ .
[P1-end]

======= [#50638860_pgfId-1034019]##Description

[#50638860_pgfId-1034020]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ return
_SKIP_BODY_ .

[#50638860_pgfId-1026445]##Create an instance of _ActionListener_ that
implements _StateHolder_ and stores the _target_ and _value_
_ValueExpression_ instances as instance variables included in the state
saving contract. The _processAction()_ method of the listener must call
_getValue()_ on the _value_ _ValueExpression_ and convert the value
before passing the result to a call to _setValue()_ on the _target_
_ValueExpression_ .

==== [#50638860_pgfId-1034025]##<f:subview>

[#50638860_pgfId-1034026]##Container action for all JSF core and
component custom actions used on a nested page included via
_<jsp:include>_ or any custom action that dynamically includes another
page from the same web application, such as JSTL’s _<c:import>_ .

======= [#50638860_pgfId-1034034]##Syntax

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1034029]##<f:subview id=”
_componentIdOrImmediateExpression_ ”

[#50638860_pgfId-1034030]## [binding=” _componentReference”]_

[#50638860_pgfId-1034031]## [rendered=”\{true|false}”]>

[#50638860_pgfId-1034032]## Nested template text and custom actions

[#50638860_pgfId-1034033]##</f:subview>

|===

======= [#50638860_pgfId-1034035]##Body Content

[#50638860_pgfId-1034036]##JSP. May contain any combination of template
text, other JSF custom actions, and custom actions from other custom tag
libraries.

======= [#50638860_pgfId-1034070]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034039]##Name |[#50638860_pgfId-1034041]##Expr
|[#50638860_pgfId-1034043]##Type |[#50638860_pgfId-1034045]##Description
|[#50638860_pgfId-1034047]##binding |[#50638860_pgfId-1034049]##VE
|[#50638860_pgfId-1034051]## _ValueExpression_
|[#50638860_pgfId-1034053]## _ValueExpression_ expression to a backing
bean property bound to the component instance for the UIComponent
created by this custom action.

|[#50638860_pgfId-1034055]## _id_ |[#50638860_pgfId-1034057]## _NONE_
|[#50638860_pgfId-1034059]## _String_
|[#50638860_pgfId-1034061]##Component identifier of a
_UINamingContainer_ component

|[#50638860_pgfId-1034063]##rendered |[#50638860_pgfId-1034065]##VE
|[#50638860_pgfId-1034067]##Boolean |[#50638860_pgfId-1034069]##Whether
or not this subview should be rendered.
|===

======= [#50638860_pgfId-1034071]##Constraints

[#50638860_pgfId-1034076]##[P1-start f:subview constraints] Must be
nested inside a _<f:view>_ custom action (although this custom action
might be in a page that is including the page containing the
_<f:subview>_ custom action.

[#50638860_pgfId-1034077]##Must not contain an _<f:view>_ custom action.

[#50638860_pgfId-1034078]##Must have an _id_ attribute whose value is
unique within the scope of the parent naming container. If this
constraint is not met, the action taken regarding id uniqueness in
section link:JSF.htm#50638860_62679[See UIComponent Custom Action
Implementation Requirements] must be taken

{empty}[#50638860_pgfId-1034097]##May be placed in a parent page (with
_<jsp:include>_ or _<c:import>_ nested inside), or within the nested
page. [P1-end]

======= [#50638860_pgfId-1034098]##Description

[#50638860_pgfId-1034099]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create a new
_UINamingContainer_ component, and attach it as a child of the
associated _UIComponent_ . Such a component provides a scope within
which child component identifiers must still be unique, but allows child
components to have the same simple identifier as child components nested
in some other naming container. This is useful in several scenarios:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1034102]##“main.jsp”

[#50638860_pgfId-1034103]##<f:view>

[#50638860_pgfId-1034104]## <c:import url=”foo.jsp”/>

[#50638860_pgfId-1034105]## <c:import url=”bar.jsp”/>

[#50638860_pgfId-1034106]##</f:view>

[#50638860_pgfId-1034107]## 

[#50638860_pgfId-1034108]##“foo.jsp”

[#50638860_pgfId-1034109]##<f:subview id=”aaa”>

[#50638860_pgfId-1034110]## ... components and other content ...

[#50638860_pgfId-1034111]##</f:subview>

[#50638860_pgfId-1034112]## 

[#50638860_pgfId-1034113]##“bar.jsp”

[#50638860_pgfId-1034114]##<f:subview id=”bbb”>

[#50638860_pgfId-1034115]## ... components and other content ...

[#50638860_pgfId-1034116]##</f:subview>

|===

[#50638860_pgfId-1034117]##In this scenario, _<f:subview>_ custom
actions in imported pages establish a naming scope for components within
those pages. Identifiers for _<f:subview>_ custom actions nested in a
single _<f:view>_ custom action must be unique, but it is difficult for
the page author (and impossible for the JSP page compiler) to enforce
this restriction.

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1034120]##“main.jsp”

[#50638860_pgfId-1034121]##<f:view>

[#50638860_pgfId-1034122]## <f:subview id=”aaa”>

[#50638860_pgfId-1034123]## <c:import url=”foo.jsp”/>

[#50638860_pgfId-1034124]## </f:subview>

[#50638860_pgfId-1034125]## <f:subview id=”bbb”>

[#50638860_pgfId-1034126]## <c:import url=”bar.jsp”/>

[#50638860_pgfId-1034127]## </f:subview>

[#50638860_pgfId-1034128]##</f:view>

[#50638860_pgfId-1034129]## 

[#50638860_pgfId-1034130]##“foo.jsp”

[#50638860_pgfId-1034131]##... components and other content ...

[#50638860_pgfId-1034132]## 

[#50638860_pgfId-1034133]##“bar.jsp”

[#50638860_pgfId-1034134]##... components and other content ...

|===

[#50638860_pgfId-1034135]##In this scenario, the _<f:subview>_ custom
actions are in the including page, rather than the included page. As in
the previous scenario, the “id” values of the two subviews must be
unique; but it is much easier to verify using this style.

[#50638860_pgfId-1034136]##It is also possible to use this approach to
include the same page more than once, but maintain unique identifiers:

[width="100%",cols="100%",]
|===
a|
[#50638860_pgfId-1034139]##“main.jsp”

[#50638860_pgfId-1034140]##<f:view>

[#50638860_pgfId-1034141]## <f:subview id=”aaa”>

[#50638860_pgfId-1034142]## <c:import url=”foo.jsp”/>

[#50638860_pgfId-1034143]## </f:subview>

[#50638860_pgfId-1034144]## <f:subview id=”bbb”>

[#50638860_pgfId-1034145]## <c:import url=”foo.jsp”/>

[#50638860_pgfId-1034146]## </f:subview>

[#50638860_pgfId-1034147]##</f:view>

[#50638860_pgfId-1034148]## 

[#50638860_pgfId-1034149]##“foo.jsp”

[#50638860_pgfId-1034150]##... components and other content ...

[#50638860_pgfId-1034151]## 

[#50638860_pgfId-1034152]## 

|===

[#50638860_pgfId-1034153]##In all of the above examples, note that
_foo.jsp_ and _bar.jsp_ may not contain _<f:view>_ .

[#50638860_pgfId-1034154]##The implementation class for this action must
meet the following requirements:

[#50638860_pgfId-1034172]##[P1-start f:subview implementation] Must
extend _javax.faces.UIComponentELTag_ .

[#50638860_pgfId-1034173]##The _getComponentType()_ method must return “
_NamingContainer”._

{empty}[#50638860_pgfId-1034192]##The _getRendererType()_ method must
return _null_ . [P1-end]

==== [#50638860_pgfId-1034194]##[#50638860_85473]##[#50638860_9.4.14 <f]##<f:validateDoubleRange>

[#50638860_pgfId-1034195]##Register a _DoubleRangeValidator_ instance on
the _UIComponent_ associated with the closest parent _UIComponent_
custom action.

======= [#50638860_pgfId-1034196]##Syntax

====== [#50638860_pgfId-1034197]##Syntax 1: Maximum only specified

[#50638860_pgfId-1034198]##<f:validateDoubleRange maximum=”543.21”
binding=”VB Expression”/>

====== [#50638860_pgfId-1034199]##Syntax 2: Minimum only specified

[#50638860_pgfId-1034200]##<f:validateDoubleRange minimum=”123.45”
binding=”VB Expression”/>

====== [#50638860_pgfId-1034201]##Syntax 3: Both maximum and minimum are specified

[#50638860_pgfId-1034202]##<f:validateDoubleRange maximum=”543.21”
minimum=”123.45” binding=”VB Expression”/>

======= [#50638860_pgfId-1034203]##Body Content

[#50638860_pgfId-1034204]##empty.

======= [#50638860_pgfId-1034238]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034207]##Name |[#50638860_pgfId-1034209]##Expr
|[#50638860_pgfId-1034211]##Type |[#50638860_pgfId-1034213]##Description
|[#50638860_pgfId-1034215]## _maximum_ |[#50638860_pgfId-1034217]## _VE_
|[#50638860_pgfId-1034219]## _double_
|[#50638860_pgfId-1034221]##Maximum value allowed for this component

|[#50638860_pgfId-1034223]## _minimum_ |[#50638860_pgfId-1034225]## _VE_
|[#50638860_pgfId-1034227]## _double_
|[#50638860_pgfId-1034229]##Minimum value allowed for this component

|[#50638860_pgfId-1034231]## _binding_ |[#50638860_pgfId-1034233]## _VE_
|[#50638860_pgfId-1034235]## _ValueExpression_
|[#50638860_pgfId-1034237]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Validator_

|[#50638860_pgfId-1036584]##for |[#50638860_pgfId-1036586]##VE
|[#50638860_pgfId-1036588]## _ValueExpression_
|[#50638860_pgfId-1036590]##A _ValueExpression_ expression that
evaluates to String referring to the value of one of the exposed
attached objects within the composite component inside of which this tag
is nested.
|===

======= [#50638860_pgfId-1034239]##Constraints

[#50638860_pgfId-1034240]##Must be nested inside a _EditableValueHolder_
custom action whose value is (or is convertible to) a double.

[#50638860_pgfId-1034241]##Must specify either the _maximum_ attribute,
the _minimum_ attribute, or both.

[#50638860_pgfId-1034242]##If both limits are specified, the maximum
limit must be greater than the minimum limit.

{empty}[#50638860_pgfId-1025924]##[P1-start f:validateDoubleRange
constraints] If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _EditableValueHolder_ throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1034306]##Description

[#50638860_pgfId-1034307]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createValidator()_ and register the returned _Validator_ instance on
the associated _UIComponent_ .

[#50638860_pgfId-1034312]##[P1-start f:validateDoubleRange
implementation] The implementation class for this action must meet the
following requirements:

[#50638860_pgfId-1034313]##Must extend
_javax.faces.webapp.ValidatorELTag_ .

[#50638860_pgfId-1034314]##The _createValidator()_ method must:

[#50638860_pgfId-1034343]##If _binding_ is non-null _,_ create a
_ValueBinding_ by invoking _Application.createValueExpression_ () with
binding as the expression argument, and _Validator.class_ as the
expectedType argument.use the _ValueBinding_ to obtain a reference to
the _Validator_ instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.validator.Validator_ , it must then cast the returned
instance to _javax.faces.validator.DoubleRangeValidator_ and configure
its properties based on the specified attributes for this custom action,
and return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException._

{empty}[#50638860_pgfId-1036305]##use the _validatorId_ if the validator
instance could not be created from the _binding_ attribute. Call the
_createValidator()_ method of the _Application_ instance for this
application, passing validator id “javax.faces.DoubleRange”. If the
binding attribute was also set, evaluate the expression into a
_ValueExpression_ and store the validator instance by calling
_setValue()_ on the _ValueExpression_ . It must then cast the returned
instance to _javax.faces.validator.DoubleRangeValidator_ and configure
its properties based on the specified attributes for this custom action,
and return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException_ . [P1-end]

==== [#50638860_pgfId-1036531]##[#50638860_85473]##[#50638860_9.4.14 <f]##<f:validateLength>

[#50638860_pgfId-1036532]##Register a _LengthValidator_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1036310]##Syntax

====== [#50638860_pgfId-1036311]##Syntax 1: Maximum length only specified

[#50638860_pgfId-1036312]##<f:validateLength maximum=”10” binding=”VB
Expression”/>

====== [#50638860_pgfId-1036313]##Syntax 2: Minimum only specified

[#50638860_pgfId-1036314]##<f:validateLength minimum=”1” binding=”VB
Expression”/>

====== [#50638860_pgfId-1036315]##Syntax 3: Both maximum and minimum are specified

[#50638860_pgfId-1036316]##<f:validateLength maximum=”10” minimum=”1”
binding=”VB Expression”/>

======= [#50638860_pgfId-1036317]##Body Content

[#50638860_pgfId-1036318]##empty.

======= [#50638860_pgfId-1036352]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1036544]##Name |[#50638860_pgfId-1036546]##Expr
|[#50638860_pgfId-1036548]##Type |[#50638860_pgfId-1036550]##Description
|[#50638860_pgfId-1036552]## _maximum_ |[#50638860_pgfId-1036554]## _VE_
|[#50638860_pgfId-1036556]## _double_
|[#50638860_pgfId-1036558]##Maximum value allowed for this component

|[#50638860_pgfId-1036560]## _minimum_ |[#50638860_pgfId-1036562]## _VE_
|[#50638860_pgfId-1036564]## _double_
|[#50638860_pgfId-1036566]##Minimum value allowed for this component

|[#50638860_pgfId-1036568]## _binding_ |[#50638860_pgfId-1036570]## _VE_
|[#50638860_pgfId-1036572]## _ValueExpression_
|[#50638860_pgfId-1036574]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Validator_
|===

======= [#50638860_pgfId-1036353]##Constraints

[#50638860_pgfId-1036354]##Must be nested inside a _EditableValueHolder_
custom action whose value is (or is convertible to) a double.

[#50638860_pgfId-1036355]##Must specify either the _maximum_ attribute,
the _minimum_ attribute, or both.

[#50638860_pgfId-1036356]##If both limits are specified, the maximum
limit must be greater than the minimum limit.

{empty}[#50638860_pgfId-1036357]##[P1-start f:validateDoubleRange
constraints] If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _EditableValueHolder_ throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1036358]##Description

[#50638860_pgfId-1036359]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createValidator()_ and register the returned _Validator_ instance on
the associated _UIComponent_ .

[#50638860_pgfId-1036360]##[P1-start f:validateDoubleRange
implementation] The implementation class for this action must meet the
following requirements:

[#50638860_pgfId-1036361]##Must extend
_javax.faces.webapp.ValidatorELTag_ .

[#50638860_pgfId-1036362]##The _createValidator()_ method must:

[#50638860_pgfId-1036363]##If _binding_ is non-null _,_ create a
_ValueBinding_ by invoking _Application.createValueExpression_ () with
binding as the expression argument, and _Validator.class_ as the
expectedType argument.use the _ValueBinding_ to obtain a reference to
the _Validator_ instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.validator.Validator_ , it must then cast the returned
instance to _javax.faces.validator.DoubleRangeValidator_ and configure
its properties based on the specified attributes for this custom action,
and return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException._

{empty}[#50638860_pgfId-1036364]##use the _validatorId_ if the validator
instance could not be created from the _binding_ attribute. Call the
_createValidator()_ method of the _Application_ instance for this
application, passing validator id “javax.faces.DoubleRange”. If the
binding attribute was also set, evaluate the expression into a
_ValueExpression_ and store the validator instance by calling
_setValue()_ on the _ValueExpression_ . It must then cast the returned
instance to _javax.faces.validator.DoubleRangeValidator_ and configure
its properties based on the specified attributes for this custom action,
and return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException_ . [P1-end]

==== [#50638860_pgfId-1034361]##[#50638860_98707]##[#50638860_9.4.15 <f]##<f:validateRegex>

[#50638860_pgfId-1034362]##Register a _RegexValidator_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1034363]##Syntax

[#50638860_pgfId-1034365]##<f:validateRegex pattern=”a*b”/>

======= [#50638860_pgfId-1034370]##Body Content

[#50638860_pgfId-1034371]##empty.

======= [#50638860_pgfId-1034405]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034374]##Name |[#50638860_pgfId-1034376]##Expr
|[#50638860_pgfId-1034378]##Type |[#50638860_pgfId-1034380]##Description
|[#50638860_pgfId-1034382]## _pattern_ |[#50638860_pgfId-1034384]## _VE_
|[#50638860_pgfId-1034386]## _String_ |[#50638860_pgfId-1034388]##The
string to be interpreted as a _java.util.regex.Pattern_

|[#50638860_pgfId-1034398]## _binding_ |[#50638860_pgfId-1034400]## _VE_
|[#50638860_pgfId-1034402]## _ValueExpression_
|[#50638860_pgfId-1034404]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Validator_
|===

======= [#50638860_pgfId-1034406]##Constraints

[#50638860_pgfId-1034407]##Must be nested inside a _EditableValueHolder_
custom action whose value is a _String_ .

[#50638860_pgfId-1034408]##Must specify either the _pattern_ attribute.

{empty}[#50638860_pgfId-1025940]##[P1-start f:validateLength
constraints] If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _EditableValueHolder_ , throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1034473]##Description

[#50638860_pgfId-1034474]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createValidator()_ and register the returned _Validator_ instance on
the associated _UIComponent_ .

[#50638860_pgfId-1034479]##[P1-start f:validateLength implementation]
The implementation class for this action must meet the following
requirements:

[#50638860_pgfId-1034480]##Must extend
_javax.faces.webapp.ValidatorELTag_ .

[#50638860_pgfId-1034481]##The _createValidator()_ method must:

[#50638860_pgfId-1034505]##If _binding_ is non-null, create a
_ValueExpression_ by invoking _Application.createValueExpression_ ()
with binding as the expression argument, and _Validator.class_ as the
expectedType argument.use the _ValueExpression_ to obtain a reference to
the _Validator_ instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.validator.Validator_ , it must then cast the returned
instance to _javax.faces.validator.RegexValidator_ and configure its
properties based on the specified attributes for this custom action, and
return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException._

{empty}[#50638860_pgfId-1034521]##use the _validatorId_ if the validator
instance could not be created from the _binding_ attribute. Call the
_createValidator()_ method of the _Application_ instance for this
application, passing validator id “javax.faces.RegularExpression”. If
the binding attribute was also set, evaluate the expression into a
_ValueExpression_ and store the validator instance by calling
_setValue()_ on the _ValueExpression_ . It must then cast the returned
instance to _javax.faces.validator.RegexValidator_ and configure its
properties based on the specified attributes for this custom action, and
return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException_ .[P1-end]

==== [#50638860_pgfId-1034523]##[#50638860_69048]##<f:validateLongRange>

[#50638860_pgfId-1034524]##Register a _LongRangeValidator_ instance on
the _UIComponent_ associated with the closest parent _UIComponent_
custom action.

======= [#50638860_pgfId-1034525]##Syntax

====== [#50638860_pgfId-1034526]##Syntax 1: Maximum only specified

[#50638860_pgfId-1034527]##<f:validateLongRange maximum=”543”
binding=”VB Expression”/>

====== [#50638860_pgfId-1034528]##Syntax 2: Minimum only specified

[#50638860_pgfId-1034529]##<f:validateLongRange minimum=”123”
binding=”VB Expression”/>

====== [#50638860_pgfId-1034530]##Syntax 3: Both maximum and minimum are specified

[#50638860_pgfId-1034531]##<f:validateLongRange maximum=”543”
minimum=”123” binding=”VB Expression”/>

======= [#50638860_pgfId-1034532]##Body Content

[#50638860_pgfId-1034533]##empty.

======= [#50638860_pgfId-1034567]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034536]##Name |[#50638860_pgfId-1034538]##Expr
|[#50638860_pgfId-1034540]##Type |[#50638860_pgfId-1034542]##Description
|[#50638860_pgfId-1034544]## _maximum_ |[#50638860_pgfId-1034546]## _VE_
|[#50638860_pgfId-1034548]## _long_ |[#50638860_pgfId-1034550]##Maximum
value allowed for this component

|[#50638860_pgfId-1034552]## _minimum_ |[#50638860_pgfId-1034554]## _VE_
|[#50638860_pgfId-1034556]## _long_ |[#50638860_pgfId-1034558]##Minimum
value allowed for this component

|[#50638860_pgfId-1034560]## _binding_ |[#50638860_pgfId-1034562]## _VE_
|[#50638860_pgfId-1034564]## _ValueExpression_
|[#50638860_pgfId-1034566]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Validator_
|===

======= [#50638860_pgfId-1034568]##Constraints

[#50638860_pgfId-1034569]##Must be nested inside a _EditableValueHolder_
custom action whose value is (or is convertible to) a long.

[#50638860_pgfId-1034570]##Must specify either the _maximum_ attribute,
the _minimum_ attribute, or both.

[#50638860_pgfId-1034571]##If both limits are specified, the maximum
limit must be greater than the minimum limit.

{empty}[#50638860_pgfId-1025951]##[P1-start f:validateLongeRange
constraints] If this tag is not nested inside a _UIComponent_ custom
action, or the _UIComponent_ implementation class does not correctly
implement _EditableValueHolder_ , throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1034635]##Description

[#50638860_pgfId-1034636]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createValidator()_ and register the returned _Validator_ instance on
the associated _UIComponent_ .

[#50638860_pgfId-1034637]##The implementation class for this action must
meet the following requirements:

[#50638860_pgfId-1034638]##Must extend
_javax.faces.webapp.ValidatorELTag_ .

[#50638860_pgfId-1034639]##The _createValidator()_ method must:

[#50638860_pgfId-1034650]##If _binding_ is non-null, create a
_ValueExpression_ by invoking _Application.createValueExpression_ ()
with binding as the expression argument, and _Validator.class_ as the
expectedType argument. Use the _ValueExpression_ to obtain a reference
to the _Validator_ instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.validator.Validator_ , it must then cast the returned
instance to _javax.faces.validator.LongRangeValidator_ and configure its
properties based on the specified attributes for this custom action, and
return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException._

[#50638860_pgfId-1034661]##use the _validatorId_ if the validator
instance could not be created from the _binding_ attribute. Call the
_createValidator()_ method of the _Application_ instance for this
application, passing validator id “javax.faces.LongRange”. If the
binding attribute was also set, evaluate the expression into a
_ValueExpression_ and store the validator instance by calling
_setValue()_ on the _ValueExpression_ . It must then cast the returned
instance to _javax.faces.validator.LongRangeValidator_ and configure its
properties based on the specified attributes for this custom action, and
return the configured instance. If there was an exception thrown,
rethrow the exception as a _JspException._

==== [#50638860_pgfId-1034663]##[#50638860_90477]##<f:validator>

[#50638860_pgfId-1034664]##Register a named _Validator_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action.

======= [#50638860_pgfId-1034665]##Syntax

[#50638860_pgfId-1034666]##<f:validator validatorId=”validatorId”
binding=”VB Expression”/>

======= [#50638860_pgfId-1034667]##Body Content

[#50638860_pgfId-1034668]##empty

======= [#50638860_pgfId-1034694]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034671]##Name |[#50638860_pgfId-1034673]##Expr
|[#50638860_pgfId-1034675]##Type |[#50638860_pgfId-1034677]##Description
|[#50638860_pgfId-1034679]## _validatorId_ |[#50638860_pgfId-1034681]##
_VE_ |[#50638860_pgfId-1034683]## _String_
|[#50638860_pgfId-1034685]##Validator identifier of the validator to be
created.

|[#50638860_pgfId-1034687]## _binding_ |[#50638860_pgfId-1034689]## _VE_
|[#50638860_pgfId-1034691]## _ValueExpression_
|[#50638860_pgfId-1034693]##A _ValueExpression_ expression that
evaluates to an object that implements _javax.faces.convert.Validator_
|===

======= [#50638860_pgfId-1034695]##Constraints

[#50638860_pgfId-1034696]##Must be nested inside a _UIComponent_ custom
action whose component class implements _EditableValueHolder_ .

[#50638860_pgfId-1024518]## _validatorId_ and/or binding must be
specified.

{empty}[#50638860_pgfId-1025962]##[P1-start f:validator constraints 2]
If this tag is not nested inside a _UIComponent_ custom action, or the
_UIComponent_ implementation class does not correctly implement
_EditableValueHolder_ throw a _JspException_ . [P1-end]

======= [#50638860_pgfId-1034747]##Description

[#50638860_pgfId-1034748]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , create, call
_createValidator()_ and register the returned _Validator_ instance on
the associated _UIComponent_ .

[#50638860_pgfId-1034749]##The implementation class for this action must
meet the following requirements:

[#50638860_pgfId-1034750]##Must extend
_javax.faces.webapp.ValidatorJspTag_ .

[#50638860_pgfId-1034751]##The _createValidator()_ method must:

[#50638860_pgfId-1024531]##If _binding_ is non-null, call
_binding.getValue()_ to obtain a reference to the _Validator_ instance.
If there is no exception thrown, and _binding.getValue()_ returned a
non-null object that implements _javax.faces.validator.Validator_ ,
register it by calling _addValidator()._ If there was an exception
thrown, rethrow the exception as a _JspException._

[#50638860_pgfId-1034792]##use the _validatorId_ attribute if the
validator instance could not be created from the _binding_ attribute _._
If the _validatorId_ attribute is set, call the _createValidator()_
method of the _Application_ instance for this application, passing
validator id specified by their validatorId attribute. If the binding
attribute was also set, store the validator instance by calling
_binding.setValue()_ . Register the validator instance by calling
_addValidator()._ If there was an exception thrown, rethrow the
exception as a _JspException._

==== [#50638860_pgfId-1034793]##[#50638860_63400]##<f:valueChangeListener>

[#50638860_pgfId-1034794]##Register a _ValueChangeListener_ instance on
the _UIComponent_ associated with the closest parent _UIComponent_
custom action.

======= [#50638860_pgfId-1034795]##Syntax

[#50638860_pgfId-1034796]##<f:valueChangeListener
type=”fully-qualified-classname” binding=”VB Expression”/>

======= [#50638860_pgfId-1034797]##Body Content

[#50638860_pgfId-1034798]##empty.

======= [#50638860_pgfId-1034824]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034801]##Name |[#50638860_pgfId-1034803]##Expr
|[#50638860_pgfId-1034805]##Type |[#50638860_pgfId-1034807]##Description
|[#50638860_pgfId-1034809]## _type_ |[#50638860_pgfId-1034811]## _VE_
|[#50638860_pgfId-1034813]## _String_ |[#50638860_pgfId-1034815]##Fully
qualified Java class name of a _ValueChangeListener_ to be created and
registered

|[#50638860_pgfId-1034817]## _binding_ |[#50638860_pgfId-1034819]## _VE_
|[#50638860_pgfId-1034821]## _ValueExpression_
|[#50638860_pgfId-1034823]##A _ValueExpression_ expression that
evaluates to an object that implements
_javax.faces.event.ValueChangeListener_
|===

======= [#50638860_pgfId-1034825]##Constraints

[#50638860_pgfId-1034826]##Must be nested inside a _UIComponent_ custom
action.

[#50638860_pgfId-1034827]##The corresponding _UIComponent_
implementation class must implement _EditableValueHolder_ , and
therefore define a public _addValueChangeListener()_ method that accepts
an _ValueChangeListener_ parameter.

[#50638860_pgfId-1034828]##The specified listener class must implement
_javax.faces.event.ValueChangeListener_ .

[#50638860_pgfId-1024638]## _type_ and/or binding must be specified.

[#50638860_pgfId-1025972]##[P1-start f:valueChangeListener constraints]
If this tag is not nested inside a _UIComponent_ custom action, or the
_UIComponent_ implementation class does not correctly implement
_EditableValueHolder_ , or the specified listener class does not
implement _javax.faces.event.ValueChangeListener_ , throw a
_JspException_ . [P1-end] Note that if the binding attribute is used,
the scope of the _ValueExpression_ must be chosen carefully so as not to
introduce undesireable results. In general, when using the binding
attribute, do not point to beans in request or narrower scope.

======= [#50638860_pgfId-1034889]##Description

[#50638860_pgfId-1024644]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , check the
binding attribute.

[#50638860_pgfId-1034910]##If binding is non-null, call
_binding.getValue()_ to obtain a reference to the _ValueChangeListener_
instance. If there is no exception thrown, and
_ValueExpression.getValue()_ returned a non-null object that implements
_javax.faces.event.ValueChangeListener_ , register it by calling
_addValueChangeListener()._ If there was an exception thrown, rethrow
the exception as a _JspException._

[#50638860_pgfId-1034920]##If the listener instance could not be
created, check the _type_ attribute _._ If the _type_ attribute is set,
instantiate an instance of the specified class, and register it by
calling _addValueChangeListener()_ . If the binding attribute was also
set, store the listener instance by calling _binding.setValue()_ . If
there was an exception thrown, rethrow the exception as a
_JspException._

[#50638860_pgfId-1034931]##As an alternative to using the binding and/or
type attributes, you may also register a method in a backing bean class
to receive _ValueChangeEvent_ notifications, by using the
_valueChangeListener_ attribute on the corresponding _UIComponent_
custom action.instantiate an instance of the specified class, and
register it by calling _addValueChangeListener()_ .

==== [#50638860_pgfId-1034933]##[#50638860_99388]##<f:verbatim>

[#50638860_pgfId-1034934]##Register a child _UIOutput_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action which renders nested body content.

======= [#50638860_pgfId-1034935]##Syntax

[#50638860_pgfId-1034936]##<f:verbatim [escape=”\{true|false}”
rendered=”\{true|false”]/>

======= [#50638860_pgfId-1034937]##Body Content

[#50638860_pgfId-1034938]##JSP. However, no UIComponent custom actions,
or custom actions from the JSF Core Tag Library, may be nested inside
this custom action.

======= [#50638860_pgfId-1034964]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1034941]##Name |[#50638860_pgfId-1034943]##Expr
|[#50638860_pgfId-1034945]##Type |[#50638860_pgfId-1034947]##Description
|[#50638860_pgfId-1034949]## _escape_ |[#50638860_pgfId-1034951]## _VE_
|[#50638860_pgfId-1034953]## _boolean_ |[#50638860_pgfId-1034955]##If
_true_ , generated markup is escaped in a manner appropriate for the
markup language being rendered. Default value is false.

|[#50638860_pgfId-1034957]## _rendered_ |[#50638860_pgfId-1034959]##
_VE_ |[#50638860_pgfId-1034961]## _boolean_
|[#50638860_pgfId-1034963]##Flag indicating whether or not this
component should be rendered (during Render Response Phase), or
processed on any subsequent form submit. Default value is true.
|===

======= [#50638860_pgfId-1034965]##Constraints

{empty}[#50638860_pgfId-1034988]##[P1-start f:verbatim constraints] Must
be implemented as a _UIComponentBodyTag_ .[P1-end]

======= [#50638860_pgfId-1034989]##Description

[#50638860_pgfId-1034990]##Locate the closest parent _UIComponent_
custom action instance by calling
_UIComponentClassicTagBase.getParentUIComponentClassicTagBase()_ . If
the _getCreated()_ method of this instance returns _true_ , creates a
new _UIOutput_ component, and add it as a child of the _UIComponent_
associated with the located instance. The _rendererType_ property of
this _UIOutput_ component must be set to “javax.faces.Text”, and the
_transient_ property must be set to _true_ . Also, the value (or value
binding, if it is an expression) of the _escape_ attribute must be
passed on to the renderer as the value the _escape_ attribute on the
_UIOutput_ component.

==== [#50638860_pgfId-1034992]##[#50638860_54501]##<f:view>

[#50638860_pgfId-1034993]##Container for all JSF core and component
custom actions used on a page.

======= [#50638860_pgfId-1035001]##Syntax

[width="100%",cols="100%",]
|===
a|
{empty}[#50638860_pgfId-1034996]##<f:view [locale=” _locale_ ”
renderKitId=”alternate”]

{empty}[#50638860_pgfId-1034997]## [beforePhase=”methodExpression”]

[#50638860_pgfId-1034998]## [afterPhase”methodExpression”]>

[#50638860_pgfId-1034999]## Nested template text and custom actions

[#50638860_pgfId-1035000]##</f:view>

|===

======= [#50638860_pgfId-1035002]##Body Content

[#50638860_pgfId-1035003]##JSP. May contain any combination of template
text, other JSF custom actions, and custom actions from other custom tag
libraries.

======= [#50638860_pgfId-1035045]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638860_pgfId-1035006]##Name |[#50638860_pgfId-1035008]##Expr
|[#50638860_pgfId-1035010]##Type |[#50638860_pgfId-1035012]##Description
|[#50638860_pgfId-1035014]## _renderKitId_ |[#50638860_pgfId-1035016]##
_VE_ |[#50638860_pgfId-1035018]## _String_
|[#50638860_pgfId-1035020]##The identifier for the render kit to use for
rendering this page.

|[#50638860_pgfId-1035022]## _locale_ |[#50638860_pgfId-1035024]## _VE_
|[#50638860_pgfId-1035026]## _String or Locale_
|[#50638860_pgfId-1035028]##Name of a Locale to use for localizing this
page (such as en_uk), or value binding expression that returns a
_Locale_ instance

|[#50638860_pgfId-1035030]## _beforePhase_
|[#50638860_pgfId-1035032]##ME |[#50638860_pgfId-1035034]##String
|[#50638860_pgfId-1035036]## _MethodExpression_ expression that points
to a method whose signature is that of javax.faces.event.
_PhaseListener.beforePhase()_

|[#50638860_pgfId-1035038]## _afterPhase_ |[#50638860_pgfId-1035040]##ME
|[#50638860_pgfId-1035042]##String |[#50638860_pgfId-1035044]##
_MethodExpression_ expression that points to a method whose signature is
that of javax.faces.event. _PhaseListener.afterPhase()_
|===

======= [#50638860_pgfId-1035046]##Constraints

[#50638860_pgfId-1035064]##[P1-start f:view constraints] Any JSP-created
response using actions from the JSF Core Tag Library, as well as actions
extending _javax.faces.webapp.UIComponentELTag_ from other tag
libraries, must be nested inside an occurrence of the _<f:view>_ action.

[#50638860_pgfId-1035065]##JSP page fragments included via the standard
_<%@ include %>_ directive need not have their JSF actions embedded in a
_<f:view>_ action, because the included template text and custom actions
will be processed as part of the outer page as it is compiled, and the
_<f:view>_ action on the outer page will meet the nesting requirement.

[#50638860_pgfId-1026059]##If the _renderKitId_ attribute is present,
its value is stored in _UIViewRoot._ If the _renderKitId_ attribute is
not present, then the default render kit identifier as returned by
_Application.getDefaultRenderKitId()_ is stored in _UIViewRoot_ if it is
not _null._ Otherwise, the render kit identifier as specified by the
constant _RenderKitFactory.HTML_BASIC_RENDER_KIT_ is stored in
_UIViewRoot._ Specifying a _renderKitId_ for the current view also
affects all subsequent views, unless overridden by another use of the
_renderKitId_ attribute. Please refer to link:JSF.htm#50638861_15560[See
ViewHandler] for more information.

[#50638860_pgfId-1035103]##If the _locale_ attribute is present, its
value overrides the _Locale_ stored in _UIViewRoot_ , normally set by
the _ViewHandler, and the doStartTag() method must store it by calling
UIViewRoot.setLocale()_ .

{empty}[#50638860_pgfId-1035109]##The _doStartTag()_ method must call
_javax.servlet.jsp.jstl.core.Config.set()_ , passing the
_ServletRequest_ instance for this request, the constant
_javax.servlet.jsp.jstl.core.Config.FMT_LOCALE_ , and the _Locale_
returned by calling _UIViewRoot.getLocale()_ . [P1-end]

======= [#50638860_pgfId-1035110]##Description

[#50638860_pgfId-1035111]##Provides the JSF implementation a convenient
place to perform state saving during the render response phase of the
request processing lifecycle, if the implementation elects to save state
as part of the response.

[#50638860_pgfId-1035112]##The implementation class for this action must
meet the following requirements:

[#50638860_pgfId-1035113]##Must extend _javax.faces.UIComponentELTag_ .

[#50638860_pgfId-1035114]##The _getComponentType()_ method must return
“ViewRoot”.

[#50638860_pgfId-1035115]##The _getRendererType()_ method must return
_null_ .

[#50638860_pgfId-1035116]##Please refer to the javadocs for
_javax.faces.application.StateManager_ for details on what the tag
handler for this tag must do to implement state saving.

=== [#50638860_pgfId-1035118]##

image:JSF-40.gif[image]

[#50638860_66883]##Standard HTML RenderKit Tag Library

[#50638860_pgfId-1035143]##All JSF implementations must provide a tag
library containing actions that correspond to each valid combination of
a supported component class (see link:JSF.htm#50638853_30712[See
Standard User Interface Components]”) and a _Renderer_ from the Standard
HTML RenderKit (see link:JSF.htm#50638855_61767[See Standard HTML
RenderKit Implementation]) that supports that component type. [P1-start
html_basic taglib requirements] The tag library descriptor for this tag
library must meet the following requirements:

[#50638860_pgfId-1035144]##Must declare a tag library version (
_<tlib-version>_ ) value of _1.2_ .

[#50638860_pgfId-1035146]##Must declare a URI ( _<uri>_ ) value of
_http://java.sun.com/jsf/html_ .

{empty}[#50638860_pgfId-1021855]##Must be included in the _META-INF_
directory of a JAR file containing the corresponding implementation
classes, suitable for inclusion with a web application, such that the
tag library descriptor will be located automatically by the algorithm
described in Section 7.3 of the _JavaServer Pages Specification_
(version 1.2).[P1-end]

[#50638860_pgfId-1035981]##[P1-start html_basic return values]The custom
actions defined in this tag library must specify the following return
values for the _getComponentType()_ and _getRendererType()_ methods,
respectively:.

======= [#50638860_pgfId-1035984]##Standard HTML RenderKit Tag Library

[#50638860_pgfId-1035990]##getComponentType()

[#50638860_pgfId-1035992]##getRendererType()

[#50638860_pgfId-1035994]##custom action name

[#50638860_pgfId-1035996]##javax.faces.Column

{empty}[#50638860_pgfId-1036001]##(null)link:#pgfId-1036000[18]

[#50638860_pgfId-1036003]##column

[#50638860_pgfId-1036005]##javax.faces.HtmlCommandButton

[#50638860_pgfId-1036007]##javax.faces.Button

[#50638860_pgfId-1036009]##commandButton

[#50638860_pgfId-1036011]##javax.faces.HtmlCommandLink

[#50638860_pgfId-1036013]##javax.faces.Link

[#50638860_pgfId-1036015]##commandLink

[#50638860_pgfId-1036017]##javax.faces.HtmlDataTable

[#50638860_pgfId-1036019]##javax.faces.Table

[#50638860_pgfId-1036021]##dataTable

[#50638860_pgfId-1036023]##javax.faces.HtmlForm

[#50638860_pgfId-1036025]##javax.faces.Form

[#50638860_pgfId-1036027]##form

[#50638860_pgfId-1036029]##javax.faces.HtmlGraphicImage

[#50638860_pgfId-1036031]##javax.faces.Image

[#50638860_pgfId-1036033]##graphicImage

[#50638860_pgfId-1036035]##javax.faces.HtmlInputHidden

[#50638860_pgfId-1036037]##javax.faces.Hidden

[#50638860_pgfId-1036039]##inputHidden

[#50638860_pgfId-1036041]##javax.faces.HtmlInputSecret

[#50638860_pgfId-1036043]##javax.faces.Secret

[#50638860_pgfId-1036045]##inputSecret

[#50638860_pgfId-1036047]##javax.faces.HtmlInputText

[#50638860_pgfId-1036049]##javax.faces.Text

[#50638860_pgfId-1036051]##inputText

[#50638860_pgfId-1036053]##javax.faces.HtmlInputTextarea

[#50638860_pgfId-1036055]##javax.faces.Textarea

[#50638860_pgfId-1036057]##inputTextarea

[#50638860_pgfId-1036059]##javax.faces.HtmlMessage

[#50638860_pgfId-1036061]##javax.faces.Message

[#50638860_pgfId-1036063]##message

[#50638860_pgfId-1036065]##javax.faces.HtmlMessages

[#50638860_pgfId-1036067]##javax.faces.Messages

[#50638860_pgfId-1036069]##messages

[#50638860_pgfId-1036071]##javax.faces.HtmlOutputFormat

[#50638860_pgfId-1036073]##javax.faces.Format

[#50638860_pgfId-1036075]##outputFormat

[#50638860_pgfId-1036077]##javax.faces.HtmlOutputLabel

[#50638860_pgfId-1036079]##javax.faces.Label

[#50638860_pgfId-1036081]##outputLabel

[#50638860_pgfId-1036083]##javax.faces.HtmlOutputLink

[#50638860_pgfId-1036085]##javax.faces.Link

[#50638860_pgfId-1036087]##outputLink

[#50638860_pgfId-1036192]##javax.faces.Output

[#50638860_pgfId-1036194]##javax.faces.Body

[#50638860_pgfId-1036196]##body

[#50638860_pgfId-1036207]##javax.faces.Output

[#50638860_pgfId-1036209]##javax.faces.Head

[#50638860_pgfId-1036211]##head

[#50638860_pgfId-1036089]##javax.faces.Output

[#50638860_pgfId-1036091]##javax.faces.resource.Script

[#50638860_pgfId-1036093]##outputScript

[#50638860_pgfId-1036095]##javax.faces.Output

[#50638860_pgfId-1036097]##javax.faces.resource.Stylesheet

[#50638860_pgfId-1036099]##outputStylesheet

[#50638860_pgfId-1036101]##javax.faces.HtmlOutputText

[#50638860_pgfId-1036103]##javax.faces.Text

[#50638860_pgfId-1036105]##outputText

[#50638860_pgfId-1036107]##javax.faces.HtmlPanelGrid

[#50638860_pgfId-1036109]##javax.faces.Grid

[#50638860_pgfId-1036111]##panelGrid

[#50638860_pgfId-1036113]##javax.faces.HtmlPanelGroup

[#50638860_pgfId-1036115]##javax.faces.Group

[#50638860_pgfId-1036117]##panelGroup

[#50638860_pgfId-1036119]##javax.faces.HtmlSelectBooleanCheckbox

[#50638860_pgfId-1036121]##javax.faces.Checkbox

[#50638860_pgfId-1036123]##selectBooleanCheckbox

[#50638860_pgfId-1036125]##javax.faces.HtmlSelectManyCheckbox

[#50638860_pgfId-1036127]##javax.faces.Checkbox

[#50638860_pgfId-1036129]##selectManyCheckbox

[#50638860_pgfId-1036131]##javax.faces.HtmlSelectManyListbox

[#50638860_pgfId-1036133]##javax.faces.Listbox

[#50638860_pgfId-1036135]##selectManyListbox

[#50638860_pgfId-1036137]##javax.faces.HtmlSelectManyMenu

[#50638860_pgfId-1036139]##javax.faces.Menu

[#50638860_pgfId-1036141]##selectManyMenu

[#50638860_pgfId-1036143]##javax.faces.HtmlSelectOneListbox

[#50638860_pgfId-1036145]##javax.faces.Listbox

[#50638860_pgfId-1036147]##selectOneListbox

[#50638860_pgfId-1036149]##javax.faces.HtmlSelectOneMenu

[#50638860_pgfId-1036151]##javax.faces.Menu

[#50638860_pgfId-1036153]##selectOneMenu

[#50638860_pgfId-1036155]##javax.faces.HtmlSelectOneRadio

[#50638860_pgfId-1036157]##javax.faces.Radio

[#50638860_pgfId-1036159]##selectOneRadio

[#50638860_pgfId-1036160]##Note, to avoid confusion between JSP and
Facelets, any Renderers that are only supported in Facelets are
specified in link:JSF.htm#50638887_29058[See Standard HTML RenderKit Tag
Library].

[#50638860_pgfId-1037077]##[P1-end] [P1-start html_basic taglibrary
requirements 2]The tag library descriptor for this tag library (and the
corresponding tag handler implementation classes) must meet the
following requirements:

[#50638860_pgfId-1023023]##The attributes for the tags, both in the TLD
and in the associated tag handlers, must conform exactly to the type,
name, and description given in the VDLDocs for the html_basic tag
library.

[#50638860_pgfId-1026515]##If the type of the attribute is
_javax.el.ValueExpression_ , the TLD for the attribute must contain a
_<deferred-value>_ with a nested _<type>_ element, inside of which is
nested the expected type, as given in the VDLDocs. The JavaBeans setter
method in the tag handler for the tag must be of type
_javax.el.ValueExpression_ .

[#50638860_pgfId-1026516]##If the type of the attribute is
_javax.el.MethodExpression_ , the TLD for the attribute must contain a
_<deferred-method>_ with a nested _<method-signature>_ , inside of which
is the method signature for that _MethodExpression_ , as given in the
VDLDocs. The actual name of the method in the signature declaration is
immaterial and unspecified. The JavaBeans setter method in the tag
handler for the tag must be of type _javax.el.MethodExpression_ .

[#50638860_pgfId-1023029]##Any attributes listed in the VDLDocs with a
_request-time_ value of _true_ must specify an _<rtexprvalue>_ of _true_
in the TLD.

[#50638860_pgfId-1026021]##The following action must be taken to handle
the value of the _converter_ property. If _isLiteralText()_ on the
_converter_ property returns _true_ , get the value of the property and
treat it as a _converterId_ by passing it as the argument to the
_createConverter()_ method of the _Application_ instance for this
webapp, then pass the created _Converter_ to the _setConverter()_ method
of the component for this tag. If _isLiteralText()_ on the _converter_
property returns _false_ , call _setValueExpression()_ on the component,
passing “converter” as the name of the _ValueExpression_ and the
_ValueExpression_ instance as the value.

[#50638860_pgfId-1023030]##For a non- _null_ _action_ attribute on
custom actions related to _ActionSource2_ components ( _commandButton_ ,
_commandLink_ ), the _setProperties()_ method of the tag handler
implementation class must pass the value of the action attribute, which
is a _MethodExpression_ , to the component’s _setActionExpression()_
method.

[#50638860_pgfId-1023046]##For other non- _null_ attributes that
correspond to _MethodExpression_ attributes on the underlying components
( _actionListener_ , _validator_ , _valueChangeListener_ ), the
_setProperties()_ method of the tag handler implementation class must
store that instance as the value of the corresponding component
property.

[#50638860_pgfId-1023129]##For any non- _null_ _id_ , _scope_ , or _var_
attribute, the _setProperties()_ method of the tag handler
implementation class must simply set the value of the corresponding
component attribute.

[#50638860_pgfId-1023132]##For all other non- _null_ attributes, the
_setProperties()_ of the tag handler implementation class method must:

[#50638860_pgfId-1023152]##If the _attribute.isLiteralText()_ returns
_true_ , set the corresponding attribute on the underlying component
(after performing any necessary type conversion).

{empty}[#50638860_pgfId-1023156]##Otherwise, call the
_setValueExpression()_ method on the underlying component, passing the
attribute name and the _ValueExpression‘_ instance as
parameters.[P1-end]

[#50638860_pgfId-1022099]## 

[#50638887_pgfId-1039727]##[#50638887_87102]## 

== [#50638887_pgfId-1039729]##

image:JSF-41.gif[image]

[#50638887_31965]##Facelets and its use in Web Applications

image:JSF-42.gif[image]

[#50638887_pgfId-1032085]##As of version 2 of this specification,
JavaServer Faces implementations must support (although JSF-based
applications need not utilize) using Facelets as the view declaration
language for JSF pages. Facelets technology was created by JSR-252 EG
Member Jacob Hookom.

=== [#50638887_pgfId-1036609]##

image:JSF-43.gif[image]

[#50638887_32905]##Non-normative Background

[#50638887_pgfId-1036908]##To aid implementors in providing a spec
compliant runtime for Facelets, this section provides a non-normative
background to motivate the discussion of the Facelets feature. Facelets
is a replacement for JSP that was designed from the outset with JSF in
mind. New features introduced in version 2 and later are only exposed to
page authors using Facelets. JSP is retained for backwards
compatibility.

==== [#50638887_pgfId-1036617]##Differences between JSP and Facelets

[#50638887_pgfId-1036618]##Facelets was the first non-JSP view
declaration language designed for JavaServer Faces. As such, Facelets
was able to provide a simpler and more powerful programming model to JSF
developers than that provided by JSP, largely by leveraging JSF as much
as possible without carrying backwards compatibility with JSP. The
following table lists some of the differences between Facelets and JSP

[#50638887_pgfId-1036988]## 

======= [#50638887_pgfId-1036935]##Comparison of Facelets and JSP

[#50638887_pgfId-1036941]##Feature Name

[#50638887_pgfId-1036943]##JSP

[#50638887_pgfId-1036945]##Facelets

[#50638887_pgfId-1036947]##Pages are compiled to...

[#50638887_pgfId-1036949]##A Servlet that gets executed each time the
page renders. The UIComponent hierarchy is built by the presence of
custom tags in the page.

[#50638887_pgfId-1036951]##An abstract syntax tree that, when executed,
builds a UIComponent hierarchy.

[#50638887_pgfId-1036959]##Handling of tag attributes

[#50638887_pgfId-1036961]##All tag attributes must be declared in a TLD
file. Conformance instances of components in a page with the expected
attributes can be enforced with a taglibrary validator.

[#50638887_pgfId-1036963]##Tag attributes are completely dynamic and
automatically map to properties, attributes and ValueExpressions on
UIComponent instances

[#50638887_pgfId-1036965]##Page templating

[#50638887_pgfId-1036967]##Not supported, must go outside of core JSP

[#50638887_pgfId-1036969]##Page templating is a core feature of Facelets

[#50638887_pgfId-1036971]##Performance

[#50638887_pgfId-1036973]##Due to the common implementation technique of
compiling a JSP page to a Servlet, performance can be slow

[#50638887_pgfId-1036975]##Facelets is simpler and faster than JSP

[#50638887_pgfId-1036977]##EL Expressions

[#50638887_pgfId-1036979]##Expressions in template text cause unexpected
behavior when used in JSP

[#50638887_pgfId-1036981]##Expressions in template text operate as
expected.

[#50638887_pgfId-1036983]##JCP Standard

[#50638887_pgfId-1036985]##Yes, the specification is separate from the
implementation for JSP

[#50638887_pgfId-1036987]##No, the specification is defined by and is
one with the implementation.

==== [#50638887_pgfId-1037010]##Differences between Pre JSF 2.0 Facelets and Facelets in JSF 2.0

[#50638887_pgfId-1037011]##The work of taking a snapshot of a version of
Facelets and producing the specification for Facelets in JSF 2.0
consists of extracting the parts of Facelets that are intended to be
“public” and leaving the rest as implementation details. A decision was
made early in this process to strive for backwards compatibility between
the latest popular version of Facelets and Facelets in JSF 2.0. The sole
determinant to backwards compatibility lies in the answer to the
question, “is there any Java code in the application, or in libraries
used by the application, that extends from or depends on any class in
package _com.sun.facelets_ and/or its sub-packages?”

[#50638887_pgfId-1036716]##If the answer to this question is “yes”,
Facelets in JSF 2.0 is _not_ backwards compatibile with Facelets and
such an application _must_ continue to bundle the Facelets jar file
along with the application, continue to set the Facelets configuration
parameters, and also set the
_javax.faces.DISABLE_FACELET_JSF_VIEWHANDLER_ _<context-param>_ to
_true_ . Please see link:JSF.htm#50638850_59981[See Application
Configuration Parameters] for details on this option. Any code that
extends or depends on any class in package _com.sun.facelets_ and/or its
sub-packages must be modified to depend on the appropriate classes in
package _javax.faces.webapp.vdl_ and/or its sub-packages.

[#50638887_pgfId-1036720]##If the answer to this question is “no”,
Facelets in JSF 2.0 _is_ backwards compatible with pre-JSF 2.0 Facelets
and such an application _must not_ continue to bundle the Facelets jar
file along with the application, and _must not_ continue to set the
Facelets configuration parameters.

[#50638887_pgfId-1036737]##Thankfully, most applications that use
Facelets fall into the latter category, or, if they fall in the former,
their dependence will easily be migrated to the new public classes.

[#50638887_pgfId-1036743]##Facelets in JSF 2.0 provides tag libraries
that are compatible with the following libraries already found in pre
JSF 2.0 Facelets.

======= [#50638887_pgfId-1036856]##Taglibs in pre JSF 2.0 Facelets that are available in Facelets in JSF 2.0

[#50638887_pgfId-1036860]##Common prefix

[#50638887_pgfId-1036862]##Namespace URI

[#50638887_pgfId-1036864]##h

[#50638887_pgfId-1036866]##http://java.sun.com/jsf/html

[#50638887_pgfId-1036868]##f

[#50638887_pgfId-1036870]##http://java.sun.com/jsf/core

[#50638887_pgfId-1036872]##c

[#50638887_pgfId-1036874]##http://java.sun.com/jsp/jstl/core

[#50638887_pgfId-1036876]##fn

[#50638887_pgfId-1036878]##http://java.sun.com/jsp/jstl/functions

[#50638887_pgfId-1036880]##ui

[#50638887_pgfId-1036882]##http://java.sun.com/jsf/facelets

[#50638887_pgfId-1036419]##Naturally, new features built on Facelets in
JSF 2.0 are not available in pre JSF 2.0 Facelets and will only work in
JSF 2.0 or later.

==== [#50638887_pgfId-1049253]##[#50638887_50816]##Resource Library Contracts Background

[#50638887_pgfId-1049301]##JSF defines a system called “resource library
contracts” for applying facelet templates to an entire application in a
re-usable and interchangeable manner. The feature is built on top of the
resource library facility described in link:JSF.htm#50638877_79794[See
Libraries of Localized and Versioned Resources]. A configurable set of
Facelet VDL views in the application will be able to declare themselves
to be template-clients of any template in a resource library contract.
Facelet VDL views in the application can also make use of resources
contained in a resource library contract, but the feature has ample
value when only used with templates.

===== [#50638887_pgfId-1049315]##Non-normative Example

[#50638887_pgfId-1063918]##Consider this resource library contract,
called _siteLayout_ .

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1055821]##siteLayout/ +
topNav_template.xhtml +
leftNav_foo.xhtml +
styles.css +
script.js +
background.png
|===

[#50638887_pgfId-1064154]##This simple example takes advantage of
several conventions built into the feature, most notably the default
application of all available contracts in the application to all views
in the application. It is possible to customize how resource library
contracts are applied to the application, including using several
different contracts in the same or different parts of the application.
Such customizing is accomplished by including a
_<resource-library-contracts>_ element within the _<application>_
element of the _faces-config.xml_ (or similar) file. Because this
example is designed with the convention in mind, it does not need a
_faces-config.xml_ file.

[#50638887_pgfId-1064148]##The _siteLayout_ contract offers two
templates: _topNav_template.xhtml_ and _leftNav_foo.xhtml_ . For
discussion, these are known as “declared templates”. When used by a
template client, they will lay out the template client’s contents with a
navigation menu on the top or the left side of the page, respectively.
In _siteLayout_ , each of the templates has _<ui:insert>_ tags named
“title”, “content”, and “nav”. For discussion, these are knows as
“declared insertion points”. Furthermore, each of the templates uses the
CSS styles declared in _styles.css_ , some scripts defined in
_script.js_ , and the background image _background.png_ . For
discussion, these are known as “declared resources”. In order to use a
resource library contract, one must know its declared templates, their
declared insertion points, and, optionally, their declared resources. No
constraint is placed on the naming and arrangement of declared
templates, insertion points, or resources, but all three concepts
together can informally be thought of as the declaration of the resource
library contract. The contract declaration of _siteLayout_ can be stated
as follows.

[#50638887_pgfId-1054532]## _siteLayout_ provides two declared
templates, _topNav_template.xhtml_ and _leftNav_foo.xhtml_ . Each
templates offers declared insertion points “title”, “content”, and
“nav”.

[#50638887_pgfId-1055941]##In this case, the css, script, and image are
left out of the contract declaration but this distinction is completely
arbitrary. The important content of _topNav_template.xhtml_ is shown
next.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1056010]##<?xml version='1.0' encoding='UTF-8' ?>

[#50638887_pgfId-1056011]##<!DOCTYPE html>

[#50638887_pgfId-1056053]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638887_pgfId-1056054]## xmlns:ui="http://java.sun.com/jsf/facelets"

[#50638887_pgfId-1056055]## xmlns:h="http://java.sun.com/jsf/html">

[#50638887_pgfId-1056057]##<h:head>

[#50638887_pgfId-1056059]## <h:outputStylesheet id="default"
name="default.css" <h:outputStylesheet name="cssLayout.css" />

[#50638887_pgfId-1056061]## <title><ui:insert
name="title"></ui:insert></title>

[#50638887_pgfId-1056181]##</h:head>

[#50638887_pgfId-1056064]##<h:body>

[#50638887_pgfId-1056066]## <div id="top" class="top">

[#50638887_pgfId-1056067]## <p>Top Navigation Menu</p>

[#50638887_pgfId-1056068]## <ui:insert name="nav">Nav
content</ui:insert>

[#50638887_pgfId-1056213]## </div>

[#50638887_pgfId-1056071]## <div id="content" class="center_content">

[#50638887_pgfId-1056072]## <ui:insert
name="content">Content</ui:insert>

[#50638887_pgfId-1056073]## </div>

[#50638887_pgfId-1056075]##</h:body>

[#50638887_pgfId-1056077]##</html>

|===

[#50638887_pgfId-1055942]## 

[#50638887_pgfId-1055858]##This example packages the entire _siteLayout_
directory and its contents into the _META-INF/contracts_ entry of a JAR
file named _siteLayout.jar_ . The simplest possible way to use
_siteLayout_ is to drop _siteLayout.jar_ into _WEB-INF/lib_ and apply
the knowledge of the resource library contract declaration to the
facelet views in the app.

[#50638887_pgfId-1054208]##Consider this simple web app, called
_useContract_ , the file layout for which is shown next. The example is
shown using a simplified maven war packaging.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1053535]##useContract/ +
pom.xml +
src/main/webapp/ +
/WEB-INF/lib/siteLayout.jar +
index.xhtml +
page2.xhtml
|===

[#50638887_pgfId-1049324]##Notice the absence of a _faces-config.xml_
file. Because this example is content to let all the contracts in
_siteLayout.jar_ be applied to all views in the app, this file is not
necessary. The two pages are shown next.

[#50638887_pgfId-1049328]##index.xhtml.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1049327]##<!DOCTYPE HTML> +
<html xmlns=”http://www.w3.org/1999/xhtml” +
xmlns:ui=”http://java.sun.com/jsf/facelets” +
xmlns:h=”http://java.sun.com/jsf/html”> +
<body> +
<ui:composition template=”/topNav_template.xhtml”> +
<ui:define name=”title”>#\{msgs.contactsWindowTitle}</ui:define> +
<ui:define name=”content”> +
<h:commandButton value=”next” action=”page2” /> +
</ui:define> +
<ui:define name=”nav”>#\{msgs.contactsNavMessage}</ui:define> +
</ui:composition> +
</body> +
</html>
|===

[#50638887_pgfId-1049332]##page2.xhtml

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1049331]##<!DOCTYPE HTML> +
<html xmlns=”http://www.w3.org/1999/xhtml” +
xmlns:ui=”http://java.sun.com/jsf/facelets” +
xmlns:h=”http://java.sun.com/jsf/html”> +
<body> +
<ui:composition template=”/leftNav_foo.xhtml”> +
<ui:define name=”title”>Hard coded title</ui:define> +
<ui:define name=”content”> +
<h:commandButton value=”back” action=”index” /> +
</ui:define> +
<ui:define name=”nav”>Hard coded nav</ui:define> +
</ui:composition> +
</body> +
</html>
|===

[#50638887_pgfId-1049333]##To complete the example, the execution of the
_useContract_ app is illustrated.

[#50638887_pgfId-1054712]##When _useContract.war_ is deployed, the
runtime will discover that _siteLayout.jar_ is a resource library
contract and make its contents available for template clients.

[#50638887_pgfId-1053752]##When the user agent visits
_http://localhost:8080/useContract/faces/index.xhtml_ , because the
_siteLayout_ resource library contract provides _/topNav_template.xhtml_
, that file will be loaded as the template. Likewise, when the _next_
button is pressed, _/leftNav_foo.xhtml_ , also from _siteLayout_ ,will
be loaded as the template.

[#50638887_pgfId-1055320]##Now, consider there is an alternate
implementation of the _siteLayout_ contract, packaged as
_newSiteLayout.jar_ . This implementation doesn’t change the contract
declaration, but completely changes the arrangement and style of the
views. As long as the contract declaration does not change,
_useContract_ can take advantage of _newSiteLayout_ simply by replacing
one JAR in _WEB-INF/lib_ .

===== [#50638887_pgfId-1055327]##Non-normative Feature Overview

[#50638887_pgfId-1049422]##The normative requirements of the feature are
stated in the context of the part of the specification impacted. This
section gives the reader a non-normative overview of the feature that
touches on all the parts of the specification that intersect with this
feature.

[#50638887_pgfId-1056327]## _Design Time_

[#50638887_pgfId-1056355]##At design time, the developer has packaged
any resource library contracts to be used in the application in the
right place in the web application, or JAR file classpath. _This
behavior is normatively specified in link:JSF.htm#50638877_78699[See
Resource Library Contracts]._

[#50638887_pgfId-1049720]## _Startup Time_

[#50638887_pgfId-1049756]##At startup time, the runtime will discover
the set of resource library contracts available for this application. If
there is one or more _<resource-library-contracts>_ element, only those
contracts explicitly named will be made available for use in the
application. If there is no such element, all of the discovered
contracts are made available for use in the application. _This behavior
is normatively specified in link:JSF.htm#50638850_48089[See Resource
Library Contracts] and in the XML schema for the application
configuration resources._

[#50638887_pgfId-1050238]## _Facelet Processing Time_

[#50638887_pgfId-1050263]##The specification for
_ViewDeclarationLanguage.createView()_ requires a call to
_ViewDeclarationLanguage.calculateResourceLibraryContracts()_ , passing
the current _viewId_ . This method will examine the data structure
assembled at startup and return a _List<String>_ representing the
resource library contracts eligible for use in this view. This value is
set as the value of the _resourceLibraryContracts_ property on the
_FacesContext_ . _This behavior is normatively specified in
link:JSF.htm#50638861_76340[See ViewDeclarationLanguage.createView()]._

[#50638887_pgfId-1051070]##The specification of the tag handler for
_<f:view>_ is the one other place where the _resourceLibraryContracts_
property may be set. _This behavior is normatively specified in the tag
handler for <f:view>._

[#50638887_pgfId-1050943]##In any _<ui:composition>_ or _<ui:decorate>_
tag reached from that view, it is valid to use any of the templates in
any of the listed contracts as the value of the _template_ attribute.
This behavior happens naturally as a side effect of the requirements of
_ResourceHandler.createViewResource()_ , where the implementation of
that method is required to first consult the _resourceLibraryContracts_
property of the current _FacesContext_ . If the value of the property is
non- _null_ and non empty, the implementation must first look for the
named view resource within each of the contracts in the list, and return
the first matching one found. Otherwise, the implementation just returns
the matching resource, if found. _This behavior is normatively specified
in the javadoc for ResourceHandler.createViewResource()._

[#50638887_pgfId-1051985]## _View Rendering Time_

[#50638887_pgfId-1052006]##When the view is being rendered, any
resources that reside in a resource library contract will have
additional metadata so that a subsequent request from the user agent is
able to quickly find the resource inside the named contract. _This
behavior is normatively specified in the javadoc for
Resource.getRequestPath()._

[#50638887_pgfId-1052356]## _User-Agent Rendering Time_

[#50638887_pgfId-1052398]##By the point in time that the User-Agent is
rendering the view, all of the work related to resource library
contracts will have been completed, but it is worth mentioning that any
resources in the page that originate from within resource library
contracts will be correctly fetched.

==== [#50638887_pgfId-1056589]##[#50638887_96511]##HTML5 Friendly Markup

[#50638887_pgfId-1056615]##Prior to version 2.2 of this specification,
the view authoring model relied entirely on the concept of a JSF UI
component in a view as a means to encapsulate arbitrarily complex web
user interface code behind a simple UI component tag in a page. For
example, the act of including _<my:datePicker value=”#\{user.dob}” />_
in a view could cause a large amount of HTML, CSS, JavaScript, and
images to be delivered to the user agent. This abstraction is very
appropriate when the view author is content to delegate the work of
designing the user experience for such components to a component author.
As web designer skills have become more widespread, the need has arisen
to expose the hitherto hidden complexity so the view author has near
total control on the user experience of each individual element in the
view. The HTML5 Friendly Markup feature addresses this requirement, as
well as providing access to the loosened attribute syntax also present
in HTML5.

[#50638887_pgfId-1059918]##This feature is only available to views
written in Facelets. It is not available to views written in JSP.

===== [#50638887_pgfId-1057849]##Non-normative Feature Overview

[#50638887_pgfId-1057912]##The normative requirements of the feature are
stated in the context of the part of the specification impacted. This
section gives the reader a non-normative overview of the feature that
touches on all the parts of the specification that intersect with this
feature. There are two main aspects to the feature, pass through
attributes and pass through elements.

[#50638887_pgfId-1058594]## _Pass Through Attributes_

[#50638887_pgfId-1058638]##For any given JSF component tag in a view,
the set of available attributes that component supports is determined by
a combination of the _UIComponent_ and _Renderer_ for that tag. In some
cases the value of the attribute is interpreted by the _UIComponent_ or
_Renderer_ (for example, the _columns_ attribute of _h:panelGrid_ ) and
in others the value is passed straight through to the user agent (for
example, the _lang_ attribute of _h:inputText_ ). In both cases, the
_UIComponent/Renderer_ has a priori knowledge of the set of allowable
attributes. _Pass Through Attributes_ allows the view author to list
arbitrary name value pairs that are passed straight through to the user
agent without interpretation by the _UIComponent/Renderer_ . _This
behavior is normatively specified in the “Rendering Pass Through
Attributes” section of the overview of the standard HTML_BASIC render
kit._

[#50638887_pgfId-1059723]##The view author may specify pass through
attributes in three ways.

[#50638887_pgfId-1059819]##Nesting the _<f:passThroughAttribute>_ tag
within a _UIComponent_ tag. For example, +
_<h:inputText value=”#\{user.name}”> +
<f:passThroughAttribute name=”data-sermon” value=”#\{pastor.message}”
/> +
</h:inputText>_

[#50638887_pgfId-1060063]##Nesting the _<f:passThroughAttributes>_ tag
within a _UIComponent_ tag, For example, +
_<h:inputText value=”#\{user.name”> +
<f:passThroughAttributes value=”#\{service.nameValuePairs}” /> +
</h:inputText> +
_ The EL expression must point to a _Map<String, Object>_ . If the value
is a _ValueExpresison_ call _getValue()_ the value first. Whether the
value is a _ValueExpression_ or not, the value must have its
_toString()_ called on it.

[#50638887_pgfId-1060431]##Prefixing the attribute with the shortname
assigned to the _http://java.sun.com/jsf/passthrough_ XML namespace. For
example +
_<html xmlns:p=”http://java.sun.com/jsf/passthrough” +
xmlns:h=”http://java.sun.com/jsf/html”> +
<h:inputText p:foo=”\{bar.baz}” value=”#\{user.name}” /> +
</html>_

[#50638887_pgfId-1060935]## _This behavior is normatively specified in
the VDLdoc for <f:passthroughAttribute>, <f:passThroughAttributes> tags
in the “Faces Core” tag library, and the “Pass Through Attributes” tag
library._

[#50638887_pgfId-1061157]## _Pass Through Elements_

[#50638887_pgfId-1061189]##This feature circumvents the traditional
component abstraction model of JSF, allowing the page author nearly
complete control of the rendered markup, without sacrificing any of the
server side lifecycle offered by JSF. This is accomplished by means of
enhancements to the Facelet _TagDecorator_ API. This API describes a
mapping from the common markup elements to target tags in the HTML_BASIC
RenderKit such that the actual markup specified by the view author is
what gets rendered, but the server side component is an actual component
from the HTML_BASIC RenderKit. A special _Renderer_ is provided to cover
cases when none of the mappings specified in _TagDecorator_ fit the
incoming markup. To allow further flexibility, the existing Facelets
TagDecorator mechanism allows complete control of the mapping process.
_This behavior is normatively specified in the javadocs for class
javax.faces.view.facelets.TagDecorator and in the section “Rendering
Pass Through Attributes” in the “General Notes On Encoding” in the
Standard HTML_BASIC RenderKit._

[#50638887_pgfId-1063492]##An example will illustrate the mapping
process.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1062399]##<!DOCTYPE HTML> +
<html xmlns=”http://www.w3.org/1999/xhtml” +
xmlns:jsf=”http://java.sun.com/jsf”> +
<body> +
<input type=”number” pattern=”[0-9]*” jsf:value=”#\{my.age}” /> +
</body> +
</html>
|===

[#50638887_pgfId-1057936]##As required in
link:JSF.htm#50638887_97268[See Specification of the
ViewDeclarationLanguage Implementation for Facelets for JSF 2.0]
_TagDecorator_ is called during the facelet processing. Because the
_<input>_ element has an attribute from the _http://java.sun.com/jsf_
namespace, the system treats the element as a pass through element. The
table listed in the javadocs for _TagDecorator_ is consulted and it is
determined that this component should act as an _<h:inputText>_
component for the purposes of postback processing. However, the
rendering is entirely taken from the markup in the facelet view. Another
example illustrates the special _Renderer_ that is used when no mapping
can be found in the table in the javadocs for _TagDecorator_ .

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1063212]##<!DOCTYPE HTML> +
<html xmlns=”http://www.w3.org/1999/xhtml” +
xmlns:jsf=”http://java.sun.com/jsf”> +
<body> +
<meter jsf:id="meter2" min="#\{bean.min}" max="#\{bean.max}" +
value="350">350 degrees</meter> +
</body> +
</html>
|===

[#50638887_pgfId-1057979]##As in the preceding example, the
_TagDecorator_ mechanism is activated but it is determined that this
component should act as a _<jsf:element>_ component for the purposes of
postback processing. _The behavior of the <jsf:element> is normatively
specified in the VDLdoc for that tag. The behavior of the
javax.faces.passthrough.Element renderer is normatively specified in the
RenderKitDoc for that renderer._

=== [#50638887_pgfId-1057982]##

image:JSF-43.gif[image]

[#50638887_55331]##Java Programming Language Specification for Facelets
in JSF 2.0

[#50638887_pgfId-1037052]##The subsections within this section specify
the Java API requirements of a Facelets implementation. Adherence to
this section and the next section, which specifies the XHTML
specification for Facelets in JSF 2.0, will ensure applications and JSF
component libraries that make use of Facelets are portable across
different implementations of JavaServer Faces.

[#50638887_pgfId-1039159]##The original Facelet project did not separate
the API and the implementation into separate jars, as is common practice
with JCP specifications. Thus, a significant task for integrating
Facelets into JSF 2 was deciding which classes to include in the public
Java API, and which to keep as an implementation detail.

[#50638887_pgfId-1039170]##There were two guiding principles that
influenced the task of integrating Facelets into JSF 2.

[#50638887_pgfId-1039171]##The original decision in JSF 1.0 to allow the
ViewHandler to be pluggable enabled the concept of a View Declaration
Language for JSF. The two most popular ones were Facelets and
JSFTemplating. The new integration should preserve this pluggability,
since it is still valuable to be able to replace the View Declaration
Language.

[#50638887_pgfId-1039175]##After polling users of Facelets, the expert
group decided that most of them were only using the markup based API and
were not extending from the Java classes provided by the Facelet
project. Therefore, we decided to keep the Java API for Facelets in JSF
2 as small as possible, only exposing classes where absolutely
necessary.

[#50638887_pgfId-1039212]##The application of these principles produced
the classes in the package _javax.faces.view.facelets_ . Please consult
the Javadocs for that package, and the classes within it, for additional
normative specification _._

==== [#50638887_pgfId-1039236]##[#50638887_97268]##Specification of the ViewDeclarationLanguage Implementation for Facelets for JSF 2.0

[#50638887_pgfId-1039239]##As normatively specified in the javadocs for
_ViewDeclarationLanguageFactory.getViewDeclarationLanguage()_ , a JSF
implementation must guarantee that a valid and functional
_ViewDeclarationLanguage_ instance is returned from this method when the
argument is a refrence to either a JSP view, a Faces XML View or a
Facelets View. This section describes the specification for the Facelets
implementation.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039263]##public void buildView(FacesContext context,

[#50638887_pgfId-1039264]## UIViewRoot root)

[#50638887_pgfId-1039265]## throws IOException

[#50638887_pgfId-1039258]## 

|===

[#50638887_pgfId-1039217]##The argument _root_ will have been created
with a call to either _createView()_ or
_ViewMetadata.createMetadataView()_ . If the root already has
non-metadata children, the view must still be re-built, but care must be
taken to ensure that the existing components are correctly paired up
with their VDL counterparts in the VDL page. The implementation must
examine the _viewId_ of the argument root, which must resolve to an
entity written in Facelets for JSF 2 markup language. Because Facelets
for JSF 2.0 views are written in XHTML, an XML parser is well suited to
the task of processing such an entity. Each element in the XHTML view
falls into one of the following categories, each of which corresponds to
an instance of a Java object that implements
_javax.faces.view.facelets.FaceletHandler_ , or a subinterface or
subclass thereof, and an instance of
_javax.faces.view.facelets.TagConfig_ , or a subinterface or subclass
thereof, which is passed to the constructor of the object implementing
_FaceletHandler_ .

[#50638887_pgfId-1042117]##When constructing the _TagConfig_
implementation to be passed to the _FaceletHandler_ implementation, the
runtime must ensure that the instance returned from _TagConfig.getTag()_
has been passed through the tag decoration process as described in the
javadocs for _javax.faces.view.facelets.TagDecorator_ prior to the
_TagConfig_ being passed to the _FaceletHandler_ implementation.

[#50638887_pgfId-1039479]##The mapping between the categories of
elements in the XHTML view and the appropriate sub-interface or subclass
of _FaceletHandler_ is specified below. Each _FaceletHandler_ instance
must be traversed and its _apply()_ method called in the same
depth-first order as in the other lifecycle phase methods in jsf. Each
_FaceletHandler_ instance must use the _getNextHandler()_ method of the
_TagConfig_ instance passed to its constructor to perform the traversal
starting from the root _FaceletHandler_ .

[#50638887_pgfId-1039323]##Standard XHTML markup elements

[#50638887_pgfId-1039337]##These are declared in the XHTML namespace
_http://www.w3.org/1999/xhtml_ . Such elements should be passed through
as is to the rendered output.

[#50638887_pgfId-1039486]##These elements correspond to instances of
_javax.faces.view.facelets.TextHandler_ . See the javadocs for that
class for the normative specification.

[#50638887_pgfId-1039334]##Markup elements that represent _UIComponent_
instance in the view.

[#50638887_pgfId-1039341]##These elements can come from the Standard
HTML Renderkit namespace _http://java.sun.com/jsf/html_ , or from the
namespace of a custom tag library (including composite components) as
described in link:JSF.htm#50638887_98019[See Facelet Tag Library
mechanism].

[#50638887_pgfId-1039439]##These elements correspond to instances of
_javax.faces.view.facelets.ComponentHandler_ . See the javadocs for that
class for the normative specification.

[#50638887_pgfId-1039360]##Markup elements that take action on their
parent or children markup element(s). Usually these come from the JSF
Core namespace _http://java.sun.com/jsf/core_ , but they can also be
provided by a custom tag library.

[#50638887_pgfId-1039448]##Such elements that represent an attached
object must correspond to an appropriate subclass of
_javax.faces.view.facelets.FaceletsAttachedObjectHandler_ . The
supported subclasses are specified in the javadocs.

[#50638887_pgfId-1039480]##Such elements that represent a facet
component must correspond to an instance of
_javax.faces.component.FacetHandler_ .

[#50638887_pgfId-1039491]##Such elements that represent an attribute
that must be pushed into the parent _UIComponent_ element must
correspond to an instance of
_javax.facelets.view.facelets.AttributeHandler_ .

[#50638887_pgfId-1039374]##Markup Elements that indicate facelet
templating, as specified in the VDL Docs for the namespace
_http://java.sun.com/jsf/facelets_ .

[#50638887_pgfId-1039452]##Such elements correspond to an instance of
_javax.faces.view.facelets.TagHandler_ .

[#50638887_pgfId-1039382]##Markup elements from the Facelet version of
the JSTL namespaces _http://java.sun.com/jsp/jstl/core_ or
_http://java.sun.com/jsp/jstl/functions_ , as specified in the VDL Docs
for those namespaces.

[#50638887_pgfId-1039458]##Such elements correspond to an instance of
_javax.faces.view.facelets.TagHandler_ .

=== [#50638887_pgfId-1039271]##

image:JSF-43.gif[image]

XHTML Specification for Facelets for JSF 2.0

==== [#50638887_pgfId-1039218]##[#50638887_40873]##General Requirements

[#50638887_pgfId-1037155]##[P1-start_facelet_xhtml]Facelet pages are
authored in XHTML. The runtime must support all XHTML pages that conform
to the XHTML-1.0-Transitional DTD, as described at
_http://www.w3.org/TR/xhtml1/#a_dtd_XHTML-1.0-Transitional_ .

[#50638887_pgfId-1039590]##The runtime must ensure that EL expressions
that appear in the page without being the right-hand-side of a tag
attribute are treated as if they appeared on the right-hand-side of the
_value_ attribute of an _<h:outputText />_ element in the
_http://java.sun.com/jsf/html_ namespace. This behavior must happen
regardless of whether or not the _http://java.sun.com/jsf/html_
namespace has been declared in the page.

===== [#50638887_pgfId-1042579]##[#50638887_95527]##DOCTYPE and XML Declaration

[#50638887_pgfId-1042601]##When processing Facelet VDL files, the system
must ensure that at most one XML declaration and at most one DOCTYPE
declaration appear in the rendered markup, if and only if there is
corresponding markup in the Facelet VDL files for those elements. If
multiple occurrences of XML declaration and DOCTYPE declaration are
encountered when processing Facelet VDL files, the “outer-most”
occurrence is the one that must be rendered. If an XML declaration is
present, it must be the very first markup rendered, and it must precede
any DOCTYPE declaration (if present). The output of the XML and DOCTYPE
declarations are subject to the configuration options listed in the
table titled “Valid <process-as> values and their implications on the
processing of Facelet VDL files” in link:JSF.htm#50638878_16008[See The
facelets-processing element].

{empty}[#50638887_pgfId-1039589]##[P1-end_facelet_xhtml]

==== [#50638887_pgfId-1037177]##[#50638887_98019]##Facelet Tag Library mechanism

[#50638887_pgfId-1037181]##Facelets leverages the XML namespace
mechanism to support the concept of a “tag library” analogous to the
same concept in JSP. However, in Facelets, the role of the tag handler
java class is greatly reduced and in most cases is unnecessary. The tag
library mechanism has two purposes.

[#50638887_pgfId-1037188]##Allow page authors to access tags declared in
the supplied tag libraries declared in link:JSF.htm#50638887_38375[See
Standard Facelet Tag Libraries], as well as accessing third-party tag
libraries developed by the application author, or any other third party

[#50638887_pgfId-1037192]##Define a framework for component authors to
group a collection of custom _UIComponent_ s into a tag library and
expose them to page authors for use in their pages.

[#50638887_pgfId-1039243]##[P1_start_facelet_taglib_decl]The runtime
must support the following syntax for making the tags in a tag library
available for use in a Facelet page.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039246]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638887_pgfId-1039247]## xmlns: _prefix_ =" _namespace_uri_ ">

|===

[#50638887_pgfId-1039248]##Where _prefix_ is a page author chosen
arbitrary string used in the markup inside the _<html>_ tag to refer to
the tags declared within the tag library and _namespace_uri_ is the
string declared in the _<namespace>_ element of the facelet tag library
descriptor. For example, declaring
_xmlns:h="http://java.sun.com/jsf/html"_ within the _<html>_ element in
a Facelet XHTML page would cause the runtime to make all tags declared
in link:JSF.htm#50638887_29058[See Standard HTML RenderKit Tag Library]
to be available for use in the page using syntax like: _<h:inputText />_
.

[#50638887_pgfId-1039748]##The unprefixed namespace, also known as the
root namespace, must be passed through without modification or check for
validity. The passing through of the root namespace must occur on any
non-prefixed element in a facelet page. For example, the following
markup declaration:.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039799]##<html xmlns="http://www.w3.org/1999/xhtml" +
xmlns: _h_ =" _http://java.sun.com/jsf/html_ "> +
<math xmlns="http://www.w3.org/1998/Math/MathML"> +
<msup> +
<msqrt> +
<mrow> +
<mi>a</mi> +
<mo>+</mo> +
 +
<mi>b</mi> +
</mrow> +
</msqrt> +
<mn>27</mn> +
</msup>

[#50638887_pgfId-1039810]##</math>

[#50638887_pgfId-1039746]## 

|===

[#50638887_pgfId-1039787]##would be rendered as

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039887]##<html xmlns="http://www.w3.org/1999/xhtml"> +
<math xmlns="http://www.w3.org/1998/Math/MathML"> +
<msup> +
<msqrt> +
<mrow> +
<mi>a</mi> +
<mo>+</mo> +
 +
<mi>b</mi> +
</mrow> +
</msqrt> +
<mn>27</mn> +
</msup>

[#50638887_pgfId-1039888]##</math>

[#50638887_pgfId-1039786]## 

|===

{empty}[#50638887_pgfId-1039737]##[P1_end_facelet_taglib_decl]

[#50638887_pgfId-1037202]##[P1_start_facelet_taglib_discovery]The run
time must support two modes of discovery for Facelet tag library
descriptors

{empty}[#50638887_pgfId-1037255]##Via declaration in the web.xml, as
specified in link:JSF.htm#50638850_59981[See Application Configuration
Parameters]

[#50638887_pgfId-1037262]##Via auto discovery by placing the tag library
discriptor file within a jar on the web application classpath, naming
the file so that it ends with “ _.taglib.xml_ ”, without the quotes, and
placing the file in the _META-INF_ directory in the jar file.

{empty}[#50638887_pgfId-1037266]##The discovery of tag library files
must happen at application startup time and complete before the
application is placed in service. Failure to parse, process and
otherwise interpret any of the tag library files discovered must cause
the application to fail to deploy and must cause an informative error
message to be logged.[P1_end_facelet_taglib_discovery]

[#50638887_pgfId-1037165]##The specification for how to interpret a
facelet tag library descriptor is included in the documentation elements
of the schema for such files, see link:JSF.htm#50638878_31858[See XML
Schema Definition For Facelet Taglib].

[#50638887_pgfId-1038117]## 

==== [#50638887_pgfId-1037118]##[#50638887_23235]##Requirements specific to composite components

[#50638887_pgfId-1037403]##The text in this section makes use of the
terms defined in link:JSF.htm#50638851_96951[See Composite Component
Terms]. When such a term appears in this section, it will be in
_emphasis font face_ .

===== [#50638887_pgfId-1037321]##[#50638887_85377]##Declaring a composite component library for use in a Facelet page

[#50638887_pgfId-1037341]##[P1_start_composite_library_decl]The runtime
must support the following two ways of declaring a _composite component
library_ .

[#50638887_pgfId-1037345]##If a facelet taglibrary is declared in an
XHTML page with a namespace starting with the string “
_http://java.sun.com/jsf/composite/_ ” (without the quotes), the
remainder of the namespace declaration is taken as the name of a
resource library as described in link:JSF.htm#50638877_79794[See
Libraries of Localized and Versioned Resources], as shown in the
following example:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1037319]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638887_pgfId-1037320]## xmlns: _ez_ ="
_http://java.sun.com/jsf/composite/_ ezcomp">

|===

[#50638887_pgfId-1037129]##The runtime must look for a resource library
named _ezcomp_ . If the substring following “
_http://java.sun.com/jsf/composite/_ ” contains a “ _/_ ” character, or
any characters not legal for a library name the following action must be
taken. If _application.getProjectStage()_ is _Development_ an
informative error message must be placed in the page and also logged.
Otherwise the message must be logged only.

{empty}[#50638887_pgfId-1037337]##As specified in facelet taglibrary
schema, the runtime must also support the _<composite-library-name>_
element. The runtime must interpret the contents of this element as the
name of a resource library as described in
link:JSF.htm#50638877_79794[See Libraries of Localized and Versioned
Resources]. If a facelet tag library descriptor file is encountered that
contains this element, the runtime must examine the _<namespace>_
element in that same tag library descriptor and make it available for
use in an XML namespace declaration in facelet
pages.[P1_end_composite_library_decl]

===== [#50638887_pgfId-1037365]##[#50638887_65087]##Creating an instance of a _top level component_

[#50638887_pgfId-1037315]##[P1_start_top_level_component_creation]If,
during the process of building the view, the facelet runtime encounters
an element in the page using the prefix for the namespace of a composite
component library, the runtime must create a _Resource_ instance with a
library property equal to the library name derived in
link:JSF.htm#50638887_85377[See Declaring a composite component library
for use in a Facelet page]and call the variant of
_application.createComponent()_ that takes a _Resource_ .

{empty}[#50638887_pgfId-1037414]##After causing the _top level
component_ to be instantiated, the runtime must create a _UIComponent_
with component-family of _javax.faces.Panel_ and renderer-type
_javax.faces.Group_ to be installed as a facet of the _top level
component_ under the facet name _UIComponent.COMPOSITE_FACET_NAME_
.[P1_end_top_level_component_creation]

===== [#50638887_pgfId-1037372]##Populating a _top level component_ instance with children

{empty}[#50638887_pgfId-1037421]##[P1_start_top_level_component_population]As
specified in link:JSF.htm#50638851_37180[See How does one make a
composite component?] the runtime must support the use of _composite:_
tag library in the _defining page_ pointed to by the _Resource_ derived
as specified in link:JSF.htm#50638887_65087[See Creating an instance of
a top level component]. [P1_start_top_level_component_population]The
runtime must ensure that all _UIComponent_ children in the _composite
component definition_ within the _defining page_ are placed as children
of the _UIComponent.COMPOSITE_FACET_NAME_ facet of the _top level
facet._ [P1_end_top_level_component_population]

[#50638887_pgfId-1037433]##Please see the tag library documentation for
the _<composite:insertChildren>_ and _<composite:insertFacet>_ tags for
details on these two tags that are relevant to populating a _top level
component_ instance with children.

[#50638887_pgfId-1037476]##Special handling is required for attributes
declared on the _composite component tag_ instance in the _using page_ .
[P1_start_composite_component_tag_attributes]The runtime must ensure
that all such attributes are copied to the attributes map of the _top
level component_ instance in the following manner.

[#50638887_pgfId-1037480]##Obtain a reference to the _ExpressionFactory_
, for discussion called _expressionFactory_ .

[#50638887_pgfId-1037485]##Let the value of the attribute in the _using
page_ be _value_ .

[#50638887_pgfId-1037488]##If _value_ is “id” or “binding” without the
quotes, skip to the next attribute.

[#50638887_pgfId-1037484]##If the value of the attribute starts with
“#\{“ (without the quotes) call
_expressionFactory.createValueExpression(elContext, value,
Object.class)_

[#50638887_pgfId-1037486]##If the value of the attribute does not start
with “ _#\{_ “, call _expressionFactory.createValueExpression(value,
Object.class)_

{empty}[#50638887_pgfId-1037487]##If there already is a key in the _map_
for _value_ , inspect the type of the value at that key. If the type is
_MethodExpression_ take no action.
[P1_end_composite_component_tag_attributes]

[#50638887_pgfId-1037477]##For code that handles tag attributes on
_UIComponent_ XHTML elements special action must be taken regarding
composite components. [P1_start_composite_component_method_expression]If
the type of the attribute is a _MethodExpression_ , the code that takes
the value of the attribute and creates an actual _MethodExpression_
instance around it must take the following special action. Inspect the
value of the attribute. If the EL expression string starts with the _cc_
implicit object, is followed by the special string “ _attrs_ ” (without
the quotes), as specified in link:JSF.htm#50638862_54925[See Composite
Component Attributes ELResolver], and is followed by a single remaining
expression segment, let the value of that remaining expression segment
be _attrName_ . In this case, the runtime must guarantee that the actual
_MethodExpression_ instance that is created for the tag attribute have
the following behavior in its _invoke()_ method.

[#50638887_pgfId-1037496]##Obtain a reference to the current composite
component by calling _UIComponent.getCurrentCompositeComponent()_ .

[#50638887_pgfId-1037500]##Look in the attribute of the component for a
key under the value _attrName_ .

[#50638887_pgfId-1037501]##There must be a value and it must be of type
_MethodExpression_ . If either of these conditions are _false_ allow the
ensuing exception to be thrown.

{empty}[#50638887_pgfId-1037502]##Call _invoke()_ on the discovered
_MethodExpression_ , passing the arguments passed to our _invoke()_
method.[P1_end_composite_component_method_expression]

[#50638887_pgfId-1037489]##[P1_start_composite_component_retargeting]Once
the composite component has been populated with children, the runtime
must ensure that _ViewHandler.retargetAttachedObjects()_ and then
_ViewHandler.retargetMethodExpressions()_ is called, passing the _top
level component_ .[P1_end_composite_component_retargeting] The actions
taken in these methods set the stage for the tag attribute behavior and
the special _MethodExpression_ handling behavior described previously.

[#50638887_pgfId-1037434]##[P1_start_nested_composite_components]The
runtime must support the inclusion of composite components within the
_composite component definition_ . [P1_end_nested_composite_components].

=== [#50638887_pgfId-1037427]##

image:JSF-43.gif[image]

[#50638887_38375]##Standard Facelet Tag Libraries

[#50638887_pgfId-1037428]##This section specifies the tag libraries that
must be provided by an implementation.

==== [#50638887_pgfId-1037059]##JSF Core Tag Library

[#50638887_pgfId-1037063]##This tag library must be equivalent to the
one specified in link:JSF.htm#50638860_17251[See JSF Core Tag Library].

[#50638887_pgfId-1039702]##For all of the tags that correspond to
attached objects, the Facelets implementation supportes an additional
attribute, _for_ , which is intended for use when the attached object
tag exists within a composite component. If present, this attribute
refers to the value of one of the exposed attached objects within the
composite component inside of which this tag is nested.

[#50638887_pgfId-1039703]##The following additional tags apply to the
Facelet Core Tag Library only.

===== [#50638887_pgfId-1037540]##[#50638887_<f]##<f:ajax>

[#50638887_pgfId-1037541]##This tag serves two roles depending on its
placement. If this tag is nested within a single component, it will
associate an Ajax action with that component. If this tag is placed
around a group of components it will associate an Ajax action with all
components that support the “events” attribute. In there is an outer

====== [#50638887_pgfId-1037542]##Syntax

[#50638887_pgfId-1037543]##<f:ajax [event=”Literal”] [execute=”Literal |
Value Expression”] [render=”Literal | Value Expression”]
[onevent=”Literal | Value Expression”] [onerror=”Literal | Value
Expression”] | [listener=”Method Expression”] [disabled=”Literal|Value
Expression”] [immediate=”Literal|ValueExpression]/>

====== [#50638887_pgfId-1038799]##Body Content

[#50638887_pgfId-1038800]##empty.

====== [#50638887_pgfId-1038801]##Attributes

[#50638887_pgfId-1037621]##The following optional attributes are
available:

======= [#50638887_pgfId-1037626]## 

[#50638887_pgfId-1037634]##Name

[#50638887_pgfId-1037636]##Expr

[#50638887_pgfId-1037638]##Type

[#50638887_pgfId-1037640]##Description

[#50638887_pgfId-1037714]##event

[#50638887_pgfId-1037716]##String

[#50638887_pgfId-1037718]##String

[#50638887_pgfId-1037720]##A String identifying the type of event the
Ajax action will apply to. If specified, it must be one of the events
supported by the component the Ajax behavior is being applied to. If not
specified, the default event is determined for the component. The
default event is “action” for ActionSource components and “valueChange”
for EditableValueHolder components.

[#50638887_pgfId-1037642]##execute

[#50638887_pgfId-1037644]##VE

[#50638887_pgfId-1037646]##Collection<String>

[#50638887_pgfId-1037648]##If a literal is specified, it must be a space
delimited String of component identifiers and/or one of the keywords
outlined in link:JSF.htm#50638886_Keywords[See Keywords]. If not
specified, then @this is the default. If a ValueExpression is specified,
it must refer to a property that returns a Collection of Strings. Each
String in the Collection must not contain spaces.

[#50638887_pgfId-1037650]##render

[#50638887_pgfId-1037652]##VE

[#50638887_pgfId-1037654]##Collection<String>

[#50638887_pgfId-1037656]##If a literal is specified, it must be a space
delimited String of component identifiers and/or one of the keywords
outlined in link:JSF.htm#50638886_Keywords[See Keywords]. If not
specified, then @none is the default . If a ValueExpression is
specified, it must refer to a property that returns a Collection of
Strings. Each String in the Collection must not contain spaces.

[#50638887_pgfId-1037658]##onevent

[#50638887_pgfId-1037660]##VE

[#50638887_pgfId-1037662]##String

[#50638887_pgfId-1037664]##The name of a JavaScript function that will
handle events

[#50638887_pgfId-1037666]##onerror

[#50638887_pgfId-1037668]##VE

[#50638887_pgfId-1037670]##String

[#50638887_pgfId-1037672]##The name of a JavaScript function that will
handle errors.

[#50638887_pgfId-1038177]##disabled

[#50638887_pgfId-1038179]##VE

[#50638887_pgfId-1038181]##boolean

[#50638887_pgfId-1038183]##“false” indicates the Ajax behavior script
should be rendered; “true” indicates the Ajax behavior script should not
be rendered. “false” is the default.

[#50638887_pgfId-1038720]##listener

[#50638887_pgfId-1038722]##ME

[#50638887_pgfId-1038724]##MethodExpression

[#50638887_pgfId-1038726]##The listener method to execute when Ajax
requests are processed on he server.

[#50638887_pgfId-1038960]##immediate

[#50638887_pgfId-1038962]##VE

[#50638887_pgfId-1038964]##boolean

[#50638887_pgfId-1038966]##If “true” behavior events generated from this
behavior are broadcast during Apply Request Values phase. Otherwise, the
events will be broadcast during Invoke Aplications phase.

====== [#50638887_pgfId-1037557]##Specifying “execute”/”render” Identifiers

{empty}[#50638887_pgfId-1038155]##The String value for identifiers
specified for execute and render may be specified as a search expression
as outlined in the JavaDocs for UIComponent.findComponent.
[P1_start_execrenderIds]The implementation must resolve these
identifiers as specified for UIComponent.findComponent.[P1_end]

====== [#50638887_pgfId-1038154]##Constraints

[#50638887_pgfId-1038751]##This tag may be nested within any of the
standard HTML components. It may also be nested within any custom
component that implements the ClientBehaviorHolder interface. Refer to
link:JSF.htm#50638851_Component%20Behavior%20Model[See Component
Behavior Model] for more information about this interface.
[P1_start_ajaxtag_events]A TagAttibuteException must be thrown if an
“event” attribute value is specified that does not match the events
supported by the component type. [P1_end_ajaxtag_events] For example:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1038754]##<h:commandButton ..>

[#50638887_pgfId-1038755]##<f:ajax event=”valueChange”/>

[#50638887_pgfId-1038756]##</h:commandButton id=”button1” ...>

|===

{empty}[#50638887_pgfId-1038791]##An attempt is made to apply a
“valueChange” Ajax event to an “action” component. This is invalid and
the Ajax behavior will not be applied. [P1_start_bevent]The event
attribute that is specified, must be one of the events returned from the
ClientBehaviorHolder component implementation of
ClientBehaviorHolder.getEventNames. If an event is not specified the
value returned from the component implementation of
ClientBehaviorHolder.getDefaultEventName must be used. If the event is
still not determined, a TagAttributeException must be thrown.[P1_end]

[#50638887_pgfId-1038792]##This tag may also serve to “ajaxify” regions
of a page by nesting a group of components within it:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1038806]##<f:ajax>

[#50638887_pgfId-1038807]##<h:panelGrid>

[#50638887_pgfId-1038811]##<h:inputText id=”text1”/>

[#50638887_pgfId-1038815]##<h:commandButton id=”button1”/>

[#50638887_pgfId-1038816]##</h:panelGrid>

[#50638887_pgfId-1038820]##</f:ajax>

|===

[#50638887_pgfId-1039027]##From this example, “text1” and “button1” will
have ajax behavior applied to them. The default events for these
components would cause Ajax requests to fire. For “text1” a
“valueChange” event would apply and for “button1” an “action” event
would apply. <h:panelGrid> has no default event so in this case a
behavior would not be applied.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039030]##<f:ajax event=”click”>

[#50638887_pgfId-1039031]##<h:panelGrid id=”grid1”>

[#50638887_pgfId-1039032]##<h:inputText id=”text1”/>

[#50638887_pgfId-1039033]##<h:commandButton id=”button1”>

[#50638887_pgfId-1039039]##<f:ajax event=”mouseover”/>

[#50638887_pgfId-1039049]##</h:commandButton>

[#50638887_pgfId-1039034]##</h:panelGrid>

[#50638887_pgfId-1039035]##</f:ajax>

|===

[#50638887_pgfId-1039064]##From this example, “grid1” and “text1” would
have ajax behavior applied for an “onclick” event. “button1” would have
ajax behavior applied for both “mouseover” and “onclick” events. The
“oncick” event is a supported event type for PanelGrid components.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039071]##<f:ajax>

[#50638887_pgfId-1039074]##<h:commandButton id=”button1”>

[#50638887_pgfId-1039075]##<f:ajax/>

[#50638887_pgfId-1039076]##</h:commandButton>

[#50638887_pgfId-1039078]##</f:ajax>

|===

[#50638887_pgfId-1039660]##For this example, the inner <f:ajax/> would
apply to “button1”. The outer (wrapping) <f:ajax> would not be applied,
since it is the same type of submitting behavior (AjaxBehavior) and the
same event type (action).

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039677]##<f:ajax event=”click”>

[#50638887_pgfId-1039678]##<h:inputText id=”text1”>

[#50638887_pgfId-1039679]##<f:ajax event=”click”/>

[#50638887_pgfId-1039680]##</h:inputText>

[#50638887_pgfId-1039681]##</f:ajax>

|===

[#50638887_pgfId-1039695]##For this example, since the event types are
the same, the inner <f:ajax> event overrides the outer one.

[#50638887_pgfId-1039669]## 

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1039664]##<f:ajax event=”action”>

[#50638887_pgfId-1039665]##<h:commandButton id=”button1”>

[#50638887_pgfId-1039666]##<b:greet event=”action”/>

[#50638887_pgfId-1039667]##</h:commandButton>

[#50638887_pgfId-1039668]##</f:ajax>

|===

[#50638887_pgfId-1039645]##Here, there is a custom behavior “greet”
attached to “button1”. the outer <f:ajax> Ajax behavior will also get
applied to “button1”. But it will be applied *after* the “greet”
behavior.

====== [#50638887_pgfId-1039065]##Description

[#50638887_pgfId-1038826]##Enable one or more components in the view to
perform Ajax operations. This tag handler must create an instance of
javax.faces.component.behavior.AjaxBehavior instance using the tag
attribute values. If this tag is nested within a single
ClientBehaviorHolder component:

[#50638887_pgfId-1038841]##If the event attribute is not specified,
determine the event by calling the component’s getDefaultEventName
method. If that returns null, throw an exception.

[#50638887_pgfId-1038845]##If the event attribute is specified, ensure
that it is a valid event - that is one of the events contained in the
Collection returned from getEventNames method. If it does not exist in
this Collection, throw an exception.

[#50638887_pgfId-1038846]##Add the AjaxBehavior to the component by
calling the addBehavior method, passing the event and AjaxBehavior
instance.

[#50638887_pgfId-1038847]##If this tag is wrapped around component
children add the AjaxBehavior instance to the data structure holding the
behaviors for that component. As subsequent child components that
implement the BehaviorHolder interface are evaluated, this AjaxBehavior
instance must be added as a Behavior to the component. Please refer to
the Javadocs for the core tag handler AjaxHandler for additional
requirements.

====== [#50638887_pgfId-1037820]##[#50638887_Default Values]##Examples

[#50638887_pgfId-1037941]##Apply Ajax to “button1” and “text1”:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1037945]##<f:ajax>

[#50638887_pgfId-1037946]##<h:form>

[#50638887_pgfId-1037947]##<h:commandButton id=”button1” ...>

[#50638887_pgfId-1037948]##<h:inputText id=”text1” ..>

[#50638887_pgfId-1037949]##</h:form>

[#50638887_pgfId-1037950]##</f:ajax>

|===

[#50638887_pgfId-1037986]##Apply Ajax to “text1”:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1037980]##<f:ajax event=”valueChange”>

[#50638887_pgfId-1037981]##<h:form>

[#50638887_pgfId-1037982]##<h:commandButton id=”button1” ...>

[#50638887_pgfId-1037983]##<h:inputText id=”text1” ..>

[#50638887_pgfId-1037984]##</h:form>

[#50638887_pgfId-1037985]##</f:ajax>

|===

[#50638887_pgfId-1038032]##Apply Ajax to “button1”:

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1038026]##<f:ajax event=”action”>

[#50638887_pgfId-1038027]##<h:form>

[#50638887_pgfId-1038028]##<h:commandButton id=”button1” ...>

[#50638887_pgfId-1038029]##<h:inputText id=”text1” ..>

[#50638887_pgfId-1038030]##</h:form>

[#50638887_pgfId-1038031]##</f:ajax>

|===

[#50638887_pgfId-1071152]##Override default Ajax action. “button1” is
associated with the Ajax “execute=’cancel’” action:[#50638887_21369]##

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1071143]##<f:ajax event=”action” execute=”reset”>

[#50638887_pgfId-1071144]##<h:form>

[#50638887_pgfId-1071145]##<h:commandButton id=”button1” ...>

[#50638887_pgfId-1071146]##<f:ajax execute=”cancel”/>

[#50638887_pgfId-1071147]##</h:commandButton>

[#50638887_pgfId-1071148]##<h:inputText id=”text1” ..>

[#50638887_pgfId-1071149]##</h:form>

[#50638887_pgfId-1071150]##</f:ajax>

|===

===== [#50638887_pgfId-1071153]##<f:event>

[#50638887_pgfId-1071154]##Allow JSF page authors to install
_ComponentSystemEventListener_ instances on a component in a page.
Because this tag is closely tied to the event system, please see section
link:JSF.htm#50638851_98213[See Declarative Listener Registration] for
the normative specification.

===== [#50638887_pgfId-1038897]##<f:metadata>

[#50638887_pgfId-1038880]##Register a facet on the parent component,
which must be the _UIViewRoot_ . This must be a child of the _<f:view>_
. This tag must reside within the top level XHTML file for the given
viewId, not in a template. The implementation must ensure that the
direct child of the facet is a _UIPanel_ , even if there is only one
child of the facet. The implementation must set the id of the _UIPanel_
to be the value of the _UIViewRoot.METADATA_FACET_NAME_ symbolic
constant.

===== [#50638887_pgfId-1038864]##[#50638887_73374]##<f:validateBean>

[#50638887_pgfId-1038213]##Register a BeanValidator instance on the
parent EditableValueHolder UIComponent or the EditableValueHolder
UIComponent whose client id matches the value of the "for" attribute
when used within a composite component. If neither criteria is
satisfied, save the validation groups in an attribute on the parent
UIComponent to be used as defaults inherited by any BeanValidator in
that branch of the component tree. Don't save the validation groups
string if it is null or empty string. If the validationGroups attribute
is not defined on this tag when used in an EditableValueHolder, or the
value of the attribute is empty string, attempt to inherit the
validation groups from the nearest parent component on which a set of
validation groups is stored. If no validation groups are inherited,
assume the Default validation group, javax.validation.groups.Default. If
the BeanValidator is one of the default validators, then this tag simply
specializes the validator by providing the list of validation groups to
be used. There are two usage patterns for this tag, both shown below.
The tags surrounding and nested within the _<f:validateBean>_ tag, as
well as the attributes of the tag itself, are show for illustrative
purposes only.

[#50638887_pgfId-1038218]##Syntax

[#50638887_pgfId-1038223]## _<h:inputText value=”#\{model.property}”> +
<f:validateBean validationGroups= +
"javax.validation.groups.Default,app.validation.groups.Order"/> +
</h:inputText>_

[#50638887_pgfId-1039518]##or

[#50638887_pgfId-1039532]## _<h:form> +
<f:validateBean> +
<h:inputText value=”#\{model.property}” /> +
<h:selectOneRadio value=”#\{model.radioProperty}” > ...
</h:selectOneRadio> +
_ <!-- other input components here --> +
</f:validateBean> +
</h:form>

====== [#50638887_pgfId-1038240]##Body Content

[#50638887_pgfId-1039549]##Empty in the case when the Bean Validator is
to be registered on a parent component.

[#50638887_pgfId-1039550]##Filled with input components when the Bean
Validator is to be set on all of the ensclosing input components.

[#50638887_pgfId-1038399]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638887_pgfId-1038459]##Name |[#50638887_pgfId-1038461]##Exp
|[#50638887_pgfId-1038463]##Type |[#50638887_pgfId-1038465]##Description
|[#50638887_pgfId-1038467]##binding |[#50638887_pgfId-1038469]##VE
|[#50638887_pgfId-1038471]##ValueExpression
|[#50638887_pgfId-1038473]##A ValueExpression that evaluates to an
object that implements javax.faces.validate.BeanValidator

|[#50638887_pgfId-1038475]##disabled |[#50638887_pgfId-1038477]##VE
|[#50638887_pgfId-1038479]##Boolean |[#50638887_pgfId-1038481]##A flag
which indicates whether this validator, or a default validator with the
id "javax.faces.Bean", should be permitted to be added to this component

|[#50638887_pgfId-1038483]##validationGroups
|[#50638887_pgfId-1038485]##VE |[#50638887_pgfId-1038487]##String
|[#50638887_pgfId-1038489]##A comma-delimited of type-safe validation
groups that are passed to the Bean Validation API when validating the
value
|===

[#50638887_pgfId-1038400]##Constraints

[#50638887_pgfId-1038496]##Must be nested in an EditableValueHolder or
nested in a composite component and have a for attribute. Otherwise, it
simply defines enables or disables the validator as a default for the
branch of the component tree under the parent component and/or sets the
validation group defaults for the branch. No exception is thrown if one
of the first two conditions are not met, unlike other standard
validators.

[#50638887_pgfId-1038503]##Description

[#50638887_pgfId-1039609]##Must use or extend the
_javax.faces.view.facelets.ValidatorHandler_ class

[#50638887_pgfId-1038516]##If not within an EditableValueHolder or
composite component, store the validation groups as defaults for the
current branch of the component tree, but only if the value is a
non-empty string.

[#50638887_pgfId-1038521]##If the disabled attribute is true, the
validator should not be added. In addition, the validatorId, if present,
should be added to an exclusion list on the parent component to prevent
a default validator with the same id from being registered on the
component.

[#50638887_pgfId-1038526]##The createValidator() method must:

[#50638887_pgfId-1038531]##If binding is non-null, create a
ValueExpression by invoking Application.createValueExpression() with
binding as the expression argument, and Validator.class as the
expectedType argument. Use the ValueExpression to obtain a reference to
the Validator instance. If there is no exception thrown, and
ValueExpression.getValue() returned a non-null object that implements
javax.faces.validator.Validator, it must then cast the returned instance
to javax.faces.validator.BeanValidator, configure its properties based
on the specified attributes, and return the configured instance. If
there was an exception thrown, rethrow the exception as a TagException.

[#50638887_pgfId-1065182]##Use the validatorId if the validator instance
could not be created from the binding attribute. Call the
createValidator() method of the Application instance for this
application, passing validator id "javax.faces.Bean". If the binding
attribute was also set, evaluate the expression into a ValueExpression
and store the validator instance by calling setValue() on the
ValueExpression. It must then cast the returned instance to
javax.faces.validator.BeanValidator, configure its properties based on
the specified attributes, and return the configured instance. If there
was an exception thrown, rethrow the exception as a TagException.

===== [#50638887_pgfId-1065184]##[#50638887_19779]##<f:validateRequired>

[#50638887_pgfId-1065185]##Register a RequiredValidator instance on the
parent EditableValueHolder UIComponent or the EditableValueHolder
UIComponent whose client id matches the value of the "for" attribute
when used within a composite component.

[#50638887_pgfId-1065186]##Syntax

[#50638887_pgfId-1065187]##<f:validateRequired/>

====== [#50638887_pgfId-1065188]##Body Content

[#50638887_pgfId-1065189]##empty

[#50638887_pgfId-1065190]## 

[#50638887_pgfId-1065216]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638887_pgfId-1065193]##Name |[#50638887_pgfId-1065195]##Exp
|[#50638887_pgfId-1065197]##Type |[#50638887_pgfId-1065199]##Description
|[#50638887_pgfId-1065201]##binding |[#50638887_pgfId-1065203]##VE
|[#50638887_pgfId-1065205]##ValueExpression
|[#50638887_pgfId-1065207]##A ValueExpression that evaluates to an
object that implements javax.faces.validate.RequiredValidator

|[#50638887_pgfId-1065209]##disabled |[#50638887_pgfId-1065211]##VE
|[#50638887_pgfId-1065213]##Boolean |[#50638887_pgfId-1065215]##A flag
which indicates whether this validator, or a default validator with the
id "javax.faces.Required", should be permitted to be added to this
component
|===

[#50638887_pgfId-1065217]## 

[#50638887_pgfId-1065218]##Constraints

[#50638887_pgfId-1065219]##Must be nested in an EditableValueHolder or
nested in a composite component and have a for attribute (Facelets
only). Otherwise, it simply enables or disables the use of the validator
as a default for the branch of the component tree under the parent. No
exception is thrown if one of the first two conditions are not met,
unlike other standard validators.

[#50638887_pgfId-1065220]## 

[#50638887_pgfId-1065221]##Description

[#50638887_pgfId-1065222]##Must use or extend the
_javax.faces.view.facelets.ValidatorHandler_ class

[#50638887_pgfId-1065223]##If the disabled attribute is true, the
validator should not be added. In addition, the validatorId, if present,
should be added to an exclusion list on the parent component to prevent
a default validator with the same id from being registered on the
component

[#50638887_pgfId-1065224]##The createValidator() method must:

[#50638887_pgfId-1065225]##If binding is non-null, create a
ValueExpression by invoking Application.createValueExpression() with
binding as the expression argument, and Validator.class as the
expectedType argument. Use the ValueExpression to obtain a reference to
the Validator instance. If there is no exception thrown, and
ValueExpression.getValue() returned a non-null object that implements
javax.faces.validator.Validator, it must then cast the returned instance
to javax.faces.validator.RequiredValidator, configure its properties
based on the specified attributes, and return the configured instance.
If there was an exception thrown, rethrow the exception as a
TagException..

[#50638887_pgfId-1065234]##Use the validatorId if the validator instance
could not be created from the binding attribute. Call the
createValidator() method of the Application instance for this
application, passing validator id "javax.faces.Required". If the binding
attribute was also set, evaluate the expression into a ValueExpression
and store the validator instance by calling setValue() on the
ValueExpression. It must then cast the returned instance to
javax.faces.validator.RequiredValidator, configure its properties based
on the specified attributes, and return the configured instance. If
there was an exception thrown, rethrow the exception as a TagException.

===== [#50638887_pgfId-1065236]##<f:validateWholeBean>

[#50638887_pgfId-1065237]##Support multi-field validation by enabling
class-level bean validation on CDI based backing beans.

[#50638887_pgfId-1065238]##Syntax

[#50638887_pgfId-1065239]## _<!-- one or more components validated by
<f:validateBean /> +
precede this tag in the tree, with each one using the same +
validationGroups value and referencing properties on the same +
model object --> +
 +
<f:validateWholeBean value=_ " _#\{model}_ " _ +
validationGroups=_ " _fully.qualified.class.Name_ " _/>_

====== [#50638887_pgfId-1065240]##Body Content

[#50638887_pgfId-1065241]##empty

[#50638887_pgfId-1065242]## 

[#50638887_pgfId-1065268]##Attributes

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638887_pgfId-1065245]##Name |[#50638887_pgfId-1065247]##Exp
|[#50638887_pgfId-1065249]##Type |[#50638887_pgfId-1065251]##Description
|[#50638887_pgfId-1065261]##disabled |[#50638887_pgfId-1065263]##VE
|[#50638887_pgfId-1065265]##Boolean |[#50638887_pgfId-1065267]##A flag
which indicates whether this validator, or a default validator with the
id "javax.faces.Required", should be permitted to be added to this
component

|[#50638887_pgfId-1065740]##validationGroups
|[#50638887_pgfId-1065742]##VE |[#50638887_pgfId-1065744]##String
|[#50638887_pgfId-1065746]##A comma-delimited of type-safe validation
groups that are passed to the Bean Validation API when validating the
value

|[#50638887_pgfId-1065790]##value |[#50638887_pgfId-1065792]##VE
|[#50638887_pgfId-1065794]##Object |[#50638887_pgfId-1065796]##A
ValueExpression referencing the bean to be validated.
|===

[#50638887_pgfId-1065269]## 

[#50638887_pgfId-1065270]##Constraints

[#50638887_pgfId-1065271]##This tag must be placed in the component tree
after all of the fields that are to be included in the multi-field
validation. If this precondition is not met, the results of applying
this tag are unspecified.

[#50638887_pgfId-1065273]##Description

[#50638887_pgfId-1065274]##See the VDLDoc for _<f:validateWholeBean />_
for the normative specification and a usage example.

===== [#50638887_pgfId-1066314]##[#50638887_97665]##<f:websocket>

[#50638887_pgfId-1066315]##This tag registers a websocket push
connection at the client side by rendering the necessary scripts. Push
messages can be sent from server side via _javax.faces.push.PushContext_
interface which is injected into a using class with the
_@javax.faces.push.Push_ CDI qualifier.

======= [#50638887_pgfId-1068190]##

image:JSF-44.gif[image]

<f:websocket> is desgined for push from server to client

image:JSF-44.gif[image]

[#50638887_pgfId-1068177]##Although W3C WebSocket supports two-way
communication, the <f:websocket> push is designed for one-way
communication, from server to client. In case you intend to send some
data from client to server, continue using JSF ajax the usual way. This
has among others the advantage of maintaining the JSF view state, the
HTTP session and, critically, all security constraints on business
service methods.

====== [#50638887_pgfId-1066316]##Syntax

[#50638887_pgfId-1066317]## _<f:websocket [binding=_ " _ValueExpression_
" _] [id=_ " _Literal|ValueExpression_ " _] +
channel=_ " _Literal_ " _[scope=_ " _Literal_ " _] [user=_ "
_Literal|ValueExpression_ " _] +
[onopen=_ " _Literal|ValueExpression_ " _] [onmessage=_ "
_Literal|ValueExpression_ " _] +
[onclose=_ " _Literal|ValueExpression_ " _] [connected=_ "
_Literal|ValueExpression_ " _] +
[rendered=_ " _Literal|ValueExpression_ " _] />_

====== [#50638887_pgfId-1066067]##Body Content

[#50638887_pgfId-1066068]##Empty, or one or more _<f:ajax>_ tags with
the _event_ attribute set to exactly the push message content.

====== [#50638887_pgfId-1066069]##Attributes

[#50638887_pgfId-1066157]##The following required attribute must be set:

======= [#50638887_pgfId-1066072]## 

[#50638887_pgfId-1066080]##Name

[#50638887_pgfId-1066082]##Expr

[#50638887_pgfId-1066084]##Type

[#50638887_pgfId-1066086]##Description

[#50638887_pgfId-1066088]##channel

[#50638887_pgfId-1066090]##String

[#50638887_pgfId-1066092]##String

[#50638887_pgfId-1066094]##The name of the websocket channel. It may not
be an EL expression and it may only contain alphanumeric characters,
hyphens, underscores and periods. All open websockets on the same
channel name will receive the same push notification from the server.

[#50638887_pgfId-1066787]##The following optional attributes are
available:

======= [#50638887_pgfId-1066798]## 

[width="100%",cols="25%,25%,25%,25%",options="header",]
|===
|[#50638887_pgfId-1070470]##Name |[#50638887_pgfId-1070472]##Exp
|[#50638887_pgfId-1070474]##Type |[#50638887_pgfId-1070476]##Description
|[#50638887_pgfId-1070486]##id |[#50638887_pgfId-1070488]##VE
|[#50638887_pgfId-1070490]##String |[#50638887_pgfId-1070492]##Component
identifier of the _UIWebSocket_ component to be created.

|[#50638887_pgfId-1070494]##scope |[#50638887_pgfId-1070496]##String
|[#50638887_pgfId-1070498]##String |[#50638887_pgfId-1070500]##The scope
of the websocket channel. It may not be an EL expression and allowed
values are _application_ , _session_ and _view_ , case insensitive. When
the value is _application_ , then all channels with the same name
throughout the application will receive the same push message. When the
value is _session_ , then only the channels with the same name in the
current user session will receive the same push message. When the value
is _view_ , then only the channel in the current view will receive the
push message. The default scope is _application_ . When the _user_
attribute is specified, then the default scope is _session_ .

|[#50638887_pgfId-1070502]##user |[#50638887_pgfId-1070504]##VE
|[#50638887_pgfId-1070506]##Serializable |[#50638887_pgfId-1070508]##The
user identifier of the websocket channel, so that user-targeted push
messages can be sent. It must implement Serializable and preferably have
low memory footprint. Suggestion: use #\{request.remoteUser} or
#\{someLoggedInUser.id}. All open websockets on the same channel and
user will receive the same push message from the server.

|[#50638887_pgfId-1070518]##onopen |[#50638887_pgfId-1070520]##VE
|[#50638887_pgfId-1070522]##String |[#50638887_pgfId-1070524]##The
JavaScript event handler function that is invoked when the websocket is
opened. The function will be invoked with one argument: the channel
name.

|[#50638887_pgfId-1070526]##onmessage |[#50638887_pgfId-1070528]##VE
|[#50638887_pgfId-1070530]##String |[#50638887_pgfId-1070532]##The
JavaScript event handler function that is invoked when a push message is
received from the server. The function will be invoked with three
arguments: the push message, the channel name and the raw MessageEvent
itself.

|[#50638887_pgfId-1070534]##onclose |[#50638887_pgfId-1070536]##VE
|[#50638887_pgfId-1070538]##String |[#50638887_pgfId-1070540]##The
JavaScript event handler function that is invoked when the websocket is
closed. The function will be invoked with three arguments: the close
reason code, the channel name and the raw CloseEvent itself. Note that
this will also be invoked on errors and that you can inspect the close
reason code if an error occurred and which one (i.e. when the code is
not 1000). See also RFC 6455 section 7.4.1 and
javax.websocket.CloseReason.CloseCodes API for an elaborate list of all
close codes.

|[#50638887_pgfId-1070542]##connected |[#50638887_pgfId-1070544]##VE
|[#50638887_pgfId-1070546]##Boolean |[#50638887_pgfId-1070548]##Whether
to (auto)connect the websocket or not. Defaults to true. It's
interpreted as a JavaScript instruction whether to open or close the
websocket push connection. This attribute is implicitly re-evaluated on
every ajax request by a PreRenderViewEvent listener on the UIViewRoot.
You can also explicitly set it to false and then manually control in
JavaScript by jsf.push.open(clientId) and jsf.push.close(clientId).

|[#50638887_pgfId-1070550]##rendered |[#50638887_pgfId-1070552]##VE
|[#50638887_pgfId-1070554]##Boolean |[#50638887_pgfId-1070556]##Whether
to render the websocket scripts or not. Defaults to true. This attribute
is implicitly re-evaluated on every ajax request by a PreRenderViewEvent
listener on the UIViewRoot. If the value changes to false while the
websocket is already opened, then the websocket will implicitly be
closed.

|[#50638887_pgfId-1070566]##binding |[#50638887_pgfId-1070568]##VE
|[#50638887_pgfId-1070570]##UIComponent
|[#50638887_pgfId-1070572]##Value binding expression to a backing bean
property bound to the component instance for the UIComponent created by
this tag.
|===

====== [#50638887_pgfId-1066160]##Configuration

[#50638887_pgfId-1066161]##First, enable the websocket endpoint using
the context parameter:

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1066169]##<context-param> +
<param-name>javax.faces.ENABLE_WEBSOCKET_ENDPOINT</param-name> +
<param-value>true</param-value> +
</context-param>
|===

[#50638887_pgfId-1070585]##In case your server is configured to run a
WebSocket container on a different TCP port than the HTTP container,
then you can use the optional javax.faces.WEBSOCKET_ENDPOINT_PORT
integer context parameter in web.xml to explicitly specify the port.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1070588]##<context-param> +
<param-name>javax.faces.WEBSOCKET_ENDPOINT_PORT</param-name> +
<param-value>8000</param-value> +
</context-param>
|===

====== [#50638887_pgfId-1070575]##Usage (client)

[#50638887_pgfId-1067586]##Declare <f:websocket> tag in the JSF view
with at least a channel name and an onmessage JavaScript listener
function. The channel name may not be an EL expression and it may only
contain alphanumeric characters, hyphens, underscores and periods.

[#50638887_pgfId-1067588]##Here's an example which refers an existing
JavaScript listener function.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1067658]##<f:websocket channel="someChannel" +
onmessage="someWebsocketListener" /> +
 +
function someWebsocketListener(message, channel, event) \{

[#50638887_pgfId-1067659]## console.log(message);

[#50638887_pgfId-1067660]##}

[#50638887_pgfId-1067598]## 

|===

[#50638887_pgfId-1067600]##Here’s an example which declares an inline
JavaScript listener function.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1067610]##<f:websocket channel="someChannel" +
onmessage="function(m)\{console.log(m);}" />
|===

[#50638887_pgfId-1067768]##The onmessage JavaScript listener function
will be invoked with three arguments:

[#50638887_pgfId-1067785]## message: the push message as JSON object.

[#50638887_pgfId-1067808]##channel: the channel name.

[#50638887_pgfId-1067813]##event: the raw MessageEvent instance.

[#50638887_pgfId-1066199]##When successfully connected, the websocket is
by default open as long as the document is open, and it will
auto-reconnect at increasing intervals when the connection is
closed/aborted as result of e.g. a network error or server restart. It
will not auto-reconnect when the very first connection attempt already
fails. The websocket will be implicitly closed once the document is
unloaded.

====== [#50638887_pgfId-1067889]##Usage (server)

[#50638887_pgfId-1067891]##On the Java programming side, you can inject
a PushContext via @Push annotation on the given channel name in any
CDI/container managed artifact, such as @Named, @WebServlet, wherever
you'd like to send a push message and then invoke
PushContext.send(Object) with any Java object representing the push
message.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1067997]##@Inject @Push +
private PushContext someChannel; +
 +
public void sendMessage(Object message) \{ +
someChannel.send(message); +
}
|===

[#50638887_pgfId-1066207]##By default the name of the channel is taken
from the name of the variable into which injection takes place.

[#50638887_pgfId-1068080]##The channel name can be optionally specified
via the channel attribute. The example below injects the push context
for channel name foo into a variable named bar.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068079]##@Inject @Push(channel="foo") +
private PushContext bar;
|===

[#50638887_pgfId-1068104]##The message object will be encoded as JSON
and be delivered as message argument of the onmessage JavaScript
listener function associated with the channel name. It can be a plain
vanilla String, but it can also be a collection, map and even a Java
bean.

====== [#50638887_pgfId-1068069]##Scopes and Users

[#50638887_pgfId-1068300]##By default the websocket is application
scoped, i.e. any view/session throughout the web application having the
same websocket channel open will receive the same push message. The push
message can be sent by all users and the application itself.

[#50638887_pgfId-1068302]##The optional scope attribute can be set to
session to restrict the push messages to all views in the current user
session only. The push message can only be sent by the user itself and
not by the application.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1066214]##<f:websocket channel="someChannel"
scope="session" ... />
|===

[#50638887_pgfId-1066216]##The scope attribute can also be set to view
to restrict the push messages to the current view only. The push message
will not show up in other views in the same session even if it's the
same URL. The push message can only be sent by the user itself and not
by the application..

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068360]##<f:websocket channel="someChannel"
scope="view" ... />
|===

[#50638887_pgfId-1068354]##The scope attribute may not be an EL
expression and allowed values are _application_ , _session_ and _view_ ,
case insensitive.

[#50638887_pgfId-1068409]##Additionally, the optional user attribute can
be set to the unique identifier of the logged-in user, usually the login
name or the user ID. This way the push message can be targeted to a
specific user and can also be sent by other users and the application
itself. The value of the user attribute must at least implement
Serializable and have a low memory footprint, so an entire user entity
is not recommended.

[#50638887_pgfId-1068405]##E.g. when you're using container managed
authentication or a related framework/library:.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068437]##<f:websocket channel="someChannel" +
user="#\{request.remoteUser}" ... />
|===

[#50638887_pgfId-1066217]##Or when you have a custom user entity
accessible via EL, such as as #\{someLoggedInUser} which has an id
property representing its identifier:.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068547]##<f:websocket channel="someChannel" +
user="#\{someLoggedInUser.id}" ... />
|===

[#50638887_pgfId-1068612]##When the user attribute is specified, then
the scope defaults to session and cannot be set to application.

[#50638887_pgfId-1068483]##On the server side, the push message can be
targeted to the user specified in the user attribute via
PushContext.send(Object, Serializable). The push message can be sent by
all users and the application itself..

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068704]##@Inject @Push +
private PushContext someChannel; +
 +
public void sendMessage(Object message, User recipientUser) \{ +
Long recipientUserId = recipientUser.getId(); +
someChannel.send(message, recipientUserId); +
}
|===

[#50638887_pgfId-1068604]##Multiple users can be targeted by passing a
Collection holding user identifiers to PushContext.send(Object,
Collection)..

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068736]##public void sendMessage(Object message,
Group recipientGroup) \{ +
Collection<Long> recipientUserIds = +
recipientGroup.getUserIds(); +
someChannel.send(message, recipientUserIds); +
}
|===

====== [#50638887_pgfId-1068606]##Conditionally Connecting

[#50638887_pgfId-1068608]##You can use the optional connected attribute
to control whether to auto-connect the websocket or not..

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068856]##<f:websocket ...
connected="#\{bean.pushable}" />
|===

[#50638887_pgfId-1068485]##The _connected_ attribute defaults to true
and is interpreted as a JavaScript instruction whether to open or close
the websocket push connection. If the value is an EL expression and it
becomes false during an ajax request, then the push connection will
explicitly be closed during _oncomplete_ of that ajax request.

[#50638887_pgfId-1066218]##You can also explicitly set it to false and
manually open the push connection in client side by invoking
jsf.push.open(clientId), passing the component's client ID..

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1068983]##<h:commandButton ...
onclick="jsf.push.open('foo')"> +
<f:ajax ... /> +
</h:commandButton> +
<f:websocket id="foo" channel="bar" scope="view" ... +
connected="false" />
|===

[#50638887_pgfId-1068973]##In case you intend to have an one-time push
and don’t expect more messages, you can optionally explicitly close the
push connection from client side by invoking jsf.push.close(clientId),
passing the component’s client ID. For example, in the onmessage
JavaScript listener function as below:.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1069054]##function someWebsocketListener(message) \{ +
// ... +
jsf.push.close('foo'); +
}
|===

====== [#50638887_pgfId-1066224]##Events (client)

[#50638887_pgfId-1066233]##The optional onopen JavaScript listener
function can be used to listen on open of a websocket in client side.
This will be invoked on the very first connection attempt, regardless of
whether it will be successful or not. This will not be invoked when the
websocket auto-reconnects a broken connection after the first successful
connection.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1069173]##<f:websocket ...
onopen="websocketOpenListener" /> +
 +
function websocketOpenListener(channel) \{ +
// ... +
}
|===

[#50638887_pgfId-1066242]##The _onopen_ JavaScript listener function
will be invoked with one argument:

[#50638887_pgfId-1069225]##channel: the channel name, useful in case you
intend to have a global listener.

[#50638887_pgfId-1069202]##The optional onclose JavaScript listener
function can be used to listen on a normal or abnormal close of a
websocket. This will be invoked when the very first connection attempt
fails, or the server has returned close reason code 1000 (normal
closure) or 1008 (policy violated), or the maximum reconnect attempts
has been exceeded. This will not be invoked when the websocket can make
an auto-reconnect attempt on a broken connection after the first
successful connection

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1069370]##<f:websocket ...
onclose="websocketCloseListener" /> +
 +
function websocketCloseListener(code, channel, event) \{ +
if (code == -1) \{ +
// Websockets not supported by client. +
} else if (code == 1000) \{ +
// Normal close (as result of expired session or view). +
} else \{ +
// Abnormal close reason (as result of an error). +
} +
}
|===

[#50638887_pgfId-1069451]##The _onclose_ JavaScript listener function
will be invoked with three arguments:

[#50638887_pgfId-1069452]##code: the close reason code as integer. If
this is -1, then the websocket is simply not supported by the client. If
this is 1000, then it was normally closed. Otherwise, if this is not
1000, then there may be an error. See also RFC 6455 section 7.4.1 and
javax.websocket.CloseReason.CloseCodes API for an elaborate list of all
close codes.

[#50638887_pgfId-1069477]##channel: the channel name.

[#50638887_pgfId-1069482]##event: the raw CloseEvent instance.

[#50638887_pgfId-1069445]##When a session or view scoped socket is
automatically closed with close reason code 1000 by the server (and thus
not manually by the client via jsf.push.close(clientId)), then it means
that the session or view has expired.

====== [#50638887_pgfId-1069447]##Events (server)

[#50638887_pgfId-1069520]##When a session or view scoped socket is
automatically closed with close reason code 1000 by the server (and thus
not manually by the client via jsf.push.close(clientId)), then it means
that the session or view has expired.

[width="100%",cols="100%",]
|===
a|
[#50638887_pgfId-1069564]##@ApplicationScoped +
public class WebsocketObserver \{ +
 +
public void onOpen(@Observes @Opened WebsocketEvent event) \{ +
String channel = event.getChannel(); +
// Returns <f:websocket channel>. +
Long userId = event.getUser(); +
// Returns <f:websocket user>, if any. +
// ... +
} +
 +
public void onClose(@Observes @Closed WebsocketEvent event) \{ +
String channel = event.getChannel(); +
// Returns <f:websocket channel>. +
Long userId = event.getUser();

[#50638887_pgfId-1069652]## // Returns <f:websocket user>, if any. +
CloseCode code = event.getCloseCode(); +
// Returns close reason code. +
// ... +
}

|===

====== [#50638887_pgfId-1066058]##Security Considerations

[#50638887_pgfId-1069746]##If the socket is declared in a page which is
only restricted to logged-in users with a specific role, then you may
want to add the URL of the push handshake request URL to the set of
restricted URLs.

[#50638887_pgfId-1069747]##

[#50638887_pgfId-1069719]##The push handshake request URL is composed of
the URI prefix /javax.faces.push/, followed by channel name. In the
example of container managed security which has already restricted an
example page /user/foo.xhtml to logged-in users with the example role
USER on the example URL pattern /user/* in web.xml like below,

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1069723]##<security-constraint> +
<web-resource-collection> +
<web-resource-name>Restrict access to role USER. +
</web-resource-name> +
<url-pattern>/user/*</url-pattern> +
</web-resource-collection> +
<auth-constraint> +
<role-name>USER</role-name> +
</auth-constraint> +
</security-constraint>
|===

[#50638887_pgfId-1069715]##and the page /user/foo.xhtml in turn contains
a <f:websocket channel="foo">, then you need to add a restriction on
push handshake request URL pattern of _/javax.faces.push/foo_ as shown
next.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1069906]##<security-constraint> +
<web-resource-collection> +
<web-resource-name>Restrict access to role USER. +
</web-resource-name> +
<url-pattern>/user/*</url-pattern> +
<url-pattern>/javax.faces.push/foo</url-pattern> +
</web-resource-collection> +
<auth-constraint> +
<role-name>USER</role-name> +
</auth-constraint> +
</security-constraint>
|===

[#50638887_pgfId-1069900]##As extra security, particularly for those
public channels which can’t be restricted by security constraints, the
<f:websocket> will register all so previously declared channels in the
current HTTP session, and any incoming websocket open request will be
checked whether they match these channels in the current HTTP session.
In case the channel is unknown (e.g. randomly guessed or spoofed by end
users or manually reconnected after the session is expired), then the
websocket will immediately be closed with close reason code
CloseCodes.VIOLATED_POLICY (1008). Also, when the HTTP session gets
destroyed, all session and view scoped channels which are still open
will explicitly be closed from server side with close reason code
CloseCodes.NORMAL_CLOSURE (1000). Only application scoped sockets remain
open and are still reachable from server end even when the session or
view associated with the page in client side is expired.

====== [#50638887_pgfId-1070053]##Ajax Support

[#50638887_pgfId-1070070]##In case you’d like to perform complex UI
updates depending on the received push message, then you can nest
<f:ajax> inside <f:websocket>. Here’s an example:

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1070106]##<h:panelGroup id="foo"> +
... (some complex UI here) ... +
</h:panelGroup> +
 +
<h:form> +
<f:websocket channel="someChannel" scope="view"> +
<f:ajax event="someEvent" +
listener="#\{bean.pushed}" render=":foo" /> +
</f:websocket> +
</h:form>
|===

[#50638887_pgfId-1070100]##Here, the push message simply represents the
ajax event name. You can use any custom event name.

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1070206]##someChannel.send("someEvent");
|===

[#50638887_pgfId-1070198]##An alternative is to combine <f:websocket>
with <h:commandScript>. The <f:websocket onmessage> can reference
exactly the <h:commandScript name>. For example,

[width="100%",cols="100%",]
|===
|[#50638887_pgfId-1070347]##<h:panelGroup id="foo"> +
... (some complex UI here) ... +
</h:panelGroup> +
<f:websocket channel="someChannel" scope="view" +
onmessage="pushed" /> +
<h:form> +
<h:commandScript name="pushed" +
action="#\{bean.pushed}" render=":foo" /> +
</h:form>
|===

[#50638887_pgfId-1070200]##If you pass a Map<String,V> or a JavaBean as
push message object, then all entries/properties will transparently be
available as request parameters in the command script method
#\{bean.pushed}.

==== [#50638887_pgfId-1065228]##[#50638887_29058]##Standard HTML RenderKit Tag Library

[#50638887_pgfId-1070671]##This tag library must be equivalent to the
one specified in link:JSF.htm#50638860_66883[See Standard HTML RenderKit
Tag Library].

[#50638887_pgfId-1070930]##The following additional renderers are added
to the ones defined in the other section.

[#50638887_pgfId-1071018]## 

======= [#50638887_pgfId-1070672]##Renderers Unique to Facelets

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50638887_pgfId-1070684]##getComponentType()
|[#50638887_pgfId-1070686]##getRendererType()
|[#50638887_pgfId-1070688]##custom action name
|[#50638887_pgfId-1070690]##javax.faces.Command
|[#50638887_pgfId-1070695]##javax.faces.Script
|[#50638887_pgfId-1070697]##commandScript

|[#50638887_pgfId-1070699]##javax.faces.Script
|[#50638887_pgfId-1070701]##javax.faces.Websocket
|[#50638887_pgfId-1070703]##does not apply
|===

==== [#50638887_pgfId-1070676]##[#50638887_marker-1070673]##[#50638887_marker-1070674]##[#50638887_Facelet Templating Tag Library]##Facelet Templating Tag Library

[#50638887_pgfId-1037083]##This tag library is the specified version of
the ui: tag library found in pre JSF 2.0 Facelets. The specification for
this library can be found in the VDLDocs for the _ui:_ library.

==== [#50638887_pgfId-1037087]##[#50638887_36658]##Composite Component Tag Library

[#50638887_pgfId-1037091]##This tag library is used to declare composite
components. The specification for this tag library can be found in the
VDLDocs for the _composite:_ library.

==== [#50638887_pgfId-1037139]##[#50638887_84284]##JSTL Core and Function Tag Libraries

[#50638887_pgfId-1037146]##Facelets exposes a subset of the JSTL Core
tag library and the entirety of the JSTL Function tag library. Please
see the VDLDocs for the JSTL Core and JSTL Functions tag libraries for
the normative specification.

=== [#50638887_pgfId-1036321]##

image:JSF-43.gif[image]

[#50638887_60948]##Assertions relating to the construction of the view
hierarchy

[#50638887_pgfId-1036334]##[P1-start processListenerForAnnotation] When
the VDL calls for the creation of a _UIComponent_ instance, after
calling _Application.createComponent()_ to instantiate the component
instance, and after calling _setRendererType()_ on the newly
instantiated component instance, the following action must be taken.

[#50638887_pgfId-1036353]##Obtain the _Renderer_ for this component. If
no _Renderer_ is present, ignore the following steps.

[#50638887_pgfId-1036372]##Call _getClass()_ on the _Renderer_ instance
and inspect if the _ListenerFor_ annotation is present. If so, inspect
if the _Renderer_ instance implements _ComponentSystemEventListener_ .
If neither of these conditions are _true_ , ignore the following steps.

[#50638887_pgfId-1036370]##Obtain the value of the _systemEventClass()_
property of the _ListenerFor_ annotation on the _Renderer_ instance.

[#50638887_pgfId-1036381]##Call _subscribeToEvent()_ on the
_UIComponent_ instance from which the _Renderer_ instance was obtained,
using the _systemEventClass_ from the annotation as the second argument,
and the _Renderer_ instance as the third argument.

{empty}[#50638887_pgfId-1036352]##[P1-end]

[#50638850_pgfId-1049587]## 

[#50638850_pgfId-1049589]##[#50638850_28467]## 

== [#50638850_pgfId-1031520]##

image:JSF-45.gif[image]

[#50638850_25623]##Using JSF in Web Applications

image:JSF-46.gif[image]

[#50638850_pgfId-1031521]##This specification provides JSF implementors
significant freedom to differentiate themselves through innovative
implementation techniques, as well as value-added features. However, to
ensure that web applications based on JSF can be executed unchanged
across different JSF implementations, the following additional
requirements, defining how a JSF-based web application is assembled and
configured, must be supported by all JSF implementations.

=== [#50638850_pgfId-1031522]##

image:JSF-47.gif[image]

Web Application Deployment Descriptor

[#50638850_pgfId-1031523]##JSF-based applications are _web applications_
that conform to the requirements of the _Java Servlet Specification_
(version 2.3 or later), and also use the facilities defined in this
specification. Conforming web applications are packaged in a _web
application archive_ (WAR), with a well-defined internal directory
structure. A key element of a WAR is the _web application deployment
descriptor_ , an XML document that describes the configuration of the
resources in this web application. This document is included in the WAR
file itself, at resource path _/WEB-INF/web.xml_ .

[#50638850_pgfId-1031524]##Portable JSF-based web applications must
include the following configuration elements, in the appropriate
portions of the web application deployment descriptor. Element values
that are rendered in italics __ represent values that the application
developer is free to choose. Element values rendered in bold represent
values that must be utilized exactly as shown.

[#50638850_pgfId-1031525]##Executing the request processing lifecycle
via other mechanisms is also allowed (for example, an MVC-based
application framework can incorporate calling the correct phase
implementations in the correct order); however, all JSF implementations
must support the functionality described in this chapter to ensure
application portability.

==== [#50638850_pgfId-1031527]##[#50638850_16379]##Servlet Definition

[#50638850_pgfId-1031533]##JSF implementations must provide request
processing lifecycle services through a standard servlet, defined by
this specification. [P1-start-servlet]This servlet must be defined, in
the deployment descriptor of an application that wishes to employ this
portable mechanism, as follows:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1031536]##<servlet>

[#50638850_pgfId-1031537]## <servlet-name> faces-servlet-name
</servlet-name>

[#50638850_pgfId-1031538]## <servlet-class>

[#50638850_pgfId-1031539]## _javax.faces.webapp.FacesServlet_

[#50638850_pgfId-1031540]## </servlet-class>

[#50638850_pgfId-1031541]##</servlet>

|===

{empty}[#50638850_pgfId-1031563]##The servlet name, denoted as
_faces-servlet-name_ above, may be any desired value; however, the same
value must be used in the servlet mapping (see
link:JSF.htm#50638850_63553[See Servlet Mapping]).[P1-end]

[#50638850_pgfId-1031564]##In addition to _FacesServlet_ , JSF
implementations may support other ways to invoke the JavaServer Faces
request processing lifecycle, but applications that rely on these
mechanisms will not be portable.

==== [#50638850_pgfId-1031566]##[#50638850_63553]##Servlet Mapping

[#50638850_pgfId-1031603]##All requests to a web application are mapped
to a particular servlet based on matching a URL pattern (as defined in
the _Java Servlet Specification_ ) against the portion of the request
URL after the context path that selected this web application.
[P1-start-mapping]JSF implementations must support web application that
define a _<servlet-mapping>_ that maps any valid _url-pattern_ to the
_FacesServlet_ . [P1-end]Prefix or extension mapping may be used. When
using prefix mapping, the following mapping is recommended, but not
required:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1031606]##<servlet-mapping>

[#50638850_pgfId-1031607]## <servlet-name> faces-servlet-name
</servlet-name>

[#50638850_pgfId-1031608]## <url-pattern>/faces/*</url-pattern>

[#50638850_pgfId-1031609]##</servlet-mapping>

|===

[#50638850_pgfId-1031616]##When using extension mapping the following
mapping is recommended, but not required:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1031612]##<servlet-mapping>

[#50638850_pgfId-1031613]## <servlet-name> faces-servlet-name
</servlet-name>

[#50638850_pgfId-1031614]## <url-pattern>*.faces</url-pattern>

[#50638850_pgfId-1031615]##</servlet-mapping>

|===

[#50638850_pgfId-1031617]##In addition to _FacesServlet_ , JSF
implementations may support other ways to invoke the JavaServer Faces
request processing lifecycle, but applications that rely on these
mechanisms will not be portable.

==== [#50638850_pgfId-1031619]##[#50638850_59981]##Application Configuration Parameters

[#50638850_pgfId-1031638]##Servlet containers support application
configuration parameters that may be customized by including
_<context-param>_ elements in the web application deployment descriptor.
[P1-start-configParams]All JSF implementations are required to support
the following application configuration parameter names:

[#50638850_pgfId-1050794]##
_javax.faces.ALWAYS_PERFORM_VALIDATION_WHEN_REQUIRED_IS_TRUE_ -- See the
javadocs for the constant
_javax.faces.component.UIInput.ALWAYS_PERFORM_VALIDATION_WHEN_REQUIRED_IS_TRUE_
for the specification of this feature.

[#50638850_pgfId-1035337]## _javax.faces.CLIENT_WINDOW_MODE_ -- The
context-param that controls the operation of the _ClientWindow_ feature.
See the javadocs for the constant
_javax.faces.lifecycle.ClientWindow.CLIENT_WINDOW_MODE_PARAM_NAME_ for
the specification of this feature.

[#50638850_pgfId-1044383]## _javax.faces.CONFIG_FILES_ --
Comma-delimited list of context-relative resource paths under which the
JSF implementation will look for application configuration resources
(see link:JSF.htm#50638850_83984[See Application Configuration Resource
Format]), before loading a configuration resource named “
_/WEB-INF/faces-config.xml_ ” (if such a resource exists). If “
_/WEB-INF/faces-config.xml_ ” is present in the list, it must be
ignored.

[#50638850_pgfId-1031639]##
_javax.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE_ --
If this param is set, and calling _toLowerCase().equals("true")_ on a
_String_ representation of its value returns _true_ ,
_Application.createConverter()_ must guarantee that the default for the
timezone of all _javax.faces.convert.DateTimeConverter_ instances must
be equal to _TimeZone.getDefault()_ instead of “GMT”.

[#50638850_pgfId-1035344]## _javax.faces.DEFAULT_SUFFIX_ -- Allow the
web application to define an alternate suffix for JSP pages containing
JSF content. See the javadocs for the symbolic constant
_ViewHandler.DEFAULT_SUFFIX_PARAM_NAME_ for the complete specification.
__

[#50638850_pgfId-1035354]##
_javax.faces.DISABLE_FACELET_JSF_VIEWHANDLER_ -- If this param is set,
and calling _toLowerCase().equals("true")_ on a _String_ representation
of its value returns _true_ , the default _ViewHandler_ must behave as
specified in the latest 1.2 version of this specification. Any behavior
specified in link:JSF.htm#50638861_61706[See Default
ViewDeclarationLanguage Implementation] and implemented in the default
_ViewHandler_ that pertains to handling requests for pages authored in
the JavaServer Faces View Declaration Language must not be executed by
the runtime. +
For backward compatibility with previous versions of Facelets, the value
_DISABLE_FACELET_JSF_VIEWHANDLER_ must be supported.

[#50638850_pgfId-1049594]## _javax.faces.DISABLE_FACESSERVLET_TO_XHTML
--_ If this param is set, and calling _toLowerCase().equals("true")_ on
a _String_ representation of its value returns _true_ , the default
mapping of the _FacesServlet_ to _*.xhtml_ must not take effect.

[#50638850_pgfId-1035451]## _javax.faces.FACELETS_LIBRARIES_ -- If this
param is set, the runtime must interpret it as a semicolon (;) separated
list of paths, starting with “/” (without the quotes). The runtime must
interpret each entry in the list as a path relative to the web
application root and interpret the file found at that path as a facelet
tag library, conforming to the facelet taglibrary schema and expose the
tags therein according to link:JSF.htm#50638887_98019[See Facelet Tag
Library mechanism]. The runtime must also consider the
_facelets.LIBRARIES_ param name as an alias to this param name for
backwards compatibility with existing facelets tag libraries.

[#50638850_pgfId-1035500]## _javax.faces.FACELETS_BUFFER_SIZE_ -- The
buffer size to set on the response when the _ResponseWriter_ is
generated. By default the value is 1024. A value of -1 will not assign a
buffer size on the response. This should be increased if you are using
development mode in order to guarantee that the response isn't partially
rendered when an error is generated. The runtime must also consider the
_facelets.BUFFER_SIZE_ param name as an alias to this param name for
backwards compatibility with existing facelets tag libraries.

[#50638850_pgfId-1035458]## _javax.faces.FACELETS_DECORATORS_ -- A
semicolon (;) delimitted list of class names of type
_javax.faces.view.facelets.TagDecorator_ , with a no-argument
constructor. These decorators will be loaded when the first request for
a Facelets VDL view hits the _ViewHandler_ for page compilation.The
runtime must also consider the _facelets.DECORATORS_ param name as an
alias to this param name for backwards compatibility with existing
facelets tag libraries.

[#50638850_pgfId-1035479]## _javax.faces.FACELETS_REFRESH_PERIOD_ --
When a page is requested, what interval in seconds should the compiler
check for changes. If you don't want the compiler to check for changes
once the page is compiled, then use a value of -1. Setting a low refresh
period helps during development to be able to edit pages in a running
application.The runtime must also consider the _facelets.REFRESH_PERIOD_
param name as an alias to this param name for backwards compatibility
with existing facelets tag libraries.

[#50638850_pgfId-1035742]## _javax.faces.FACELETS_RESOURCE_RESOLVER_ --
If this param is set, the runtime must interpret its value as a fully
qualified classname of a java class that extends
_javax.faces.view.facelets.ResourceResolver_ and has a zero argument
public constructor or a one argument public constructor where the type
of the argument is _ResourceResolver_ . If this param is set and its
value does not conform to those requirements, the runtime must log a
message and continue. If it does conform to these requirements and has a
one-argument constructor, the default _ResourceResolver_ must be passed
to the constructor. If it has a zero argument constructor it is invoked
directly. In either case, the new _ResourceResolver_ replaces the old
one. The runtime must also consider the _facelets.RESOURCE_RESOLVER_
param name as an alias to this param name for backwards compatibility
with existing facelets tag libraries.

[#50638850_pgfId-1035743]##Related to this param is the corresponding
annotation, _javax.faces.view.facelets.FaceletsResourceResolver_ . The
presence of this annotation must be ignored if the corresponding param
has been specified. If present, this annotation must be attached to a
class that extends _javax.faces.view.facelets.ResourceResolver_ . If
more than one class in the application has this annotation, an
informative error message with logging level SEVERE must be logged
indicating this case. Exactly one of the classes with the annotation
must be taken to be the _ResourceResolver_ for the application and any
other classes with the annotation must be ignored. See
link:JSF.htm#50638850_91955[See Ordering of Artifacts] for the means to
put application configuration resources in order such that the chosen
class can be defined. The same rules regarding decoration of the
instance as listed above must apply to the annotated class.

[#50638850_pgfId-1035459]## _javax.faces.FACELETS_SKIP_COMMENTS_ -- If
this param is set, and calling _toLowerCase().equals("true")_ on a
_String_ representation of its value returns _true_ , the runtime must
ensure that any XML comments in the Facelets source page are not
delivered to the client. The runtime must also consider the
_facelets.SKIP_COMMENTS_ param name as an alias to this param name for
backwards compatibility with existing facelets tag libraries.

[#50638850_pgfId-1035367]## _javax.faces.FACELETS_SUFFIX_ -- Allow the
web application to define an alternate suffix for Facelet based XHTML
pages containing JSF content. See the javadocs for the symbolic constant
_ViewHandler.FACELETS_SUFFIX_PARAM_NAME_ for the complete specification.

[#50638850_pgfId-1035374]## _javax.faces.FACELETS_VIEW_MAPPINGS_ -- If
this param is set, the runtime must interpret it as a semicolon (;)
separated list of strings that is used to forcibly declare that certain
pages in the application must be interpreted as using Facelets,
regardless of their extension. The runtime must also consider the
_facelets.VIEW_MAPPINGS_ param name as an alias to this param name for
backwards compatibility with existing facelets applications. See the
javadocs for the symbolic constant
_ViewHandler.FACELETS_VIEW_MAPPINGS_PARAM_NAME_ for the complete
specification.

[#50638850_pgfId-1035381]## _javax.faces.FULL_STATE_SAVING_VIEW_IDS_ --
The runtime must interpret the value of this parameter as a comma
separated list of view IDs, each of which must have their state saved
using the state saving mechanism specified in JSF 1.2.

[#50638850_pgfId-1034033]##
_javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL_ -- If this
param is set, and calling _toLowerCase().equals("true")_ on a _String_
representation of its value returns _true_ , any implementation of
_UIInput.validate()_ must take the following additional action.

[#50638850_pgfId-1035418]##If the
_javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL_ context
parameter value is _true_ (ignoring case), and UIInput.
_getSubmittedValue()_ returns a zero-length _String_ call
_UIInput.setSubmittedValue(null)_ and continue processing using null as
the current submitted value

[#50638850_pgfId-1035388]## _javax.faces.LIFECYCLE_ID_ -- Lifecycle
identifier of the _Lifecycle_ instance to be used when processing JSF
requests for this web application. If not specified, the JSF default
instance, identified by _LifecycleFactory.DEFAULT_LIFECYCLE_ , must be
used.

[#50638850_pgfId-1035389]## _javax.faces.PARTIAL_STATE_SAVING_ --The
ServletContext init parameter consulted by the runtime to determine if
the partial state saving mechanism should be used. +
If undefined, the runtime must determine the version level of the
application.

[#50638850_pgfId-1035390]##For applications versioned at 1.2 and under,
the runtime must not use the partial state saving mechanism.

[#50638850_pgfId-1035391]##For applications versioned at 2.0 and above,
the runtime must use the partial state saving mechanism.

[#50638850_pgfId-1035401]##If this parameter is defined, and the
application is versioned at 1.2 and under, the runtime must not use the
partial state saving mechanism. Otherwise, If this param is defined, and
calling toLowerCase().equals("true") on a _String_ representation of its
value returns true, the runtime must use partial state mechanism.
Otherwise the partial state saving mechanism must not be used.

[#50638850_pgfId-1031644]## _javax.faces.PROJECT_STAGE_ -- A human
readable string describing where this particular JSF application is in
the software development lifecycle. Valid values are “ _Development_ ”,
“ _UnitTest_ ”, “ _SystemTest_ ”, or “ _Production_ ”, corresponding to
the enum constants of the class _javax.faces.application.ProjectStage_ .
It is also possible to set this value via JNDI. See the javadocs for
_Application.getProjectStage()._

[#50638850_pgfId-1035587]## _javax.faces.SEPARATOR_CHAR_ --The context
param that allows the character used to separate segments in a
_UIComponent_ clientId to be set on a per-application basis.

[#50638850_pgfId-1036755]## _javax.faces.SERIALIZE_SERVER_STATE_ --If
this param is set, and calling _toLowerCase().equals("true")_ on a
_String_ representation of its value returns _true_ , and the
_javax.faces.STATE_SAVING_METHOD_ is set to “server” (as indicated
below), the server state must be guaranteed to be Serializable such that
the aggregate state implements _java.io.Serializable_ . The intent of
this parameter is to ensure that the act of writing out the state to an
_ObjectOutputStream_ would not throw a _NotSerializableException_ , but
the runtime is not required verify this before saving the state.

[#50638850_pgfId-1031663]## _javax.faces.STATE_SAVING_METHOD_ -- The
location where state information is saved. Valid values are “server”
(typically saved in _HttpSession_ ) and “client (typically saved as a
hidden field in the subsequent form submit). If not specified, the
default value “server” must be used. When examining the parameter value,
the runtime must ignore case.

[#50638850_pgfId-1035044]## _javax.faces.VALIDATE_EMPTY_FIELDS_ -- If
this param is set, and calling _toLowerCase().equals("true")_ on a
_String_ representation of its value returns _true_ , all submitted
fields will be validated. This is necessary to allow the model validator
to decide whether _null_ or empty values are allowable in the current
application. If the value is _false_ , _null_ or empty values will not
be passed to the validators. If the value is the string _“auto”_ , the
runtime must check if JSR-303 Beans Validation is present in the current
environment. If so, the runtime must proceed as if the value _“true”_
had been specified. If JSR-303 Beans Validation is not present in the
current environment, the runtime most proceed as if the value _“false”_
had been specified. If the param is not set, the system must behave as
if the param was set with the value _“auto”_ .

[#50638850_pgfId-1035296]##
_javax.faces.validator.DISABLE_DEFAULT_BEAN_VALIDATOR_ -- If this param
is set, and calling _toLowerCase().equals("true")_ on a _String_
representation of its value returns _true_ , the runtime must not
automatically add the validator with validator-id equal to the value of
the symbolic constant _javax.faces.validator._ VALIDATOR_ID to the list
of default validators. Setting this parameter to _true_ will have the
effect of disabling the automatic installation of Bean Validation to
every input component in every view in the application, though manual
installation is still possible.

[#50638850_pgfId-1050620]##
_javax.faces.validator.ENABLE_VALIDATE_WHOLE_BEAN_ -- If this param is
set, and calling _toLowerCase().equals("true")_ on a _String_
representation of its value returns _true_ , the _<f:validateWholeBean
/>_ __ tag is enabled. If not set or set to false, this tag is a no-op.

[#50638850_pgfId-1050251]##
_javax.faces.VIEWROOT_PHASE_LISTENER_QUEUES_EXCEPTIONS_ -- If this param
is set, and calling _toLowerCase().equals("true")_ on a _String_
representation of its value returns _true_ , exceptions thrown by
_PhaseListeners_ installed on the _UIViewRoot_ are queued to the
_ExceptionHandler_ instead of being logged and swallowed. If this param
is not set or is set to false, the old behavior prevails.

[#50638850_pgfId-1050806]## _javax.faces.ENABLE_WEBSOCKET_ENDPOINT_ --
Enable WebSocket support. See the javadoc for
_javax.faces.component.UIWebsocket_ .

[#50638850_pgfId-1035772]## _javax.faces.WEBAPP_RESOURCES_DIRECTORY_

[#50638850_pgfId-1035813]##If this param is set, the runtime must
interpret its value as a path, relative to the web app root, where
resources are to be located. This param value must not start with a “/”,
though it may contain “/” characters. If no such param exists, or its
value is invalid, the value “resources”, without the quotes, must be
used by the runtime as the value.

[#50638850_pgfId-1040004]## _javax.faces.WEBAPP_CONTRACTS_DIRECTORY_

[#50638850_pgfId-1040005]##If this param is set, the runtime must
interpret its value as a path, relative to the web app root, where
resource library contracts are to be located. This param value must not
start with a “/”, though it may contain “/” characters. If no such param
exists, or its value is invalid, the value “contracts”, without the
quotes, must be used by the runtime as the value.

{empty}[#50638850_pgfId-1035053]##[P1-end]

[#50638850_pgfId-1035046]##JSF implementations may choose to support
additional configuration parameters, as well as additional mechanisms to
customize the JSF implementation; however, applications that rely on
these facilities will not be portable to other JSF implementations.

=== [#50638850_pgfId-1031665]##

image:JSF-47.gif[image]

Included Classes and Resources

[#50638850_pgfId-1031666]##A JSF-based application will rely on a
combination of APIs, and corresponding implementation classes and
resources, in addition to its own classes and resources. The web
application archive structure identifies two standard locations for
classes and resources that will be automatically made available when a
web application is deployed:

[#50638850_pgfId-1031667]## _/WEB-INF/classes_ -- A directory containing
unpacked class and resource files.

[#50638850_pgfId-1031668]## _/WEB-INF/lib_ -- A directory containing JAR
files that themselves contain class files and resources.

[#50638850_pgfId-1031669]##In addition, servlet and portlet containers
typically provide mechanisms to share classes and resources across one
or more web applications, without requiring them to be included inside
the web application itself.

[#50638850_pgfId-1031670]##The following sections describe how various
subsets of the required classes and resources should be packaged, and
how they should be made available.

==== [#50638850_pgfId-1031671]##Application-Specific Classes and Resources

[#50638850_pgfId-1031672]##Application-specific classes and resources
should be included in _/WEB-INF/classes_ or _/WEB-INF/lib_ , so that
they are automatically made available upon application deployment.

==== [#50638850_pgfId-1031673]##[#50638850_30023]##Servlet and JSP API Classes (javax.servlet.*)

[#50638850_pgfId-1020980]##These classes will typically be made
available to all web applications using the shared class facilities of
the servlet container. Therefore, these classes should not be included
inside the web application archive.

==== [#50638850_pgfId-1031692]##JSP Standard Tag Library (JSTL) API Classes (javax.servlet.jsp.jstl.*)

[#50638850_pgfId-1032837]##These classes will typically be made
available to all web applications using the shared class facilities of
the servlet container. Therefore, these classes should not be included
inside the web application archive.

==== [#50638850_pgfId-1031698]##JSP Standard Tag Library (JSTL) Implementation Classes

[#50638850_pgfId-1032842]##These classes will typically be made
available to all web applications using the shared class facilities of
the servlet container. Therefore, these classes should not be included
inside the web application archive.

==== [#50638850_pgfId-1031704]##JavaServer Faces API Classes (javax.faces.*)

[#50638850_pgfId-1032857]##These classes will typically be made
available to all web applications using the shared class facilities of
the servlet container. Therefore, these classes should not be included
inside the web application archive.

==== [#50638850_pgfId-1032853]##[#50638850_93289]##JavaServer Faces Implementation Classes

[#50638850_pgfId-1032862]##These classes will typically be made
available to all web applications using the shared class facilities of
the servlet container. Therefore, these classes should not be included
inside the web application archive.

===== [#50638850_pgfId-1031709]##[#50638850_10.2.4.1 FactoryFinder]##FactoryFinder

[#50638850_pgfId-1031710]## _javax.faces.FactoryFinder_ implements the
standard discovery algorithm for all factory objects specified in the
JavaServer Faces APIs. For a given factory class name, a corresponding
implementation class is searched for based on the following algorithm.
Items are listed in order of decreasing search precedence:

[#50638850_pgfId-1031711]##If a default JavaServer Faces configuration
file (/WEB-INF/faces-config.xml) is bundled into the _web application,
and it_ contains a factory entry of the given factory class name, that
factory class is used.

[#50638850_pgfId-1031712]##If the JavaServer Faces configuration
resource(s) named by the _javax.faces.CONFIG_FILES_ _ServletContext_
init parameter (if any) contain any factory entries of the given factory
class name, those factories are used, with the last one taking
precedence.

[#50638850_pgfId-1031713]##If there are any META-INF/faces-config.xml
resources bundled any JAR files in the _web ServletContext’s resource
paths_ , the factory entries of the given factory class name in those
files are used, with the last one taking precedence.

[#50638850_pgfId-1031714]##If a
_META-INF/services/\{factory-class-name}_ resource is visible to the web
application class loader for the calling application (typically as a
result of being present in the manifest of a JAR file), its first line
is read and assumed to be the name of the factory implementation class
to use.

[#50638850_pgfId-1031715]##If none of the above steps yield a match, the
JavaServer Faces implementation specific class is used.

[#50638850_pgfId-1031716]##If any of the factories found on any of the
steps above happen to have a one-argument constructor, with argument the
type being the abstract factory class, that constructor is invoked, and
the previous match is passed to the constructor. For example, say the
container vendor provided an implementation of _FacesContextFactory_ ,
and identified it in
_META-INF/services/javax.faces.context.FacesContextFactory_ in a jar on
the webapp ClassLoader. Also say this implementation provided by the
container vendor had a one argument constructor that took a
_FacesContextFactory_ instance. The _FactoryFinder_ system would call
that one-argument constructor, passing the implementation of
_FacesContextFactory_ provided by the JavaServer Faces implementation.

[#50638850_pgfId-1031717]##If a Factory implementation does not provide
a proper one-argument constructor, it must provide a zero-arguments
constructor in order to be successfully instantiated.

[#50638850_pgfId-1031718]##Once the name of the factory implementation
class is located, the web application class loader for the calling
application is requested to load this class, and a corresponding
instance of the class will be created. A side effect of this rule is
that each web application will receive its own instance of each factory
class, whether the JavaServer Faces implementation is included within
the web application or is made visible through the container's
facilities for shared libraries.

[width="100%",cols="100%",]
|===
|[#50638850_pgfId-1031721]##public static Object getFactory(String
factoryName);
|===

[#50638850_pgfId-1031722]##Create (if necessary) and return a
per-web-application instance of the appropriate implementation class for
the specified JavaServer Faces factory class, based on the discovery
algorithm described above.

{empty}[#50638850_pgfId-1031728]##JSF implementations must also include
implementations of the several factory classes. In order to be
dynamically instantiated according to the algorithm defined above, the
factory implementation class must include a public, no-arguments
constructor. [P1-start-factoryNames]For each of the _public static final
String_ fields on the class _FactoryFinder_ whose field names end with
the string “ __FACTORY_ ” (without the quotes), the implementation must
provide an implementation of the corresponding Factory class using the
algorithm described earlier in this section.[P1-end]

===== [#50638850_pgfId-1031752]##[#50638850_28995]##FacesServlet

[#50638850_pgfId-1031753]## _FacesServlet_ is an implementation of
_javax.servlet.Servlet_ that accepts incoming requests and passes them
to the appropriate _Lifecycle_ implementation for processing. This
servlet must be declared in the web application deployment descriptor,
as described in link:JSF.htm#50638850_16379[See Servlet Definition], and
mapped to a standard URL pattern as described in
link:JSF.htm#50638850_63553[See Servlet Mapping].

[width="100%",cols="100%",]
|===
|[#50638850_pgfId-1031762]##public void init(ServletConfig config)
throws ServletException;
|===

[#50638850_pgfId-1031763]##Acquire and store references to the
_FacesContextFactory_ and _Lifecycle_ instances to be used in this web
application. For the _LifecycleInstance_ , first consult the
_init-param_ set for this _FacesServlet_ instance for a parameter of the
name _javax.faces.LIFECYCLE_ID_ . If present, use that as the
_lifecycleID_ attribute to the _getLifecycle()_ method of
_LifecycleFactory_ . If not present, consult the _context-param_ set for
this web application. If present, use that as the _lifecycleID_
attribute to the _getLifecycle()_ method of _LifecycleFactory_ . If
neither param set has a value for _javax.faces.LIFECYCLE_ID_ , use the
value _DEFAULT_ . As an implementation note, please take care to ensure
that all _PhaseListener_ instances defined for the application are
installed on all lifecycles created during this process.

[width="100%",cols="100%",]
|===
|[#50638850_pgfId-1031766]##public void destroy();
|===

[#50638850_pgfId-1031767]##Release the _FacesContextFactory_ and
_Lifecycle_ references that were acquired during execution of the
_init()_ method.

[width="100%",cols="100%",]
|===
|[#50638850_pgfId-1031770]##public void service(ServletRequest request,
ServletResponse response) throws IOException, ServletException;
|===

[#50638850_pgfId-1031771]##For each incoming request, the following
processing is performed:

[#50638850_pgfId-1031772]##Using the _FacesContextFactory_ instance
stored during the _init()_ method, call the _getFacesContext()_ method
to acquire a _FacesContext_ instance with which to process the current
request.

[#50638850_pgfId-1031773]##Call the _execute()_ method of the saved
_Lifecycle_ instance, passing the _FacesContext_ instance for this
request as a parameter. If the _execute()_ method throws a
_FacesException_ , re-throw it as a _ServletException_ with the
_FacesException_ as the root cause.

[#50638850_pgfId-1027477]##Call the _render()_ method of the saved
_Lifecycle_ instance, passing the _FacesContext_ instance for this
request as a parameter. If the _render()_ method throws a
_FacesException_ , re-throw it as a _ServletException_ with the
_FacesException_ as the root cause.

[#50638850_pgfId-1031791]##Call the _release_ () method on the
_FacesContext_ instance, allowing it to be returned to a pool if the JSF
implementation uses one.

[#50638850_pgfId-1027499]##[P1-start-servletParams]The FacesServlet
implementation class must also declare two static public final String
constants whose value is a context initialization parameter that affects
the behavior of the servlet:

[#50638850_pgfId-1027500]## _CONFIG_FILES_ATTR_ -- the context
initialization attribute that may optionally contain a comma-delimited
list of context relative resources (in addition to
_/WEB-INF/faces-config.xml_ which is always processed if it is present)
to be processed. The value of this constant must be “
_javax.faces.CONFIG_FILES_ ”.

{empty}[#50638850_pgfId-1027506]## _LIFECYCLE_ID_ATTR_ -- the lifecycle
identifier of the _Lifecycle_ instance to be used for processing
requests to this application, if an instance other than the default is
required. The value of this constant must be “
_javax.faces.LIFECYCLE_ID_ ”.[P1-end]

===== [#50638850_pgfId-1031823]##[#50638850_78423]##UIComponentELTag

[#50638850_pgfId-1031849]##
_[P1-start-uicomponenteltag]UIComponentELTag_ is an implementation of
_javax.servlet.jsp.tagext.BodyTag_ , and must be the base class for any
JSP custom action that corresponds to a JSF _UIComponent_ .[P1-end] See
link:JSF.htm#50638860_43229[See Integration with JSP], and the Javadocs
for _UIComponentELTag_ , for more information about using this class as
the base class for your own _UIComponent_ custom action classes.

===== [#50638850_pgfId-1031850]##FacetTag

[#50638850_pgfId-1031854]##JSP custom action that adds a named facet
(see link:JSF.htm#50638851_55906[See Facet Management]) to the
UIComponent associated with the closest parent UIComponent custom
action. See link:JSF.htm#50638860_62776[See <f:facet>].

===== [#50638850_pgfId-1031858]##ValidatorTag

[#50638850_pgfId-1031859]##JSP custom action (and convenience base
class) that creates and registers a _Validator_ instance on the
_UIComponent_ associated with the closest parent _UIComponent_ custom
action. See link:JSF.htm#50638860_85473[See <f:validateLength>],
link:JSF.htm#50638860_98707[See <f:validateRegex>],
link:JSF.htm#50638860_69048[See <f:validateLongRange>], and
link:JSF.htm#50638860_90477[See <f:validator>].

=== [#50638850_pgfId-1029868]##

image:JSF-47.gif[image]

[#50638850_60389]##Deprecated APIs in the webapp package

[#50638850_pgfId-1029902]##Faces depends on version JSP 2.1 or later,
and the JSP tags in Faces expose properties that leverage concepts
specific to that release of JSP. Importantly, most Faces JSP tag
attributes are either of type _javax.el.ValueExpression_ or
_javax.el.MethodExpression_ . For backwards compatability with existing
Faces component libraries that expose themselves as JSP tags, the
existing classes relating to JSP have been deprecated and new ones
introduced that leverage the EL API.

==== [#50638850_pgfId-1029872]## _AttributeTag_

{empty}[#50638850_pgfId-1029909]##[P1-start-attributetag]The faces
implementation must now provide this class.[P1-end]

==== [#50638850_pgfId-1029883]## _ConverterTag_

[#50638850_pgfId-1029910]##This has been replaced with _ConverterELTag_

==== [#50638850_pgfId-1029890]## _UIComponentBodyTag_

[#50638850_pgfId-1029922]##All component tags now implement _BodyTag_ by
virtue of the new class _UIComponentClassicTagBase_ implementing
_BodyTag_ . This class has been replaced by _UIComponentELTag_ .

==== [#50638850_pgfId-1029894]## _UIComponentTag_

[#50638850_pgfId-1029912]##This component has been replaced by
_UIComponentELTag_ .

==== [#50638850_pgfId-1029898]## _ValidatorTag_

[#50638850_pgfId-1029913]##This component has been replaced by
_ValidatorELTag_ .

=== [#50638850_pgfId-1031916]##

image:JSF-47.gif[image]

[#50638850_31842]##Application Configuration Resources

[#50638850_pgfId-1031917]##This section describes the JSF support for
portable application configuration resources used to configure
application components.

==== [#50638850_pgfId-1031918]##Overview

[#50638850_pgfId-1031919]##JSF defines a portable configuration resource
format (as an XML document) for standard configuration information.
Please see the Javadoc overview for a link, titled “faces-config XML
Schema Documentation” to the XML Schema Definition for such documents.

[#50638850_pgfId-1046573]##One or more such application resources will
be loaded automatically, at application startup time, by the JSF
implementation. The information parsed from such resources will augment
the information provided by the JSF implementation, as described below.

[#50638850_pgfId-1031920]##In addition to their use during the execution
of a JSF-based web application, configuration resources provide
information that is useful to development tools created by Tool
Providers. The mechanism by which configuration resources are made
available to such tools is outside the scope of this specification.

==== [#50638850_pgfId-1031922]##[#50638850_57048]##Application Startup Behavior

[#50638850_pgfId-1031923]##Implementations may check for the presence of
a _servlet-class_ definition of class _javax.faces.webapp.FacesServlet_
in the web application deployment descriptor as a means to abort the
configuration process and reduce startup time for applications that do
not use JavaServer Faces Technology.

[#50638850_pgfId-1031929]##At application startup time, before any
requests are processed, the [P1-start-startup]JSF implementation must
process zero or more application configuration resources, located as
follows

[#50638850_pgfId-1032928]##Make a list of all of the application
configuration resources found using the following algorithm:

[#50638850_pgfId-1032876]##Check for the existence of a context
initialization parameter named _javax.faces.CONFIG_FILES_ . If it
exists, treat it as a comma-delimited list of context relative resource
paths (starting with a “/”), and add each of the specified resources to
the list. If this parameter exists, skip the searching specified in the
next bullet item in this list.

[#50638850_pgfId-1043753]##Search for all resources that match either “
_META-INF/faces-config.xml_ ” or end with “ _.faces-config.xml_ ”
directly in the “ _META-INF_ ” directory. Each resource that matches
that expression must be considered an application configuration
resource.

[#50638850_pgfId-1037350]##Using the _java.util.ServiceLoader_ , locate
all implementations of the
_javax.faces.ApplicationConfigurationResourceDocumentPopulator_ service.
For each implementation, create a fresh _org.w3c.dom.Document_ instance,
configured to be in the XML namespace of the application configuration
resource format, and invoke the implementation’s
_populateApplicationConfigurationResource()_ method. If no exception is
thrown, add the document to the list, otherwise log a message and
continue.

{empty}[#50638850_pgfId-1032881]##Let this list be known as
_applicationConfigurationResources_ for discussion. Also, check for the
existence of a web application configuration resource named “
_/WEB-INF/faces-config.xml_ ”, and refer to this as
_applicationFacesConfig_ for discussion, but do not put it in the list.
When parsing the application configuration resources, the implementation
must ensure that _applicationConfigurationResources_ are parsed before
_applicationFacesConfig_ .[P1-end]

[#50638850_pgfId-1033012]##Please see link:JSF.htm#50638850_91955[See
Ordering of Artifacts] for details on the ordering in which the
decoratable artifacts in the application configuration resources in
_applicationConfigurationResources_ and _applicationFacesConfig_ must be
processed.

[#50638850_pgfId-1031951]##This algorithm provides considerable
flexibility for developers that are assembling the components of a
JSF-based web application. For example, an application might include one
or more custom _UIComponent_ implementations, along with associated
_Renderer_ s, so it can declare them in an application resource named “
_/WEB-INF/faces-config.xml_ ” with no need to programmatically register
them with _Application_ instance. In addition, the application might
choose to include a component library (packaged as a JAR file) that
includes a “ _META-INF/faces-config.xml_ ” resource. The existence of
this resource causes components, renderers, and other JSF implementation
classes that are stored in this library JAR file to be automatically
registered, with no action required by the application.

[#50638850_pgfId-1040656]##Perform the actions specified in
link:JSF.htm#50638850_31461[See Faces Flows].

[#50638850_pgfId-1038340]##Perform the actions specified in
link:JSF.htm#50638850_48089[See Resource Library Contracts].

{empty}[#50638850_pgfId-1035173]##[P1-start-PostConstructApplicationEvent]The
runtime must publish the
_javax.faces.event.PostConstructApplicationEvent_ immediately after all
application configuration resources have been processed.[P1-end]

[#50638850_pgfId-1031987]##[P1-start-startupErrors]XML parsing errors
detected during the loading of an application resource file are fatal to
application startup, and must cause the application to not be made
available by the container. JSF implementations that are part of a Java
EE technology-compliant implementation are required to validate the
application resource file against the XML schema for structural
correctness. [P1-end]The validation is recommended, but not required for
JSF implementations that are not part of a Java EE technology-compliant
implementation.

===== [#50638850_pgfId-1037946]##[#50638850_48089]##Resource Library Contracts

[#50638850_pgfId-1037977]##[P1-start-ResourceLibraryContractScanning]If
the parsing of the application configuration resources completed
successfully, scan the application for resource library contracts. Any
resource library contract as described in
link:JSF.htm#50638877_78699[See Resource Library Contracts] must be
discovered at application startup time. The complete set of discovered
contracts has no ordering semantics and effectively is represented as a
_Set<String>_ where the values are just the names of the resource
libraries. If multiple sources in the application configuration
resources contained _<resource-library-contracts>_ , they are all merged
into one element. Duplicates are resolved in as specified in
link:JSF.htm#50638850_91955[See Ordering of Artifacts]. If the
application configuration resources produced a
_<resource-library-contracts>_ element, create an implementation private
data structure (called the “resource library contracts data structure”)
containing the mappings between viewId patterns and resource library
contracts as listed by the contents of that element.

[#50638850_pgfId-1048022]##The _<resource-library-contracts>_ element is
contained with in the _<application>_ element and contains one or more
_<contract-mapping>_ elements. Each _<contract-mapping>_ element must
one or more _<url-pattern>_ elements and one or more _<contract>_
elements.

[#50638850_pgfId-1046645]##The value of the _<url-pattern>_ element may
be any of the following.

[#50638850_pgfId-1045903]##The literal string *, meaning all views
should have these contracts applied.

[#50638850_pgfId-1045984]##An absolute prefix mapping, relative to the
web app root, such as _/directoryName/*_ meaning only views matching
that prefix should have these contracts applied.

[#50638850_pgfId-1046127]##An exact fully qualified file path, relative
to the web app root, such as _/directoryName/fileName.xhtml_ , meaning
exactly that view should have the contracts applied.

[#50638850_pgfId-1046333]##See link:JSF.htm#50638861_99703[See
ViewDeclarationLanguage.calculateResourceLibraryContracts()] for the
specification of how the values of the _<url-pattern>_ are to be
processed.

[#50638850_pgfId-1045900]##The value of the _<contracts>_ element is a
comma separated list of resource library contract names. A resource
library contract name is the name of a directory within the _contracts_
directory of the web app root, or the _contracts_ directory within the
_META-INF/contracts_ JAR entry.

[#50638850_pgfId-1046648]##Only the contracts explicitly mentioned in
the _<resource-library-contracts>_ element are included in the data
structure. If the information from the application configuration
resources refers to a contract that is not available to the application,
an informative error message must be logged.

[#50638850_pgfId-1040367]##If the application configuration resources
did not produce a _<resource-library-contracts>_ element, the data
structure should be populated as if this were the contents of the
_<resource-library-contracts>_ element:

[width="100%",cols="100%",]
|===
|[#50638850_pgfId-1039318]##<resource-library-contracts> +
<contract-mapping> +
<url-pattern>*</url-pattern> +
<contracts>”all available contracts”</contracts> +
</contract-mapping> +
</resource-library-contracts>
|===

[#50638850_pgfId-1039310]##Where “all available contracts” is replaced
with a comma separated list of all the contracts discovered in the
startup scan. In the case where there is no
_<resource-library-contracts>_ element in the application configuration
resources, ordering of contracts is unspecified, which may lead to
unexpected behavior in the case of multiple contracts that have the same
contract declaration.

==== [#50638850_pgfId-1040692]##[#50638850_31461]##Faces Flows

[#50638850_pgfId-1040721]##[P1-start-FacesFlowScanning]If the parsing of
the application configuration resources completed successfully, any XML
based flow definitions in the application configuration resources will
have been successfully discovered as well. The discovered flows must be
exposed as thread safe immutable application scoped instances of
_javax.faces.flow.Flow_ , and made accessible to the runtime via the
_FlowHandler_ . If flows exist in the application, but the
_javax.faces.CLIENT_WINDOW_MODE_ context-param was not specified, the
runtime must behave as if the value “url” (without the quotes) was
specified for this context-param.

===== [#50638850_pgfId-1047282]##Defining Flows

[#50638850_pgfId-1047341]##Flows are defined using the
_<flow-definition>_ element. This element must have an _id_ attribute
which uniquely identifies the flow within the scope of the Application
Configuration Resource file in which the element appears. To enable
multiple flows with the same _id_ to exist in an application, the
_<faces-config><name>_ element is taken to be the _definingDocumentId_
of the flow. If no _<name>_ element is specified, the empty string is
taken as the value for _definingDocumentId_ . Please see
link:JSF.htm#50638861_52748[See FlowHandler] for an overview of the flow
feature. Note that a number of conventions exist to make defining flows
simpler. These conventions are specified in
link:JSF.htm#50638850_47129[See Packaging Flows in Directories].

{empty}[#50638850_pgfId-1047275]##[P1-end]

===== [#50638850_pgfId-1040763]##[#50638850_83473]##Packaging Faces Flows in JAR Files

[#50638850_pgfId-1043185]##[P1-start-FacesFlowJarPackaging] The runtime
must support packaging Faces Flows in JAR files as specified in this
section. Any flows packaged in a jar file must have its flow definition
included in a _faces-config.xml_ file located at the
_META-INF/faces-config.xml_ JAR entry. This ensures that such flow
definitions are included in the application configuration resources. Any
view nodes included in the jar must be located within sub entries of the
_META-INF/flows/<flowName>_ JAR entry, where _<flowName>_ is a JAR
directory entry whose name is identical to that of a flow id in the
corresponding _faces-config.xml_ file. If there are _@FlowScoped_ beans
or beans with _@FlowDefinition_ in the JAR, there must be a JAR entry
named _META-INF/beans.xml_ . This ensures that such beans and
definitions are discovered by the runtime at startup. None of the flow
definition conventions specified in link:JSF.htm#50638850_47129[See
Packaging Flows in Directories] apply when a flow is packaged in a JAR
file. In other words, the flow must be explicitly declared in the JAR
file’s _faces-config.xml_ .

{empty}[#50638850_pgfId-1045327]##[P1-end]

===== [#50638850_pgfId-1041910]##[#50638850_47129]##Packaging Flows in Directories

[#50638850_pgfId-1041957]##The view nodes of a flow need not be
collected in any specific directory structure, but there is a benefit in
doing so: flow definition conventions.
[P1-start-FacesFlowDirectoryPackaging] If the _javax.faces.CONFIG_FILES_
context parameter includes references to files of the form
_/<flowName>/<flowName>-flow.xml_ or
_/WEB-INF/<flow-Name>/<flowName>-flow.xml_ , and if such files exist in
the current application (even if they are zero length), they are treated
as flow definitions. Flow definitions defined in this way must not be
nested any deeper in the directory structure than one level deep from
the web app root or the _WEB-INF_ directory.

[#50638850_pgfId-1047157]##The following conventions apply to flows
defined in this manner. Any flow definition in the corresponding
_-flow.xml_ file will override any of the conventions in the case of a
conflict.

[#50638850_pgfId-1042650]##Every vdl file in that directory is a view
node of that flow.

[#50638850_pgfId-1042706]##The start node of the flow is the view whose
name is the same as the name of the flow.

[#50638850_pgfId-1049347]##Navigation among any of the views in the
directory is considered to be within the flow.

[#50638850_pgfId-1049348]##The flow defining document id is the empty
string.

[#50638850_pgfId-1049342]##In the case of a zero length flow definition
file, the following also applies:

[#50638850_pgfId-1049448]##There is one return node in the flow, whose
id is the id of the flow with the string “ _-return_ ” (without the
quotes) appended to it. For example, if _flowId_ is _shopping_ , the
return node id is _shopping-return_ .

[#50638850_pgfId-1049449]##The from-outcome of the return node is a
string created with the following formula: +
_"/" + flowId + "-return"_ .

[#50638850_pgfId-1049355]##For each directory packaged flow definition,
the runtime must synthesize an instance of _javax.faces.flow.Flow_ that
represents the union of the flow definition from the
_/<flowName>/<flowName>-flow.xml_ file for that directory, and any of
the preceding naming conventions, with precedence being given to the
_-flow.xml_ file. Such _Flow_ instances must be added to the
_FlowHandler_ before the _PostConstructApplicationEvent_ is published.

{empty}[#50638850_pgfId-1045661]##[P1-end]

==== [#50638850_pgfId-1035178]##[#50638850_69589]##Application Shutdown Behavior

{empty}[#50638850_pgfId-1035182]##When the JSF runtime is directed to
shutdown by its container, the following actions must be taken.
[p1-start-application-shutdown]

[#50638850_pgfId-1035183]##Ensure that calls to
_FacesContext.getCurrentInstance()_ that happen during application
shutdown return successfully, as specified in the Javadocs for that
method.

[#50638850_pgfId-1035196]##Publish the
_javax.faces.event.PreDestroyApplicationEvent_ .

[#50638850_pgfId-1035199]##Call _FactoryFinder.releaseFactories()_ .

{empty}[#50638850_pgfId-1035203]##[p1-end]

==== [#50638850_pgfId-1031989]##[#50638850_83984]##Application Configuration Resource Format

{empty}[#50638850_pgfId-1049536]##Application configuration resources
that are written to run on JSF 2.3 must include the following schema
declaration and must conform to the schema shown in
link:JSF.htm#50638878_86924[See Appendix A - JSF Metadata]

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1050883]##<faces-config

[#50638850_pgfId-1050884]## xmlns="http://xmlns.jcp.org/xml/ns/javaee"

[#50638850_pgfId-1050885]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1050886]##
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_3.xsd"

[#50638850_pgfId-1050887]## version="2.3">

[#50638850_pgfId-1050888]## 

|===

[#50638850_pgfId-1050877]##[P1-start-schema]Application configuration
resources that are written to run on JSF 2.2 must include the following
schema declaration and must conform to the schema shown in
link:JSF.htm#50638878_86924[See Appendix A - JSF Metadata]:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1049542]##<faces-config

[#50638850_pgfId-1049543]## xmlns="http://xmlns.jcp.org/xml/ns/javaee"

[#50638850_pgfId-1049544]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1049545]##
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd"

[#50638850_pgfId-1049546]## version="2.2">

[#50638850_pgfId-1049547]## 

|===

[#50638850_pgfId-1049548]##Note that the “hostname” of the _xmlns_ and
_xsi:schemaLocation_ attributes has changed from “java.sun.com” to
“xmlns.jcp.org”. The “xmlns.jcp.org” hostname must be used when using
_version=_ "2.2" and _web-facesconfig_2_2.xsd_ . It is not valid to use
this hostname with versions prior to 2.2. Likewise, it is not valid to
use the “java.sun.com” hostname when using _version=_ "2.2" and
_web-facesconfig_2_2.xsd_ .

[#50638850_pgfId-1049549]##Application configuration resources that are
written to run on JSF 2.1 must include the following schema declaration:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1049552]##<faces-config

[#50638850_pgfId-1049553]## xmlns="http://java.sun.com/xml/ns/javaee"

[#50638850_pgfId-1049554]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1049555]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-facesconfig_2_1.xsd"

[#50638850_pgfId-1049556]## version="2.1">

[#50638850_pgfId-1049557]## 

|===

[#50638850_pgfId-1049558]##Application configuration resources that are
written to run on JSF 2.0 must include the following schema declaration:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1049561]##<faces-config

[#50638850_pgfId-1049562]## xmlns="http://java.sun.com/xml/ns/javaee"

[#50638850_pgfId-1049563]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1049564]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"

[#50638850_pgfId-1049565]## version="2.0">

[#50638850_pgfId-1049566]## 

|===

[#50638850_pgfId-1049530]##Application configuration resources that are
written to run on JSF 1.2 Application configuration resources must
include the following schema declaration and must conform to the schema
referenced in the schemalocation URI shown below:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032426]##<faces-config version="1.2"
xmlns="http://java.sun.com/xml/ns/javaee"

[#50638850_pgfId-1032427]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1032428]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee

[#50638850_pgfId-1032019]##
http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd">

|===

[#50638850_pgfId-1032020]##Application configuration resources that are
written to run on JSF 1.1 implementations must use the DTD declaration
and include the following DOCTYPE declaration:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032023]##<!DOCTYPE faces-config PUBLIC

[#50638850_pgfId-1032024]## “-//Sun Microsystems, Inc.//DTD JavaServer
Faces Config 1.1//EN”

[#50638850_pgfId-1032025]##
“http://java.sun.com/dtd/web-facesconfig_1_1.dtd”>

|===

{empty}[#50638850_pgfId-1032049]##Application configuration resources
that are written to run on JSF 1.0 implementations must use the DTD
declaration for the 1.0 DTD contained in the binary download of the JSF
reference implementation. They must also use the following DOCTYPE
declaration:[P1-end]

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032046]##<!DOCTYPE faces-config PUBLIC

[#50638850_pgfId-1032047]## “-//Sun Microsystems, Inc.//DTD JavaServer
Faces Config 1.0//EN”

[#50638850_pgfId-1032048]##
“http://java.sun.com/dtd/web-facesconfig_1_0.dtd”>

|===

==== [#50638850_pgfId-1032055]##[#50638850_24946]##Configuration Impact on JSF Runtime

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032052]##<!DOCTYPE faces-config PUBLIC

[#50638850_pgfId-1032053]## “-//Sun Microsystems, Inc.//DTD JavaServer
Faces Config 1.1//EN”

[#50638850_pgfId-1032054]##
“http://java.sun.com/dtd/web-facesconfig_1_1.dtd”>

|===

[#50638850_pgfId-1032059]##The following XML
elementslink:#pgfId-1032058[19] in application configuration resources
cause registration of JSF objects into the corresponding factories or
properties. It is an error if the value of any of these elements cannot
be correctly parsed, loaded, set, or otherwise used by the
implementation.

[#50638850_pgfId-1032060]##/faces-config/component -- Create or replace
a component type / component class pair with the _Application_ instance
for this web application.

[#50638850_pgfId-1032061]##/faces-config/converter -- Create or replace
a converter id / converter class or target class / converter class pair
with the _Application_ instance for this web application.

[#50638850_pgfId-1032062]##/faces-config/render-kit -- Create and
register a new _RenderKit_ instance with the _RenderKitFactory_ , if one
does not already exist for the specified _render-kit-id_ .

[#50638850_pgfId-1032063]##/faces-config/render-kit/renderer -- Create
or replace a component family + renderer id / renderer class pair with
the _RenderKit_ associated with the render-kit element we are nested in.

[#50638850_pgfId-1032064]##/faces-config/validator -- Create or replace
a validator id / validator class pair with the _Application_ instance
for this web application.

[#50638850_pgfId-1032065]##For components, converters, and validators,
it is legal to replace the implementation class that is provided (by the
JSF implementation) by default. This is accomplished by specifying the
standard value for the _<component-type>_ , _<converter-id>_ , or
_<validator-id>_ that you wish to replace, and specifying your
implementation class. To avoid class cast exceptions, the replacement
implementation class must be a subclass of the standard class being
replaced. For example, if you declare a custom _Converter_
implementation class for the standard converter identifier
_javax.faces.Integer_ , then your replacement class must be a subclass
of _javax.faces.convert.IntegerConverter_ .

[#50638850_pgfId-1028448]##For replacement _Renderer_ s, your
implementation class must extend _javax.faces.render.Renderer_ .
However, to avoid unexpected behavior, your implementation should
recognize all of the render-dependent attributes supported by the
Renderer class you are replacing, and provide equivalent decode and
encode behavior.

[#50638850_pgfId-1032083]##The following XML elements cause the
replacement of the default implementation class for the corresponding
functionality, provided by the JSF implementation. See
link:JSF.htm#50638850_38316[See Delegating Implementation Support] for
more information about the classes referenced by these elements:

[#50638850_pgfId-1032087]##/faces-config/application/action-listener --
Replace the default _ActionListener_ used to process _ActionEvent events
with an_ instance with the class specified. The contents of this element
must be a fully qualified Java class name that, when instantiated, is an
_ActionListener_ .

[#50638850_pgfId-1032088]##/faces-config/application/navigation-handler
-- Replace the default _NavigationHandler_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a _NavigationHandler_ .

[#50638850_pgfId-1032089]##/faces-config/application/property-resolver
-- Replace the default _PropertyResolver_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a _PropertyResolver_ .

[#50638850_pgfId-1051071]##/faces-config/application/resource-handler --
Replace the default _ResourceHandler_ instance with the one specified.
The contents of this element must be a fully qualified Java class name
that, when instantiated, is a _ResourceHandler_ .

[#50638850_pgfId-1051087]##/faces-config/application/search-expression-handler
-- This element contains the fully qualified class name of the concrete
_javax.faces.component.search.SearchExpressionHandler_ implementation
class that will be used for processing of a search expression.

[#50638850_pgfId-1051174]##/faces-config/application/search-keyword-resolver
-- This element contains the fully qualified class name of the concrete
javax.faces.component.search.SearchKeywordResolver implementation class
that will be used during the processing of a search expression keyword.

[#50638850_pgfId-1032090]##/faces-config/application/state-manager --
Replace the default _StateManager_ instance with the one specified. The
contents of this element must be a fully qualified Java class name that,
when instantiated, is a _StateManager_ .

[#50638850_pgfId-1032480]##/faces-config/application/system-event-listener
-- Instantiate a new instance of the class specified as the content
within a nested _system-event-listener-class_ element, which must
implement _SystemEventListener_ . This instance is referred to as
_systemEventListener_ for discussion. If a _system-event-class_ is
specified as a nested element within _system-event-listener_ , it must
be a class that extends _SystemEvent_ and has a public zero-arguments
constructor. The _Class_ object for _system-event-class_ is obtained and
is referred to as _systemEventClass_ for discussion. If
_system-event-class_ is not specified, _SystemEvent.class_ must be used
as the value of system _EventClass_ . If _source-class_ is specified as
a nested element within _system-event-listener_ , it must be a fully
qualified class name. The _Class_ object for _source-class_ is obtained
and is referred to as _sourceClass_ for discussion. If _source-class_ is
not specified, let _sourceClass_ be _null_ . Obtain a reference to the
_Application_ instance and call _subscribeForEvent(_ _facesEventClass_
_,_ _sourceClass_ _,_ _systemEventListener_ _)_ , passing the arguments
as assigned in the discussion.

[#50638850_pgfId-1032091]##/faces-config/application/variable-resolver
-- Replace the default _VariableResolver_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a _VariableResolver_ .

[#50638850_pgfId-1032092]##/faces-config/application/view-handler --
Replace the default _ViewHandler_ instance with the one specified. The
contents of this element must be a fully qualified Java class name that,
when instantiated, is a _ViewHandler_ .

[#50638850_pgfId-1032093]##The following XML elements cause the
replacement of the default implementation class for the corresponding
functionality, provided by the JSF implementation. Each of the
referenced classes must have a public zero-arguments constructor:

[#50638850_pgfId-1032094]## _/faces-config/factory/application-factory_
-- Replace the default _ApplicationFactory_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is an _ApplicationFactory_ .

[#50638850_pgfId-1050959]##
_/faces-config/factory/client-window-factory_ -- Replace the default
_ClientWindowFactory_ instance with the one specified. The contents of
this element must be a fully qualified Java class name that, when
instantiated, is a _ClientWindowFactory_ .

[#50638850_pgfId-1034066]##
_/faces-config/factory/exception-handler-factory_ -- Replace the default
_ExceptionHandlerFactory_ instance with the one specified. The contents
of this element must be a fully qualified Java class name that, when
instantiated, is a _ExceptionHandlerFactory_ .

[#50638850_pgfId-1032095]##
_/faces-config/factory/faces-context-factory_ -- Replace the default
_FacesContextFactory_ instance with the one specified. The contents of
this element must be a fully qualified Java class name that, when
instantiated, is a _FacesContextFactory_ .

[#50638850_pgfId-1050977]## _/faces-config/factory/flash-factory_ --
Replace the default _FlashFactory_ instance with the one specified. The
contents of this element must be a fully qualified Java class name that,
when instantiated, is a _FlashFactory_ .

[#50638850_pgfId-1050978]## _/faces-config/factory/flow-handler-factory_
-- Replace the default _FlowHandlerFactory_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a _FlowHandlerFactory_ .

[#50638850_pgfId-1034072]## _/faces-config/factory/lifecycle-factory_ --
Replace the default _LifecycleFactory_ instance with the one specified.
The contents of this element must be a fully qualified Java class name
that, when instantiated, is a _LifecycleFactory_ .

[#50638850_pgfId-1050992]## _/faces-config/factory/render-kit-factory_
-- Replace the default _RenderKitFactory_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a _RenderKitFactory_ .

[#50638850_pgfId-1051004]##
_/faces-config/factory/search-expression-context-kit-factory_ -- This
element contains the fully qualified class name of the concrete
_SearchExpressionContextFactory_ implementation class that will be
called when
_FactoryFinder.getFactory(SEARCH_EXPRESSION_CONTEXT_FACTORY)_ is called.

[#50638850_pgfId-1032096]##
_/faces-config/factory/view-declaration-language-factory_ -- Replace the
default _ViewDeclarationLanguageFactory_ instance with the one
specified. The contents of this element must be a fully qualified Java
class name that, when instantiated, is a
_ViewDeclarationLanguageFactory_ .

[#50638850_pgfId-1032098]##The following XML elements cause the addition
of event listeners to standard JSF implementation objects, as follows.
Each of the referenced classes must have a public zero-arguments
constructor.

[#50638850_pgfId-1032099]##/faces-config/lifecycle/phase-listener --
Instantiate a new instance of the specified class, which must implement
_PhaseListener_ , and register it with the _Lifecycle_ instance for the
current web application.

[#50638850_pgfId-1032100]##In addition, the following XML elements
influence the runtime behavior of the JSF implementation, even though
they do not cause registration of objects that are visible to a
JSF-based application.

[#50638850_pgfId-1032101]##/faces-config/managed-bean -- Make the
characteristics of a managed bean with the specified _managed-bean-name_
available to the default _VariableResolver_ implementation.

[#50638850_pgfId-1032102]##/faces-config/navigation-rule -- Make the
characteristics of a navigation rule available to the default
_NavigationHandler_ implementation.

==== [#50638850_pgfId-1032104]##[#50638850_38316]##Delegating Implementation Support

[#50638850_pgfId-1032105]##[P1-decoratable_artifacts]The runtime must
support the decorator design pattern as specified below for the
following artifacts.

[#50638850_pgfId-1034122]## _ActionListener_

[#50638850_pgfId-1034104]## _ApplicationFactory_

[#50638850_pgfId-1035603]##ExceptionHandlerFactory

[#50638850_pgfId-1034082]## _FacesContextFactory_

[#50638850_pgfId-1035756]##FlashFactory

[#50638850_pgfId-1048681]##FlowHandlerFactory

[#50638850_pgfId-1034110]## _LifecycleFactory_

[#50638850_pgfId-1034164]## _NavigationHandler_

[#50638850_pgfId-1035604]##PartialViewContext

[#50638850_pgfId-1034158]## _PropertyResolver_

[#50638850_pgfId-1034140]## _RenderKit_

[#50638850_pgfId-1034087]## _RenderKitFactory_

[#50638850_pgfId-1034146]## _ResourceHandler_

[#50638850_pgfId-1035718]##ResourceResolver

[#50638850_pgfId-1034134]## _StateManager_

[#50638850_pgfId-1035605]##TagHandlerDelegateFactory

[#50638850_pgfId-1034128]## _VariableResolver_

[#50638850_pgfId-1034090]## _ViewHandler_

[#50638850_pgfId-1035601]##ViewDeclarationLanguage

[#50638850_pgfId-1035602]##VisitContextFactory

[#50638850_pgfId-1034081]##[P1_end_decoratable_artifacts]For all of
these artifacts, the decorator design pattern is leveraged, so that if
one provides a constructor that takes a single argument of the
appropriate type, the custom implementation receives a reference to the
implementation that was previously fulfilling the role. In this way, the
custom implementation is able to override just a subset of the
functionality (or provide only some additional functionality) and
delegate the rest to the existing implementation.

[#50638850_pgfId-1032821]##The implementation must also support
decoration of a _RenderKit_ instance. At the point in time of when the
_<render-kit>_ element is processed in an application configuration
resources, if the current _RenderKitFactory_ already has a _RenderKit_
instance for the _<render-kit-id>_ within the _<render-kit>_ element,
and the Class whose fully qualified java class name is given as the
value of the _<render-kit-class>_ element within the _<render-kit>_
element has a constructor that takes an _RenderKit_ instance, the
existing _RenderKit_ for that _<render-kit-id>_ must be passed to that
constructor, and the RenderKit resulting from the executing of that
constructor must be passed to _RenderKitFactory.addRenderKit()_ .

[#50638850_pgfId-1032106]##For example, say you wanted to provide a
custom _ViewHandler_ that was the same as the default one, but provided
a different implementation of the _calculateLocale()_ method. Consider
this code excerpt from a custom _ViewHandler_ :

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032109]##public class MyViewHandler extends
ViewHandler \{

[#50638850_pgfId-1032110]## 

[#50638850_pgfId-1032111]## public MyViewHandler() \{ }

[#50638850_pgfId-1032112]## 

[#50638850_pgfId-1032113]## public MyViewHandler(ViewHandler handler) \{

[#50638850_pgfId-1032114]## super();

[#50638850_pgfId-1032115]## oldViewHandler = handler;

[#50638850_pgfId-1032116]## }

[#50638850_pgfId-1032117]## 

[#50638850_pgfId-1032118]## private ViewHandler oldViewHandler = null;

[#50638850_pgfId-1032119]## 

[#50638850_pgfId-1032120]## // Delegate the renderView() method to the
old handler

[#50638850_pgfId-1032121]## public void renderView(FacesContext context,
UIViewRoot view)

[#50638850_pgfId-1032122]## throws IOException, FacesException \{

[#50638850_pgfId-1032123]## oldViewHandler.renderView(context, view);

[#50638850_pgfId-1032124]## }

[#50638850_pgfId-1032125]## 

[#50638850_pgfId-1032126]## // Delegate other methods in the same manner

[#50638850_pgfId-1032127]## 

[#50638850_pgfId-1032128]## // Overridden version of calculateLocale()

[#50638850_pgfId-1032129]## public Locale calculateLocale(FacesContext
context) \{

[#50638850_pgfId-1032130]## Locale locale = ... // Custom calculation

[#50638850_pgfId-1032131]## return locale;

[#50638850_pgfId-1032132]## }

[#50638850_pgfId-1032133]## 

[#50638850_pgfId-1032134]##}

|===

[#50638850_pgfId-1032135]## 

[#50638850_pgfId-1032136]##The second constructor will get called as the
application is initially configured by the JSF implementation, and the
previously registered _ViewHandler_ will get passed to it.

[#50638850_pgfId-1029573]##In version 1.2, we added new wrapper classes
to make it easier to override a subset of the total methods of the class
and delegate the rest to the previous instance. We provide wrappers for
_javax.faces.application.ViewHandler_ ,
_javax.faces.application.StateManager_ , and
_javax.faces.context.ResponseWriter_ . For example, you could have a
_faces-config.xml_ file that contains the following:

[#50638850_pgfId-1029585]## 

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1029592]## <application>

[#50638850_pgfId-1029593]##
<view-handler>com.foo.NewViewHandler</view-handler>

[#50638850_pgfId-1029594]##
<state-manager>com.foo.NewStateManager</state-manager>

[#50638850_pgfId-1029595]## </application>

[#50638850_pgfId-1029596]## 

|===

[#50638850_pgfId-1032988]##Where your implementations for these classes
are simply:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1029616]##package com.foo;

[#50638850_pgfId-1029617]## 

[#50638850_pgfId-1029618]##import javax.faces.application.ViewHandler;

[#50638850_pgfId-1029619]##import
javax.faces.application.ViewHandlerWrapper;

[#50638850_pgfId-1029620]## 

[#50638850_pgfId-1029621]##public class NewViewHandler extends
ViewHandlerWrapper \{

[#50638850_pgfId-1029622]## 

[#50638850_pgfId-1029623]## private ViewHandler oldViewHandler = null;

[#50638850_pgfId-1029624]## 

[#50638850_pgfId-1029625]## public NewViewHandler(ViewHandler
oldViewHandler) \{

[#50638850_pgfId-1029626]## this.oldViewHandler = oldViewHandler;

[#50638850_pgfId-1029627]## }

[#50638850_pgfId-1029628]## 

[#50638850_pgfId-1029629]## public ViewHandler getWrapped() \{

[#50638850_pgfId-1029630]## return oldViewHandler;

[#50638850_pgfId-1029631]## }

[#50638850_pgfId-1029632]##}

[#50638850_pgfId-1029603]## 

[#50638850_pgfId-1029641]##package com.foo;

[#50638850_pgfId-1029642]## 

[#50638850_pgfId-1029643]##import javax.faces.application.StateManager;

[#50638850_pgfId-1029644]##import
javax.faces.application.StateManagerWrapper;

[#50638850_pgfId-1029645]## 

[#50638850_pgfId-1029646]##public class NewStateManager extends
StateManagerWrapper \{

[#50638850_pgfId-1029647]## 

[#50638850_pgfId-1029648]## private StateManager oldStateManager = null;

[#50638850_pgfId-1029649]## 

[#50638850_pgfId-1029650]## public NewStateManager(StateManager
oldStateManager) \{

[#50638850_pgfId-1029651]## this.oldStateManager = oldStateManager;

[#50638850_pgfId-1029652]## }

[#50638850_pgfId-1029653]## 

[#50638850_pgfId-1029654]## public StateManager getWrapped() \{

[#50638850_pgfId-1029655]## return oldStateManager;

[#50638850_pgfId-1029656]## }

[#50638850_pgfId-1029657]##}

[#50638850_pgfId-1029639]## 

[#50638850_pgfId-1029607]## 

|===

[#50638850_pgfId-1029588]##This allows you to override as many or as few
methods as you’d like.

==== [#50638850_pgfId-1033445]##[#50638850_91955]##Ordering of Artifacts

[#50638850_pgfId-1034197]##Because the specification allows the
application configuration resources to be composed of multiple files,
discovered and loaded from several different places in the application,
the question of ordering must be addressed. This section specifies how
application configuration resource authors may declare the ordering
requirements of their artifacts.

[#50638850_pgfId-1033425]##link:JSF.htm#50638850_57048[See Application
Startup Behavior] defines two concepts:
_applicationConfigurationResources_ and _applicationFacesConfig_ . The
former is an ordered list of all the application configuration resources
except the one at “ _WEB-INF/faces-config.xml_ ”, and the latter is a
list containing only the one at “ _WEB-INF/faces-config.xml_ ”.

[#50638850_pgfId-1033308]##An application configuration resource may
have a top level _<name>_ element of type _javaee:java-identifierType_ .
[P1-facesConfigIdStart]If a _<name>_ element is present, it must be
considered for the ordering of decoratable artifacts (unless the
_duplicate name exception_ applies, as described below).

[#50638850_pgfId-1034773]##Two cases must be considered to allow
application configuration resources to express their ordering
preferences.

[#50638850_pgfId-1034778]##Absolute ordering: an _<absolute-ordering>_
element in the _applicationFacesConfig_

[#50638850_pgfId-1034782]##In this case, ordering preferences that would
have been handled by case 2 below must be ignored.

[#50638850_pgfId-1034890]##Any _<name>_ element direct children of the
_<absolute-ordering>_ must be interpreted as indicating the absolute
ordering in which those named application configuration resources, which
may or may not be present in _applicationConfigurationResources,_ must
be processed.

[#50638850_pgfId-1034892]##The _<absolute-ordering>_ element may contain
zero or one _<others />_ elements. The required action for this element
is described below. If the _<absolute-ordering>_ element does not
contain an _<others />_ element, any application configuration resources
not specifically mentioned within _<name />_ elements must be ignored.

[#50638850_pgfId-1034891]## _Duplicate name exception_ : if, when
traversing the children of _<absolute-ordering>_ _,_ multiple children
with the same _<name>_ element are encountered, only the first such
occurrence must be considered.

[#50638850_pgfId-1034820]##If an _<ordering>_ element appears in the
_applicationFacesConfig_ , an informative message must be logged and the
element must be ignored.

[#50638850_pgfId-1034543]##Relative ordering: an _<ordering>_ element
within a file in the _applicationConfigurationResources_

[#50638850_pgfId-1034798]##An entry in
_applicationConfigurationResources_ may have an _<ordering>_ element. If
so, this element must contain zero or one _<before>_ elements and zero
or one _<after>_ elements. The meaning of these elements is explained
below.

[#50638850_pgfId-1034903]## _Duplicate name exception_ : if, when
traversing the constituent members of
_applicationConfigurationResources,_ multiple members with the same
_<name>_ element are encountered, the application must log an
informative error message including information to help fix the problem,
and must fail to deploy. For example, one way to fix this problem is for
the user to use absolute ordering, in which case relative ordering is
ignored.

[#50638850_pgfId-1034831]##If an _<absolute-ordering>_ element appears
in an entry in _applicationConfigurationResources_ , an informative
message must be logged and the element must be ignored.

[#50638850_pgfId-1033478]##Consider this abbreviated but illustrative
example. faces-configA, faces-configB and faces-configC are found in
_applicationConfigurationResources_ , while my-faces-config is the
_applicationFacesConfig_ . The principles that explain the ordering
result follow the example code.

[#50638850_pgfId-1033580]##faces-configA:.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1033539]##<faces-config>

[#50638850_pgfId-1034476]## <name>A</name>

[#50638850_pgfId-1033579]##
<ordering><after><name>B</name></after></ordering>

[#50638850_pgfId-1033562]## <application>

[#50638850_pgfId-1033563]##
<view-handler>com.a.ViewHandlerImpl</view-handler>

[#50638850_pgfId-1033564]## </application>

[#50638850_pgfId-1033581]## <lifecycle>

[#50638850_pgfId-1033582]##
<phase-listener>com.a.PhaseListenerImpl</phase-listener>

[#50638850_pgfId-1033586]## </lifecycle>

[#50638850_pgfId-1033561]##</faces-config>

|===

[#50638850_pgfId-1033551]##faces-configB:.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1033550]##<faces-config>

[#50638850_pgfId-1034485]## <name>B</name>

[#50638850_pgfId-1033567]## <application>

[#50638850_pgfId-1033568]##
<view-handler>com.b.ViewHandlerImpl</view-handler>

[#50638850_pgfId-1033569]## </application>

[#50638850_pgfId-1033589]## <lifecycle>

[#50638850_pgfId-1033590]##
<phase-listener>com.b.PhaseListenerImpl</phase-listener>

[#50638850_pgfId-1033591]## </lifecycle>

[#50638850_pgfId-1033565]##</faces-config>

|===

[#50638850_pgfId-1033558]##faces-configC:.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1033557]##<faces-config>

[#50638850_pgfId-1034486]## <name>C</name>

[#50638850_pgfId-1033624]## <ordering><before><others
/></before></ordering>

[#50638850_pgfId-1033574]## <application>

[#50638850_pgfId-1033575]##
<view-handler>com.c.ViewHandlerImpl</view-handler>

[#50638850_pgfId-1033597]## </application>

[#50638850_pgfId-1033598]## <lifecycle>

[#50638850_pgfId-1033599]##
<phase-listener>com.c.PhaseListenerImpl</phase-listener>

[#50638850_pgfId-1033600]## </lifecycle>

[#50638850_pgfId-1033576]##</faces-config>

|===

[#50638850_pgfId-1033619]##my-faces-config:.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1033611]##<faces-config>

[#50638850_pgfId-1034487]## <name>my</name>

[#50638850_pgfId-1033612]## <application>

[#50638850_pgfId-1033613]##
<view-handler>com.my.ViewHandlerImpl</view-handler>

[#50638850_pgfId-1033614]## </application>

[#50638850_pgfId-1033615]## <lifecycle>

[#50638850_pgfId-1033616]##
<phase-listener>com.my.PhaseListenerImpl</phase-listener>

[#50638850_pgfId-1033617]## </lifecycle>

[#50638850_pgfId-1033618]##</faces-config>

|===

[#50638850_pgfId-1034661]##In this example, the processing order for the
_applicationConfigurationResources_ and _applicationFacesConfig_ will
be.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1034672]## _Implementation Specific Config_

[#50638850_pgfId-1034684]##C

[#50638850_pgfId-1034685]##B

[#50638850_pgfId-1034686]##A

[#50638850_pgfId-1034687]##my

|===

{empty}[#50638850_pgfId-1035083]##The preceding example illustrates
some, but not all, of the following
principles.[P1-start-decoratableOrdering]

[#50638850_pgfId-1033737]## _<before>_ means the document must be
ordered before the document with the name matching the name specified
within the nested _<name>_ element.

[#50638850_pgfId-1034222]## _<after>_ means the document must be ordered
after the document with the name matching the name specified within the
nested _<name>_ element.

[#50638850_pgfId-1033808]##There is a special element _<others />_ which
may be included zero or one time within the _<before>_ or < _after>_
elements, or zero or one time directly within the _<absolute-ordering>_
elements. The _<others />_ element must be handled as follows.

[#50638850_pgfId-1035600]##The _<others />_ element represents a set of
application configuration resources. This set is described as the set of
all application configuration resources discovered in the application,
minus the one being currently processed, minus the application
configuration resources mentioned by name in the _<ordering/>_ section.
If this set is the empty set, at the time the application configuration
resources are being processed, the _<others />_ element must be ignored.
__

[#50638850_pgfId-1034373]##If the _<before>_ element contains a nested
_<others />_ , the document will be moved to the beginning of the list
of sorted documents. If there are multiple documents stating < _before>_
< _others_ />, they will all be at the beginning of the list of sorted
documents, but the ordering within the group of such documents is
unspecified.

[#50638850_pgfId-1034388]##If the _<after>_ element contains a nested
_<others />_ , the document will be moved to the end of the list of
sorted documents. If there are multiple documents requiring _<after>_ <
_others />_ , they will all be at the end of the list of sorted
documents, but the ordering within the group of such documents is
unspecified.

[#50638850_pgfId-1034391]##Within a _<before>_ or _<after>_ element, if
an _<others />_ element is present, but is not the only _<name>_ element
within its parent element, the other elements within that parent must be
considered in the ordering process.

[#50638850_pgfId-1034720]##If the _<others />_ element appears directly
within the _<absolute-ordering>_ element, the runtime must ensure that
any application configuration resources in
_applicationConfigurationResources_ not explicitly named in the
_<absolute-ordering>_ section are included at that point in the
processing order. __

[#50638850_pgfId-1033816]##If a faces-config file does not have an
_<ordering>_ or _<absolute-ordering>_ element the artifacts are assumed
to not have any ordering dependency.

[#50638850_pgfId-1033814]##If the runtime discovers circular references,
an informative message must be logged, and the application must fail to
deploy. Again, one course of action the user may take is to use absolute
ordering in the _applicationFacesConfig_ . __

[#50638850_pgfId-1034563]##The previous example can be extended to
illustrate the case when _applicationFacesConfig_ contains an ordering
section.

[#50638850_pgfId-1034580]##my-faces-config:.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1034587]##<faces-config>

[#50638850_pgfId-1034588]## <name>my</name>

[#50638850_pgfId-1034589]## <absolute-ordering>

[#50638850_pgfId-1034597]## <name>C</name>

[#50638850_pgfId-1034598]## <name>A</name>

[#50638850_pgfId-1034599]## </absolute-ordering>

[#50638850_pgfId-1034590]## <application>

[#50638850_pgfId-1034591]##
<view-handler>com.my.ViewHandlerImpl</view-handler>

[#50638850_pgfId-1034592]## </application>

[#50638850_pgfId-1034593]## <lifecycle>

[#50638850_pgfId-1034594]##
<phase-listener>com.my.PhaseListenerImpl</phase-listener>

[#50638850_pgfId-1034595]## </lifecycle>

[#50638850_pgfId-1034596]##</faces-config>

|===

[#50638850_pgfId-1034614]##In this example, the constructor decorator
ordering for _ViewHandler_ would be C, A, my.

[#50638850_pgfId-1035114]##Some additional example scenarios are
included below. All of these apply to the
_applicationConfigurationResources_ relative ordering case, not to the
_applicationFacesConfig_ absolute ordering case.

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1034930]##Document A -
<after><others/><name>C</name></after>

[#50638850_pgfId-1034931]##Document B - <before><others/></before>

[#50638850_pgfId-1034932]##Document C - <after><others/></after>

[#50638850_pgfId-1034933]##Document D - no ordering

[#50638850_pgfId-1034934]##Document E - no ordering

[#50638850_pgfId-1034923]##Document F -
<before><others/><name>B</name></before>

|===

[#50638850_pgfId-1034939]##The valid parse order is F, B, D/E, C, A,
where D/E may appear as D, E or E, D

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1034960]##Document <no id> - <after><others/></after>

[#50638850_pgfId-1034961]## <before><name>C</name></before>

[#50638850_pgfId-1034962]##Document B - <before><others/></before>

[#50638850_pgfId-1034963]##Document C - no ordering

[#50638850_pgfId-1034964]##Document D - <after><others/></after>

[#50638850_pgfId-1034965]##Document E - <before><others/></before>

[#50638850_pgfId-1034966]##Document F - no ordering

|===

[#50638850_pgfId-1034973]##The complete list of parse order solutions
for the above example is

[#50638850_pgfId-1035130]##B,E,F,<no id>,C,D

[#50638850_pgfId-1035131]##B,E,F,<no_id>,D,C

[#50638850_pgfId-1035132]##E,B,F,<no id>,C,D

[#50638850_pgfId-1035133]##E,B,F,<no_id>,D,C

[#50638850_pgfId-1035134]##B,E,F,D,<no id>,C

[#50638850_pgfId-1035135]##E,B,F,D,<no id>,C

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1034998]##Document A - <after><name>B</name></after>

[#50638850_pgfId-1034999]##Document B - no ordering

[#50638850_pgfId-1035000]##Document C - <before><others/></before>

[#50638850_pgfId-1034985]##Doucment D - no ordering

|===

[#50638850_pgfId-1035005]##Resulting parse order: C, B, D, A. The parse
order could also be: C, D, B, A.

{empty}[#50638850_pgfId-1033360]##[P1-endDecoratableOrdering]

==== [#50638850_pgfId-1033301]##[#50638850_57167]##Example Application Configuration Resource

[#50638850_pgfId-1032143]##The following example application resource
file defines a custom _UIComponent_ of type _Date_ , plus a number of
_Renderer_ s that know how to decode and encode such a component:

[width="100%",cols="100%",]
|===
a|
[#50638850_pgfId-1032146]##<?xml version=”1.0”?>

[#50638850_pgfId-1032460]##<faces-config version="1.2"
xmlns="http://java.sun.com/xml/ns/javaee"

[#50638850_pgfId-1032461]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638850_pgfId-1032462]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee

[#50638850_pgfId-1032153]##
http://java.sun.com/xml/ns/javaee/web-facesconfig_1_2.xsd">

[#50638850_pgfId-1032154]##<!-- Define our custom component -->

[#50638850_pgfId-1032155]##<component>

[#50638850_pgfId-1032156]## <description>

[#50638850_pgfId-1032157]## A custom component for rendering
user-selectable dates in various formats.

[#50638850_pgfId-1032158]## </description>

[#50638850_pgfId-1032159]## <display-name>My Custom Date</display-name>

[#50638850_pgfId-1032160]## <component-type>Date</component-type>

[#50638850_pgfId-1032161]## <component-class>

[#50638850_pgfId-1032162]## com.example.components.DateComponent

[#50638850_pgfId-1032163]## </component-class>

[#50638850_pgfId-1032164]##</component>

[#50638850_pgfId-1032165]## 

[#50638850_pgfId-1032166]##<!-- Define two renderers that know how to
deal with dates -->

[#50638850_pgfId-1032167]##<render-kit>

[#50638850_pgfId-1032168]## <!-- No render-kit-id, so add them to
default RenderKit -->

[#50638850_pgfId-1032169]## <renderer>

[#50638850_pgfId-1032170]## <display-name>Calendar Widget</display-name>

[#50638850_pgfId-1032171]##
<component-family>MyComponent</component-family>

[#50638850_pgfId-1032172]## <renderer-type>MyCalendar</renderer-type>

[#50638850_pgfId-1032173]## <renderer-class>

[#50638850_pgfId-1032174]## com.example.renderers.MyCalendarRenderer

[#50638850_pgfId-1032175]## </renderer-class>

[#50638850_pgfId-1032176]## </renderer>

[#50638850_pgfId-1032177]## <renderer>

[#50638850_pgfId-1032178]## <display-name>Month/Day/Year</display-name>

[#50638850_pgfId-1032179]## <renderer-type>MonthDayYear</renderer-type>

[#50638850_pgfId-1032180]## <renderer-class>

[#50638850_pgfId-1032181]## com.example.renderers.MonthDayYearRenderer

[#50638850_pgfId-1032182]## </renderer-class>

[#50638850_pgfId-1032183]## </renderer>

[#50638850_pgfId-1032184]##</render-kit>

[#50638850_pgfId-1032185]## 

[#50638850_pgfId-1032186]##</faces-config>

|===

[#50638850_pgfId-1032187]##Additional examples of configuration elements
that might be found in application configuration resources are in
link:JSF.htm#50638862_25716[See Managed Bean Configuration Example] and
link:JSF.htm#50638861_83916[See Example NavigationHandler
Configuration].

=== [#50638850_pgfId-1035683]##

image:JSF-47.gif[image]

[#50638850_57078]##Annotations that correspond to and may take the place
of entries in the Application Configuration Resources

[#50638850_pgfId-1035684]##An implementation must support several
annotation types that take may take the place of entries in the
Application Configuration Resources. The implementation requirements are
specified in this section.

==== [#50638850_pgfId-1034239]##[#50638850_27931]##Requirements for scanning of classes for annotations

[#50638850_pgfId-1034240]##[P1_start-annotation-discovery]If the
_<faces-config>_ element in the _WEB-INF/faces-config.xml_ file contains
_metadata-complete_ attribute whose value is “ _true_ ”, the
implementation must not perform annotation scanning on any classes
except for those classes provided by the implementation itself.
Otherwise, continue as follows.

[#50638850_pgfId-1034308]##If the runtime discovers a conflict between
an entry in the Application Configuration Resources and an annotation,
the entry in the Application Configuration Resources takes precedence.

[#50638850_pgfId-1034273]##All classes in _WEB-INF/classes_ must be
scanned.

{empty}[#50638850_pgfId-1034281]##For every jar in the application's
_WEB-INF/lib_ directory, if the jar contains a “
_META-INF/faces-config.xml_ ” file or a file that matches the regular
expression “ _.*\.faces-config.xml_ ” (even an empty one), all classes
in that jar must be scanned.[P1_end-annotation-discovery]

[#50638859_pgfId-1000264]##[#50638859_72305]## 

== [#50638859_pgfId-1000265]##

image:JSF-48.gif[image]

Lifecycle Management

image:JSF-49.gif[image]

[#50638859_pgfId-1000269]##In link:JSF.htm#50638877_40710[See Request
Processing Lifecycle],” the required functionality of each phase of the
request processing lifecycle was described. This chapter describes the
standard APIs used by JSF implementations to manage and execute the
lifecycle. Each of these classes and interfaces is part of the
_javax.faces.lifecycle_ package.

[#50638859_pgfId-1000270]##Page authors, component writers, and
application developers, in general, will not need to be aware of the
lifecycle management APIs—they are primarily of interest to tool
providers and JSF implementors.

=== [#50638859_pgfId-1000272]##

image:JSF-50.gif[image]

[#50638859_92529]##Lifecycle

[#50638859_pgfId-1000273]##Upon receipt of each JSF-destined request to
this web application, the JSF implementation must acquire a reference to
the _Lifecycle_ instance for this web application, and call its
_execute()_ and _render()_ methods to perform the request processing
lifecycle. The _Lifecycle_ instance invokes appropriate processing logic
to implement the required functionality for each phase of the request
processing lifecycle, as described in link:JSF.htm#50638877_42543[See
Standard Request Processing Lifecycle Phases].

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000279]##public void execute(FacesContext context)
throws FacesException;

[#50638859_pgfId-1000280]## 

[#50638859_pgfId-1000281]##public void render(FacesContext context)
throws FacesException;

|===

[#50638859_pgfId-1000282]##The _execute()_ method performs phases up to,
but not including, the _Render Response_ phase. The _render()_ method
performs the Render Response phase. This division of responsibility
makes it easy to support JavaServer Faces processing in a portlet-based
environment.

[#50638859_pgfId-1000283]##As each phase is processed, registered
_PhaseListener_ instances are also notified. The general processing for
each phase is as follows:

[#50638859_pgfId-1000284]##From the set of registered _PhaseListener_
instances, select the relevant ones for the current phase, where
“relevant” means that calling _getPhaseId()_ on the _PhaseListener_
instance returns the phase identifier of the current phase, or the
special value _PhaseId.ANY_PHASE_ .

[#50638859_pgfId-1000285]##Call the _beforePhase()_ method of each
relevant listener, in the order that the listeners were registered.

[#50638859_pgfId-1000286]##If no called listener called the
_FacesContext.renderResponse()_ or _FacesContext.responseComplete()_
method, execute the functionality required for the current phase.

[#50638859_pgfId-1000287]##Call the _afterPhase()_ method of each
relevant listener, in the reverse of the order that the listeners were
registered.

[#50638859_pgfId-1000288]##If the _FacesContext.responseComplete()_
method has been called during the processing of the current request, or
we have just completed the _Render Response_ phase, perform no further
phases of the request processing lifecycle.

[#50638859_pgfId-1000289]##If the _FacesContext.renderResponse()_ method
has been called during the processing of the current request, and we
have not yet executed the _Render Response_ phase of the request
processing lifecycle, ensure that the next executed phase will be
_Render Response_

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000292]##public void addPhaseListener(PhaseListener
listener);

[#50638859_pgfId-1000293]## 

[#50638859_pgfId-1000294]##public void removePhaseListener(PhaseListener
listener);

|===

[#50638859_pgfId-1000295]##These methods register or deregister a
_PhaseListener_ that wishes to be notified before and after the
processing of each standard phase of the request processing lifecycle.
Implementations should prevent duplicate _PhaseListener_ registrations
and log an exception if an attempt is made. The webapp author can
declare a _PhaseListener_ to be added using the _phase-listener_ element
of the application configuration resources file. Please see
_link:JSF.htm#50638859_16974[See PhaseListener]_ .

=== [#50638859_pgfId-1000300]##

image:JSF-50.gif[image]

[#50638859_72521]##[#50638859_12.2 PhaseEvent]##PhaseEvent

[#50638859_pgfId-1000301]##This class represents the beginning or ending
of processing for a particular phase of the request processing
lifecycle, for the request encapsulated by the _FacesContext_ instance
passed to our constructor.

[width="100%",cols="100%",]
|===
|[#50638859_pgfId-1000304]##public PhaseEvent(FacesContext context,
PhaseId phaseId, Lifecycle lifecycle);
|===

[#50638859_pgfId-1000305]##Construct a new _PhaseEvent_ representing the
execution of the specified phase of the request processing lifecycle, on
the request encapsulated by the specified _FacesContext_ instance. The
_Lifecycle_ instance must be the lifecycle used by the current
_FacesServlet_ that is processing the request. It will serve as the
_source_ of the _java.util.EventObject_ from which _PhaseEvent_
inherits.

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000308]##public FacesContext getFacesContext();

[#50638859_pgfId-1000309]## 

[#50638859_pgfId-1000310]##public PhaseId getPhaseId();

|===

[#50638859_pgfId-1000311]##Return the properties of this event instance.
The specified _FacesContext_ instance will also be returned if
_getSource()_ (inherited from the base _EventObject_ class) is called.

=== [#50638859_pgfId-1000313]##

image:JSF-50.gif[image]

[#50638859_16974]##PhaseListener

[#50638859_pgfId-1000314]##This interface must be implemented by objects
that wish to be notified before and after the processing for a
particular phase of the request processing lifecycle, on a particular
request. Implementations of _PhaseListener_ must be programmed in a
thread-safe manner.

[width="100%",cols="100%",]
|===
|[#50638859_pgfId-1000317]##public PhaseId getPhaseId();
|===

[#50638859_pgfId-1000318]##The _PhaseListener_ instance indicates for
which phase of the request processing lifecycle this listener wishes to
be notified. If _PhaseId.ANY_PHASE_ is returned, this listener will be
notified for all standard phases of the request processing lifecycle.

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000321]##public void beforePhase(PhaseEvent event);

[#50638859_pgfId-1000322]## 

[#50638859_pgfId-1000323]##public void afterPhase(PhaseEvent event);

|===

{empty}[#50638859_pgfId-1000324]##The beforePhase() method is called
before the standard processing for a particular phase is performed,
while the afterPhase() method is called after the standard processing
has been completed. The JSF implementation must guarantee that, if
_beforePhase()_ has been called on a particular instance, then
_afterPhase()_ will also be called, regardless of any Exceptions that
may have been thrown during the actual execution of the lifecycle phase.
For example, let’s say there are three PhaseListeners attached to the
lifecycle: _A, B_ , and _C_ , in that order. _A.beforePhase()_ is
called, and executes successfully. _B.beforePhase()_ is called and
throws an exception. [P1-start_publishExceptionBefore] Any exceptions
thrown during the _beforePhase()_ listeners must be caught and published
to the _ExceptionHandler_ , as described
below.[P1-end_publishExceptionBefore] In this example, _C.beforePhase()_
must not be called. Then the actual lifecycle phase executes. Any
exceptions thrown during the execution of the actual phase, that reach
the runtime code that implements the JSF lifecycle phase,
[P1-start_publishExceptionDuring] must be caught and and published to
the _ExceptionHandler_ , as described
below[P1-end_publishExceptionDuring]. When the lifecycle phase exits,
due to an exeception or normal termination, the _afterPhase()_ listeners
must be called in reverse order from the _beforePhase()_ listeners in
the following manner. _C.afterPhase()_ must not be called, since
_C.beforePhase()_ was not called. _B.afterPhase()_ must not be called,
since _B.beforePhase()_ did not execute successfully. _A.afterPhase()_
must be called. [P1-start_publishExceptionAfter]Any exceptions thrown
during the _afterPhase()_ liseteners must be caught and published to the
_ExceptionHandler_ , as described below.[P1-start_publishExceptionAfter]

[#50638859_pgfId-1000426]##The previous paragraph detailed several cases
where exceptions should be published to the _Exception_ handler.
[P1-start_publishExceptionSpec] The following action must be taken by
the runtime to implement this requirement as well as an additional
requirent to cause the _ExceptionHandler_ to take action on the
published _Exception_ (s). The specification is shown in pseudocode.
This code does not implement the before/after matching guarantees
specified above and is only intended to describe the specification for
publishing and handling _ExceptionQueuedEvent_ instances that arise from
exceptions being thrown during the execution of a lifecycle phase.
Methods shown in _thisTypeface()_ are not a part of the API and are just
included for discussion.

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000523]##FacesContext facesContext =
FacesContext.getCurrentInstance();

[#50638859_pgfId-1000524]##Application app =
facesContext.getApplication();

[#50638859_pgfId-1000531]##ExceptionHandler handler =
facesContext.getExceptionHandler();

[#50638859_pgfId-1000437]## 

[#50638859_pgfId-1000527]##try \{

[#50638859_pgfId-1000518]## _callBeforePhaseListeners_ ();

[#50638859_pgfId-1000548]##} catch (Throwable thrownException) \{

[#50638859_pgfId-1000549]## javax.faces.event.ExceptionEventContext
eventContext =

[#50638859_pgfId-1000550]## new ExceptionEventContext(thrownException,
null,

[#50638859_pgfId-1000551]## facesContext.getPhaseId());

[#50638859_pgfId-1000599]##
eventContext.getAttributes().put(EventContext.IN_BEFORE_PHASE,

[#50638859_pgfId-1000605]## Boolean.TRUE);

[#50638859_pgfId-1000552]## app.publishEvent(ExceptionQueuedEvent.class,
eventContext);

[#50638859_pgfId-1000553]##}

[#50638859_pgfId-1000536]## 

[#50638859_pgfId-1000544]##try \{

[#50638859_pgfId-1000537]## _doCurrentPhase_ ();

[#50638859_pgfId-1000545]##} catch (Throwable thrownException) \{

[#50638859_pgfId-1000559]## javax.faces.event.ExceptionEventContext
eventContext =

[#50638859_pgfId-1000560]## new ExceptionEventContext(thrownException,
null,

[#50638859_pgfId-1000561]## facesContext.getPhaseId());

[#50638859_pgfId-1000562]## app.publishEvent(ExceptionQueuedEvent.class,
eventContext);

[#50638859_pgfId-1000565]##} finally \{

[#50638859_pgfId-1000572]## try \{

[#50638859_pgfId-1000570]## _callAfterPhaseListeners();_

[#50638859_pgfId-1000582]## } catch (Throwable thrownException) \{

[#50638859_pgfId-1000583]## javax.faces.event.ExceptionEventContext
eventContext =

[#50638859_pgfId-1000584]## new ExceptionEventContext(thrownException,
null,

[#50638859_pgfId-1000585]## facesContext.getPhaseId());

[#50638859_pgfId-1000608]##
eventContext.getAttributes().put(EventContext.IN_AFTER_PHASE,

[#50638859_pgfId-1000609]## Boolean.TRUE);

[#50638859_pgfId-1000586]## app.publishEvent(ExceptionQueuedEvent.class,
eventContext);

[#50638859_pgfId-1000580]## }

[#50638859_pgfId-1000571]## handler.handle();

[#50638859_pgfId-1000569]##}

|[#50638859_pgfId-1000447]## 
|===

[#50638859_pgfId-1000431]##body text.

{empty}[#50638859_pgfId-1000614]##[P1-end_publishExceptionSpec]

[#50638859_pgfId-1000325]## _PhaseListener_ implementations may affect
the remainder of the request processing lifecycle in several ways,
including:

[#50638859_pgfId-1000326]##Calling _renderResponse()_ on the
_FacesContext_ instance for the current request, which will cause
control to transfer to the _Render Response_ phase of the request
processing lifecycle, once processing of the current phase is complete.

[#50638859_pgfId-1000327]##Calling responseComplete() on the
FacesContext instance for the current request, which causes processing
of the request processing lifecycle to terminate once the current phase
is complete.

=== [#50638859_pgfId-1000328]##

image:JSF-50.gif[image]

LifecycleFactory

[#50638859_pgfId-1000329]##A single instance of
_javax.faces.lifecycle.LifecycleFactory_ must be made available to each
JSF-based web application running in a servlet or portlet container. The
factory instance can be acquired by JSF implementations or by
application code, by executing:

[width="100%",cols="100%",]
|===
a|
[#50638859_pgfId-1000332]##LifecycleFactory factory = (LifecycleFactory)

[#50638859_pgfId-1000333]##
FactoryFinder.getFactory(FactoryFinder.LIFECYCLE_FACTORY);

|===

[#50638859_pgfId-1000337]##The _LifecycleFactory_ implementation class
supports the following methods:

[width="100%",cols="100%",]
|===
|[#50638859_pgfId-1000336]##public void addLifecycle(String lifecycleId,
Lifecycle lifecycle);
|===

[#50638859_pgfId-1000338]##Register a new _Lifecycle_ instance under the
specified lifecycle identifier, and make it available via calls to the
_getLifecycle_ method for the remainder of the current web application’s
lifetime.

[width="100%",cols="100%",]
|===
|[#50638859_pgfId-1000341]##public Lifecycle getLifecycle(String
lifecycleId);
|===

[#50638859_pgfId-1000342]##The _LifecycleFactory_ implementation class
provides this method to create (if necessary) and return a _Lifecycle_
instance. All requests for the same lifecycle identifier from within the
same web application will return the same _Lifecycle_ instance, which
must be programmed in a thread-safe manner.

[#50638859_pgfId-1000343]##Every JSF implementation must provide a
_Lifecycle_ instance for a default lifecycle identifier that is
designated by the _String_ constant _LifecycleFactory.DEFAULT_LIFECYCLE_
. For advanced uses, a JSF implementation may support additional
lifecycle instances, named with unique lifecycle identifiers.

[width="100%",cols="100%",]
|===
|[#50638859_pgfId-1000346]##public Iterator<String> getLifecycleIds();
|===

[#50638859_pgfId-999713]##This method returns an iterator over the set
of lifecycle identifiers supported by this factory. This set must
include the value specified by _LifecycleFactory.DEFAULT_LIFECYCLE_ .

[#50638885_pgfId-1015879]## [#50638885_37124]##

== [#50638885_pgfId-1015881]##

image:JSF-51.gif[image]

[#50638885_74973]##Ajax Integration

image:JSF-52.gif[image]

[#50638885_pgfId-1015882]##This chapter of the specification describes
how Ajax integrates with the JavaServer Faces framework to create
dynamic web applications. JavaServer Faces 1.2 standardized portions of
the architecture to facilitate building Web 2.0 applications with Ajax.
This chapter describes the resources and JavaScript APIs that are used
to expose the Ajax capabilities of JavaServer Faces to page authors and
component authors. It also describes the necessary ingredients of a
JavaServer Faces Ajax framework, namely, a resource delivery mechanism,
partial tree traversal, partial page update.

=== [#50638885_pgfId-1015885]##

image:JSF-53.gif[image]

[#50638885_99347]##[#50638885_Ajax JavaScript Resource]##JavaScript
Resource

[#50638885_pgfId-1015886]##There must be a single JavaScript resource
that exists with the resource identifier given by the value of the
constant
_javax.faces.application.ResourceHandler.JSF_SCRIPT_RESOURCE_NAME_ and
it must exist under the resource library given by the value of the
constant
_javax.faces.application.ResourceHandler.JSF_SCRIPT_LIBRARY_NAME,_
following the conventions in _link:JSF.htm#50638877_44233[See Resource
Handling]._ This resource contains the JavaScript APIs that facilitate
Ajax interaction with JavaServer Faces.

==== [#50638885_pgfId-1017820]##[#50638885_Ajax Resource Loading]##JavaScript Resource Loading

[#50638885_pgfId-1017816]##The JavaScript resource can become available
to a JavaServer Faces application using a number of different
approaches.

===== [#50638885_pgfId-1017831]##[#50638885_The Annotation Approach]##The Annotation Approach

[#50638885_pgfId-1017884]##Component authors can specify that a custom
component or renderer requires the Ajax resource with the use of the
ResourceDependency annotation.[#50638885_40874]##

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1017887]##@ResourceDependency (name="jsf.js",
library="javax.faces", target="head")

[#50638885_pgfId-1017888]##public class MyComponent extends UIOutput...

|===

[#50638885_pgfId-1017900]##For more information on this approach refer
to link:JSF.htm#50638877_Relocatable%20Resources[See Relocatable
Resources] and
link:JSF.htm#50638877_Resource%20Rendering%20Using%20Annotations[See
Resource Rendering Using Annotations].

===== [#50638885_pgfId-1013213]##[#50638885_The Resource API Approach]##The Resource API Approach

[#50638885_pgfId-1018139]##Component authors can also specify that a
custom component or renderer requires the JavaScript resource by using
the resource APIs. For example, a component or renderer’s encode method
may contain:

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1018142]##Resource resource =
context.getApplication().getResourceHandler()

[#50638885_pgfId-1018143]## .createResource(“jsf.js”, “javax.faces”);

[#50638885_pgfId-1018144]##...

[#50638885_pgfId-1018145]##writer.startElement("script", component);

[#50638885_pgfId-1018146]##writer.writeAttribute("type",
"text/javascript", "type");

[#50638885_pgfId-1018147]##writer.writeAttribute("src",((resource !=
null)? resource.getRequestPath(): "RES_NOT_FOUND"),”src”);

[#50638885_pgfId-1018148]##writer.endElement(“script”);

|===

[#50638885_pgfId-1018152]##Script resources are relocatable resources
(see link:JSF.htm#50638877_Relocatable%20Resources[See Relocatable
Resources]) which means you can control the rendering location for these
resources by setting the “target” attribute on the resource component:

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1018160]##public class MyComponent extends UIOutput \{

[#50638885_pgfId-1018162]##...

[#50638885_pgfId-1018163]##getAttributes().put(“target”, “head”);

[#50638885_pgfId-1018164]##...

[#50638885_pgfId-1018170]##}

|===

[#50638885_pgfId-1018255]##This attribute must be set before the
component is added to the view. The component or renderer must also
implement the event processing method:

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1018258]##public void processEvent(SystemEvent event)
throws AbortProcessingException \{

[#50638885_pgfId-1018259]##UIComponent component = (UIComponent)
event.getSource();

[#50638885_pgfId-1018260]##FacesContext context =
FacesContext.getCurrentInstance();

[#50638885_pgfId-1018261]##if (component.getAttributes().get("target")
!= null) \{

[#50638885_pgfId-1018262]##context.getViewRoot().addComponentResource(context,

[#50638885_pgfId-1018263]##component);

[#50638885_pgfId-1018264]##}

[#50638885_pgfId-1018265]##}

[#50638885_pgfId-1018266]## 

|===

[#50638885_pgfId-1018267]##When the component is added to the view, an
event will be published. This event handling method will add the
component resource to one of the resource location facets under the view
root so it will be in place before rendering.

===== [#50638885_pgfId-1018268]##[#50638885_The Page Declaration Language Approach]##[#50638885_marker-1019159]##The Page D eclaration Language Approach

[#50638885_pgfId-1017955]##Page authors can make the Ajax resource
available to the current view using the outputScript tag. For example:

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1018273]##<f:view contentType=”text/html”/>

[#50638885_pgfId-1018274]##<h:head>

[#50638885_pgfId-1018275]##<meta...

[#50638885_pgfId-1018276]##<title...

[#50638885_pgfId-1018277]##</h:head>

[#50638885_pgfId-1018313]##<h:body>

[#50638885_pgfId-1018287]##...

[#50638885_pgfId-1018301]##<h:outputScript name=”jsf.js”
library=”javax.faces”

[#50638885_pgfId-1018305]##target=”body”/>

[#50638885_pgfId-1018309]##...

[#50638885_pgfId-1018314]##</h:body>

[#50638885_pgfId-1018321]##...

[#50638885_pgfId-1018288]## 

|===

=== [#50638885_pgfId-1017964]##

image:JSF-53.gif[image]

[#50638885_JavaScript Namespacing]##JavaScript Namespacing

[#50638885_pgfId-1018325]##JavaScript objects that are not enclosed
within a namespace are global, which means they run the risk of
interfering, overriding and/or clobbering previously defined JavaScript
objects. This section defines the requirements for implementations
intending to use the JavaServer Faces 2.0 JavaScript API.

[#50638885_pgfId-1018878]##[P1-start javascript namespace]Any
implementation that intends to use the JavaServer Faces 2.0 JavaScript
API must define a top level JavaScript object name jsf, whose type is a
JavaScript associative array. Within that top level JavaScript object,
there must be a property named ajax..

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1018881]##if (jsf == null || typeof jsf == "undefined")
\{

[#50638885_pgfId-1018882]## var jsf = new Object();

[#50638885_pgfId-1018883]##}

[#50638885_pgfId-1018884]##if (jsf.ajax == null || typeof jsf.ajax ==
"undefined") \{

[#50638885_pgfId-1018885]## jsf["ajax"] = new Object();

[#50638885_pgfId-1018886]##}

[#50638885_pgfId-1018889]## 

|===

{empty}[#50638885_pgfId-1018890]##[P1-end]

=== [#50638885_pgfId-1018892]##

image:JSF-53.gif[image]

[#50638885_Ajax JavaScript API]##Ajax Interaction

[#50638885_pgfId-1021375]##This section of the specification outlines
the Ajax JavaScript APIs that are used to initiate client side
interactions with the JavaServer Faces framework including partial tree
traversal and partial page update. All of the functions in this
JavaScript API will be exposed on a page scoped JavaScript object. Refer
to link:JSF.htm#50638886_JavaScript%20API[See JavaScript API]for details
about the individual API
functions.[#50638885_Collecting and Encoding View State]##

==== [#50638885_pgfId-1021380]##[#50638885_Use Cases]##[#50638885_13.3.1.1 Use Case]##[#50638885_Sending an Ajax Request]##Sending an Ajax Request

[#50638885_pgfId-1021289]##The JavaScript function jsf.ajax.request is
used to send information to the server to control partial view
processing (link:JSF.htm#50638885_Partial%20View%20Execute[See Partial
View Processing]) and partial view rendering
(link:JSF.htm#50638885_Partial%20View%20Render[See Partial View
Rendering]). All requests using the jsf.ajax.request function will be
made asynchronously to the server. Refer to
link:JSF.htm#50638886_Initiating%20an%20Ajax%20Request[See Initiating an
Ajax Request].

==== [#50638885_pgfId-1019962]##[#50638885_Request Sending Specifics]##[#50638885_13.3.2.3 Use Case]##[#50638885_Ajax Request Queueing]##Ajax Request Queueing

{empty}[#50638885_pgfId-1019966]##[P1-start-ajaxrequest-queue] All Ajax
requests must be put into a client side request queue before they are
sent to the server to ensure Ajax requests are processed in the order
they are sent. The request that has been waiting in the queue the
longest is the next request to be sent. After a request is sent, the
Ajax request callback function must remove the request from the queue
(also known as dequeuing). If the request completed successfully, it
must be removed from the queue. If there was an error, the client must
be notified, but the request must still be removed from the queue so the
next request can be sent. The next request (the oldest request in the
queue) must be sent. Refer to the jsf.ajax.request JavaScript
documentation for more specifics about the Ajax request queue.[P1-end]

==== [#50638885_pgfId-1019988]##[#50638885_Request Callback Function Specifics]##Request Callback Function

[#50638885_pgfId-1020496]##The Ajax request callback function is called
when the Ajax request/response interaction is complete.
[P1-start-callback]This function must perform the following actions:

[#50638885_pgfId-1021955]##If the return status is >= 200 and < 300,
send a “complete” event following
link:JSF.htm#50638885_Sending%20Events[See Sending Events]. Call
jsf.ajax.response passing the Ajax request object (for example the
XMLHttpRequest instance) and the request context (containing the source
DOM element, onevent event function callback and onerror error function
callback).

[#50638885_pgfId-1022014]##If the return status is outside the range
mentioned above, send a “complete” event following
link:JSF.htm#50638885_Sending%20Events[See Sending Events]. Send an
“httpError” error following link:JSF.htm#50638885_Signaling%20Errors[See
Signaling Errors].

[#50638885_pgfId-1022025]##Regardless of whether the request completed
successfully or not:

[#50638885_pgfId-1022026]##remove the completed requests (Ajax
readystate 4) from the request queue (dequeue) - specifically the
requests that have been on the queue the longest.

{empty}[#50638885_pgfId-1022032]##find the next oldest unprocessed (Ajax
readystate 0) request on the queue, and send it. The implementation must
ensure that the request that is sent does not enter the queue
again.[P1-end]

[#50638885_pgfId-1022037]##Refer to
link:JSF.htm#50638885_Processing%20The%20Ajax%20Response[See Receiving
The Ajax Response]. Also refer to the jsf.ajax.request JavaScript
documentation for more specifics about the request callback function.

==== [#50638885_pgfId-1020022]##[#50638885_Processing The Ajax Response]##Receiving The Ajax Response

{empty}[#50638885_pgfId-1020044]##The jsf.ajax.response function is
responsible for examining the markup that is returned from the server
and updating the client side DOM. The Ajax request callback function
should call this function when a request completes successfully.
[P1-start-ajaxresponse]The implementation of jsf.ajax.response must
handle the response as outlined in the JavaScript documentation for
jsf.ajax.response. The elements in the response must be processed in the
order they appear in the response.[P1-end]

==== [#50638885_pgfId-1021392]##[#50638885_Monitoring Events and Trapping Errors]##[#50638885_Monitoring Events]##Monitoring Events On The Client

[#50638885_pgfId-1021396]##JavaScript functions can be registered to be
notified during various stages of the Ajax request/response cycle.
Functions can be set up to monitor individual Ajax requests, and
functions can also be set up to monitor all Ajax requests.

===== [#50638885_pgfId-1021539]##[#50638885_Monitoring Events For An Ajax Request]##Monitoring Events For An Ajax Request

[#50638885_pgfId-1021585]##There are two ways to monitor events for a
single Ajax request by registering an event callback function:

[#50638885_pgfId-1021592]##By using the <f:ajax> tag with the onevent
attribute.

[#50638885_pgfId-1021645]##By using the JavaScript API function
jsf.ajax.request with onevent as an option.

{empty}[#50638885_pgfId-1021649]##Refer to
link:JSF.htm#50638887_%3Cf[See <f:ajax>] for details on the use of the
<f:ajax> tag approach. Refer to
link:JSF.htm#50638886_Initiating%20an%20Ajax%20Request[See Initiating an
Ajax Request] for details about using the jsf.ajax.request function
approach. [P1-start-event-request]The implementation must ensure the
JavaScript function that is registered for an Ajax request must be
called in accordance with the events outlined in
link:JSF.htm#50638886_Events[See Events].[P1-end]

===== [#50638885_pgfId-1021692]##[#50638885_Monitoring Events For All Ajax Requests]##Monitoring Events For All Ajax Requests

{empty}[#50638885_pgfId-1021723]##The JavaScript API provides the
jsf.ajax.addOnEvent function that can be used to register a JavaScript
function that will be notified when any Ajax request/response event
occurs. Refer to
link:JSF.htm#50638886_Registering%20Callback%20Functions[See Registering
Callback Functions] for more details. The jsf.ajax.addOnEvent function
accepts a JavaScript function argument that will be notified when events
occur during any Ajax request/response event cycle. [P1-start-event] The
implementation must ensure the JavaScript function that is registered
must be called in accordance with the events outlined in
link:JSF.htm#50638886_Events[See Events].[P1-end]

===== [#50638885_pgfId-1021868]##[#50638885_Sending Events]##Sending Events

[#50638885_pgfId-1021872]##[P1-start-event-send]The implementation must
send events to the runtime as follows:

[#50638885_pgfId-1021912]##Construct a data payload for events using the
properties described in link:JSF.htm#50638886_Event%20Data%20Payload[See
Event Data Payload].

[#50638885_pgfId-1021916]##If an event handler function was registered
with the “onevent” attribute
(link:JSF.htm#50638885_Monitoring%20Events%20For%20An%20Ajax%20Request[See
Monitoring Events For An Ajax Request]) call it passing the data
payload.

{empty}[#50638885_pgfId-1021918]##If any event handling functions were
registered with the “addOnEvent” function
(link:JSF.htm#50638885_Monitoring%20Events%20For%20All%20Ajax%20Requests[See
Monitoring Events For All Ajax Requests]) call them passing the data
payload.[P1-end]

==== [#50638885_pgfId-1021691]##[#50638885_Handling Errors On the Client]##Handling Errors On the Client

[#50638885_pgfId-1021735]##JavaScript functions can be registered to be
notified when Ajax requests complete with error status codes from the
server to give implementations a chance to handle the errors. Functions
can be set up to handle errors from individual Ajax requests and
functions can be setup to handle errors for all Ajax requests.

===== [#50638885_pgfId-1021738]##[#50638885_Handling Errors For An Ajax Request]##Handling Errors For An Ajax Request

[#50638885_pgfId-1021753]##There are two ways to handle errors for a
single Ajax request by registering an error callback function:

[#50638885_pgfId-1021754]##By using the <f:ajax> tag with the onerror
attribute.

[#50638885_pgfId-1021742]##By using the JavaScript API function
jsf.ajax.request with onerror as an option.

{empty}[#50638885_pgfId-1021771]##Refer to
link:JSF.htm#50638887_%3Cf[See <f:ajax>] for details on the use of the
<f:ajax> tag approach. Refer to
link:JSF.htm#50638886_Initiating%20an%20Ajax%20Request[See Initiating an
Ajax Request] for details about using the jsf.ajax.request function
approach. [P1-start-event-request]The implementation must ensure the
JavaScript function that is registered for an Ajax request must be
called in accordance when the request status code from the server is as
outlined in link:JSF.htm#50638886_Errors%20Table[See Errors].[P1-end]

===== [#50638885_pgfId-1021763]##[#50638885_Handling Errors For All Ajax Requests]##Handling Errors For All Ajax Requests

{empty}[#50638885_pgfId-1021788]##The JavaScript API provides the
jsf.ajax.addOnError function that can be used to register a JavaScript
function that will be notified when an error occurs for any Ajax
request/response. Refer to
link:JSF.htm#50638886_Registering%20Callback%20Functions[See Registering
Callback Functions] for more details. The jsf.ajax.addOnError function
accepts a JavaScript function argument that will be notified when errors
occur during any Ajax request/response cycle. [P1-start-event] The
implementation must ensure the JavaScript function that is registered
must be called in accordance with the errors outlined in
link:JSF.htm#50638886_Errors%20Table[See Errors].[P1-end]

===== [#50638885_pgfId-1021811]##[#50638885_Signaling Errors]##Signaling Errors

[#50638885_pgfId-1021887]##[P1-start-error-signal]The implementation
must signal errors to the runtime as follows:

[#50638885_pgfId-1021890]##Construct a data payload for errors using the
properties described in link:JSF.htm#50638886_Error%20Data%20Payload[See
Error Data Payload].

[#50638885_pgfId-1021894]##If an error handler function was registered
with the “onerror” attribute
(link:JSF.htm#50638885_Handling%20Errors%20For%20An%20Ajax%20Request[See
Handling Errors For An Ajax Request]) call it passing the data payload.

[#50638885_pgfId-1021896]##If any error handling functions were
registered with the “addOnError” function
(link:JSF.htm#50638885_Handling%20Errors%20For%20All%20Ajax%20Requests[See
Handling Errors For All Ajax Requests]) call them passing the data
payload.

{empty}[#50638885_pgfId-1021902]##If the project stage is “development”
(see
link:JSF.htm#50638886_Determining%20An%20Application’s%20Project%20Stage[See
Determining An Application’s Project Stage]) use JavaScript “alert” to
signal the error(s).[P1-end]

==== [#50638885_pgfId-1022041]##[#50638885_Handling Errors On The Server]##Handling Errors On The Server

[#50638885_pgfId-1022045]##JavaServer Faces handles exceptions on the
server as outlined in link:JSF.htm#50638857_91184[See ExceptionHandler].
[P1-start-error-server]JavaServer Faces Ajax frameworks must ensure
exception information is written to the response in the format:

[width="100%",cols="100%",]
|===
a|
[#50638885_pgfId-1022080]##<partial-response id="j_id1">

[#50638885_pgfId-1022087]##<error>

[#50638885_pgfId-1022091]##<error-name>...</error-name>

[#50638885_pgfId-1022095]##<error-message>...</error-message>

[#50638885_pgfId-1022096]##</error>

[#50638885_pgfId-1022103]##</partial-response>

|===

[#50638885_pgfId-1022062]##Extract the “class” from the “Throwable”
object and write that as the contents of error-name in the response.

[#50638885_pgfId-1022175]##Extract the “cause” from the “Throwable”
object if it is available and write that as the contents of
error-message in the response. If “cause” is not available, write the
string returned from “Throwable.getMessage()”.

{empty}[#50638885_pgfId-1022180]##Implementations must ensure that an
ExceptionHandler suitable for writing exceptions to the partial response
is installed if the current request required an Ajax response
(PartialViewContext.isAjaxRequest() returns true).[P1-end]

[#50638885_pgfId-1022149]##Implementations may choose to include a
specialized ExceptionHandler for Ajax that extends from
javax.faces.context.ExceptionHandlerWrapper, and have the
javax.faces.context.ExceptionHandlerFactory implementation install it if
the environment requires it.

=== [#50638885_pgfId-1022152]##

image:JSF-53.gif[image]

[#50638885_13.3.4.1 Use Case]##[#50638885_Partial View Traversal]##Partial
View Traversal

[#50638885_pgfId-1019019]##The JavaServer Faces lifecycle, can be viewed
as consisting of an execute phase and a render phase.

[#50638885_pgfId-1019044]## 

image:lifecycle.gif[image]

[#50638885_pgfId-1019021]##Partial traversal is the technique that can
be used to “visit” one or more components in the view, potentially to
have them pass through the “execute” and/or “render” phases of the
request processing lifecycle. This is a key feature for JSF and Ajax
frameworks and it allows selected components in the view to be processed
and/or rendered. There are a variety of JSF Ajax frameworks available,
and they all perform some variation of partial traversal.

==== [#50638885_pgfId-1021224]##[#50638885_Partial Traversal Strategy]##Partial Traversal Strategy

[#50638885_pgfId-1021228]##Frameworks use a partial traversal strategy
to perform partial view processing and partial view rendering. This
specification does not dictate the use of a specific partial traversal
strategy. However, frameworks must implement their desired strategy by
implementing the PartialViewContext.processPartial method. Refer to the
JavaDocs for details about this method.

==== [#50638885_pgfId-1018815]##[#50638885_Partial View Execute]##Partial View Processing

{empty}[#50638885_pgfId-1022403]##Partial view processing allows
selected components to be processed through the “execute” portion of the
lifecycle. Although the diagram in
link:JSF.htm#50638885_Partial%20View%20Traversal[See Partial View
Traversal] depicts the “execute” portion as encompassing everything
except the “Render Response Phase”, for the purposas of an ajax request,
the execute portion of the lifecycle is the “Apply Request Values
Phase”, “Update Model Values Phase” and “Process Validations Phase”.
Partial view processing on the server is triggered by a request from the
client. The request does not have to be an Ajax request. The request
contains special parameters that indicate the request is a partial
execute request (not triggered by Ajax) or a partial execute request
that was triggered using Ajax. The client also sends a set of client ids
of the components that must be processed through the execute phase of
the request processing lifecycle. Refer to
link:JSF.htm#50638885_Sending%20an%20Ajax%20Request[See Sending an Ajax
Request] about the request sending details. The FacesContext has methods
for retrieving the PartialViewContext instance for the request. The
PartialViewContext may also be retrieved by using the
PartialViewContextFactory class. The XML schema allows for the
definition of a PartialViewContextFactory using the
“partial-view-context-factory” element. Refer to the partial response
schema in the Javadoc section of the spec for more information on this
element. The PartialViewContext has properties and methods that indicate
the request is a partial request based on the values of these special
request parameters. Refer to the JavaDocs for
javax.faces.context.PartialViewContext and
link:JSF.htm#50638857_Partial%20View%20Context[See Partial View Context]
for the specifics of the PartialViewContext constants and methods that
facilitate partial processing. [P1-start-partialExec]The UIViewRoot
processDecodes, processValidators and processUpdates methods must
determine if the request is a partial request using the
FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()
method. If
FacesContext.getCurrentInstance().getPartialViewContext().isPartialRequest()
returns true, then the implementation of these methods must retrieve a
PartialViewContext instance and invoke
PartialViewContext.processPartial. Refer to
link:JSF.htm#50638877_68096[See Apply Request Values],
link:JSF.htm#50638877_Apply%20Request%20Values%20Partial%20Processing[See
Apply Request Values Partial Processing],
link:JSF.htm#50638877_27358[See Process Validations],
link:JSF.htm#50638877_Partial%20Validations%20Partial%20Processing[See
Partial Validations Partial Processing], link:JSF.htm#50638877_44493[See
Update Model Values],
link:JSF.htm#50638877_Update%20Model%20Values%20Partial%20Processing[See
Update Model Values Partial Processing].[P1-end]

==== [#50638885_pgfId-1022432]##[#50638885_Partial View Render]##Partial View Rendering

{empty}[#50638885_pgfId-1020374]##Partial view rendering on the server
is triggered by a request from the client. It allows one or more
components in the view to perform the encoding process. The request
contains special parameters that indicate the request is a partial
render request. The client also sends a set of client ids of the
components that must be processed by the render phase of the request
processing lifecycle. Refer to
link:JSF.htm#50638885_Sending%20an%20Ajax%20Request[See Sending an Ajax
Request] about the request sending details. The PartialViewContext has
methods that indicate the request is a partial request based on the
values of these special request parameters. Refer to
link:JSF.htm#50638857_Partial%20Processing%20Constants%20And%20Methods[See
Partial Processing Methods] for the specifics of the FacesContext
constants and methods that facilitate partial processing.
[P1-start-partialRender]The UIViewRoot getRendersChildren and
encodeChildren methods must determine if the request is an Ajax request
using the
FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()
method. If PartialViewContext.isAjaxRequest() returns true, then the
getRendersChildren method must return true and the encodeChildren method
must perform partial rendering using the
PartialViewContext.processPartial implementation. Refer to the JavaDocs
for UIViewRoot.encodeChildren for specific details.[P1-end]

==== [#50638885_pgfId-1020355]##[#50638885_marker-1020367]##[#50638885_Sending The Response to The Client]##Sending The Response to The Client

[#50638885_pgfId-1020359]##The Ajax response (also known as partial
response) is formulated and sent to the client during the Render
Response phase of the request processing lifecycle. The partial response
consists of markup rendered by one or more components. The response
should be in a common format so JavaScript clients can interpret the
markup in a consistent way - an important requirement for component
compatability. The agreed upon format and content type for the partial
response is XML. This means there should be a ResponseWriter suitable
for writing the response in XML. The UIViewRoot.encodeChildren method
delegates to a partial traversal strategy. The partial traversal
strategy implementation produces the partial response. The markup that
is sent to the client must contain elements that the client can
recognize. In addition to the markup produced by server side components,
the response must contain “instructions” for the client to interpret, so
the client will know, for example, that it is to add new markup to the
client DOM, or update existing areas of the DOM. When the response is
sent back to the client, it must contain the view state.
[P1-start-sending-response]Implementations must adhere to the response
format as specified in the JavaScript docs for
jsf.ajax.response.[P1-end] Refer to the XML schema definition in the
link:JSF.htm#50638878_90193[See XML Schema Definition for Composite
Components] section. This XML schema is another important area for
component library compatability.

===== [#50638885_pgfId-1020440]##[#50638885_Writing The Partial Response]##Writing The Partial Response

[#50638885_pgfId-1022216]##JavaServer Faces provides
javax.faces.context.PartialResponseWriter to ensure the Ajax response
that is written follows the standard format as specified in
link:JSF.htm#50638878_90193[See XML Schema Definition for Composite
Components]. Implementations must take care to properly handle nested
CDATA sections when writing the response. PartialResponseWriter
decorates an existing ResponseWriter implementation by extending
javax.faces.context.ResponseWriterWrapper. Refer to the
javax.faces.context.PartialResponseWriter JavaDocs, and the JavaScript
documentation for the jsf.ajax.response function for more specifics.

[#50638886_pgfId-1015879]## [#50638886_37124]##

== [#50638886_pgfId-1015881]##

image:JSF-55.gif[image]

[#50638886_74973]##[#50638886_JavaScript API]##[#50638886_JavaScript API]##[#50638886_]##JavaScript
API

image:JSF-56.gif[image]

[#50638886_pgfId-1015882]##This chapter of the specification describes
the JavaScript functions that are used to facilitate Ajax operations in
a JavaServer Faces framework. All of these functions are contained in
the canonical _jsf.js_ file.

=== [#50638886_pgfId-1021273]##

image:JSF-57.gif[image]

[#50638886_99347]##[#50638886_Ajax JavaScript Resource]##[#50638886_Collecting and Encoding View State]##Collecting
and Encoding View State

[#50638886_pgfId-1021274]##In JavaServer Faces 1.2 the
javax.faces.ViewState parameter was standardized to facilitate
“postback” requests to the server in a JavaServer Faces application.
Implementations must use this parameter to save the view state between
requests. Refer to the Javadocs for
javax.faces.render.ResponseStateManager.

[#50638886_pgfId-1021275]##Collecting and encoding view state that will
be sent to the server is a common operation used by most JavaServer
Faces Ajax frameworks. When a JavaServer Faces view is rendered, it will
contain a hidden field with the identifier javax.faces.ViewState whose
value contains the state for the current view. JSF Ajax clients collect
additional view state, combine it with the current view state and send
it’s encoded form to the server.

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021278]##jsf.getViewState(FORM_ELEMENT)
|===

[#50638886_pgfId-1021286]##Collect and encode element data for the given
FORM_ELEMENT and return it as the view state that will be sent to the
server. FORM_ELEMENT is the identifier for a DOM form element. All input
elements of type “hidden” should be included in the collection and
encoding process.

[#50638886_pgfId-1021287]##Encode the name and value for each input
element of FORM_ELEMENT. Only select elements that have at least one of
their options selected must be included. only checkbox elements that are
checked must be included.

[#50638886_pgfId-1021288]##Find the element identified as
javax.faces.ViewState in the specified FORM_ELEMENT and encode the name
and value.

[#50638886_pgfId-1021289]##Return a concatenated String of the encoded
input elements and javax.faces.ViewState element.

==== [#50638886_pgfId-1021351]##[#50638886_14.1.1 Use Case]##Use Case

[#50638886_pgfId-1021352]##Collect and Encode Elements Of a Form

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021360]##var viewState = jsf.getViewState(form);
|===

=== [#50638886_pgfId-1021370]##

image:JSF-57.gif[image]

[#50638886_Initiating an Ajax Request]##Initiating an Ajax Request

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021383]##jsf.ajax.request(source, |event|, \{
|OPTIONS| });
|===

[#50638886_pgfId-1021394]##The jsf.ajax.request function is responsible
for sending an Ajax request to the server. [P1-start-ajaxrequest]The
requirements for this function are as follows:

[#50638886_pgfId-1021395]##The request must be sent asynchronously

[#50638886_pgfId-1021396]##The request must be sent with method type
POST

[#50638886_pgfId-1021397]##The request URL will be the form action
attribute

[#50638886_pgfId-1022906]##All requests will be queued with the use of a
client side request queue to help ensure request ordering

{empty}[#50638886_pgfId-1023155]##[P1-end]

==== [#50638886_pgfId-1023157]##[#50638886_14.2.1 Usage]##Usage

[#50638886_pgfId-1023163]##Typically, this function is attached as a
JavaScript event handler (such as “onclick”).

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1023160]##<ANY_HTML_OR_JSF_ELEMENT

[#50638886_pgfId-1023161]##on|EVENT|="jsf.ajax.request(source, event,

[#50638886_pgfId-1023162]##\{ |OPTIONS| });" />

|===

[#50638886_pgfId-1021450]##The function arguments are as follows:

[#50638886_pgfId-1021451]##source is the DOM element that triggered this
Ajax request. [P1-start-source]It must be a DOM element object or a
string identifier for a DOM element. [P1-end]The event argument is the
JavaScript event object. The optional |OPTIONS| argument is a JavaScript
associative object array that may contain the following name/value
pairs:

======= [#50638886_pgfId-1022991]##[#50638886_request OPTIONS]##request OPTIONS

[#50638886_pgfId-1022995]##Name

[#50638886_pgfId-1022997]##Value

[#50638886_pgfId-1022999]##execute

[#50638886_pgfId-1023001]##A space delimited list of client identifiers
or one of the keywords (link:JSF.htm#50638886_Keywords[See Keywords]).
These reference the components that will be processed during the
“execute” portion of the request processing lifecycle.

[#50638886_pgfId-1023006]##render

[#50638886_pgfId-1023008]##A space delimited list of client identifiers
or one of the keywords (link:JSF.htm#50638886_Keywords[See Keywords]).
These reference the components that will be processed during the
“render” portion of the request processing lifecycle.

[#50638886_pgfId-1023013]##onevent

[#50638886_pgfId-1023015]##A String that is the name of the JavaScript
function to call when an event occurs.

[#50638886_pgfId-1023017]##onerror

[#50638886_pgfId-1023019]##A String that is the name of the JavaScript
function to call when an error occurs.

[#50638886_pgfId-1023021]##params

[#50638886_pgfId-1023023]##An object that may include additional
parameters to include in the request.

==== [#50638886_pgfId-1022817]##[#50638886_Keywords]##Keywords

[#50638886_pgfId-1022821]##The following keywords can be used for the
value of the “execute” and “render” attributes:

======= [#50638886_pgfId-1022824]##Execute / Render Keywords

[#50638886_pgfId-1022832]##Keyword

[#50638886_pgfId-1022834]##Description

[#50638886_pgfId-1022836]##@all

[#50638886_pgfId-1022838]##All component identifiers

[#50638886_pgfId-1022840]##@none

[#50638886_pgfId-1022842]##No identifiers

[#50638886_pgfId-1022844]##@this

[#50638886_pgfId-1022846]##The element that triggered the request

[#50638886_pgfId-1022857]##@form

[#50638886_pgfId-1022859]##The enclosing form

==== [#50638886_pgfId-1021550]##[#50638886_Default Values]##[#50638886_marker-1021548]##[#50638886_Default Values]##Default Values

[#50638886_pgfId-1022385]##Values for the execute and render attributes
are not required. When using the JavaScript API, the default values for
execute is @this. The default value for render is @none.

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1022388]##<h:commandButton id=”button1” value=”submit”>

[#50638886_pgfId-1022389]##onclick="jsf.ajax.request(this,event);" />

[#50638886_pgfId-1022390]##is the same as:

[#50638886_pgfId-1022391]##<h:commandButton id=”button1” value=”submit”>

[#50638886_pgfId-1022392]##onclick="jsf.ajax.request(this,event,

[#50638886_pgfId-1022393]##\{execute:’@this’,render:’@this’});" />

|===

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1022404]##<h:commandButton id=”button1” value=”submit”>

[#50638886_pgfId-1022405]##onclick="jsf.ajax.request(this,event,
\{execute:’@this’});" />

[#50638886_pgfId-1022406]##is the same as:

[#50638886_pgfId-1022407]##<h:commandButton id=”button1” value=”submit”>

[#50638886_pgfId-1022408]##onclick="jsf.ajax.request(this,event,
\{execute:’button1’});" />

|===

[#50638886_pgfId-1022398]##Refer to link:JSF.htm#50638887_%3Cf[See
<f:ajax>] for the default values for the execute and render attributes
when they are used with the core “<f:ajax>” tag.

==== [#50638886_pgfId-1021571]##[#50638886_Request Sending Specifics]##Request Sending Specifics

[#50638886_pgfId-1022985]##The mechanics of sending an Ajax request
becomes very important to promote component compatability. Even more
important, is standardizing on the post data that is sent to server
implementations, so they all can expect the same arguments.
[P1-start-ajaxrequest-send]The request header must be set with the name
Faces-Request and the value partial/ajax. Specifics of formulating post
data and sending the request must be followed as outlined in the
JavaScript documentation for the jsf.ajax.request function. The post
data arguments that must be sent are:

[width="100%",cols="50%,50%",]
|===
|[#50638886_pgfId-1023027]##Name |[#50638886_pgfId-1023029]##Value

|[#50638886_pgfId-1023031]##javax.faces.ViewState
|[#50638886_pgfId-1023033]##The value of the javax.faces.ViewState
hidden field. This is included when using the jsf.getViewState function.

|[#50638886_pgfId-1023035]##javax.faces.partial.ajax
|[#50638886_pgfId-1023037]##true

|[#50638886_pgfId-1023039]##javax.faces.source
|[#50638886_pgfId-1023041]##The identifier of the element that is the
source of this request
|===

{empty}[#50638886_pgfId-1021597]##[P1-end]

==== [#50638886_pgfId-1021610]##[#50638886_request Use Case]##[#50638886_14.2.5 Use Case]##Use Case

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1021607]##<h:commandbutton id="submit" value="submit"

[#50638886_pgfId-1021608]##onclick="jsf.ajax.request(this, event,

[#50638886_pgfId-1021609]##\{execute:'submit',render:'outtext'}); return
false;" />

|===

[#50638886_pgfId-1021611]##This use case assumes there is another
component in the view with the identifier outtext.

=== [#50638886_pgfId-1021625]##

image:JSF-57.gif[image]

[#50638886_marker-1021632]##[#50638886_Processing The Ajax Response]##Processing
The Ajax Response

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021624]##jsf.ajax.response(request, context);
|===

{empty}[#50638886_pgfId-1021626]##The jsf.ajax.response function is
called when a request completes successfully. This typically means that
returned status code is >= 200 and < 300. The jsf.ajax.response function
must extract the XML response from the request argument. The XML
response is expected to follow the format that is outlined in the
JavaScript documentation for this function. The response format is an
“instruction set” telling this function how it should update the DOM.
The context argument contains properties that facilitate event and error
processing such as the source DOM element (the DOM element that
triggered the Ajax request), onevent (the event handling callback for
the request) and onerror (the error handling callback for the request).
[P1-start-ajaxresponse] The specifics details of this function’s
operation must follow the jsf.ajax.response JavaScript
documentation.[P1-end]

=== [#50638886_pgfId-1021658]##

image:JSF-57.gif[image]

[#50638886_Registering Callback Functions]##Registering Callback
Functions

[#50638886_pgfId-1021677]##The JavaScript API allows you to register
callback functions for Ajax request/response event monitoring and error
handling. The event callbacks become very useful when monitoring request
connection status. The error callback provides a convenient way for
implementions to trap errors. The handling of the errors is left up to
the implementation. These callback function names can also be set using
the JavaScript API (link:JSF.htm#50638886_request%20OPTIONS[See request
OPTIONS]), and the core <f:ajax> tag (link:JSF.htm#50638887_%3Cf[See
<f:ajax>]).

==== [#50638886_pgfId-1021685]##[#50638886_Request/Response Event Handling]##Request/Response Event Handling

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021694]##jsf.ajax.addOnEvent(callback);
|===

[#50638886_pgfId-1021961]##The callback argument must be a reference to
an existing JavaScript function that will handle the events. The events
that can be handled are:

======= [#50638886_pgfId-1021964]##[#50638886_addOnEvent Events]##[#50638886_Events]##Events

[#50638886_pgfId-1021968]##Event Name

[#50638886_pgfId-1021970]##Description

[#50638886_pgfId-1021972]##begin

[#50638886_pgfId-1021974]##Occurs immediately before the request is
sent.

[#50638886_pgfId-1021980]##complete

[#50638886_pgfId-1021982]##Occurs immediately after the request has
completed. For successful requests, this is immediately before
javax.faces.response is called. For unsuccessful requests, this is
immediately before the error handling callback is invoked.

[#50638886_pgfId-1023085]##success

[#50638886_pgfId-1023098]##Occurs immediately after jsf.ajax.response
has completed.

[#50638886_pgfId-1023087]## 

[#50638886_pgfId-1022011]##The callback function has access to the
following “data payload”:.

== [#50638886_pgfId-1022665]##[#50638886_Event Data Payload]##Event Data Payload

[#50638886_pgfId-1022669]##Name

[#50638886_pgfId-1022671]##Description/Value

[#50638886_pgfId-1022673]##type

[#50638886_pgfId-1022675]##“event”

[#50638886_pgfId-1022677]##status

{empty}[#50638886_pgfId-1022679]##One of the events specified in
link:JSF.htm#50638886_Events[See Events]

[#50638886_pgfId-1022681]##source

[#50638886_pgfId-1022683]##The DOM element that triggered the Ajax
request.

[#50638886_pgfId-1022685]##responseCode

[#50638886_pgfId-1022687]##Ajax request object ‘status’
(XMLHttpRequest.status); Not present for “begin” event;

[#50638886_pgfId-1022689]##responseXML

[#50638886_pgfId-1022691]##The XML response
(XMLHttpRequest.responseXML); Not present for “begin” event;

[#50638886_pgfId-1022693]##responseText

[#50638886_pgfId-1022695]##The text response
(XMLHttpResponse.responseText) Not present for “begin” event;

===== [#50638886_pgfId-1022229]##[#50638886_14.4.1.1Use Case]##Use Case

[#50638886_pgfId-1023115]##An event listener can be installed from
JavaScript in this manner.

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1023104]##function statusUpdate(data) \{

[#50638886_pgfId-1023105]## // do something with data.status or other
parts of data payload

[#50638886_pgfId-1023106]##}

[#50638886_pgfId-1023107]##...

[#50638886_pgfId-1023108]##jsf.ajax.addOnEvent(statusUpdate);

[#50638886_pgfId-1022228]## 

|===

[#50638886_pgfId-1023133]##An event listener can be installed from
markup in this manner.

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1023131]##<f:ajax ... onevent="statusUpdate" />

[#50638886_pgfId-1023132]## 

|===

==== [#50638886_pgfId-1021938]##[#50638886_Error Handling]##Error Handling

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1021945]##jsf.ajax.addOnError(callback);
|===

[#50638886_pgfId-1022073]##The callback argument must be a reference to
an existing JavaScript function that will handle errors from the server.

======= [#50638886_pgfId-1022076]##[#50638886_Errors Table]##Errors

[#50638886_pgfId-1022080]##Error Name

[#50638886_pgfId-1022082]##Description

[#50638886_pgfId-1022084]##httpError

[#50638886_pgfId-1022086]##request status==null or
request.status==undefined or request.status<200 or request.status >=300

[#50638886_pgfId-1022502]##serverError

[#50638886_pgfId-1022504]##The Ajax response contains an “error”
element.

[#50638886_pgfId-1022508]##malformedXML

{empty}[#50638886_pgfId-1022510]##The Ajax response does not follow the
proper format. See link:JSF.htm#50638878_90193[See XML Schema Definition
for Composite Components]

[#50638886_pgfId-1022515]##emptyResponse

[#50638886_pgfId-1022517]##There was no Ajax response from the server.

[#50638886_pgfId-1022264]##The callback function has access to the
following “data payload”:.

== [#50638886_pgfId-1022622]##[#50638886_Error Data Payload]##Error Data Payload

[#50638886_pgfId-1022626]##Name

[#50638886_pgfId-1022628]##Description/Value

[#50638886_pgfId-1022630]##type

[#50638886_pgfId-1022632]##“error”

[#50638886_pgfId-1022634]##status

{empty}[#50638886_pgfId-1022639]##One of error names defined
link:JSF.htm#50638886_Errors%20Table[See Errors]

[#50638886_pgfId-1023067]##description

[#50638886_pgfId-1023069]##Text describing the error

[#50638886_pgfId-1022641]##source

[#50638886_pgfId-1022643]##The DOM element that triggered the Ajax
request.

[#50638886_pgfId-1022645]##responseCode

[#50638886_pgfId-1022647]##Ajax request object ‘status’
(XMLHttpRequest.status);

[#50638886_pgfId-1022649]##responseXML

[#50638886_pgfId-1022651]##The XML response (XMLHttpRequest.responseXML)

[#50638886_pgfId-1022653]##responseText

[#50638886_pgfId-1022655]##The text response
(XMLHttpResponse.responseTxt)

[#50638886_pgfId-1022657]##errorName

[#50638886_pgfId-1022659]##The error name taken from the Ajax response
“error” element.

[#50638886_pgfId-1022661]##errorMessage

[#50638886_pgfId-1022663]##The error messages taken from the Ajax
response “error” element.

===== [#50638886_pgfId-1022234]##[#50638886_14.4.2.1Use Case]##Use Case

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1022313]##jsf.ajax.addOnError(handleError);

[#50638886_pgfId-1022314]##...

[#50638886_pgfId-1022315]##var handleError = function handleError(data)
\{

[#50638886_pgfId-1022316]##... do something with “data payload” ...

[#50638886_pgfId-1022317]##}

|===

[#50638886_pgfId-1022324]## 

=== [#50638886_pgfId-1020081]##

image:JSF-57.gif[image]

[#50638886_Processing The Ajax Response]##[#50638886_Determining An Application’s Project Stage]##Determining
An Application’s Project Stage

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1020089]##jsf.getProjectStage();
|===

{empty}[#50638886_pgfId-1020332]##[P1-start-projStage]This function must
return the constant representing the current state of the running
application in a typical product development lifecycle. The returned
value must be the value returned from the server side method
javax.faces.application.Application.getProjectStage(); Refer to
link:JSF.htm#50638861_32155[See ProjectStage Property] for more details
about this property.[P1-end]

==== [#50638886_pgfId-1020344]##[#50638886_13.3.4.1 Use Case]##[#50638886_14.5.1Use Case]##Use Case

[width="100%",cols="100%",]
|===
a|
[#50638886_pgfId-1020338]##var projectStage =
javax.faces.Ajax.getProjectStage();

[#50638886_pgfId-1020339]##if (projectStage == “Production”) \{

[#50638886_pgfId-1020340]##.... throw exception

[#50638886_pgfId-1020341]##else if (projectStage == “Development”) \{

[#50638886_pgfId-1020342]##.... send an alert for debugging

[#50638886_pgfId-1020343]##}

|===

[#50638886_pgfId-1022267]## 

=== [#50638886_pgfId-1022772]##

image:JSF-57.gif[image]

[#50638886_64761]##Script Chaining

[width="100%",cols="100%",]
|===
|[#50638886_pgfId-1022779]##jsf.util.chain(source, event, |<script>,
<script>,...|)
|===

[#50638886_pgfId-1022776]##This utility function invokes an arbitrary
number of scripts in sequence. If any of the scripts return false,
subsequent scripst will not be executed. The arguments are:

[#50638886_pgfId-1022793]##source - The DOM element that triggered this
Ajax request, or an id string of the element to use as the triggering
element.

[#50638886_pgfId-1022805]##event - The DOM event that triggered this
Ajax request. A value does not have to be specified for this argument.

[#50638886_pgfId-1022787]##The variable number of script arguments
follow the source and event arguments. Refer to the JavaScript API
documentation in the source for more details.

[#50638878_pgfId-1029114]## [#50638878_72305]##

== [#50638878_pgfId-1029116]##

image:JSF-58.gif[image]

[#50638878_86924]##Appendix A - JSF Metadata

image:JSF-59.gif[image]

[#50638878_pgfId-1019914]##The XML Schema Definition for Application
Configuration Resource files is included in a web browser optimized
format along with the Javadoc. That is the canonical location of the
schemas in the specification.

=== [#50638878_pgfId-1038150]##

image:JSF-60.gif[image]

[#50638878_10363]##Required Handling of _*-extension_ elements in the
application configuration resources files

[#50638878_pgfId-1045696]##As specified in the XML Schema for
Application Configuration Resources, many of the elements in the file
have _*-extension_ elements declared in a similar fashion to this one
for the _faces-config-extension_ :

[width="100%",cols="100%",]
|===
a|
[#50638878_pgfId-1045709]## _<xsd:complexType name =
"faces-config-extensionType">_

[#50638878_pgfId-1045710]## _<xsd:annotation>_

[#50638878_pgfId-1045711]## _<xsd:documentation>_

[#50638878_pgfId-1045713]## _Extension element for faces-config. It may
contain_

[#50638878_pgfId-1045714]## _implementation specific content._

[#50638878_pgfId-1045716]## _</xsd:documentation>_

[#50638878_pgfId-1045717]## _</xsd:annotation>_

[#50638878_pgfId-1045719]## _<xsd:sequence>_

[#50638878_pgfId-1045720]## _<xsd:any namespace="##any"_

[#50638878_pgfId-1045721]## _processContents="lax"_

[#50638878_pgfId-1045722]## _minOccurs="0"_

[#50638878_pgfId-1045723]## _maxOccurs="unbounded" />_

[#50638878_pgfId-1045724]## _</xsd:sequence>_

[#50638878_pgfId-1045725]## _<xsd:attribute name="id" type="xsd:ID"/>_

[#50638878_pgfId-1045726]## _</xsd:complexType>_

|===

[#50638878_pgfId-1045700]##This section specifies the required handling
of such elements.

[#50638878_pgfId-1049267]##Note that it is normal for an application to
have several application configuration resources files. If multiple such
resource files have conflicting _*-extension_ elements, the last element
processed takes precedence over preceding elements. Processing order can
be controlled as specified in link:JSF.htm#50638850_91955[See Ordering
of Artifacts].

==== [#50638878_pgfId-1045744]## _faces-config-extension_ handling

[#50638878_pgfId-1045783]##If an application configuration resource
contains a _faces-config-extension_ element, the children of the element
must be inspected for containing well-formed XML conforming to the
syntax specified in the following subsection(s). DTD syntax is used for
convenience since the content of a _*-extension_ element may not be
constrained due to its declaration as containing _<xsd:any>_ .

===== [#50638878_pgfId-1045784]##[#50638878_16008]##The _facelets-processing_ element

[#50638878_pgfId-1045788]##DTD syntax..

[width="100%",cols="100%",]
|===
|[#50638878_pgfId-1045792]##<!ELEMENT facelets-processing
(file-extension, process-as) > +
<!ELEMENT file-extension ANY> +
<!ELEMENT process-as ANY> __
|===

[#50638878_pgfId-1045785]##The _<facelets-processing>_ element is used
to affect the processing of Facelets VDL files. Therefore, this setting
only applies to those requests that reach the Facelets
_ViewDeclarationLanguage_ implementation, as specified to the runtime
via the _javax.faces.FACELETS_VIEW_MAPPINGS_ and
_javax.faces.DEFAULT_SUFFIX_ _<context-param>_ entries. The
specification defines three processing modes for Facelets files:
Facelets XHTML syntax, XML View syntax, and Facelets JSPX syntax. This
last syntax is intended to ease the migration to Facelets for
applications already using the JSP document syntax (also known as JSPX
syntax). The affect on the processing of files in each of these three
modes is specified in the following table.

======= [#50638878_pgfId-1045906]##Valid _<process-as>_ values and their implications on the processing of Facelet VDL files.

[#50638878_pgfId-1045914]## 

[#50638878_pgfId-1056412]## _<process-as>html5</process-as> +
HTML 5 (default)_

[#50638878_pgfId-1045916]## _<process-as>xhtml</process-as> +
Facelets XHTML_

[#50638878_pgfId-1045918]##<process-as>xml</process-as> +
XML View

[#50638878_pgfId-1045920]##<process-as>jspx</process-as> +
Facelets JSPX

[#50638878_pgfId-1049281]##XML Doctype

[#50638878_pgfId-1056414]##Simplified to _<!DOCTYPE html>_

[#50638878_pgfId-1049283]##passed through

[#50638878_pgfId-1049285]##consumed

[#50638878_pgfId-1049287]##consumed

[#50638878_pgfId-1045922]## _XML declaration_

[#50638878_pgfId-1056416]##passed through __

[#50638878_pgfId-1045924]##passed through

[#50638878_pgfId-1045926]##consumed

[#50638878_pgfId-1045928]##consumed

[#50638878_pgfId-1045930]## _Processing instructions_

[#50638878_pgfId-1056418]##passed through

[#50638878_pgfId-1045932]##passed through

[#50638878_pgfId-1045934]##consumed

[#50638878_pgfId-1045936]##consumed

[#50638878_pgfId-1045938]## _CDATA section start and end tags_

[#50638878_pgfId-1056420]##passed through

[#50638878_pgfId-1045940]##passed through

[#50638878_pgfId-1045942]##consumed

[#50638878_pgfId-1045944]##consumed

[#50638878_pgfId-1045946]## _Escaping of inline text_

[#50638878_pgfId-1056422]##escaped

[#50638878_pgfId-1045948]##escaped

[#50638878_pgfId-1045950]##escaped

[#50638878_pgfId-1045952]##not escaped

[#50638878_pgfId-1045954]## _XML Comments_

[#50638878_pgfId-1056424]##passed through

[#50638878_pgfId-1045956]##passed through

[#50638878_pgfId-1045958]##consumed

[#50638878_pgfId-1045960]##consumed

[#50638878_pgfId-1045831]##In the preceding table, “passed through”
means that the content is passed through unmodified to the user agent.
“consumed” means the content is silently consumed on the server. Note
that for CDATA sections, the content of the CDATA section itself is
passed through, even if the start and end tags should be consumed.
“escaped” means that sensivite content in the response is automatically
escaped: _&_ becomes _&amp;_ , for example. “not escaped” means that
such content is not escaped.

[#50638878_pgfId-1046147]##The content of the _<file-extension>_ element
is particular to the file extension of the physical resource for the
Facelets VDL content, as specified in the
_javax.faces.FACELETS_VIEW_MAPPINGS_ and _javax.faces.DEFAULT_SUFFIX_
_<context-param>_ elements. Consider the following example
_faces-config.xml_ .

[width="100%",cols="100%",]
|===
a|
[#50638878_pgfId-1046159]## _<?xml version='1.0' encoding='UTF-8'?>_

[#50638878_pgfId-1046160]## _<faces-config_

[#50638878_pgfId-1046161]## _xmlns="http://java.sun.com/xml/ns/javaee"_

[#50638878_pgfId-1046162]##
_xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"_

[#50638878_pgfId-1046163]##
_xsi:schemaLocation="http://java.sun.com/xml/ns/javaee_

[#50638878_pgfId-1046164]##
_http://java.sun.com/xml/ns/javaee/web-facesconfig_2_1.xsd"_

[#50638878_pgfId-1046165]## _version="2.1">_

[#50638878_pgfId-1046166]## _<faces-config-extension>_

[#50638878_pgfId-1046167]## _<facelets-processing>_

[#50638878_pgfId-1046168]## _<file-extension>.jspx</file-extension>_

[#50638878_pgfId-1046169]## _<process-as>jspx</process-as>_

[#50638878_pgfId-1046170]## _</facelets-processing>_

[#50638878_pgfId-1046171]## _<facelets-processing>_

[#50638878_pgfId-1046172]## _<file-extension>.view.xml</file-extension>_

[#50638878_pgfId-1046173]## _<process-as>xml</process-as>_

[#50638878_pgfId-1046174]## _</facelets-processing>_

[#50638878_pgfId-1046175]## _</faces-config-extension>_

[#50638878_pgfId-1046146]## _</faces-config>_

|===

[#50638878_pgfId-1046022]##And _web.xml_ content

[width="100%",cols="100%",]
|===
a|
[#50638878_pgfId-1046192]## _<context-param>_

[#50638878_pgfId-1046193]##
_<param-name>javax.faces.FACELETS_VIEW_MAPPINGS</param-name>_

[#50638878_pgfId-1046194]##
_<param-value>*.xhtml;*.view.xml;*.jspx</param-value>_

[#50638878_pgfId-1046195]## _</context-param>_

[#50638878_pgfId-1046196]## __  

[#50638878_pgfId-1046197]## _<context-param>_

[#50638878_pgfId-1046198]##
_<param-name>javax.faces.DEFAULT_SUFFIX</param-name>_

[#50638878_pgfId-1046199]## _<param-value>.xhtml .view.xml .jsp
.jspx</param-value>_

[#50638878_pgfId-1046200]## _</context-param>_

[#50638878_pgfId-1046182]## __  

|===

[#50638878_pgfId-1046139]##This configuration states that .xhtml,
.view.xml, and .jspx files must be treated as Facelets VDL files
declares the processing mode of .jspx files to be jspx and declares the
processing mode of .view.xml files to be xml.

=== [#50638878_pgfId-1037675]##

image:JSF-60.gif[image]

[#50638878_31858]##XML Schema Definition For Facelet Taglib

[#50638878_pgfId-1042355]##The XML Schema Definition for Facelet Taglib
is included in a web browser optimized format along with the Javadoc.
That is the canonical location of the schemas in the specification.

[#50638878_pgfId-1057190]##[P1_start_facelet_taglib_decl]To ease
migration for Facelet taglibraries declared using pre-JSF 2.0 versions
of Facelets, implementations must support loading facelet taglibrary
files that conform to the pre-JSF 2.0 Facelets DTD. Per DTD conventions,
Facelet taglibrary files declare conformance to this DTD by including
text similar to the following in at the top of their declaring file.

[width="100%",cols="100%",]
|===
|[#50638878_pgfId-1042413]## _<!DOCTYPE facelet-taglib PUBLIC +
"-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"
"http://java.sun.com/dtd/facelet-taglib_1_0.dtd">_
|===

{empty}[#50638878_pgfId-1042466]##Use of this DTD is officially
deprecated. This DTD is included for reference in
link:JSF.htm#50638878_84716[See Deprecated DTD for Facelet Taglibraries
Used by Versions of Facelets Prior to JSF 2.0]. It is expected that
proper JSF 2.0 Facelet Taglibraries will declare conformance to the
following schema, rather than the deprecated
DTD.[P1_end_facelet_taglib_decl]

==== [#50638878_pgfId-1041276]##[#50638878_84716]##Deprecated DTD for Facelet Taglibraries Used by Versions of Facelets Prior to JSF 2.0

[#50638878_pgfId-1042420]##This DTD is deprecated and is included so
implementors will have a reference.

[#50638878_pgfId-1042426]##<!ELEMENT facelet-taglib
(library-class|(namespace,(tag|function)+))>

[#50638878_pgfId-1042427]##<!ATTLIST facelet-taglib xmlns CDATA #FIXED
"http://java.sun.com/JSF/Facelet">

[#50638878_pgfId-1042428]##<!ELEMENT namespace (#PCDATA)>

[#50638878_pgfId-1042429]##<!ELEMENT library-class (#PCDATA)>

[#50638878_pgfId-1042430]##<!ELEMENT tag
(tag-name,(handler-class|component|converter|validator|source))>

[#50638878_pgfId-1042431]##<!ELEMENT tag-name (#PCDATA)>

[#50638878_pgfId-1042432]##<!ELEMENT handler-class (#PCDATA)>

[#50638878_pgfId-1042433]##<!ELEMENT component
(component-type,renderer-type?,handler-class?)>

[#50638878_pgfId-1042434]##<!ELEMENT component-type (#PCDATA)>

[#50638878_pgfId-1042435]##<!ELEMENT renderer-type (#PCDATA)>

[#50638878_pgfId-1042436]##<!ELEMENT converter (converter-id,
handler-class?)>

[#50638878_pgfId-1042437]##<!ELEMENT converter-id (#PCDATA)>

[#50638878_pgfId-1042438]##<!ELEMENT validator (validator-id,
handler-class?)>

[#50638878_pgfId-1042439]##<!ELEMENT validator-id (#PCDATA)>

[#50638878_pgfId-1042440]##<!ELEMENT source (#PCDATA)>

[#50638878_pgfId-1042441]##<!ELEMENT function
(function-name,function-class,function-signature)>

[#50638878_pgfId-1042442]##<!ELEMENT function-name (#PCDATA)>

[#50638878_pgfId-1042443]##<!ELEMENT function-class (#PCDATA)>

[#50638878_pgfId-1042444]##<!ELEMENT function-signature (#PCDATA)>

[#50638878_pgfId-1042421]## 

=== [#50638878_pgfId-1038047]##

image:JSF-60.gif[image]

[#50638878_90193]##XML Schema Definition for Composite Components

[#50638878_pgfId-1042083]##<xsd:schema

[#50638878_pgfId-1042084]##
targetNamespace="http://java.sun.com/xml/ns/javaee"

[#50638878_pgfId-1042085]##
xmlns:javaee="http://java.sun.com/xml/ns/javaee"

[#50638878_pgfId-1042086]## xmlns:xsd="http://www.w3.org/2001/XMLSchema"

[#50638878_pgfId-1042087]##
xmlns:xml="http://www.w3.org/XML/1998/namespace"

[#50638878_pgfId-1042088]## elementFormDefault="qualified"

[#50638878_pgfId-1042089]## attributeFormDefault="unqualified"

[#50638878_pgfId-1042090]## version="2.0">

[#50638878_pgfId-1042091]## 

[#50638878_pgfId-1042092]## <xsd:annotation>

[#50638878_pgfId-1042093]## <xsd:documentation>

[#50638878_pgfId-1042094]## $Id: web-facesuicomponent_2_0.xsd,v 1.1.8.2
2008/03/20 21:12:50 edburns Exp $

[#50638878_pgfId-1042095]## </xsd:documentation>

[#50638878_pgfId-1042096]## </xsd:annotation>

[#50638878_pgfId-1042097]## 

[#50638878_pgfId-1042098]## <xsd:annotation>

[#50638878_pgfId-1042099]## <xsd:documentation>

[#50638878_pgfId-1042100]## 

[#50638878_pgfId-1042101]## Copyright 2007 Sun Microsystems, Inc.,

[#50638878_pgfId-1042102]## 901 San Antonio Road,

[#50638878_pgfId-1042103]## Palo Alto, California 94303, U.S.A.

[#50638878_pgfId-1042104]## All rights reserved.

[#50638878_pgfId-1042105]## 

[#50638878_pgfId-1042106]## Sun Microsystems, Inc. has intellectual
property

[#50638878_pgfId-1042107]## rights relating to technology described in
this document. In

[#50638878_pgfId-1042108]## particular, and without limitation, these
intellectual

[#50638878_pgfId-1042109]## property rights may include one or more of
the U.S. patents

[#50638878_pgfId-1042110]## listed at http://www.sun.com/patents and one
or more

[#50638878_pgfId-1042111]## additional patents or pending patent
applications in the

[#50638878_pgfId-1042112]## U.S. and other countries.

[#50638878_pgfId-1042113]## 

[#50638878_pgfId-1042114]## This document and the technology which it
describes are

[#50638878_pgfId-1042115]## distributed under licenses restricting their
use, copying,

[#50638878_pgfId-1042116]## distribution, and decompilation. No part of
this document

[#50638878_pgfId-1042117]## may be reproduced in any form by any means
without prior

[#50638878_pgfId-1042118]## written authorization of Sun and its
licensors, if any.

[#50638878_pgfId-1042119]## 

[#50638878_pgfId-1042120]## Third-party software, including font
technology, is

[#50638878_pgfId-1042121]## copyrighted and licensed from Sun suppliers.

[#50638878_pgfId-1042122]## 

[#50638878_pgfId-1042123]## Sun, Sun Microsystems, the Sun logo,
Solaris, Java, Java EE,

[#50638878_pgfId-1042124]## JavaServer Pages, Enterprise JavaBeans and
the Java Coffee

[#50638878_pgfId-1042125]## Cup logo are trademarks or registered
trademarks of Sun

[#50638878_pgfId-1042126]## Microsystems, Inc. in the U.S. and other
countries.

[#50638878_pgfId-1042127]## 

[#50638878_pgfId-1042128]## Federal Acquisitions: Commercial Software -
Government Users

[#50638878_pgfId-1042129]## Subject to Standard License Terms and
Conditions.

[#50638878_pgfId-1042130]## 

[#50638878_pgfId-1042131]## </xsd:documentation>

[#50638878_pgfId-1042132]## </xsd:annotation>

[#50638878_pgfId-1042133]## 

[#50638878_pgfId-1042134]## <xsd:annotation>

[#50638878_pgfId-1042135]## <xsd:documentation>

[#50638878_pgfId-1042136]## 

[#50638878_pgfId-1042137]## <![CDATA[

[#50638878_pgfId-1042138]## 

[#50638878_pgfId-1042139]## The XML Schema for a JavaServer Faces
UIComponent (Version 2.0).

[#50638878_pgfId-1042140]## 

[#50638878_pgfId-1042141]## The elements in this schema may be used in
an XHTML page for

[#50638878_pgfId-1042142]## a composite component, by pulling in the
composite namespace:

[#50638878_pgfId-1042143]##

[#50638878_pgfId-1042144]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638878_pgfId-1042145]##
xmlns:composite="http://java.sun.com/jsf/composite">

[#50638878_pgfId-1042146]##

[#50638878_pgfId-1042147]## <composite:interface>

[#50638878_pgfId-1042148]## <composite:attribute name="foo"
default="bar" />

[#50638878_pgfId-1042149]## </composite:/interface>

[#50638878_pgfId-1042150]## <!-- the rest omitted -->

[#50638878_pgfId-1042151]##</html>

[#50638878_pgfId-1042152]## 

[#50638878_pgfId-1042153]## The elements in this schema may also be used
in a facelet taglibrary

[#50638878_pgfId-1042154]## file in the same manner:

[#50638878_pgfId-1042155]##

[#50638878_pgfId-1042156]##<facelet-taglib
xmlns="http://java.sun.com/xml/ns/javaee"

[#50638878_pgfId-1042157]##
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

[#50638878_pgfId-1042158]##
xmlns:composite="http://java.sun.com/jsf/composite"

[#50638878_pgfId-1042159]##
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
http://java.sun.com/xml/ns/javaee/web-facelettaglibary_2_0.xsd"

[#50638878_pgfId-1042160]## version="2.0">

[#50638878_pgfId-1042161]##
<namespace>http://domain.com/test_schema</namespace>

[#50638878_pgfId-1042162]## <tag>

[#50638878_pgfId-1042163]## <tag-name>testSchema</tag-name>

[#50638878_pgfId-1042164]## <component>

[#50638878_pgfId-1042165]##
<component-type>javax.faces.Input</component-type>

[#50638878_pgfId-1042166]##
<renderer-type>javax.faces.Text</renderer-type>

[#50638878_pgfId-1042167]##
<handler-class>com.sun.faces.facelets.tag.jsf.ComponentHandler</handler-class>

[#50638878_pgfId-1042168]## <component-extension>

[#50638878_pgfId-1042169]## 

[#50638878_pgfId-1042170]## <composite:attribute name="foo"
default="bar" />

[#50638878_pgfId-1042171]## 

[#50638878_pgfId-1042172]## </component-extension>

[#50638878_pgfId-1042173]## </component>

[#50638878_pgfId-1042174]## </tag>

[#50638878_pgfId-1042175]##</facelet-taglib>

[#50638878_pgfId-1042176]##

[#50638878_pgfId-1042177]## The instance documents may indicate the
published

[#50638878_pgfId-1042178]## version of the schema using
xsi:schemaLocation attribute

[#50638878_pgfId-1042179]## for javaee namespace with the following
location:

[#50638878_pgfId-1042180]## 

[#50638878_pgfId-1042181]##
http://java.sun.com/xml/ns/javaee/web-facesuicomponent_2_0.xsd

[#50638878_pgfId-1042182]## 

[#50638878_pgfId-1042183]## ]]>

[#50638878_pgfId-1042184]## 

[#50638878_pgfId-1042185]## </xsd:documentation>

[#50638878_pgfId-1042186]## </xsd:annotation>

[#50638878_pgfId-1042187]## 

[#50638878_pgfId-1042188]## <xsd:include schemaLocation="javaee_5.xsd"/>

[#50638878_pgfId-1042189]## 

[#50638878_pgfId-1042190]## <!--
**************************************************** -->

[#50638878_pgfId-1042191]## 

[#50638878_pgfId-1042192]## <xsd:element name = "attribute"
type="javaee:uicomponent-attributeType">

[#50638878_pgfId-1042193]## </xsd:element>

[#50638878_pgfId-1042194]## 

[#50638878_pgfId-1042195]## <!--
**************************************************** -->

[#50638878_pgfId-1042196]## 

[#50638878_pgfId-1042197]## <xsd:complexType
name="uicomponent-attributeType">

[#50638878_pgfId-1042198]## <xsd:annotation>

[#50638878_pgfId-1042199]## <xsd:documentation>

[#50638878_pgfId-1042200]## 

[#50638878_pgfId-1042201]## The "attribute" element declares an
attribute of this

[#50638878_pgfId-1042202]## ui component.

[#50638878_pgfId-1042203]## 

[#50638878_pgfId-1042204]## </xsd:documentation>

[#50638878_pgfId-1042205]## </xsd:annotation>

[#50638878_pgfId-1042206]##

[#50638878_pgfId-1042207]## <xsd:choice minOccurs="0"
maxOccurs="unbounded">

[#50638878_pgfId-1042208]## <xsd:element name="attribute"

[#50638878_pgfId-1042209]## type="javaee:uicomponent-attributeType"/>

[#50638878_pgfId-1042210]## </xsd:choice>

[#50638878_pgfId-1042211]## 

[#50638878_pgfId-1042212]## <xsd:attribute name="name"

[#50638878_pgfId-1042213]## type="xsd:string"

[#50638878_pgfId-1042214]## use="required"/>

[#50638878_pgfId-1042215]## 

[#50638878_pgfId-1042216]## <xsd:attribute name="displayName"

[#50638878_pgfId-1042217]## type="xsd:string"

[#50638878_pgfId-1042218]## use="optional"/>

[#50638878_pgfId-1042219]## 

[#50638878_pgfId-1042220]## <xsd:attribute name="shortDescription"

[#50638878_pgfId-1042221]## type="xsd:string"

[#50638878_pgfId-1042222]## use="optional"/>

[#50638878_pgfId-1042223]## 

[#50638878_pgfId-1042224]## <xsd:attribute name="default"

[#50638878_pgfId-1042225]## type="xsd:string"

[#50638878_pgfId-1042226]## use="optional"/>

[#50638878_pgfId-1042227]## 

[#50638878_pgfId-1042228]## <xsd:attribute name="method-signature"

[#50638878_pgfId-1042229]## type="xsd:string"

[#50638878_pgfId-1042230]## use="optional">

[#50638878_pgfId-1042231]## 

[#50638878_pgfId-1042232]## <xsd:annotation>

[#50638878_pgfId-1042233]## <xsd:documentation>

[#50638878_pgfId-1042234]## <![CDATA[

[#50638878_pgfId-1042235]## 

[#50638878_pgfId-1042236]## Provides the signature of the Java method.
The syntax of

[#50638878_pgfId-1042237]## the method-signature element is as follows
(taken from

[#50638878_pgfId-1042238]## function-signature in
web-jsptaglibrary_2_1.xsd):

[#50638878_pgfId-1042239]## 

[#50638878_pgfId-1042240]## MethodSignature ::= ReturnType S MethodName
S?

[#50638878_pgfId-1042241]## '(' S? Parameters? S? ')'

[#50638878_pgfId-1042242]## 

[#50638878_pgfId-1042243]## ReturnType ::= Type

[#50638878_pgfId-1042244]## 

[#50638878_pgfId-1042245]## MethodName ::= Identifier

[#50638878_pgfId-1042246]## 

[#50638878_pgfId-1042247]## Parameters ::= Parameter

[#50638878_pgfId-1042248]## | ( Parameter S? ',' S? Parameters )

[#50638878_pgfId-1042249]## 

[#50638878_pgfId-1042250]## Parameter ::= Type

[#50638878_pgfId-1042251]## 

[#50638878_pgfId-1042252]## Where:

[#50638878_pgfId-1042253]## 

[#50638878_pgfId-1042254]## * Type is a basic type or a fully qualified

[#50638878_pgfId-1042255]## Java class name (including package name),

[#50638878_pgfId-1042256]## as per the 'Type' production in the Java

[#50638878_pgfId-1042257]## Language Specification, Second Edition,

[#50638878_pgfId-1042258]## Chapter 18.

[#50638878_pgfId-1042259]## 

[#50638878_pgfId-1042260]## * Identifier is a Java identifier, as per

[#50638878_pgfId-1042261]## the 'Identifier' production in the Java

[#50638878_pgfId-1042262]## Language Specification, Second

[#50638878_pgfId-1042263]## Edition, Chapter 18.

[#50638878_pgfId-1042264]## 

[#50638878_pgfId-1042265]## Example:

[#50638878_pgfId-1042266]## 

[#50638878_pgfId-1042267]## java.lang.String nickName( java.lang.String,
int )

[#50638878_pgfId-1042268]## 

[#50638878_pgfId-1042269]## ]]>

[#50638878_pgfId-1042270]## </xsd:documentation>

[#50638878_pgfId-1042271]## </xsd:annotation>

[#50638878_pgfId-1042272]## 

[#50638878_pgfId-1042273]## </xsd:attribute>

[#50638878_pgfId-1042274]## 

[#50638878_pgfId-1042275]## <xsd:attribute name="applyTo"

[#50638878_pgfId-1042276]## type="xsd:string"

[#50638878_pgfId-1042277]## use="optional"/>

[#50638878_pgfId-1042278]## 

[#50638878_pgfId-1042279]## <xsd:attribute name="required"

[#50638878_pgfId-1042280]## type="xsd:boolean"

[#50638878_pgfId-1042281]## use="optional"/>

[#50638878_pgfId-1042282]## 

[#50638878_pgfId-1042283]## <xsd:attribute name="preferred"

[#50638878_pgfId-1042284]## type="xsd:boolean"

[#50638878_pgfId-1042285]## use="optional"/>

[#50638878_pgfId-1042286]## 

[#50638878_pgfId-1042287]## <xsd:attribute name="expert"

[#50638878_pgfId-1042288]## type="xsd:boolean"

[#50638878_pgfId-1042289]## use="optional"/>

[#50638878_pgfId-1042290]## 

[#50638878_pgfId-1042291]##

[#50638878_pgfId-1042292]## </xsd:complexType>

[#50638878_pgfId-1042293]## 

[#50638878_pgfId-1042294]## <!--
**************************************************** -->

[#50638878_pgfId-1042295]## 

[#50638878_pgfId-1042296]##</xsd:schema>

[#50638881_pgfId-1024478]## __  

== [#50638881_pgfId-1024787]##

image:JSF-61.gif[image]

Appendix B - Change Log

image:JSF-62.gif[image]

=== [#50638881_pgfId-1025257]##

image:JSF-63.gif[image]

Changes between 2.1 and 2.2

[#50638881_pgfId-1025258]##This section gives the reader a survey of the
changes between this version of the specification and the previous
version, using the categories from the issue tracker at <
http://jsf-spec.java.net/issues/ >.

==== [#50638881_pgfId-1025259]##Big Ticket Features

[#50638881_pgfId-1025260]##HTML5 Friendly Markup

[#50638881_pgfId-1025261]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1090

{empty}[#50638881_pgfId-1025265]##Start with
link:JSF.htm#50638887_96511[See HTML5 Friendly Markup]

[#50638881_pgfId-1025266]##Resource Library Contracts

[#50638881_pgfId-1025267]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1142

[#50638881_pgfId-1025271]##Start with link:JSF.htm#50638887_50816[See
Resource Library Contracts Background].

[#50638881_pgfId-1025272]##Faces Flows

[#50638881_pgfId-1025273]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-730

[#50638881_pgfId-1025277]##Start with link:JSF.htm#50638861_52748[See
FlowHandler].

[#50638881_pgfId-1025278]##Stateless Views

[#50638881_pgfId-1025279]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1055

[#50638881_pgfId-1025283]##Start with link:JSF.htm#50638861_32414[See
Stateless Views].

==== [#50638881_pgfId-1025284]##Other Features, by Functional Area

[#50638881_pgfId-1025285]##Components/Renderers

====== [#50638881_pgfId-1025286]##Larger Changes

[#50638881_pgfId-1025287]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-479-UIDataCollection +
UIData supports the Collection Interface rather than List.

[#50638881_pgfId-1025288]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1134 +
- Add the "role" pass through attribute.

====== [#50638881_pgfId-1025289]##Smaller Changes

[#50638881_pgfId-1025290]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1080-FindComponentWarning +
Warn about some important corner cases when
_UIComponent.findComponent()_ may not provide the expected results.

[#50638881_pgfId-1025291]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1068-PartialResponseProcessing

[#50638881_pgfId-1025292]##New section describing what happens with
respect to partial processing during render response. See
link:JSF.htm#50638877_65450[See Render Response Partial Processing].

[#50638881_pgfId-1025296]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1067-cc:insertChildren +
Spec clarifications. See the VDLDoc for _cc:insertChildren_ ,
_cc:insertFacet_

[#50638881_pgfId-1025297]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1061

[#50638881_pgfId-1025298]##Clarify that both
_Application.publishEvent()_ and the manual traversal based delivery are
required for publishing the _PostRestoreStateEvent_ .

[#50638881_pgfId-1025299]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1030 +
Clarify docs for h:message h:messages

[#50638881_pgfId-1025300]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1023 +
- Modify JavaDoc to relax requirements for PostAddToViewEvent publishing

[#50638881_pgfId-1025301]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1019 +
Modify spec for ResponseWriter.writeURIAttribute() to explicitly require
adherence to the W3C URI spec

[#50638881_pgfId-1025302]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-997 +
javax.faces.component.ComponentSystemEvent: Override
isAppropriateListener so that it first asks the listener, "are you a
ComponentSystemEventListener", then, if not, asks
super.isAppropriateListener()

[#50638881_pgfId-1025303]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-984 +
Component Context Manager, see
_javax.faces.component.visit.ComponentModificationManager_ .

[#50638881_pgfId-1025304]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-943 +
See _javax.faces.view.ViewDeclarationLanguageWrapper_

[#50638881_pgfId-1025305]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-784 +
Deprecate the CURRENT_COMPONENT and CURRENT_COMPOSITE_COMPONENT
attributes

[#50638881_pgfId-1025306]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-599 +
Make it possible to programmatically create components in the same way
as they are created by Facelets. See
_javax.faces.application.Application.createComponent(FacesContext,
String taglibUri, String tagName, Map attrs)_

[#50638881_pgfId-1025307]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-703 +
Make "value" optional for @FacesComponent.

[#50638881_pgfId-1025308]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-585 +
outputText and inputText do not render children by default

[#50638881_pgfId-1025309]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-550 +
OutputStylesheet "media" attribute

[#50638881_pgfId-1025310]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1125 +
_javax.faces.application.Application_ event subscription clarifications.

[#50638881_pgfId-1025311]##Lifecycle

====== [#50638881_pgfId-1025312]##Larger Changes

[#50638881_pgfId-1025313]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-949-ClientWindow +
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-947-ClientWindow +
Give JSF the ability to correctly handle browsing context (tab, browser
window, pop-up, etc). See _javax.faces.lifecycle.ClientWindow_ .

[#50638881_pgfId-1025314]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-758-f:viewAction
and +
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1042

[#50638881_pgfId-1025315]##A
jsf-api/src/main/java/javax/faces/component/UIViewAction.java

[#50638881_pgfId-1025316]##The heart of this changebundle, this class
came over from the JBoss Seam Faces Module, but I've rewritten most of
the javadoc.

[#50638881_pgfId-1025317]##M
jsf-api/src/main/java/javax/faces/event/PhaseId.java

[#50638881_pgfId-1025318]##new methods

[#50638881_pgfId-1025319]##public String getName()

[#50638881_pgfId-1025320]##public static PhaseId phaseIdValueOf(String
phase)

[#50638881_pgfId-1025324]##Change link:JSF.htm#50638861_53439[See
Default NavigationHandler Algorithm] to account for UIViewAction

[#50638881_pgfId-1025325]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1062
and http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-802 +
File Upload

[#50638881_pgfId-1025326]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-766 +
Events from the flash

[#50638881_pgfId-1025327]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1050 +
Add support for delay value in options for Ajax requests

====== [#50638881_pgfId-1025328]##Smaller Changes

[#50638881_pgfId-1025329]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1129 +
In validate(), clarify that setSubmittedValue() null must be called if
validation succeeds.

[#50638881_pgfId-1025330]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1071

[#50638881_pgfId-1025334]##Add FlashFactory. See
link:JSF.htm#50638850_38316[See Delegating Implementation Support].

[#50638881_pgfId-1025335]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1065

{empty}[#50638881_pgfId-1025336]##When calculating the locale for the
resource library prefix, if there is a UIViewRoot, use its locale first,
otherwise, just use the Applications’s ViewHandler’s calculateLocale()
method. See link:JSF.htm#50638877_79794[See Libraries of Localized and
Versioned Resources]

[#50638881_pgfId-1025340]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1039 +
In ApplicationWrapper, mark things as deprecated

[#50638881_pgfId-1025341]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1028 +
Deprecate StateManager, point to StateManagementStrategy. In
StateManagementStrategy, require the use of the visit API to perform the
saving.

[#50638881_pgfId-1025342]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-993 +
Wrapper for ActionListener

[#50638881_pgfId-1025343]##Tweak circumstances for skipping intervening
lifecycle phases in the case of view metadata
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-762

[#50638881_pgfId-1025344]##Section 2.2.1. Now has this text.

[#50638881_pgfId-1025345]##Otherwise, call getViewMetadata() on the
ViewDeclarationLanguage instance. If the result is non-null, call
createMetadataView() on the ViewMetadata instance. Call
ViewMetadata.getViewParameters(). If the result is a non-empty
Collection, do not call facesContext.renderResponse(). If the result is
an empty collection, try to obtain the metadata facet of the UIViewRoot
by asking the UIViewRoot for the facet named
UIViewRoot.METADATA_FACET_NAME. This facet must exist. If the facet has
no children, call facesContext.renderResponse(). Otherwise, none of the
previous steps have yielded the discovery any of metadata, so call
facesContext.renderResponse().

[#50638881_pgfId-1025346]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-566 +
UIOutput.getValue() value returns.

[#50638881_pgfId-1025347]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-220

[#50638881_pgfId-1025348]##In web-partialresponse_2_2.xsd, require that
the <partial-response> element has an “id” attribute whose value is the
return from _UIViewRoot.getContainerClientId()_ .

[#50638881_pgfId-1025349]## 

[#50638881_pgfId-1025350]##Platform Integration

[#50638881_pgfId-1025351]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-763

[#50638881_pgfId-1025355]##Change link:JSF.htm#50638862_25885[See
Managed Bean Annotations] to account for new injectability requirements.

[#50638881_pgfId-1025356]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-976 +
In Javadoc for “Faces Managed Bean Annotation Specification For
Containers Conforming to Servlet 2.5 and Beyond”, indicate that
_javax.faces.bean_ will be deprecated in the next version.

[#50638881_pgfId-1025357]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1087 +
Introduce CDI based @ViewScoped annotation.

[#50638881_pgfId-1025358]##Facelets/VDL

====== [#50638881_pgfId-1025359]##Larger Changes

[#50638881_pgfId-1025360]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1001 +
Allow cc and non-cc components in one taglib

[#50638881_pgfId-1025361]##A jsf-api/doc/web-facelettaglibrary_2_2.xsd

[#50638881_pgfId-1025362]##First change to the facelet taglib schema in
2.2: introduce the ability to declare a resource which will be the
composite component for a tag. Now, before you get all excited about
what conventions we can use to make this easier, let me stop you right
there. Here is a summary of the ease of use story regarding taglib
files.

[#50638881_pgfId-1025363]##The 80/20 rule says we should make taglib
files optional most of the time. Here are the 80% cases.

[#50638881_pgfId-1025364]##Employs the cc naming convention
http://java.sun.com/jsf/composite/<libraryName>

[#50638881_pgfId-1025365]##The user employs a java component has a
@FacesComponent on it that declares the necessary metadata.
JAVASERVERFACES_SPEC_PUBLIC-594

[#50638881_pgfId-1025366]##Here are some of the cases where you must
have a taglib file, the 20% cases.

[#50638881_pgfId-1025367]##If you want to employ a cc with a namespace
other than http://java.sun.com/jsf/composite/<libraryName> you need to
have a taglib file that declares <composite-library-name>. Currently you
must not detlare any <tag> elements in such a taglib file. All the tags
in such a library must come from the same resource library.

[#50638881_pgfId-1025368]##If the user is not employs a java component
but is not using @FacesComponent.

[#50638881_pgfId-1025369]##This patch introduces the following syntax.

[#50638881_pgfId-1025370]##<?xml version="1.0" encoding="UTF-8"?> +
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" +
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" +
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee +
http://java.sun.com/xml/ns/javaee/web-facelettaglibary_2_2.xsd" +
version="2.2"> +
<namespace>test</namespace> +
<tag> +
<tag-name>layout</tag-name> +
<resource-id>myCC/whatever.xhtml</resource-id> +
</tag> +
</facelet-taglib>

[#50638881_pgfId-1025371]##Where _<resource-id>_ is a valid resource
identifier as specified in section 2.6.1.3.

[#50638881_pgfId-1025372]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-548

[#50638881_pgfId-1025373]##Require additional check to handle the case
where, in one resource library, there are both localized and
non-localized resources. See link:JSF.htm#50638877_79794[See Libraries
of Localized and Versioned Resources].

====== [#50638881_pgfId-1025377]##Smaller Changes

[#50638881_pgfId-1025378]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1038

[#50638881_pgfId-1025379]##Declare an annotation corresponding to the
_javax.faces.FACELETS_RESOURCE_RESOLVER_ application configuration
parameter. See link:JSF.htm#50638850_27931[See Requirements for scanning
of classes for annotations] and link:JSF.htm#50638850_59981[See
Application Configuration Parameters].

[#50638881_pgfId-1025386]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1082

[#50638881_pgfId-1025387]##Account for DOCTYPE discrepancy between
server side representation of Facelet VDL files, which are proper XHTML,
and processed files which are sent to the client, which now, by default,
are HTML5 HTML syntax files. See link:JSF.htm#50638878_16008[See The
facelets-processing element].

[#50638881_pgfId-1025391]##Fix incorrect VDLDoc
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-967
f:selectItems itemValue description incorrect.

[#50638881_pgfId-1025392]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-922 +
Remove maxlength from f:viewParam

[#50638881_pgfId-1025393]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-998 +
Document that ui:fragment should not be bound to a bean with wider than
request scope, document that the type of the property must extend from
UIComponent.

[#50638881_pgfId-1025394]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-999 +
Changes to "template" attribute requiredness for ui:decorate and
ui:composition

[#50638881_pgfId-1025395]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-901 +
Deprecate “targets” concept.

[#50638881_pgfId-1025396]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1088 +
add short-name to schema.

[#50638881_pgfId-1025397]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-746 +
Missing _method-signature_ element in taglib xsd.

[#50638881_pgfId-1025398]##Spec Clarifications

[#50638881_pgfId-1025399]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1136 +
In _ExternalContext.dispatch()_ , clarify what is to be done if
_getRequestDispatcher()_ returns _null_ .

[#50638881_pgfId-1025400]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1132 +
Replace literal strings with symbolic constants where possible.

[#50638881_pgfId-1025401]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1127 +
State Saving Serializability concerns.

[#50638881_pgfId-1025402]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1114 +
_javax.faces.view.facelets.Facelet.apply()_ spec version reference
error.

[#50638881_pgfId-1025403]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1100
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1097 +
HTML5 id attribute sensitivity

[#50638881_pgfId-1025404]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1064

[#50638881_pgfId-1025408]##In link:JSF.htm#50638878_16008[See The
facelets-processing element], clarify that in XML and JSPX modes, only
the CDATA section start and end tags, not the entire CDATA section and
contents, should be consumed.

[#50638881_pgfId-1025409]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1063 +
_javax.faces.component.UIViewParameter.getSubmittedValue()_ return
value.

[#50638881_pgfId-1025410]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1058 +
ui:repeat tag size attribute

[#50638881_pgfId-1025411]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1036

[#50638881_pgfId-1025415]##In link:JSF.htm#50638851_91832[See
ValueExpression properties], clarify which attributes are expression
enabled,

[#50638881_pgfId-1025416]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1035

[#50638881_pgfId-1025420]##Change section
link:JSF.htm#50638857_74571[See FacesMessage]to clarify the meaning of
having _FacesMessage_ instances on the _FacesContext._

[#50638881_pgfId-1025421]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1026 +
f:ajax event attribute is String (not VE)

[#50638881_pgfId-1025422]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1014

[#50638881_pgfId-1025423]##12.1.3

[#50638881_pgfId-1025424]##The specification for the context-param that
declares the list of TagDecorator implementations to the runtime should
have always been javax.faces.FACELETS_DECORATORS. Prior to this
revision, the name of this context param was incorrectly specified as
javax.faces.DECORATORS. The reference implementation has always used the
correct name, however.

[#50638881_pgfId-1025425]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1010 +
Check existing usages of the state saving method parameter to ensure
case insensitivity.

[#50638881_pgfId-1025426]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1004

[#50638881_pgfId-1025427]##M usingFacesInWebapps.fm

[#50638881_pgfId-1025428]##- 12.1.3 Set default for
javax.faces.FACELETS_BUFFER_SIZE to be 1024.

[#50638881_pgfId-1025429]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-998 +
Additional clarification about binding attribute in VDLdocs

[#50638881_pgfId-1025430]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-915
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1015
Non-normative text about http methods and prefix mapping

[#50638881_pgfId-1025431]##http://java.net/jira/browse/JAVASERVERFACES-2740 +
In link:JSF.htm#50638851_65495[See Component Bindings], clarify a corner
case regarding bean scope and component binding.

[#50638881_pgfId-1025435]##Resources

====== [#50638881_pgfId-1025436]##Larger Changes

[#50638881_pgfId-1025437]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-809 +
This commit introduces a cleaner contract for allowing views to be
loaded from the Filesystem (including inside of JAR files). All VDL
resources must be loaded using ResourceHandler.createViewResource().

====== [#50638881_pgfId-1025438]##Smaller Changes

[#50638881_pgfId-1025439]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-996

[#50638881_pgfId-1025442]##Enable configuring the web app resources
directory. See link:JSF.htm#50638850_59981[See Application Configuration
Parameters].

[#50638881_pgfId-1025444]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-719 +
Method to map a viewId to a resourcePath

{empty}[#50638881_pgfId-1025445]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1130-SerializeServerState +
Modify link:JSF.htm#50638861_53238[See State Saving Alternatives and
Implications] to clarify there is no requirement to serialize server
state by default when state saving method is server. Introduce a context
parameter to this effect in link:JSF.htm#50638850_59981[See Application
Configuration Parameters]

[#50638881_pgfId-1025452]##Expression Language

[#50638881_pgfId-1025453]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1092

[#50638881_pgfId-1025454]##Remove text from
MethodExpressionValueChangeListener and MethodExpressionActionListener
regarding wrapping any exception thrown by the invoked method being
wrapped in an AbortProcessingException. Such a requirement is incorrect
and should not have been introduced.

[#50638881_pgfId-1025458]##In section link:JSF.htm#50638857_91184[See
ExceptionHandler], add _AbortProcessingException_ , to the list of
exceptions that do not get to the _ExceptionHandler_ .

[#50638881_pgfId-1025459]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1043 +
When publishing a ComponentSystemEvent, ensure the EL current component
is pushed correctly

[#50638881_pgfId-1025460]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1164 +
If running in a container that supports EL 3.0, add the necessary
ELResolvers. See link:JSF.htm#50638862_38613[See Stream, StaticField,
Map, List, Array, and Bean ELResolvers].

[#50638881_pgfId-1025464]##Configuration and Bootstrapping

[#50638881_pgfId-1025465]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-533-ProgrammaticFacesConfig

[#50638881_pgfId-1025469]##Modify link:JSF.htm#50638850_57048[See
Application Startup Behavior] to account for requirement to call new API
when starting up.

[#50638881_pgfId-1025470]##Miscellaneous

[#50638881_pgfId-1025471]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1169

[#50638881_pgfId-1025472]##New XML Namespace for XSD files introduced in
JSF 2.2, and also for facelet tag libraries.

[#50638881_pgfId-1025473]##The following XSD files are new for JSF 2.2,
and each will be in the XML namespace
_http://xmlns.jcp.org/xml/ns/javaee_ .

[#50638881_pgfId-1025474]## _web-facelettaglibrary_2_2.xsd_

[#50638881_pgfId-1025475]## _web-facesconfig_2_2.xsd_

[#50638881_pgfId-1025476]## _web-partialresponse_2_2.xsd_

[#50638881_pgfId-1025541]##Facelet Tag Libraries will now respond to the
following URIs

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50638881_pgfId-1025479]##Library |[#50638881_pgfId-1025481]##Old URI
|[#50638881_pgfId-1025483]##New URI
|[#50638881_pgfId-1025485]##Composite Components
|[#50638881_pgfId-1025487]##http://java.sun.com/jsf/composite a|
[#50638881_pgfId-1025489]##http://xmlns.jcp.org/jsf/composite

[#50638881_pgfId-1025490]## 

|[#50638881_pgfId-1025492]##Faces Core
|[#50638881_pgfId-1025494]##http://java.sun.com/jsf/core a|
[#50638881_pgfId-1025496]##http://xmlns.jcp.org/jsf/core

[#50638881_pgfId-1025497]## 

|[#50638881_pgfId-1025499]##HTML_BASIC
|[#50638881_pgfId-1025501]##http://java.sun.com/jsf/html a|
[#50638881_pgfId-1025503]##http://xmlns.jcp.org/jsf/html

[#50638881_pgfId-1025504]## 

|[#50638881_pgfId-1025506]##JSTL Core a|
[#50638881_pgfId-1025508]##http://java.sun.com/jsp/jstl/core

[#50638881_pgfId-1025509]## 

a|
[#50638881_pgfId-1025511]##http://xmlns.jcp.org/jsp/jstl/core

[#50638881_pgfId-1025512]## 

|[#50638881_pgfId-1025514]##JSTL Functions
|[#50638881_pgfId-1025516]##http://java.sun.com/jsp/jstl/functions a|
[#50638881_pgfId-1025518]##http://xmlns.jcp.org/jsp/jstl/functions

[#50638881_pgfId-1025519]## 

|[#50638881_pgfId-1025521]##Facelets Templating
|[#50638881_pgfId-1025523]##http://java.sun.com/jsf/facelets a|
[#50638881_pgfId-1025525]##http://xmlns.jcp.org/jsf/facelets

[#50638881_pgfId-1025526]## 

|[#50638881_pgfId-1025528]##Pass Through Attributes
|[#50638881_pgfId-1025530]##http://java.sun.com/jsf/passthrough a|
[#50638881_pgfId-1025532]##http://xmlns.jcp.org/jsf/passthrough

[#50638881_pgfId-1025533]## 

|[#50638881_pgfId-1025535]##Pass Through Elements
|[#50638881_pgfId-1025537]##http://java.sun.com/jsf a|
[#50638881_pgfId-1025539]##http://xmlns.jcp.org/jsf

[#50638881_pgfId-1025540]## 

|===

[#50638881_pgfId-1025542]##Developers are requested to use the values
from the New URI column, though both columns will work.

[#50638881_pgfId-1025543]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-997

[#50638881_pgfId-1025544]##M
jsf-api/src/main/java/javax/faces/event/ComponentSystemEvent.java

[#50638881_pgfId-1025545]##Override isAppropriateListener so that it
first asks the listener, "are you a ComponentSystemEventListener", then,
if not, asks super.isAppropriateListener()

[#50638881_pgfId-1025546]##M
jsf-api/src/main/java/javax/faces/event/SystemEvent.java

[#50638881_pgfId-1025547]##in isAppropriateListener(), document the
default implementation.

[#50638881_pgfId-1025548]##M
jsf-api/src/main/java/javax/faces/component/UIComponent.java

[#50638881_pgfId-1025549]##Make inner class
ComponentSystemEventListenerAdapter implement
ComponentSystemEventListener.

[#50638881_pgfId-1025550]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-917

[#50638881_pgfId-1025551]##javax.faces.application.ResourceWrapper:

[#50638881_pgfId-1025552]## - getContentType()

[#50638881_pgfId-1025553]## - getLibraryName()

[#50638881_pgfId-1025554]## - getResourceName()

[#50638881_pgfId-1025555]## - setContentType(String)

[#50638881_pgfId-1025556]## - setLibraryName(String)

[#50638881_pgfId-1025557]## - setResourceName(String)

[#50638881_pgfId-1025558]## javax.faces.context.ExternalContextWrapper:

[#50638881_pgfId-1025559]## - getSessionMaxInactiveInterval()

[#50638881_pgfId-1025560]## - isSecure()

[#50638881_pgfId-1025561]## - setSessionMaxInactiveInterval()

[#50638881_pgfId-1025562]##
javax.faces.context.PartialViewContextWrapper

[#50638881_pgfId-1025563]## - setPartialRequest(boolean)

[#50638881_pgfId-1025564]##12.1.3 add this text to the
javax.faces.STATE_SAVING_METHOD spec. When examining the value, the
runtime must ignore the case.

[#50638881_pgfId-1025565]##Add
ExternalContext.getApplicationContextPath()
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1012

[#50638881_pgfId-1025566]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-787 +
restore ViewScope before templates are processed with buildView()

[#50638881_pgfId-1025567]##7.6.2.6 typo in spec for renderView(). Should
be

[#50638881_pgfId-1025568]##Return immediately if calling isRendered() on
the argument UIViewRoot returns false.

[#50638881_pgfId-1025569]##Per Matt Benson, remove duplicate
descriptions of the cc and component implicit object from the getValue()
specification for the composite component ELResolver in section 5.6.2.1.

[#50638881_pgfId-1025570]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-869

[#50638881_pgfId-1025571]##Specify Cross Site Request Forgery
protection.

[#50638881_pgfId-1025575]##Add text in link:JSF.htm#50638877_45193[See
Restore View] to describe how non-postback requests are inspected for
protection, if necessary.

[#50638881_pgfId-1025579]##Remove text for writeState() in
link:JSF.htm#50638855_88992[See ResponseStateManager], point to the
JavaDocs.

[#50638881_pgfId-1025583]##Add View Protection methods to
link:JSF.htm#50638861_26354[See Overview] for ViewHandler.

[#50638881_pgfId-1025587]##Introduce subsections to
link:JSF.htm#50638861_36790[See Default ViewHandler Implementation] that
group the methods by their purpose. Add a new section
link:JSF.htm#50638861_41052[See ViewHandler Methods that relate to View
Protection], which points to the javadocs. In
link:JSF.htm#50638861_46125[See ViewHandler Methods Relating to
Navigation], in the spec for _getActionUrl()_ , specify how view
protection is affected.

{empty}[#50638881_pgfId-1025597]##Remove tables in section
link:JSF.htm#50638850_27931[See Requirements for scanning of classes for
annotations]

[#50638881_pgfId-1025598]##The Javadoc tool lists annotations in a
separate section, making the tables that list JSF related annotations
redundant.

[#50638881_pgfId-1025599]##.

[#50638881_pgfId-1025600]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1082-DoctypeElement

[#50638881_pgfId-1025604]##Add new section
link:JSF.htm#50638887_95527[See DOCTYPE and XML Declaration].

[#50638881_pgfId-1025605]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1141-SlashInResourceNames

[#50638881_pgfId-1025609]##In link:JSF.htm#50638877_95265[See Resource
Identifiers], declare that resourceName and resourceVersion, in addition
to the already listed other segments, are subject to the same
constraints.

[#50638881_pgfId-1025610]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1129-ResetValues

[#50638881_pgfId-1025614]##In link:JSF.htm#50638877_65450[See Render
Response Partial Processing], require calling _UIViewRoot.resetValues()_
if necessary.

==== [#50638881_pgfId-1025615]##Backward Compatibility with Previous Versions

[#50638881_pgfId-1025616]##Faces 2.2 is backwards compatible with Faces
2.1 and 2.0. This means that a web-application that was developed to run
with Faces 2.1 or 2.0 won’t require any modification when run with Faces
2.2 except in the cases described in the following section.

==== [#50638881_pgfId-1025617]##Breakages in Backward Compatibility

[#50638881_pgfId-1025618]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1092

[#50638881_pgfId-1025619]##Due to an error in previous versions of the
specification, exceptions were silently being swallowed that now will
bubble up to the exception handler. Code that was relying on this
incorrect behavior may need to be modified to account for fixing this
problem.

[#50638881_pgfId-1025620]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-745

[#50638881_pgfId-1025621]##5.6.2.2 Table 5-11. Make the following
changes to the spec for Composite Component Attribute ELResoler

[#50638881_pgfId-1025622]##Modify getType() according to new
specification language.

[#50638881_pgfId-1025623]##Require the implementation of containsKey()
on the Map.

[#50638881_pgfId-1025624]##containsKey(): If the attributes map contains
the key, return true. Otherwise, if a default value has been declared
for the attribute, return true. Otherwise, return false.

{empty}[#50638881_pgfId-1025628]##link:JSF.htm#50638851_97048[See
Composite Component Metadata]

[#50638881_pgfId-1025629]##New text dealing with <cc:attribute>

[#50638881_pgfId-1025630]##Any additional attributes on
_<composite:attribute/ >_ are exposed as attributes accessible from the
_getValue()_ and _attributeNames()_ methods on _PropertyDescriptor_ .
The return type from getValue() must be a _ValueExpression_ with the
exception of the _getValue(“type”)_ . The return type from
_getValue(“type”)_ must be _Class_ . If the value specified for the
_type_ attribute of _<cc:attribute/>_ cannot be converted to an actual
_Class_ , a _TagAttributeException_ must be thrown, including the _Tag_
and _TagAttribute_ instances in the constructor.

[#50638881_pgfId-1025631]##Yes, this is a backwards incompatible change,
but because the usecase is so specific, and the performance benefit so
substantial, it was judged to be worth the cost.

[#50638881_pgfId-1025253]## 

=== [#50638881_pgfId-1024801]##

image:JSF-63.gif[image]

Changes between 2.1 and 2.2

[#50638881_pgfId-1024802]##This section gives the reader a survey of the
changes between this version of the specification and the previous
version, using the categories from the issue tracker at <
http://jsf-spec.java.net/issues/ >.

==== [#50638881_pgfId-1024803]##Big Ticket Features

[#50638881_pgfId-1024804]##HTML5 Friendly Markup

[#50638881_pgfId-1024805]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1090

{empty}[#50638881_pgfId-1024809]##Start with
link:JSF.htm#50638887_96511[See HTML5 Friendly Markup]

[#50638881_pgfId-1024810]##Resource Library Contracts

[#50638881_pgfId-1024811]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1142

[#50638881_pgfId-1024815]##Start with link:JSF.htm#50638887_50816[See
Resource Library Contracts Background].

[#50638881_pgfId-1024816]##Faces Flows

[#50638881_pgfId-1024817]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-730

[#50638881_pgfId-1024821]##Start with link:JSF.htm#50638861_52748[See
FlowHandler].

[#50638881_pgfId-1024822]##Stateless Views

[#50638881_pgfId-1024823]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1055

[#50638881_pgfId-1024827]##Start with link:JSF.htm#50638861_32414[See
Stateless Views].

==== [#50638881_pgfId-1024828]##Other Features, by Functional Area

[#50638881_pgfId-1024829]##Components/Renderers

====== [#50638881_pgfId-1024830]##Larger Changes

[#50638881_pgfId-1024831]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-479-UIDataCollection +
UIData supports the Collection Interface rather than List.

[#50638881_pgfId-1024832]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1134 +
- Add the "role" pass through attribute.

====== [#50638881_pgfId-1024833]##Smaller Changes

[#50638881_pgfId-1024834]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1080-FindComponentWarning +
Warn about some important corner cases when
_UIComponent.findComponent()_ may not provide the expected results.

[#50638881_pgfId-1024835]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1068-PartialResponseProcessing

[#50638881_pgfId-1024836]##New section describing what happens with
respect to partial processing during render response. See
link:JSF.htm#50638877_65450[See Render Response Partial Processing].

[#50638881_pgfId-1024840]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1067-cc:insertChildren +
Spec clarifications. See the VDLDoc for _cc:insertChildren_ ,
_cc:insertFacet_

[#50638881_pgfId-1024841]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1061

[#50638881_pgfId-1024842]##Clarify that both
_Application.publishEvent()_ and the manual traversal based delivery are
required for publishing the _PostRestoreStateEvent_ .

[#50638881_pgfId-1024843]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1030 +
Clarify docs for h:message h:messages

[#50638881_pgfId-1024844]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1023 +
- Modify JavaDoc to relax requirements for PostAddToViewEvent publishing

[#50638881_pgfId-1024845]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1019 +
Modify spec for ResponseWriter.writeURIAttribute() to explicitly require
adherence to the W3C URI spec

[#50638881_pgfId-1024846]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-997 +
javax.faces.component.ComponentSystemEvent: Override
isAppropriateListener so that it first asks the listener, "are you a
ComponentSystemEventListener", then, if not, asks
super.isAppropriateListener()

[#50638881_pgfId-1024847]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-984 +
Component Context Manager, see
_javax.faces.component.visit.ComponentModificationManager_ .

[#50638881_pgfId-1024848]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-943 +
See _javax.faces.view.ViewDeclarationLanguageWrapper_

[#50638881_pgfId-1024849]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-784 +
Deprecate the CURRENT_COMPONENT and CURRENT_COMPOSITE_COMPONENT
attributes

[#50638881_pgfId-1024850]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-599 +
Make it possible to programmatically create components in the same way
as they are created by Facelets. See
_javax.faces.application.Application.createComponent(FacesContext,
String taglibUri, String tagName, Map attrs)_

[#50638881_pgfId-1024851]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-703 +
Make "value" optional for @FacesComponent.

[#50638881_pgfId-1024852]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-585 +
outputText and inputText do not render children by default

[#50638881_pgfId-1024853]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-550 +
OutputStylesheet "media" attribute

[#50638881_pgfId-1024854]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1125 +
_javax.faces.application.Application_ event subscription clarifications.

[#50638881_pgfId-1024855]##Lifecycle

====== [#50638881_pgfId-1024856]##Larger Changes

[#50638881_pgfId-1024857]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-949-ClientWindow +
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-947-ClientWindow +
Give JSF the ability to correctly handle browsing context (tab, browser
window, pop-up, etc). See _javax.faces.lifecycle.ClientWindow_ .

[#50638881_pgfId-1024858]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-758-f:viewAction
and +
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1042

[#50638881_pgfId-1024859]##A
jsf-api/src/main/java/javax/faces/component/UIViewAction.java

[#50638881_pgfId-1024860]##The heart of this changebundle, this class
came over from the JBoss Seam Faces Module, but I've rewritten most of
the javadoc.

[#50638881_pgfId-1024861]##M
jsf-api/src/main/java/javax/faces/event/PhaseId.java

[#50638881_pgfId-1024862]##new methods

[#50638881_pgfId-1024863]##public String getName()

[#50638881_pgfId-1024864]##public static PhaseId phaseIdValueOf(String
phase)

[#50638881_pgfId-1024868]##Change link:JSF.htm#50638861_53439[See
Default NavigationHandler Algorithm] to account for UIViewAction

[#50638881_pgfId-1024869]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1062
and http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-802 +
File Upload

[#50638881_pgfId-1024870]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-766 +
Events from the flash

[#50638881_pgfId-1024871]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1050 +
Add support for delay value in options for Ajax requests

====== [#50638881_pgfId-1024872]##Smaller Changes

[#50638881_pgfId-1024873]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1129 +
In validate(), clarify that setSubmittedValue() null must be called if
validation succeeds.

[#50638881_pgfId-1024874]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1071

[#50638881_pgfId-1024878]##Add FlashFactory. See
link:JSF.htm#50638850_38316[See Delegating Implementation Support].

[#50638881_pgfId-1024879]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1065

{empty}[#50638881_pgfId-1024880]##When calculating the locale for the
resource library prefix, if there is a UIViewRoot, use its locale first,
otherwise, just use the Applications’s ViewHandler’s calculateLocale()
method. See link:JSF.htm#50638877_79794[See Libraries of Localized and
Versioned Resources]

[#50638881_pgfId-1024884]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1039 +
In ApplicationWrapper, mark things as deprecated

[#50638881_pgfId-1024885]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1028 +
Deprecate StateManager, point to StateManagementStrategy. In
StateManagementStrategy, require the use of the visit API to perform the
saving.

[#50638881_pgfId-1024886]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-993 +
Wrapper for ActionListener

[#50638881_pgfId-1024887]##Tweak circumstances for skipping intervening
lifecycle phases in the case of view metadata
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-762

[#50638881_pgfId-1024888]##Section 2.2.1. Now has this text.

[#50638881_pgfId-1024889]##Otherwise, call getViewMetadata() on the
ViewDeclarationLanguage instance. If the result is non-null, call
createMetadataView() on the ViewMetadata instance. Call
ViewMetadata.getViewParameters(). If the result is a non-empty
Collection, do not call facesContext.renderResponse(). If the result is
an empty collection, try to obtain the metadata facet of the UIViewRoot
by asking the UIViewRoot for the facet named
UIViewRoot.METADATA_FACET_NAME. This facet must exist. If the facet has
no children, call facesContext.renderResponse(). Otherwise, none of the
previous steps have yielded the discovery any of metadata, so call
facesContext.renderResponse().

[#50638881_pgfId-1024890]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-566 +
UIOutput.getValue() value returns.

[#50638881_pgfId-1024891]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-220

[#50638881_pgfId-1024892]##In web-partialresponse_2_2.xsd, require that
the <partial-response> element has an “id” attribute whose value is the
return from _UIViewRoot.getContainerClientId()_ .

[#50638881_pgfId-1024893]## 

[#50638881_pgfId-1024894]##Platform Integration

[#50638881_pgfId-1024895]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-763

[#50638881_pgfId-1024899]##Change link:JSF.htm#50638862_25885[See
Managed Bean Annotations] to account for new injectability requirements.

[#50638881_pgfId-1024900]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-976 +
In Javadoc for “Faces Managed Bean Annotation Specification For
Containers Conforming to Servlet 2.5 and Beyond”, indicate that
_javax.faces.bean_ will be deprecated in the next version.

[#50638881_pgfId-1024901]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1087 +
Introduce CDI based @ViewScoped annotation.

[#50638881_pgfId-1024902]##Facelets/VDL

====== [#50638881_pgfId-1024903]##Larger Changes

[#50638881_pgfId-1024904]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1001 +
Allow cc and non-cc components in one taglib

[#50638881_pgfId-1024905]##A jsf-api/doc/web-facelettaglibrary_2_2.xsd

[#50638881_pgfId-1024906]##First change to the facelet taglib schema in
2.2: introduce the ability to declare a resource which will be the
composite component for a tag. Now, before you get all excited about
what conventions we can use to make this easier, let me stop you right
there. Here is a summary of the ease of use story regarding taglib
files.

[#50638881_pgfId-1024907]##The 80/20 rule says we should make taglib
files optional most of the time. Here are the 80% cases.

[#50638881_pgfId-1024908]##Employs the cc naming convention
http://java.sun.com/jsf/composite/<libraryName>

[#50638881_pgfId-1024909]##The user employs a java component has a
@FacesComponent on it that declares the necessary metadata.
JAVASERVERFACES_SPEC_PUBLIC-594

[#50638881_pgfId-1024910]##Here are some of the cases where you must
have a taglib file, the 20% cases.

[#50638881_pgfId-1024911]##If you want to employ a cc with a namespace
other than http://java.sun.com/jsf/composite/<libraryName> you need to
have a taglib file that declares <composite-library-name>. Currently you
must not detlare any <tag> elements in such a taglib file. All the tags
in such a library must come from the same resource library.

[#50638881_pgfId-1024912]##If the user is not employs a java component
but is not using @FacesComponent.

[#50638881_pgfId-1024913]##This patch introduces the following syntax.

[#50638881_pgfId-1024914]##<?xml version="1.0" encoding="UTF-8"?> +
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" +
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" +
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee +
http://java.sun.com/xml/ns/javaee/web-facelettaglibary_2_2.xsd" +
version="2.2"> +
<namespace>test</namespace> +
<tag> +
<tag-name>layout</tag-name> +
<resource-id>myCC/whatever.xhtml</resource-id> +
</tag> +
</facelet-taglib>

[#50638881_pgfId-1024915]##Where _<resource-id>_ is a valid resource
identifier as specified in section 2.6.1.3.

[#50638881_pgfId-1024916]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-548

[#50638881_pgfId-1024917]##Require additional check to handle the case
where, in one resource library, there are both localized and
non-localized resources. See link:JSF.htm#50638877_79794[See Libraries
of Localized and Versioned Resources].

====== [#50638881_pgfId-1024921]##Smaller Changes

[#50638881_pgfId-1024922]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1038

[#50638881_pgfId-1024923]##Declare an annotation corresponding to the
_javax.faces.FACELETS_RESOURCE_RESOLVER_ application configuration
parameter. See link:JSF.htm#50638850_27931[See Requirements for scanning
of classes for annotations] and link:JSF.htm#50638850_59981[See
Application Configuration Parameters].

[#50638881_pgfId-1024930]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1082

[#50638881_pgfId-1024931]##Account for DOCTYPE discrepancy between
server side representation of Facelet VDL files, which are proper XHTML,
and processed files which are sent to the client, which now, by default,
are HTML5 HTML syntax files. See link:JSF.htm#50638878_16008[See The
facelets-processing element].

[#50638881_pgfId-1024935]##Fix incorrect VDLDoc
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-967
f:selectItems itemValue description incorrect.

[#50638881_pgfId-1024936]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-922 +
Remove maxlength from f:viewParam

[#50638881_pgfId-1024937]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-998 +
Document that ui:fragment should not be bound to a bean with wider than
request scope, document that the type of the property must extend from
UIComponent.

[#50638881_pgfId-1024938]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-999 +
Changes to "template" attribute requiredness for ui:decorate and
ui:composition

[#50638881_pgfId-1024939]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-901 +
Deprecate “targets” concept.

[#50638881_pgfId-1024940]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1088 +
add short-name to schema.

[#50638881_pgfId-1024941]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-746 +
Missing _method-signature_ element in taglib xsd.

[#50638881_pgfId-1024942]##Spec Clarifications

[#50638881_pgfId-1024943]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1136 +
In _ExternalContext.dispatch()_ , clarify what is to be done if
_getRequestDispatcher()_ returns _null_ .

[#50638881_pgfId-1024944]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1132 +
Replace literal strings with symbolic constants where possible.

[#50638881_pgfId-1024945]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1127 +
State Saving Serializability concerns.

[#50638881_pgfId-1024946]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1114 +
_javax.faces.view.facelets.Facelet.apply()_ spec version reference
error.

[#50638881_pgfId-1024947]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1100
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1097 +
HTML5 id attribute sensitivity

[#50638881_pgfId-1024948]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1064

[#50638881_pgfId-1024952]##In link:JSF.htm#50638878_16008[See The
facelets-processing element], clarify that in XML and JSPX modes, only
the CDATA section start and end tags, not the entire CDATA section and
contents, should be consumed.

[#50638881_pgfId-1024953]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1063 +
_javax.faces.component.UIViewParameter.getSubmittedValue()_ return
value.

[#50638881_pgfId-1024954]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1058 +
ui:repeat tag size attribute

[#50638881_pgfId-1024955]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1036

[#50638881_pgfId-1024959]##In link:JSF.htm#50638851_91832[See
ValueExpression properties], clarify which attributes are expression
enabled,

[#50638881_pgfId-1024960]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1035

[#50638881_pgfId-1024964]##Change section
link:JSF.htm#50638857_74571[See FacesMessage]to clarify the meaning of
having _FacesMessage_ instances on the _FacesContext._

[#50638881_pgfId-1024965]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1026 +
f:ajax event attribute is String (not VE)

[#50638881_pgfId-1024966]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1014

[#50638881_pgfId-1024967]##12.1.3

[#50638881_pgfId-1024968]##The specification for the context-param that
declares the list of TagDecorator implementations to the runtime should
have always been javax.faces.FACELETS_DECORATORS. Prior to this
revision, the name of this context param was incorrectly specified as
javax.faces.DECORATORS. The reference implementation has always used the
correct name, however.

[#50638881_pgfId-1024969]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1010 +
Check existing usages of the state saving method parameter to ensure
case insensitivity.

[#50638881_pgfId-1024970]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1004

[#50638881_pgfId-1024971]##M usingFacesInWebapps.fm

[#50638881_pgfId-1024972]##- 12.1.3 Set default for
javax.faces.FACELETS_BUFFER_SIZE to be 1024.

[#50638881_pgfId-1024973]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-998 +
Additional clarification about binding attribute in VDLdocs

[#50638881_pgfId-1024974]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-915
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1015
Non-normative text about http methods and prefix mapping

[#50638881_pgfId-1024975]##http://java.net/jira/browse/JAVASERVERFACES-2740 +
In link:JSF.htm#50638851_65495[See Component Bindings], clarify a corner
case regarding bean scope and component binding.

[#50638881_pgfId-1024979]##Resources

====== [#50638881_pgfId-1024980]##Larger Changes

[#50638881_pgfId-1024981]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-809 +
This commit introduces a cleaner contract for allowing views to be
loaded from the Filesystem (including inside of JAR files). All VDL
resources must be loaded using ResourceHandler.createViewResource().

====== [#50638881_pgfId-1024982]##Smaller Changes

[#50638881_pgfId-1024983]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-996

[#50638881_pgfId-1024986]##Enable configuring the web app resources
directory. See link:JSF.htm#50638850_59981[See Application Configuration
Parameters].

[#50638881_pgfId-1024988]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-719 +
Method to map a viewId to a resourcePath

{empty}[#50638881_pgfId-1024989]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1130-SerializeServerState +
Modify link:JSF.htm#50638861_53238[See State Saving Alternatives and
Implications] to clarify there is no requirement to serialize server
state by default when state saving method is server. Introduce a context
parameter to this effect in link:JSF.htm#50638850_59981[See Application
Configuration Parameters]

[#50638881_pgfId-1024996]##Expression Language

[#50638881_pgfId-1024997]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1092

[#50638881_pgfId-1024998]##Remove text from
MethodExpressionValueChangeListener and MethodExpressionActionListener
regarding wrapping any exception thrown by the invoked method being
wrapped in an AbortProcessingException. Such a requirement is incorrect
and should not have been introduced.

[#50638881_pgfId-1025002]##In section link:JSF.htm#50638857_91184[See
ExceptionHandler], add _AbortProcessingException_ , to the list of
exceptions that do not get to the _ExceptionHandler_ .

[#50638881_pgfId-1025003]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1043 +
When publishing a ComponentSystemEvent, ensure the EL current component
is pushed correctly

[#50638881_pgfId-1025004]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1164 +
If running in a container that supports EL 3.0, add the necessary
ELResolvers. See link:JSF.htm#50638862_38613[See Stream, StaticField,
Map, List, Array, and Bean ELResolvers].

[#50638881_pgfId-1025008]##Configuration and Bootstrapping

[#50638881_pgfId-1025009]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-533-ProgrammaticFacesConfig

[#50638881_pgfId-1025013]##Modify link:JSF.htm#50638850_57048[See
Application Startup Behavior] to account for requirement to call new API
when starting up.

[#50638881_pgfId-1025014]##Miscellaneous

[#50638881_pgfId-1025015]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1169

[#50638881_pgfId-1025016]##New XML Namespace for XSD files introduced in
JSF 2.2, and also for facelet tag libraries.

[#50638881_pgfId-1025017]##The following XSD files are new for JSF 2.2,
and each will be in the XML namespace
_http://xmlns.jcp.org/xml/ns/javaee_ .

[#50638881_pgfId-1025018]## _web-facelettaglibrary_2_2.xsd_

[#50638881_pgfId-1025019]## _web-facesconfig_2_2.xsd_

[#50638881_pgfId-1025020]## _web-partialresponse_2_2.xsd_

[#50638881_pgfId-1025085]##Facelet Tag Libraries will now respond to the
following URIs

[width="100%",cols="34%,33%,33%",options="header",]
|===
|[#50638881_pgfId-1025023]##Library |[#50638881_pgfId-1025025]##Old URI
|[#50638881_pgfId-1025027]##New URI
|[#50638881_pgfId-1025029]##Composite Components
|[#50638881_pgfId-1025031]##http://java.sun.com/jsf/composite a|
[#50638881_pgfId-1025033]##http://xmlns.jcp.org/jsf/composite

[#50638881_pgfId-1025034]## 

|[#50638881_pgfId-1025036]##Faces Core
|[#50638881_pgfId-1025038]##http://java.sun.com/jsf/core a|
[#50638881_pgfId-1025040]##http://xmlns.jcp.org/jsf/core

[#50638881_pgfId-1025041]## 

|[#50638881_pgfId-1025043]##HTML_BASIC
|[#50638881_pgfId-1025045]##http://java.sun.com/jsf/html a|
[#50638881_pgfId-1025047]##http://xmlns.jcp.org/jsf/html

[#50638881_pgfId-1025048]## 

|[#50638881_pgfId-1025050]##JSTL Core a|
[#50638881_pgfId-1025052]##http://java.sun.com/jsp/jstl/core

[#50638881_pgfId-1025053]## 

a|
[#50638881_pgfId-1025055]##http://xmlns.jcp.org/jsp/jstl/core

[#50638881_pgfId-1025056]## 

|[#50638881_pgfId-1025058]##JSTL Functions
|[#50638881_pgfId-1025060]##http://java.sun.com/jsp/jstl/functions a|
[#50638881_pgfId-1025062]##http://xmlns.jcp.org/jsp/jstl/functions

[#50638881_pgfId-1025063]## 

|[#50638881_pgfId-1025065]##Facelets Templating
|[#50638881_pgfId-1025067]##http://java.sun.com/jsf/facelets a|
[#50638881_pgfId-1025069]##http://xmlns.jcp.org/jsf/facelets

[#50638881_pgfId-1025070]## 

|[#50638881_pgfId-1025072]##Pass Through Attributes
|[#50638881_pgfId-1025074]##http://java.sun.com/jsf/passthrough a|
[#50638881_pgfId-1025076]##http://xmlns.jcp.org/jsf/passthrough

[#50638881_pgfId-1025077]## 

|[#50638881_pgfId-1025079]##Pass Through Elements
|[#50638881_pgfId-1025081]##http://java.sun.com/jsf a|
[#50638881_pgfId-1025083]##http://xmlns.jcp.org/jsf

[#50638881_pgfId-1025084]## 

|===

[#50638881_pgfId-1025086]##Developers are requested to use the values
from the New URI column, though both columns will work.

[#50638881_pgfId-1025087]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-997

[#50638881_pgfId-1025088]##M
jsf-api/src/main/java/javax/faces/event/ComponentSystemEvent.java

[#50638881_pgfId-1025089]##Override isAppropriateListener so that it
first asks the listener, "are you a ComponentSystemEventListener", then,
if not, asks super.isAppropriateListener()

[#50638881_pgfId-1025090]##M
jsf-api/src/main/java/javax/faces/event/SystemEvent.java

[#50638881_pgfId-1025091]##in isAppropriateListener(), document the
default implementation.

[#50638881_pgfId-1025092]##M
jsf-api/src/main/java/javax/faces/component/UIComponent.java

[#50638881_pgfId-1025093]##Make inner class
ComponentSystemEventListenerAdapter implement
ComponentSystemEventListener.

[#50638881_pgfId-1025094]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-917

[#50638881_pgfId-1025095]##javax.faces.application.ResourceWrapper:

[#50638881_pgfId-1025096]## - getContentType()

[#50638881_pgfId-1025097]## - getLibraryName()

[#50638881_pgfId-1025098]## - getResourceName()

[#50638881_pgfId-1025099]## - setContentType(String)

[#50638881_pgfId-1025100]## - setLibraryName(String)

[#50638881_pgfId-1025101]## - setResourceName(String)

[#50638881_pgfId-1025102]## javax.faces.context.ExternalContextWrapper:

[#50638881_pgfId-1025103]## - getSessionMaxInactiveInterval()

[#50638881_pgfId-1025104]## - isSecure()

[#50638881_pgfId-1025105]## - setSessionMaxInactiveInterval()

[#50638881_pgfId-1025106]##
javax.faces.context.PartialViewContextWrapper

[#50638881_pgfId-1025107]## - setPartialRequest(boolean)

[#50638881_pgfId-1025108]##12.1.3 add this text to the
javax.faces.STATE_SAVING_METHOD spec. When examining the value, the
runtime must ignore the case.

[#50638881_pgfId-1025109]##Add
ExternalContext.getApplicationContextPath()
http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1012

[#50638881_pgfId-1025110]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-787 +
restore ViewScope before templates are processed with buildView()

[#50638881_pgfId-1025111]##7.6.2.6 typo in spec for renderView(). Should
be

[#50638881_pgfId-1025112]##Return immediately if calling isRendered() on
the argument UIViewRoot returns false.

[#50638881_pgfId-1025113]##Per Matt Benson, remove duplicate
descriptions of the cc and component implicit object from the getValue()
specification for the composite component ELResolver in section 5.6.2.1.

[#50638881_pgfId-1025114]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-869

[#50638881_pgfId-1025115]##Specify Cross Site Request Forgery
protection.

[#50638881_pgfId-1025119]##Add text in link:JSF.htm#50638877_45193[See
Restore View] to describe how non-postback requests are inspected for
protection, if necessary.

[#50638881_pgfId-1025123]##Remove text for writeState() in
link:JSF.htm#50638855_88992[See ResponseStateManager], point to the
JavaDocs.

[#50638881_pgfId-1025127]##Add View Protection methods to
link:JSF.htm#50638861_26354[See Overview] for ViewHandler.

[#50638881_pgfId-1025131]##Introduce subsections to
link:JSF.htm#50638861_36790[See Default ViewHandler Implementation] that
group the methods by their purpose. Add a new section
link:JSF.htm#50638861_41052[See ViewHandler Methods that relate to View
Protection], which points to the javadocs. In
link:JSF.htm#50638861_46125[See ViewHandler Methods Relating to
Navigation], in the spec for _getActionUrl()_ , specify how view
protection is affected.

{empty}[#50638881_pgfId-1025141]##Remove tables in section
link:JSF.htm#50638850_27931[See Requirements for scanning of classes for
annotations]

[#50638881_pgfId-1025142]##The Javadoc tool lists annotations in a
separate section, making the tables that list JSF related annotations
redundant.

[#50638881_pgfId-1025143]##.

[#50638881_pgfId-1025144]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1082-DoctypeElement

[#50638881_pgfId-1025148]##Add new section
link:JSF.htm#50638887_95527[See DOCTYPE and XML Declaration].

[#50638881_pgfId-1025149]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1141-SlashInResourceNames

[#50638881_pgfId-1025153]##In link:JSF.htm#50638877_95265[See Resource
Identifiers], declare that resourceName and resourceVersion, in addition
to the already listed other segments, are subject to the same
constraints.

[#50638881_pgfId-1025154]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1129-ResetValues

[#50638881_pgfId-1025158]##In link:JSF.htm#50638877_65450[See Render
Response Partial Processing], require calling _UIViewRoot.resetValues()_
if necessary.

==== [#50638881_pgfId-1025159]##Backward Compatibility with Previous Versions

[#50638881_pgfId-1025160]##Faces 2.2 is backwards compatible with Faces
2.1 and 2.0. This means that a web-application that was developed to run
with Faces 2.1 or 2.0 won’t require any modification when run with Faces
2.2 except in the cases described in the following section.

==== [#50638881_pgfId-1025161]##Breakages in Backward Compatibility

[#50638881_pgfId-1025162]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1092

[#50638881_pgfId-1025163]##Due to an error in previous versions of the
specification, exceptions were silently being swallowed that now will
bubble up to the exception handler. Code that was relying on this
incorrect behavior may need to be modified to account for fixing this
problem.

[#50638881_pgfId-1025164]##http://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-745

[#50638881_pgfId-1025165]##5.6.2.2 Table 5-11. Make the following
changes to the spec for Composite Component Attribute ELResoler

[#50638881_pgfId-1025166]##Modify getType() according to new
specification language.

[#50638881_pgfId-1025167]##Require the implementation of containsKey()
on the Map.

[#50638881_pgfId-1025168]##containsKey(): If the attributes map contains
the key, return true. Otherwise, if a default value has been declared
for the attribute, return true. Otherwise, return false.

{empty}[#50638881_pgfId-1025172]##link:JSF.htm#50638851_97048[See
Composite Component Metadata]

[#50638881_pgfId-1025173]##New text dealing with <cc:attribute>

[#50638881_pgfId-1025174]##Any additional attributes on
_<composite:attribute/ >_ are exposed as attributes accessible from the
_getValue()_ and _attributeNames()_ methods on _PropertyDescriptor_ .
The return type from getValue() must be a _ValueExpression_ with the
exception of the _getValue(“type”)_ . The return type from
_getValue(“type”)_ must be _Class_ . If the value specified for the
_type_ attribute of _<cc:attribute/>_ cannot be converted to an actual
_Class_ , a _TagAttributeException_ must be thrown, including the _Tag_
and _TagAttribute_ instances in the constructor.

[#50638881_pgfId-1025175]##Yes, this is a backwards incompatible change,
but because the usecase is so specific, and the performance benefit so
substantial, it was judged to be worth the cost.

[#50638881_pgfId-1024797]## 

=== [#50638881_pgfId-1024788]##

image:JSF-63.gif[image]

Changes between 2.0 Rev a and 2.1

==== [#50638881_pgfId-1024792]##link:JSF.htm#50638887_98019[See Facelet Tag Library mechanism]

[#50638881_pgfId-1024403]##Document that the unprefixed namespace must
pass through.

==== [#50638881_pgfId-1024404]##New feature: <facelets-processing>

{empty}[#50638881_pgfId-1024408]##link:JSF.htm#50638878_10363[See
Required Handling of *-extension elements in the application
configuration resources files]

==== [#50638881_pgfId-1024409]##Update schema for 2.1

[#50638881_pgfId-1024412]##The only new element is
<facelet-cache-factory>. See the full schema in the Javadoc section of
the documents.

==== [#50638881_pgfId-1024414]##Change Restore View Phase

[#50638881_pgfId-1024418]##Change link:JSF.htm#50638877_45193[See
Restore View] to require a call to _ViewHandler.deriveLogicalViewId()_
before trying to find the _ViewDeclarationLanguage_ .

==== [#50638881_pgfId-1024422]##link:JSF.htm#50638861_36790[See Default ViewHandler Implementation]

[#50638881_pgfId-1024423]##Document _deriveLogicalViewId()._

=== [#50638881_pgfId-1024396]##

image:JSF-63.gif[image]

Changes between 2.0 Final and 2.0 Rev a

==== [#50638881_pgfId-1021698]##Global changes

[#50638881_pgfId-1021699]##ExceptionQueuedEvent

[#50638881_pgfId-1021700]##The specification incorrectly refers to the
ExceptionQueuedEvent as the ExceptionEvent. All instances should be
replaced, as there is no such class ExceptionEvent in JSF.

[#50638881_pgfId-1021701]##Usage of the term "page" in the JSF 2.0 spec

[#50638881_pgfId-1021702]##This might be kind of nit-picky, but there
are several occurrences of the term "Facelet page" in the JSF 2.0 spec,
but I'd like to set forth the argument that the term "Facelet document"
or "Facelet view" would be more appropriate, depending on context.
Similarly, the spec uses the term "Composite component markup page"
which isn't always appropriate either. Better to call it a "Composite
component markup document" or something like that.

[#50638881_pgfId-1021703]##All Facelet XHTML files are documents, but
not all Facelet XHTML files are pages. There is a built-in bias to the
word "page" that assumes the markup output will be rendered as a "web
page" which is not always the case. In the case of portlets, the
rendered output is a fragment of markup (normally a <div>...</div>). In
the case of a custom renderkit, the rendered output might be some mobile
device. In the case of ICEfaces, the rendered markup is a server-side
DOM tree. In the case of a composite component, a Facelet XHTML file is
not a page, but a "Composite Component markup document" (or definition)
file.

[#50638881_pgfId-1021704]##For example.. Instead of a "Facelet Page", I
think the following should be called a "Facelet Document" or a "Facelet
View" (since the f:view tag is optional, but implied)

[#50638881_pgfId-1021705]##<html xmlns="http://www.w3.org/1999/xhtml"

[#50638881_pgfId-1021706]## xmlns:h="http://java.sun.com/jsf/html"

[#50638881_pgfId-1021707]## xmlns:f="http://java.sun.com/jsf/core"

[#50638881_pgfId-1021708]##
xmlns:ez="http://java.sun.com/jsf/composite/ezcomp">

[#50638881_pgfId-1021709]## <h:head>

[#50638881_pgfId-1021710]## <title>A simple example of EZComp</title>

[#50638881_pgfId-1021711]## </h:head>

[#50638881_pgfId-1021712]## <h:body>

[#50638881_pgfId-1021713]## <h:form>

[#50638881_pgfId-1021714]## </h:form>

[#50638881_pgfId-1021715]## </h:body>

[#50638881_pgfId-1021716]##</html>

[#50638881_pgfId-1021717]##But in the case of Portlets, the <html> ,
<head>, and <body> tags are forbidden. The equivalent "Facelet Document"
or "Facelet View" for portlets would look like this:

[#50638881_pgfId-1021718]##<f:view xmlns="http://www.w3.org/1999/xhtml"

[#50638881_pgfId-1021719]## xmlns:h="http://java.sun.com/jsf/html"

[#50638881_pgfId-1021720]## xmlns:f="http://java.sun.com/jsf/core"

[#50638881_pgfId-1021721]##
xmlns:ez="http://java.sun.com/jsf/composite/ezcomp">

[#50638881_pgfId-1021722]## ...

[#50638881_pgfId-1021723]##</f:view>

==== [#50638881_pgfId-1021724]##Front Matter

[#50638881_pgfId-1021725]##Change Sun logo to Oracle Logo. Sun postal
address to Oracle postal address, and Sun phone number to Oracle phone
number

[#50638881_pgfId-1021726]##Update spec license.

==== [#50638881_pgfId-1021727]##Chapter 2

{empty}[#50638881_pgfId-1021731]##link:JSF.htm#50638877_45193[See
Restore View]

[#50638881_pgfId-1021732]##Per Andy Schwartz recommendation, loosen the
spec requirements for the delivery of the PostRestoreStateEvent to be
"somewhere during RestoreView".

{empty}[#50638881_pgfId-1021736]##link:JSF.htm#50638877_24181[See
Localized Application Messages]

[#50638881_pgfId-1021737]##Suggestion: Change to

[#50638881_pgfId-1021738]##Validation Error: Length is less than
allowable minimum of 5.

{empty}[#50638881_pgfId-1021742]##link:JSF.htm#50638877_99953[See JSR
303 Bean Validation]

[#50638881_pgfId-1021743]##Change "leas" to "least"

[#50638881_pgfId-1021747]##link:JSF.htm#50638877_99953[See JSR 303 Bean
Validation]needs to reference "Bean Validation Integration" section

[#50638881_pgfId-1021748]##While reading section 2.5.7, one becomes very
disappointed with the limited about of information that it provides. But
section 3.5.6 provides more information, so the recommendation is that
these sections reference eachother, or perhaps are combined in some way
if that makes sense.

{empty}[#50638881_pgfId-1021752]##link:JSF.htm#50638877_95265[See
Resource Identifiers]

[#50638881_pgfId-1021753]##Tighten spec for the localePrefix,
libraryName, and resourceVersion segments of the resource identifier.

==== [#50638881_pgfId-1021754]##Chapter 3

{empty}[#50638881_pgfId-1021758]##Clarify meaning of "javax.faces.bean"
in link:JSF.htm#50638851_14108[See Bean Validator Activation]

[#50638881_pgfId-1021759]##Section 3.5.6.1 says:

[#50638881_pgfId-1021760]##"If Bean Validation is present in the runtime
environment, the system must ensure that the javax.faces.Bean standard
validator is added with a call to Application.addDefaultValidatorId()"

[#50638881_pgfId-1021761]##But the reader of the Spec has no idea what
the "javax.faces.Bean" standard validator is, within the context of this
paragraph. Recommend adding some verbiage that says that
javax.faces.Bean is the validatorId of the standard JSR 303 validator of
the JSF 2.0 API, which equates to the
javax.faces.validator.BeanValidator class as mentioned in Section
10.4.1.4.

[#50638881_pgfId-1021765]##Need to be consistent between
link:JSF.htm#50638851_98213[See Declarative Listener Registration]of the
JSF 2.0 Spec and the VDLDoc for f:event

[#50638881_pgfId-1021766]##Section 3.4.3.4 of the JSF 2.0 Spec reads:

[#50638881_pgfId-1021767]##The method signature for the MethodExpression
pointed to by the listener attribute must match the signature of

[#50638881_pgfId-1021768]##javax.faces.event.ComponentSystemEventListener.processEvent().

[#50638881_pgfId-1021769]##And the VDLDocs for f:event read:

[#50638881_pgfId-1021770]##(signature must match public void
listener(javax.faces.event.ComponentSystemEvent event) throws
javax.faces.event.AbortProcessingException)

[#50638881_pgfId-1021771]##Both of these are true, and indeed saying the
same thing. But I think it would be helpful to say BOTH things, in BOTH
documents.

[#50638881_pgfId-1021775]##Typo in link:JSF.htm#50638851_98213[See
Declarative Listener Registration] of the JSF 2.0 Spec regarding
"beforeRender"

[#50638881_pgfId-1021776]##Section 3.4.3.4 of the JSF 2.0 Spec has this
example:

[#50638881_pgfId-1021777]##<h:inputText value="#\{myBean.text}">

[#50638881_pgfId-1021778]## <f:event type="beforeRender"
listener="#\{myBean.beforeTextRender}" />

[#50638881_pgfId-1021779]##</h:inputText>

[#50638881_pgfId-1021780]##But "beforeRender" is a typo. The correct
value is "preRenderComponent" as stated in the f:event VDLDocs.

{empty}[#50638881_pgfId-1021786]##link:JSF.htm#50638851_63282[See
Validation Registration], link:JSF.htm#50638851_59315[See What does it
mean to be a JSF User Interface component?]

[#50638881_pgfId-1021788]##Remove references to UInput.encodeEnd(). Not
for a very long time has this method been used to instigate validation.

{empty}[#50638881_pgfId-1021792]##link:JSF.htm#50638851_97048[See
Composite Component Metadata]

[#50638881_pgfId-1021793]##Section 3.6.2.1 of the Spec indicates that
the "hidden" property of the javax.bean.FeatureDescriptor is to appear
as an attribute for tags like composite:actionSource,
composite:attribute, composite:facet, and composite:interface but the
VDLDocs do not declare that the "hidden" property is available.

==== [#50638881_pgfId-1021794]##Chapter 4

{empty}[#50638881_pgfId-1021798]##link:JSF.htm#50638853_4.1.17.4%20Events[See
Events]

[#50638881_pgfId-1021799]##Remove text pertaining to
PostRestoreStateEvent, rely instead on text in setion 2.2.1.

[#50638881_pgfId-1021800]##Chapter 7

{empty}[#50638881_pgfId-1021804]##link:JSF.htm#50638861_65053[See
Overview]

[#50638881_pgfId-1021805]##getNavigationCase should return
NavigationCase and not void.

{empty}[#50638881_pgfId-1021809]##link:JSF.htm#50638861_53439[See
Default NavigationHandler Algorithm]

[#50638881_pgfId-1021810]##Add faces-include-view-params

{empty}[#50638881_pgfId-1021814]##link:JSF.htm#50638861_36790[See
Default ViewHandler Implementation]

[#50638881_pgfId-1021815]##Fix typo the specified createView() should be
called in renderView() and restoreView().

==== [#50638881_pgfId-1021816]##Chapter 9

[#50638881_pgfId-1021820]##link:JSF.htm#50638860_67059[See
<f:actionListener>] of Spec PDF -- Missing "for" attribute of
f:actionListener in Spec PDF

[#50638881_pgfId-1021821]##The example for f:selectItems includes a
noSelectionValue attribute, but that attribute isn't documented. VDLDocs
for f:selectItems does not document the noSelectionValue attribute.

[#50638881_pgfId-1021822]##Actually, it does document it, but it only
looks like it doesn't. It seems as though the itemLabelEscaped attribute
is documented twice, but really the second occurance is the
noSelectionValue.

{empty}[#50638881_pgfId-1021829]##link:JSF.htm#50638860_67059[See
<f:actionListener>] and link:JSF.htm#50638860_63400[See
<f:valueChangeListener>]

[#50638881_pgfId-1021830]##Add this non-normative text.

[#50638881_pgfId-1021831]##Note that if the binding attribute is used,
the scope of the ValueExpression must be chosen carefully so as not to
introduce undesireable results. In general, when using the binding
attribute, do not point to beans in request or narrower scope.

==== [#50638881_pgfId-1021832]##Chapter 10

[#50638881_pgfId-1021833]##Need to change "confirm with" to "conform
with".

[#50638881_pgfId-1021834]##Confusing verbiage in table 10-1 of JSF 2.0
spec regarding the word "template"

[#50638881_pgfId-1021835]##In table 10-1, it correctly says that "page
templating" is not a feature of JSP.

[#50638881_pgfId-1021836]##But later on in the table, it says
"Expressions in template text cause unexpected behavior when used in
JSP."

[#50638881_pgfId-1021837]##Somehow there needs to be an explanation of
the distinction of "page templating" and "template text" here. Right now
it kind of reads as a contradiction.

{empty}[#50638881_pgfId-1021841]##link:JSF.htm#50638887_40873[See
General Requirements]

[#50638881_pgfId-1021842]##Add an assertion to section 10.3.1 stating
that EL expressions that appear in the facelet XHTML page must appear in
the rendered view as if they were the right hand side of the value
attribute of an at the same point in the page as the EL expression

{empty}[#50638881_pgfId-1021846]##link:JSF.htm#50638887_98019[See
Facelet Tag Library mechanism]

[#50638881_pgfId-1021847]##Section 10.3.2. Correct xref to point to
section in appendix that includes the facelet taglib schema.

[#50638881_pgfId-1021848]##Correct xref to point to section in appendix
that includes the facelet taglib schema.

[#50638881_pgfId-1021849]##VDLDocs and PDL documentation

[#50638881_pgfId-1021858]##link:JSF.htm#50638887_Facelet%20Templating%20Tag%20Library[See
Facelet Templating Tag Library],
link:JSF.htm#50638887_Facelet%20Templating%20Tag%20Library[See Facelet
Templating Tag Library], and link:JSF.htm#50638887_84284[See JSTL Core
and Function Tag Libraries] refer the reader to the "VDLDocs" for
Facelet, CC, and JSTL tag libraries respectively.

[#50638881_pgfId-1021860]##However, when one checks out the Mojarra
2.0.0 Beta 2 page, it talks about the "PDL" tag library documentation.
Also, when one clicks on the "PDL Documentation for Facelets2", it uses
the term "PDL" in several places.

[#50638881_pgfId-1021861]##So it looks like the View Declaration
Language (VDL) terminology hasn't made its way into the tag library docs
yet.

[#50638881_pgfId-1021865]##Possible error in section
link:JSF.htm#50638887_%3Cf[See <f:ajax>] of the JSF 2.0 Spec regarding
f:ajax and h:panelGrid

[#50638881_pgfId-1021866]##Section 10.4.1.1, shows this example:

[#50638881_pgfId-1021867]##<f:ajax>

[#50638881_pgfId-1021868]## <h:panelGrid>

[#50638881_pgfId-1021869]## <h:inputText id=˝text1˝/>

[#50638881_pgfId-1021870]## <h:commandButton id=˝button1˝/>

[#50638881_pgfId-1021871]## </h:panelGrid>

[#50638881_pgfId-1021872]## </f:ajax>

[#50638881_pgfId-1021873]##And then has the following about the example:

[#50638881_pgfId-1021874]##<h:panelGrid> has no default event so in this
case a behavior would not be applied.

[#50638881_pgfId-1021875]##BUT the very next example is this:

[#50638881_pgfId-1021876]##<f:ajax event=˝click˝>

[#50638881_pgfId-1021877]## <h:panelGrid id=˝grid1˝>

[#50638881_pgfId-1021878]## <h:inputText id=˝text1˝/>

[#50638881_pgfId-1021879]## <h:commandButton id=˝button1˝>

[#50638881_pgfId-1021880]## <f:ajax event=˝mouseover˝/>

[#50638881_pgfId-1021881]## </h:commandButton>

[#50638881_pgfId-1021882]## </h:panelGrid>

[#50638881_pgfId-1021883]## </f:ajax>

[#50638881_pgfId-1021884]##And then has the following comment:

[#50638881_pgfId-1021885]##From this example, grid1˝ and text1˝ would
have ajax behavior applied for an onclick˝ event

[#50638881_pgfId-1021886]##So... which is it? Does h:panelGrid get ajax
behavior or not? Can an HTML table have an "onclick" JavaScript event?

[#50638881_pgfId-1021890]##Redundant mentioning of Facelets in
link:JSF.htm#50638887_73374[See <f:validateBean>] of the JSF 2.0 Spec

[#50638881_pgfId-1021891]##Since the parent section (10.4.1) indicates
that sub-sections are Facelets-only in nature, then it is not necessary
to have (Facelets only) in the "Constraints" paragraph of Section
10.4.1.4 of the spec.

[#50638881_pgfId-1021892]##Availability of f:validateBean and
f:validateRequired in JSP

[#50638881_pgfId-1021896]##link:JSF.htm#50638887_38375[See Standard
Facelet Tag Libraries] outlines the f: namespaced tags that are only
applicable to Facelets (and not JSP). In that section, f:validateBean,
and f:validateRequired are listed. However, they are both listed as
working with JSP as well (kind of like f:validateRegex), as can be seen
from the JSP TLDDocs.

[#50638881_pgfId-1021897]##According to Dan Allen: "those tags only work
partially in JSP. Yes, they work as single field validators. But the
branch validator capability does not work (wrapping the validator tag
around a branch). The later feature is Facelets only. So the validators
do have their feet in both ponds, but only Facelets has full support. I
suppose we could mention this tidbit in the JSP section."

[#50638881_pgfId-1021898]##Dan is correct that it should be mentoned in
the JSP section, but also, that f:validateBean and f:validateRequired
belong in both Section 10.4 and 9.4, with the limits of their
functionality described in each section.

==== [#50638881_pgfId-1021899]##Chapter 13

[#50638881_pgfId-1021903]##Redundancy in
link:JSF.htm#50638885_Partial%20View%20Execute[See Partial View
Processing] of the JSF 2.0 Spec

[#50638881_pgfId-1021904]##Section 13.4.2 of the JSF 2.0 spec has this
sentence:

[#50638881_pgfId-1021905]##The request contains special parameters that
indicate the request is a partial execute request or a partial execute
request that was triggered using Ajax

[#50638881_pgfId-1021906]##This needs clarification -- does this mean to
say:

[#50638881_pgfId-1021907]##partial execute request (not triggered by
Ajax) or a partial execute request (that was triggered using Ajax)

[#50638881_pgfId-1021908]##"Execute portions" of the JSF request
processing lifecycle in the JSF 2.0 Spec

[#50638881_pgfId-1021909]##Section 13.4.2 reads:

[#50638881_pgfId-1021910]##Although the diagram in Section 13.4 Partial
View Traversal˝ depicts the execute˝ portion as encompassing everything
except the Render Response Phase˝, it really is the Apply Request Values
Phase˝, Update Model Values Phase˝ and Process Validations Phase˝.

[#50638881_pgfId-1021911]##Why does the diagram include the
INVOKE_APPLICATION phase if it's not "really" considered to be part of
the execute portions?

==== [#50638881_pgfId-1021912]##Chapter 14

[#50638881_pgfId-1021916]##link:JSF.htm#50638886_Initiating%20an%20Ajax%20Request[See
Initiating an Ajax Request] Typo in table 14.2.2 of the JSF 2.0 Spec

[#50638881_pgfId-1021917]##Table 14.2.2 reads:

[#50638881_pgfId-1021918]##"execute" phase

[#50638881_pgfId-1021919]##But in order to be consistent with the rest
of the spec, it should read:

[#50638881_pgfId-1021920]##"execute" portion

[#50638881_pgfId-1021921]##Also, the same goes for "render" in that the
word "portion" should be used instead of "phase".

[#50638881_pgfId-1021925]##link:JSF.htm#50638886_Request/Response%20Event%20Handling[See
Request/Response Event Handling]Table 14.4.1

[#50638881_pgfId-1021926]##Change responseTxt to responseText.

[#50638881_pgfId-1021927]##Table 14.3: Reorder rows

==== [#50638881_pgfId-1021928]##Appendix A Metadata

[#50638881_pgfId-1021929]##Update schema to remove partial-traversal, as
well as fixing 768.

{empty}[#50638881_pgfId-1021932]##link:JSF.htm#50638878_84716[See
Deprecated DTD for Facelet Taglibraries Used by Versions of Facelets
Prior to JSF 2.0]

[#50638881_pgfId-1021934]##To ease migration for Facelet taglibraries
declared using pre-JSF 2.0 versions of Facelets, implementations must
support loading facelet taglibrary files that conform to the pre-JSF 2.0
Facelets DTD. Per DTD conventions, Facelet taglibrary files declare
conformance to this DTD by including text similar to the following in at
the top of their declaring file.

[#50638881_pgfId-1021935]##<!DOCTYPE facelet-taglib PUBLIC

[#50638881_pgfId-1021936]##"-//Sun Microsystems, Inc.//DTD Facelet
Taglib 1.0//EN"

[#50638881_pgfId-1021937]##"http://java.sun.com/dtd/facelet-taglib_1_0.dtd">

[#50638881_pgfId-1021938]##Use of this DTD is officially deprecated.
This DTD is included for reference in Section 1.2.1 "Deprecated DTD for
Facelet Taglibraries Used by Versions of Facelets Prior to JSF 2.0". It
is expected that proper JSF 2.0 Facelet Taglibraries will declare
conformance to the following schema, rather than the deprecated DTD.

==== [#50638881_pgfId-1021939]##VDLDoc changes

[#50638881_pgfId-1021940]##Typo in f:selectItems VDLDocs

[#50638881_pgfId-1021941]##Change "mest" to "must"

[#50638881_pgfId-1021942]##Need clarification on execute attribute of
f:ajax

[#50638881_pgfId-1021943]##The VDLDocs for f:ajax say "Identifiers of
components" but, for some reason, it wasn't obvious to me that this term
referred to the "id" attributes of components. The recommendation isthat
this be clarified to say "list of <b>id</b> attribute values" instead.
Also, the value of an id attribute like "mycomponent" or something
should be added to an example that includes a keyword... something like
this: "@this componentone componenttwo"

[#50638881_pgfId-1021944]##Spelling error in VDLDocs for f:ajax

[#50638881_pgfId-1021945]##This one from Lincoln:

[#50638881_pgfId-1021946]##See the "onerror" attribute

[#50638881_pgfId-1021947]##There is an extra 'e' -> "oneerror"

[#50638881_pgfId-1021948]##Need clarification on required attribute in
VDLDocs for tags that got a new "for" attribute in JSF 2.0

[#50638881_pgfId-1021949]##The VDLDocs correctly have green for the new
"for" attribute, but the "required" column says false, when that's not
always the case.

[#50638881_pgfId-1021950]##For example, with f:actionListener the
VDLDocs say that that it is not required. However, when the tag is used
as a child of a Composite Component, then the for attribute is indeed
required. This would be true of all tags like that, such as
f:convertDateTime, f:convertNumber, etc.

[#50638881_pgfId-1021951]##Uppercase typo in VDLDocs for f:event

[#50638881_pgfId-1021952]##Change uppercase "P" to lowercase for:
PostAddToView for the f:event VDLDocs

[#50638881_pgfId-1021953]##Need to change "JSP" to "Facelets" in "Body
Content" of VDLDocs

[#50638881_pgfId-1021954]##Search for "JSP" on the f:event VDLDocs [1].
My suspicion is that this is a problem across the board.

[#50638881_pgfId-1021955]##Need clarification in VDLDocs for f:metadata

[#50638881_pgfId-1021956]##In the VDLDocs for f:metadata, recommend
changing:

[#50638881_pgfId-1021957]##"This tag must reside within the top level
XHTML file for the given viewId, not in a template"

[#50638881_pgfId-1021958]##to this:

[#50638881_pgfId-1021959]##"This tag must reside within the top level
Facelet view, or in a template-client, but not in a template"

[#50638881_pgfId-1021960]##Also, it needs to be clarified that the
page01.xhtml example is a template-client. So recommend changing this:

[#50638881_pgfId-1021961]##"viewId XHTML page, page01.xhtml"

[#50638881_pgfId-1021962]##to this:

[#50638881_pgfId-1021963]##"template-client XHTML page, page01.xhtml"

[#50638881_pgfId-1021964]##Missing description in VDLDocs for name
attribute of f:viewParam

[#50638881_pgfId-1021965]##The VDLDocs for f:viewParam are missing
documentation of the "name" attribute, which is pretty important since
it is required.

[#50638881_pgfId-1021966]##VLDDocs on "for" attribute of f:viewParam
claim it can be used in a CC

[#50638881_pgfId-1021967]##The VDLDocs for f:viewParam claim that the
"for" attribute is supported. I just checked Mojarra's jsf-api and
UIViewParameter.java does not support the "for" attribute, since it does
not have a getter/setter for "for" like HtmlOutputLabel does. There are
restrictions on f:viewParam such that it may only be used inside of
f:metadata, and f:metadata may only be used inside of f:view. So that
disqualifies the f:viewParam tag from being able to be used inside of a
Composite Component. Therefore I recommend that the documentation of the
"for" attribute be totally removed.

[#50638881_pgfId-1021968]##Miscellaneous VDLDoc items

[#50638881_pgfId-1021969]##VDLDocs for "execute" attribute of f:ajax say
(must evaluate to java.lang.Object) but then say "Evaluates to
Collection"

[#50638881_pgfId-1021970]##VDLDocs f:selectItem lists the new JSF 2.0
"noSelectionOption" but is not colored green to indicate "new in JSF
2.0" and the link for f:selectItem in the navigation frame needs to be
orange

[#50638881_pgfId-1021971]##VDLDocs for f:validateBean should have all of
its attributes in green to indicate "new in JSF 2.0" since it is a new
tag.

[#50638881_pgfId-1021972]##VDLDocs for f:validateRegex has a typo in the
description which reads "RegexpValidator" rather than "RegexValidator"

[#50638881_pgfId-1021973]##In spec, the "Changes between 1.2 and EDR2"
section refers the reader to section 3.5.2 for the addition of
"javax.faces.RegularExpressionValidator" but actually it should be
section 3.5.5

[#50638881_pgfId-1021974]##VDLDocs for h:button say that the outcome
attribute is not required, but really it should be required otherwise
there is no purpose of f:button -- you would end up navigating back to
the current view. The whole point of f:button is to perform navigation
to a different view that potentially contains view parameters. Why have
a bookmarkable URL back to itself?

[#50638881_pgfId-1021975]##VDLDocs for h:button don't mention a disabled
attribute, but the h:link one does have the disabled attribute. My guess
would be that both should have this attribute?

[#50638881_pgfId-1021976]##VDLDocs for h:outputScript and
h:outputStylesheet should indicate that even though the UIOutput class
implements the ValueHolder interface, the coverter and value attributes
are basically ignored by the renderers, since the value attribute has no
meaning. This is basically a design flaw -- a new class named
UIOutputResource should have been created instead of UIOutput being
reused.

{empty}[#50638881_pgfId-1021977]##VDLDocs for h:outputScript and
h:outputStylesheet should indicate that the "name" attribute is
required, since section 2.6.1.3 implies that this is the case with the
following resource pattern:
[localePrefix/][libraryName/][libraryVersion/]resourceName[/resourceVersion]

[#50638881_pgfId-1021978]##VDLDocs for h:outputScript needs to have all
the possible values for the target attribute documented. I think the
only valid values are "head", "body", and "form"

[#50638881_pgfId-1021979]##VDLDocs for h:graphicImage has a dead
hyperlink to "Common Algorithm for Obtaining A Resource to Render

[#50638881_pgfId-1021980]##VDLDocs for h:selectManyCheckbox indicate
orange for the collectionType and hideNoSelectionOption attributes but
they should be green to indicate "new in JSF 2.0"

[#50638881_pgfId-1021981]##VDLDocs for h:selectManyCheckbox says that
the return type must evaluate to a String, but that's not entirely true.
It can also evaluate to a concrete class that implements
java.util.Collection

[#50638881_pgfId-1021982]##VDLDocs for ui:param have two "name"
attributes specified. The second one should be the "value" attribute

[#50638881_pgfId-1021983]##Should TLDDocs now be VDLDocs?

[#50638881_pgfId-1021984]##The Spec introduces this term VDLDocs (which
as I said in the other email, was formerly PDLDocs), but it also refers
the reader to the TLDDocs. Should we just settle on VDLDocs as the
standard term throughout the Spec?

[#50638881_pgfId-1021985]##Typo in VDLDocs for f:event.

[#50638881_pgfId-1021986]##The VDLDocs for f:event specify a "name"
attribute, but the Description column of the page talks about a "type"
column (not "name"), which would be consistent with Section 3.4.3.4 of
the Spec which talks about a "type" column.

[#50638881_pgfId-1021987]##Jim Driscoll verified that there is a doc bug
in the VDLDocs for f:event and that the "name" attribute is actually
"type"

==== [#50638881_pgfId-1021988]##Accepted Changes from JCP Change Log for JSF 2.0 Rev a

[#50638881_pgfId-1021989]##The referenced spec public issue number can
be found in the issue tracker at +
https://javaserverfaces-spec-public.dev.java.net/servlets/ProjectIssues

[#50638881_pgfId-1023255]## 

[#50638881_pgfId-1024382]## 

[width="100%",cols="20%,20%,20%,20%,20%",]
|===
|[#50638881_pgfId-1023258]##ID |[#50638881_pgfId-1023260]##Category
|[#50638881_pgfId-1023262]##Description
|[#50638881_pgfId-1023264]##Fixed in Source Code Repository of
Specification |[#50638881_pgfId-1023266]##Issue

|[#50638881_pgfId-1023268]##C002 |[#50638881_pgfId-1023270]##Errata
|[#50638881_pgfId-1023272]##Section 5.6.2.2 is out of sync with the
current resolver implementation. |[#50638881_pgfId-1023274]##yes
|[#50638881_pgfId-1023277]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=848[Spec
Public:848]_

|[#50638881_pgfId-1023279]##C004 |[#50638881_pgfId-1023281]##Errata
|[#50638881_pgfId-1023283]##RenderKitDoc for _OutcomeTarget_ Renderers
are incorrect with respect to intended design. Refer to
_link:appendixB-changelog.htm#50638881_http[]ChangeC006_ in the
footnotes section below. |[#50638881_pgfId-1023288]##yes
|[#50638881_pgfId-1023291]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=823[Spec
Public:823]_

|[#50638881_pgfId-1023293]##C007 |[#50638881_pgfId-1023295]##Errata
|[#50638881_pgfId-1023297]##Section JSF.11.4.7 Ordering. After the
sentence "The <others /> element must be handled as follows" add a
bullet point: "The <others /> element represents a set of application
configuration resources. This set is described as the set of all
application configuration resources discovered in the application minus
the one currently being processed, minus the application configuration
resources mentioned by name in the <ordering /> section. If this set is
the empty set, at the time the application configuration resources are
being processed, the <others > element must be ignored."
|[#50638881_pgfId-1023299]##yes |[#50638881_pgfId-1023302]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=824[Spec
Public:824]_

|[#50638881_pgfId-1023304]##C008 |[#50638881_pgfId-1023306]##Errata
|[#50638881_pgfId-1023308]##taglib docs for composite:interface are
missing documentation for _componentType_ attribute.
|[#50638881_pgfId-1023310]##yes |[#50638881_pgfId-1023313]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=849[Spec
Public:849]_

|[#50638881_pgfId-1023315]##C011 |[#50638881_pgfId-1023317]##Errata
|[#50638881_pgfId-1023319]##Section JSF.3.6.2.1 Composite Component
Metadata Specification. Add _BehaviorHolderAttachedObjectTarget_ after
iii. _ActionSource2AttachedObjectTarget_ |[#50638881_pgfId-1023321]##yes
|[#50638881_pgfId-1023324]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=825[Spec
Public:825]_

|[#50638881_pgfId-1023326]##C012 |[#50638881_pgfId-1023328]##Errata
|[#50638881_pgfId-1023330]##Javadocs for
_ResourceHandler.createResource(String resourceId)_ need to me ammended
to state that if there is an error in argument resourceId, null must be
returned by this method. |[#50638881_pgfId-1023332]##yes
|[#50638881_pgfId-1023335]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=851[Spec
Public:851]_

|[#50638881_pgfId-1023337]##C013 |[#50638881_pgfId-1023339]##Errata
|[#50638881_pgfId-1023341]##PDL DOCS: f:event listener attribute
clarification:Change description to: "A method expression that JSF
invokes when an event occurs. That event is specified with the name
attribute." |[#50638881_pgfId-1023343]##yes |[#50638881_pgfId-1023346]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=586[Spec
Public:586]_

|[#50638881_pgfId-1023348]##C015 |[#50638881_pgfId-1023350]##Errata
|[#50638881_pgfId-1023352]## _UIViewRoot.setBeforePhaseListeners()_
removed the statement that all phases including _RestoreView_ will have
their _beforePhaseListeners_ called. Reverted to the way it was in 1.2
|[#50638881_pgfId-1023354]##yes |[#50638881_pgfId-1023357]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=826[Spec
Public:826]_

|[#50638881_pgfId-1023359]##C016 |[#50638881_pgfId-1023361]##Errata
|[#50638881_pgfId-1023363]##Section 2.6.2.1 Relocatable Resources: code
snippet: <f:view..../> should be <f:view...>
|[#50638881_pgfId-1023365]##yes |[#50638881_pgfId-1023368]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=565[Spec
Public:565]_

|[#50638881_pgfId-1023370]##C017 |[#50638881_pgfId-1023372]##Errata
|[#50638881_pgfId-1023374]## _UISelectItem_ doesn't mention
_itemEscaped_ . |[#50638881_pgfId-1023376]##yes
|[#50638881_pgfId-1023379]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=430[Spec
Public:430]_

|[#50638881_pgfId-1023381]##C018 |[#50638881_pgfId-1023383]##Errata
|[#50638881_pgfId-1023385]##
_ViewDeclarationLanguage.retargetAttachedObjects()_ misses talking about
Behaviors |[#50638881_pgfId-1023387]##yes |[#50638881_pgfId-1023390]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=827[Spec
Public:827]_

|[#50638881_pgfId-1023392]##C021 |[#50638881_pgfId-1023394]##Errata
|[#50638881_pgfId-1023396]##ui:insert missing existing "name" attribute,
implemented, tested, but not documented |[#50638881_pgfId-1023398]##yes
|[#50638881_pgfId-1023401]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=667[Spec
Public:667]_

|[#50638881_pgfId-1023403]##C022 |[#50638881_pgfId-1023405]##Errata
|[#50638881_pgfId-1023407]## _f:valueChangeListener_ missing "for"
attribute. Implemented, tested, but not documented
|[#50638881_pgfId-1023409]##yes |[#50638881_pgfId-1023412]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=828[Spec
Public:828]_

|[#50638881_pgfId-1023414]##C023 |[#50638881_pgfId-1023416]##Change
|[#50638881_pgfId-1023418]##in facelets VDLdoc, mark f:verbatim and
f:subview as deprecated |[#50638881_pgfId-1023420]##no
|[#50638881_pgfId-1023423]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=852[Spec
Public:852]_

|[#50638881_pgfId-1023425]##C024 |[#50638881_pgfId-1023427]##Errata
|[#50638881_pgfId-1023429]##Add an assertion to section 10.3.1 stating
that EL expressions that appear in the facelet XHTML page must appear in
the rendered view as if they were the right hand side of the value
attribute of an _<h:outputText>_ at the same point in the page as the EL
expression |[#50638881_pgfId-1023431]##yes |[#50638881_pgfId-1023434]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=829[Spec
Public:829]_

|[#50638881_pgfId-1023436]##C027 |[#50638881_pgfId-1023438]##Errata
|[#50638881_pgfId-1023440]##web-facelettaglibrary_2_0.xsd type incorrect
for composite-library-name. Should be ***javae:string***
|[#50638881_pgfId-1023442]##no |[#50638881_pgfId-1023445]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=854[Spec
Public:854]_

|[#50638881_pgfId-1023447]##C028 |[#50638881_pgfId-1023449]##Errata
|[#50638881_pgfId-1023451]## _ui:remove_ VDLDoc has attribute with no
name |[#50638881_pgfId-1023453]##no |[#50638881_pgfId-1023456]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=842[Spec
Public:842]_

|[#50638881_pgfId-1023458]##C029 |[#50638881_pgfId-1023460]##Errata
|[#50638881_pgfId-1023462]## _ui:param_ has attribute duplicated. One of
them should be "value" |[#50638881_pgfId-1023464]##yes
|[#50638881_pgfId-1023467]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=855[Spec
Public:855]_

|[#50638881_pgfId-1023469]##C030 |[#50638881_pgfId-1023471]##Errata
|[#50638881_pgfId-1023473]##RenderKit Docs _javax.faces.CompositeFacet_
change " The implementation of _encodeBegin()_ , must obtain " to be "
The implementation of _encodeChildren()_ , must obtain "
|[#50638881_pgfId-1023475]##no |[#50638881_pgfId-1023478]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=843[Spec
Public:843]_

|[#50638881_pgfId-1023480]##C031 |[#50638881_pgfId-1023482]##Errata
|[#50638881_pgfId-1023484]##VDL docs state that _composite:attribute_
has a target attribute with _required=true_ . This attribute is not
really required on _composite:attribute_ .
|[#50638881_pgfId-1023486]##yes |[#50638881_pgfId-1023489]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=644[Spec
Public:644]_

|[#50638881_pgfId-1023491]##C032 |[#50638881_pgfId-1023493]##Errata
|[#50638881_pgfId-1023495]##Mention in spec that Objects put in view
scope may need to be Serializable |[#50638881_pgfId-1023497]##yes
|[#50638881_pgfId-1023500]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=830[Spec
Public:830]_

|[#50638881_pgfId-1023502]##C033 |[#50638881_pgfId-1023504]##Errata
|[#50638881_pgfId-1023506]##Modify the javadoc for _ResourceHandler_ to
state that for resources residing at
_META-INF/resources/<resourceidentifier>_ . The implementation is not
required to support the optional _libraryVersion_ and _resourceVersion_
segments |[#50638881_pgfId-1023508]##yes |[#50638881_pgfId-1023511]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=844[Spec
Public:844]_

|[#50638881_pgfId-1023513]##C034 |[#50638881_pgfId-1023515]##Change
|[#50638881_pgfId-1023517]##Modify table 5-10 to state that implicit
object cc returns the current composite component, relative to the
composite component markup page in which the expression appears
|[#50638881_pgfId-1023519]##yes |[#50638881_pgfId-1023522]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=831[Spec
Public:831]_

|[#50638881_pgfId-1023524]##C035 |[#50638881_pgfId-1023526]##Errata
|[#50638881_pgfId-1023528]##3.6.2.1 Modify composite component metadata
specification to state that, within the _cc:interface_ element, the
following attributes are not available unless _ProjectStage_ is
_Development_ : displayName, expert, hidden, preferred, shortDescription
|[#50638881_pgfId-1023530]##yes |[#50638881_pgfId-1023533]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=832[Spec
Public:832]_

|[#50638881_pgfId-1023535]##C037 |[#50638881_pgfId-1023537]##Errata
|[#50638881_pgfId-1023539]## _UIComponent.restoreState()_ javadocs must
be changed to ***say*** NPE is thrown if context is null, but no action
is taken if state argument is null |[#50638881_pgfId-1023541]##yes
|[#50638881_pgfId-1023544]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=845[Spec
Public:845]_

|[#50638881_pgfId-1023546]##C040 |[#50638881_pgfId-1023548]##Errata
|[#50638881_pgfId-1023550]##VDLDocs for _f:metadata_ . Don't mention
_f:view_ . State, "This tag must reside within the top level facelet
page whose filename corresponds ot the _viewid_ being loaded."
|[#50638881_pgfId-1023552]##yes |[#50638881_pgfId-1023555]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=856[Spec
Public:856]_

|[#50638881_pgfId-1023557]##C043 |[#50638881_pgfId-1023559]##Errata
|[#50638881_pgfId-1023561]##Document _SEPARATOR_CHAR_ in section 11.1.3
where all the other context-params are documented
|[#50638881_pgfId-1023563]##yes |[#50638881_pgfId-1023566]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=833[Spec
Public:833]_

|[#50638881_pgfId-1023568]##C044 |[#50638881_pgfId-1023570]##Errata
|[#50638881_pgfId-1023572]##Section 11.4.6 doesn't include
_ViewDeclarationLanguage_ , _VisitContextFactory_ ,
_ExceptionHandlerFactory_ , _PartialViewContext_ ,
_TagHandlerDelegateFactory_ as decoratable
|[#50638881_pgfId-1023574]##yes |[#50638881_pgfId-1023577]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=834[Spec
Public:834]_

|[#50638881_pgfId-1023579]##C046 |[#50638881_pgfId-1023581]##Errata
|[#50638881_pgfId-1023583]##Section 10.4.1.1 specifies the use of
_AjaxBehaviors pushBehavior_ but _AjaxBehaviors_ is an implementation
detail (the class exists under com package)
|[#50638881_pgfId-1023585]##yes |[#50638881_pgfId-1023588]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=836[Spec
Public:836]_

|[#50638881_pgfId-1023590]##C047 |[#50638881_pgfId-1023592]##Errata</TD
|[#50638881_pgfId-1023594]##Add "defaults" for "execute", "render"
_AjaxBehavior_ in vdldocs. |[#50638881_pgfId-1023596]##yes
|[#50638881_pgfId-1023599]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=568[Spec
Public:568]_

|[#50638881_pgfId-1023601]##C048 |[#50638881_pgfId-1023603]##Errata
|[#50638881_pgfId-1023605]##JSP should not have _f:viewParam_ . Facelets
_f:viewParam_ must have _name_ attribute.
|[#50638881_pgfId-1023607]##yes |[#50638881_pgfId-1023610]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=656[Spec
Public:656]_

|[#50638881_pgfId-1023612]##C049 |[#50638881_pgfId-1023614]##Errata
|[#50638881_pgfId-1023616]##Spec section 3.2.5 is empty. Fix that
|[#50638881_pgfId-1023618]##yes |[#50638881_pgfId-1023621]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=835[Spec
Public:835]_

|[#50638881_pgfId-1023623]##C050 |[#50638881_pgfId-1023625]##Errata
|[#50638881_pgfId-1023627]##Spec for _UIComponent.setParent()_
incomplete |[#50638881_pgfId-1023629]##yes |[#50638881_pgfId-1023632]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=837[Spec
Public:837]_

|[#50638881_pgfId-1023634]##C054 |[#50638881_pgfId-1023636]##Errata
|[#50638881_pgfId-1023638]## _f:event name_ attribute should be type.
|[#50638881_pgfId-1023640]##yes |[#50638881_pgfId-1023643]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=639[Spec
Public:639]_

|[#50638881_pgfId-1023645]##C058 |[#50638881_pgfId-1023647]##Errata
|[#50638881_pgfId-1023649]##Section 14.4.1: Table 14-4: responseTxt
should be responseText. Table 14-4: Add _status_ property; Table 14-4:
There is no "name" property. Table 14-3: reorder "status" values to be
in chronological order. Section 14.4.1.1: Fix use case.
|[#50638881_pgfId-1023651]##yes |[#50638881_pgfId-1023654]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=642[Spec
Public:642]_

|[#50638881_pgfId-1023656]##C060 |[#50638881_pgfId-1023658]##Change
|[#50638881_pgfId-1023660]##Replace the last sentence in the javadoc for
_FacesServlet.service()_ to say "The implementation must make it so
_FacesContext.release()_ is called within a finally block as late as
possible in the processing for the JSF related portion of this request".
|[#50638881_pgfId-1023662]##yes |[#50638881_pgfId-1023665]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=846[Spec
Public:846]_

|[#50638881_pgfId-1023667]##C061 |[#50638881_pgfId-1023669]##Change
|[#50638881_pgfId-1023671]##Non-normatively document that JavaBeans
PropertyEditors will be used for EL Coercion. Mention this in the
context of JSF converters |[#50638881_pgfId-1023673]##yes
|[#50638881_pgfId-1023676]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=838[Spec
Public:838]_

|[#50638881_pgfId-1023678]##C062 |[#50638881_pgfId-1023680]##Change
|[#50638881_pgfId-1023682]##In 3.1.5, explicitly mention not to use view
scope |[#50638881_pgfId-1023684]##yes |[#50638881_pgfId-1023687]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=839[Spec
Public:839]_

|[#50638881_pgfId-1023689]##C063 |[#50638881_pgfId-1023691]##Change
|[#50638881_pgfId-1023693]##7.4.1 Clarify that, in the case of
navigation actions, an empty string should be treated the same way as
null: stay on the same page. |[#50638881_pgfId-1023695]##yes
|[#50638881_pgfId-1023698]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=747[Spec
Public:747]_

|[#50638881_pgfId-1023700]##C064 |[#50638881_pgfId-1023702]##Change
|[#50638881_pgfId-1023704]##Correct _StateHolder.setTransient_ JavaDoc
(specified backwards) |[#50638881_pgfId-1023706]##yes
|[#50638881_pgfId-1023709]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=840[Spec
Public:840]_

|[#50638881_pgfId-1023711]##C065 |[#50638881_pgfId-1023713]##Change
|[#50638881_pgfId-1023715]##Correct typos in _Composite.tld_ (for
pdldocs). Specifically, quotes around _actionListener_ ,
_method-signature_ (spelling). Also clarify the default value "false"
for "required" attribute. |[#50638881_pgfId-1023717]##yes
|[#50638881_pgfId-1023720]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=841[Spec
Public:841]_

|[#50638881_pgfId-1023722]##C066 |[#50638881_pgfId-1023724]##Change
|[#50638881_pgfId-1023726]##Specify that the Component Resource
container facet must be marked transient. Specifically, the JavaDocs for
_UIViewRoot.getComponentResources_ should include: "Set the transient
property of the facet to true." |[#50638881_pgfId-1023728]##yes
|[#50638881_pgfId-1023731]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=800[Spec
Public:800]_

|[#50638881_pgfId-1023733]##C068 |[#50638881_pgfId-1023735]##Change
|[#50638881_pgfId-1023737]##Modify the facelet taglib xsd so that older
versions of taglibs are acceptable. |[#50638881_pgfId-1023739]##yes
|[#50638881_pgfId-1023742]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=744[Spec
Public:744]_

|[#50638881_pgfId-1023744]##C069 |[#50638881_pgfId-1023746]##Change
|[#50638881_pgfId-1023748]##Make sure vdldocs for _f:event_ list event
all possible event types |[#50638881_pgfId-1023750]##yes
|[#50638881_pgfId-1023753]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=712[Spec
Public:712]_

|[#50638881_pgfId-1023755]##C072 |[#50638881_pgfId-1023757]##Errata
|[#50638881_pgfId-1023759]##Neither applyNextHandler of
DelegatingMetaTagHandler or nextHandler of TagHandler are documented.
|[#50638881_pgfId-1023761]##yes |[#50638881_pgfId-1023764]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=780[Spec
Public:780]_

|[#50638881_pgfId-1023766]##C073 |[#50638881_pgfId-1023768]##Errata
|[#50638881_pgfId-1023770]##Specify f:ajax execute/render id behavior in
vdldocs (as outlined in Section 10.4.1.1 of the spec).
|[#50638881_pgfId-1023772]##yes |[#50638881_pgfId-1023775]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=567[Spec
Public:567]_

|[#50638881_pgfId-1023777]##C074 |[#50638881_pgfId-1023779]##Errata
|[#50638881_pgfId-1023781]##<view-param> has no business being a child
of <redirect> and should be renamed to <redirect-param>.
|[#50638881_pgfId-1023783]##yes |[#50638881_pgfId-1023786]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=698[Spec
Public:698]_

|[#50638881_pgfId-1023788]##C075 |[#50638881_pgfId-1023790]##Errata
|[#50638881_pgfId-1023792]##includeViewParams implicit navigation flag
should be faces-include-view-params. |[#50638881_pgfId-1023794]##yes
|[#50638881_pgfId-1023797]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=699[Spec
Public:699]_

|[#50638881_pgfId-1023799]##C077 |[#50638881_pgfId-1023801]##Errata
|[#50638881_pgfId-1023803]##Event broadcasting should apply to Behaviors
(not just ClientBehaviors). |[#50638881_pgfId-1023805]##yes
|[#50638881_pgfId-1023808]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=798[Spec
Public:798]_

|[#50638881_pgfId-1023810]##C078 |[#50638881_pgfId-1023812]##Errata
|[#50638881_pgfId-1023814]##PostAddToViewEvent delivery specification
needs clarification. Clarify UIComponent.getParent and getChildren for
consistency. |[#50638881_pgfId-1023816]##yes
|[#50638881_pgfId-1023819]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=805[Spec
Public:805]_

|[#50638881_pgfId-1023821]##C079 |[#50638881_pgfId-1023823]##Errata
|[#50638881_pgfId-1023825]##RenderKit Docs - TableRenderer:Clarification
- the docs say to render the footer the same as the header which causes
the problem. |[#50638881_pgfId-1023827]##yes
|[#50638881_pgfId-1023830]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=255[Spec
Public:255]_

|[#50638881_pgfId-1023832]##C080 |[#50638881_pgfId-1023834]##Errata
|[#50638881_pgfId-1023836]##RenderKit Docs - ButtonRenderer Encode
behavior w/r/t onclick attribute - should not be passthrough attribute.
|[#50638881_pgfId-1023838]##yes |[#50638881_pgfId-1023841]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=257[Spec
Public:257]_

|[#50638881_pgfId-1023843]##C081 |[#50638881_pgfId-1023845]##Errata
|[#50638881_pgfId-1023847]##h:message "for" attribute is
mis-specified:"for" attribute should be relative id (not clientid).
|[#50638881_pgfId-1023849]##yes |[#50638881_pgfId-1023852]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=266[Spec
Public:266]_

|[#50638881_pgfId-1023854]##C082 |[#50638881_pgfId-1023856]##Errata
|[#50638881_pgfId-1023858]##clarify whether expression of
binding-attribute of f:xxxxListener should be evaluated on postback.
|[#50638881_pgfId-1023860]##yes |[#50638881_pgfId-1023863]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=320[Spec
Public:320]_

|[#50638881_pgfId-1023865]##C083 |[#50638881_pgfId-1023867]##Errata
|[#50638881_pgfId-1023869]##Option rendering, specifically when dealing
with SelectItemGroups, is too generic. |[#50638881_pgfId-1023871]##yes
|[#50638881_pgfId-1023874]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=420[Spec
Public:420]_

|[#50638881_pgfId-1023876]##C084 |[#50638881_pgfId-1023878]##Errata
|[#50638881_pgfId-1023880]##submittedValue get/set methods
underspecified |[#50638881_pgfId-1023882]##yes
|[#50638881_pgfId-1023885]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=434[Spec
Public:434]_

|[#50638881_pgfId-1023887]##C085 |[#50638881_pgfId-1023889]##Errata
|[#50638881_pgfId-1023891]##Current wording in renderkit docs leads to
double encoding of query parameters |[#50638881_pgfId-1023893]##yes
|[#50638881_pgfId-1023896]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=436[Spec
Public:436]_

|[#50638881_pgfId-1023898]##C086 |[#50638881_pgfId-1023900]##Errata
|[#50638881_pgfId-1023902]##SelectManyCheckBox Clarification
|[#50638881_pgfId-1023904]##yes |[#50638881_pgfId-1023907]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=466[Spec
Public:466]_

|[#50638881_pgfId-1023909]##C087 |[#50638881_pgfId-1023911]##Errata
|[#50638881_pgfId-1023913]##PDL document for JSTL(Facelets) has the
incorrect URI for the NameSpace. |[#50638881_pgfId-1023915]##yes
|[#50638881_pgfId-1023918]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=509[Spec
Public:509]_

|[#50638881_pgfId-1023920]##C088 |[#50638881_pgfId-1023922]##Errata
|[#50638881_pgfId-1023924]##API docs missing for ExceptionEventContext.
|[#50638881_pgfId-1023926]##yes |[#50638881_pgfId-1023929]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=515[Spec
Public:515]_

|[#50638881_pgfId-1023931]##C089 |[#50638881_pgfId-1023933]##Errata
|[#50638881_pgfId-1023935]##composite:attribute component documentation
for the attribute type should be for attribute method-signature.
|[#50638881_pgfId-1023937]##yes |[#50638881_pgfId-1023940]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=524[Spec
Public:524]_

|[#50638881_pgfId-1023942]##C090 |[#50638881_pgfId-1023944]##Errata
|[#50638881_pgfId-1023946]##The UML Diagram for javax.faces.event is out
of date. |[#50638881_pgfId-1023948]##yes |[#50638881_pgfId-1023951]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=525[Spec
Public:525]_

|[#50638881_pgfId-1023953]##C091 |[#50638881_pgfId-1023955]##Errata
|[#50638881_pgfId-1023957]##Minor typo in the Interface BehaviorHolder
API. |[#50638881_pgfId-1023959]##yes |[#50638881_pgfId-1023962]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=534[Spec
Public:534]_

|[#50638881_pgfId-1023964]##C092 |[#50638881_pgfId-1023966]##Errata
|[#50638881_pgfId-1023968]##Two references to the itemLabelEscaped
attribute. |[#50638881_pgfId-1023970]##yes |[#50638881_pgfId-1023973]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=56[Spec
Public:536]_

|[#50638881_pgfId-1023975]##C093 |[#50638881_pgfId-1023977]##Errata
|[#50638881_pgfId-1023979]##Missing class description for
javax.faces.event.PostValidateEvent and
javax.faces.event.PreValidateEvent. |[#50638881_pgfId-1023981]##yes
|[#50638881_pgfId-1023984]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=537[Spec
Public:537]_

|[#50638881_pgfId-1023986]##C094 |[#50638881_pgfId-1023988]##Errata
|[#50638881_pgfId-1023990]##Section 3.7.5 typo - ClientBehavorHolder
should be ClientBehaviorHolder. |[#50638881_pgfId-1023992]##yes
|[#50638881_pgfId-1023995]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=540[Spec
Public:540]_

|[#50638881_pgfId-1023997]##C095 |[#50638881_pgfId-1023999]##Errata
|[#50638881_pgfId-1024001]##Section 4.1.3 typo - NamingContaier should
be NamingContainer. |[#50638881_pgfId-1024003]##yes
|[#50638881_pgfId-1024006]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=541[Spec
Public:541]_

|[#50638881_pgfId-1024008]##C096 |[#50638881_pgfId-1024010]##Errata
|[#50638881_pgfId-1024012]##API Docs: Application.publishEvent: Docs say
to throw NPE if any of the arguments is null. However, sourceBaseType
arg can be null. |[#50638881_pgfId-1024014]##yes
|[#50638881_pgfId-1024017]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=553[Spec
Public:553]_

|[#50638881_pgfId-1024019]##C097 |[#50638881_pgfId-1024021]##Errata
|[#50638881_pgfId-1024023]##Facelets TLD Docs: Missing "for" attribute
for "message" and "messages" tags. |[#50638881_pgfId-1024025]##yes
|[#50638881_pgfId-1024028]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=558[Spec
Public:558]_

|[#50638881_pgfId-1024030]##C099 |[#50638881_pgfId-1024032]##Errata
|[#50638881_pgfId-1024034]##ResourceHandler docs: Clarify that relative
paths are disallowed in library names. |[#50638881_pgfId-1024036]##yes
|[#50638881_pgfId-1024039]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=577[Spec
Public:577]_

|[#50638881_pgfId-1024041]##C100 |[#50638881_pgfId-1024043]##Errata
|[#50638881_pgfId-1024045]##Renderkit Docs: h:link - Formatting - add
paragraphs |[#50638881_pgfId-1024047]##yes |[#50638881_pgfId-1024050]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=588[Spec
Public:588]_

|[#50638881_pgfId-1024052]##C101 |[#50638881_pgfId-1024054]##Errata
|[#50638881_pgfId-1024056]##Spec Section 2.5.9: Fix Grammar: "The first
client behavior to provided by the JSF specification is the
AjaxBehavior." should be: "The first client behavior provided by the JSF
specification is the AjaxBehavior." |[#50638881_pgfId-1024058]##yes
|[#50638881_pgfId-1024061]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=590[Spec
Public:590]_

|[#50638881_pgfId-1024063]##C102 |[#50638881_pgfId-1024065]##Errata
|[#50638881_pgfId-1024067]##Spec Section 9.4 doesn't list all the
validation tags and it lists the validateDoubleRange tag twice.
|[#50638881_pgfId-1024069]##no |[#50638881_pgfId-1024072]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=591[Spec
Public:591]_

|[#50638881_pgfId-1024074]##C103 |[#50638881_pgfId-1024076]##Errata
|[#50638881_pgfId-1024078]##Vdldocs and Spec section 3.6.2.1 have
component:actionSource target attribute with commas as delimiters -
should be "space" as delimiter. |[#50638881_pgfId-1024080]##yes
|[#50638881_pgfId-1024083]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=592[Spec
Public:592]_

|[#50638881_pgfId-1024085]##C104 |[#50638881_pgfId-1024087]##Errata
|[#50638881_pgfId-1024089]##Spec Section 7.4.1: getNavigationCase should
return NavigationCase and not void. |[#50638881_pgfId-1024091]##yes
|[#50638881_pgfId-1024094]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=605[Spec
Public:605]_

|[#50638881_pgfId-1024096]##C105 |[#50638881_pgfId-1024098]##Errata
|[#50638881_pgfId-1024100]##Spec Section 10.4.1.4 says: f:validateBean
should extend validateHandler. Should be ValidatorHandler.
|[#50638881_pgfId-1024102]##yes |[#50638881_pgfId-1024105]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=615[Spec
Public:615]_

|[#50638881_pgfId-1024107]##C106 |[#50638881_pgfId-1024109]##Errata
|[#50638881_pgfId-1024111]##Typo: Pages in the TLD docs says "JSF 2.0
Page Decraration Language". Should be "Declaration".
|[#50638881_pgfId-1024113]##yes |[#50638881_pgfId-1024116]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=617[Spec
Public:617]_

|[#50638881_pgfId-1024118]##C107 |[#50638881_pgfId-1024120]##Errata
|[#50638881_pgfId-1024122]##Typos: Table 14-1, 14-2, page 14-3.
|[#50638881_pgfId-1024124]##yes |[#50638881_pgfId-1024127]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=629[Spec
Public:629]_

|[#50638881_pgfId-1024129]##C108 |[#50638881_pgfId-1024131]##Errata
|[#50638881_pgfId-1024133]##UIData.invokeOnComponent docs need to be
updated to include handling of column level facets.
|[#50638881_pgfId-1024135]##yes |[#50638881_pgfId-1024138]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=632[Spec
Public:632]_

|[#50638881_pgfId-1024140]##C109 |[#50638881_pgfId-1024142]##Errata
|[#50638881_pgfId-1024144]##Spec Section 3.5.6.1 needs to be corrected
to state that default validators are added during tag execution time.
|[#50638881_pgfId-1024146]##yes |[#50638881_pgfId-1024149]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=635[Spec
Public:635]_

|[#50638881_pgfId-1024151]##C110 |[#50638881_pgfId-1024153]##Errata
|[#50638881_pgfId-1024155]##validateBean and validateRequired tags need
to be removed from the JSP PDL documentation
|[#50638881_pgfId-1024157]##yes |[#50638881_pgfId-1024160]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=645[Spec
Public:645]_

|[#50638881_pgfId-1024162]##C111 |[#50638881_pgfId-1024164]##Errata
|[#50638881_pgfId-1024166]##jsf.ajax.response update element
clarification needed in JavaScript docs. |[#50638881_pgfId-1024168]##yes
|[#50638881_pgfId-1024171]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=646[Spec
Public:646]_

|[#50638881_pgfId-1024173]##C112 |[#50638881_pgfId-1024175]##Errata
|[#50638881_pgfId-1024177]##Spec Section 10.4.1.1: Clarify what happens
when nesting and wrapping f:ajax tags collide.
|[#50638881_pgfId-1024179]##yes |[#50638881_pgfId-1024182]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=652[Spec
Public:652]_

|[#50638881_pgfId-1024184]##C113 |[#50638881_pgfId-1024186]##Errata
|[#50638881_pgfId-1024188]##Typo: Spec Section 8.3.1: "renderkit-id"
should be "render-kit-id" and "renderkit" should be "render-kit".
|[#50638881_pgfId-1024190]##yes |[#50638881_pgfId-1024193]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=660[Spec
Public:660]_

|[#50638881_pgfId-1024195]##C114 |[#50638881_pgfId-1024197]##Errata
|[#50638881_pgfId-1024199]##Add "rendered" attribute to VDL docs for
ui:component and ui:fragment. |[#50638881_pgfId-1024201]##yes
|[#50638881_pgfId-1024204]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=661[Spec
Public:661]_

|[#50638881_pgfId-1024206]##C115 |[#50638881_pgfId-1024208]##Errata
|[#50638881_pgfId-1024210]##JavaDocs for UIComponent.processValidators
is incomplete. It should mention _popComponentFromEL_ .
|[#50638881_pgfId-1024212]##yes |[#50638881_pgfId-1024215]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=664[Spec
Public:664]_

|[#50638881_pgfId-1024217]##C116 |[#50638881_pgfId-1024219]##Errata
|[#50638881_pgfId-1024221]##Dead link in VDL docs.
|[#50638881_pgfId-1024223]##yes |[#50638881_pgfId-1024226]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=666[Spec
Public:666]_

|[#50638881_pgfId-1024228]##C117 |[#50638881_pgfId-1024230]##Errata
|[#50638881_pgfId-1024232]##Spec Section 2.5.2.4: Standard messages for
LengthValidator are confusing. |[#50638881_pgfId-1024234]##yes
|[#50638881_pgfId-1024237]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=668[Spec
Public:668]_

|[#50638881_pgfId-1024239]##C118 |[#50638881_pgfId-1024241]##Errata
|[#50638881_pgfId-1024243]##Spec/pdldocs don't say what the default is
for "target" in h:outputScript. |[#50638881_pgfId-1024245]##yes
|[#50638881_pgfId-1024248]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=673[Spec
Public:673]_

|[#50638881_pgfId-1024250]##C119 |[#50638881_pgfId-1024252]##Errata
|[#50638881_pgfId-1024254]##partial-view-context-factory is only
mentioned in the schema part of the spec. Houls be added to Spec Section
13.4.2. |[#50638881_pgfId-1024256]##yes |[#50638881_pgfId-1024259]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=705[Spec
Public:705]_

|[#50638881_pgfId-1024261]##C120 |[#50638881_pgfId-1024263]##Errata
|[#50638881_pgfId-1024266]##Specification edits needed - see:
_http://docs.google.com/Doc?docid=0AW2H0u_g8JuTZGYycDZzdmhfMTRmOHo3ZmJncQ&hl=en[here]_
|[#50638881_pgfId-1024268]##no |[#50638881_pgfId-1024271]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=714[Spec
Public:714]_

|[#50638881_pgfId-1024273]##C121 |[#50638881_pgfId-1024275]##Errata
|[#50638881_pgfId-1024277]##Typo - Spec Section 7.5.2: "ViewHanlder"
should be "ViewHandler"; "renderView" and "restoreView" methods should
call "ViewDeclarationLanguage.renderView" and
"ViewDeclarationLanguage.restoreView". |[#50638881_pgfId-1024279]##yes
|[#50638881_pgfId-1024282]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=729[Spec
Public:729]_

|[#50638881_pgfId-1024284]##C122 |[#50638881_pgfId-1024286]##Errata
|[#50638881_pgfId-1024288]##Spec Section 2.6.1.3: Specify that a
libraryName or resourceName contains only XML NameChar, but not a colon;
a libraryName or resourceName does not match the regex "[0-9]+(_[0-9]+)*
or [A-Za-z]\{2}(_[A-Za-z]\{2}(_[A-Za-z]+)*)?"
|[#50638881_pgfId-1024290]##yes |[#50638881_pgfId-1024293]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=740[Spec
Public:740]_

|[#50638881_pgfId-1024295]##C123 |[#50638881_pgfId-1024297]##Errata
|[#50638881_pgfId-1024299]##Typos in PDLDocs for ui:repeat
|[#50638881_pgfId-1024301]##yes |[#50638881_pgfId-1024304]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=743[Spec
Public:743]_

|[#50638881_pgfId-1024306]##C124 |[#50638881_pgfId-1024308]##Errata
|[#50638881_pgfId-1024310]##Remove "partial-traversal" application
element from the spec as it does not exist in the schema.
|[#50638881_pgfId-1024312]##yes |[#50638881_pgfId-1024315]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=767[Spec
Public:767]_

|[#50638881_pgfId-1024317]##C125 |[#50638881_pgfId-1024319]##Errata
|[#50638881_pgfId-1024321]##Add mssing ID attributes to schema for:
faces-config-orderingType,faces-config-ordering-orderingType,faces-config-absoluteOrderingType,faces-config-default-valueType,faces-config-from-view-idType,faces-config-client-behavior-rendererType,faces-config-behaviorType,faces-config-value-classType,faces-config-rendererType
|[#50638881_pgfId-1024323]##yes |[#50638881_pgfId-1024326]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=768[Spec
Public:768]_

|[#50638881_pgfId-1024328]##C126 |[#50638881_pgfId-1024330]##Errata
|[#50638881_pgfId-1024332]##UIInput JavaDocs: Specify the handling of
conversion failures. |[#50638881_pgfId-1024334]##yes
|[#50638881_pgfId-1024337]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=775[Spec
Public:775]_

|[#50638881_pgfId-1024339]##C127 |[#50638881_pgfId-1024341]##Errata
|[#50638881_pgfId-1024343]##EditableValueHodler JavaDocs: Missing
"@Since 2.0" for "resetValue" method. |[#50638881_pgfId-1024345]##yes
|[#50638881_pgfId-1024348]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=779[Spec
Public:779]_

|[#50638881_pgfId-1024350]##C128 |[#50638881_pgfId-1024352]##Errata
|[#50638881_pgfId-1024354]##VDL documentation for f:selectItem
references the "escape" attribute. It should be "itemEscaped".
|[#50638881_pgfId-1024356]##yes |[#50638881_pgfId-1024359]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=788[Spec
Public:788]_

|[#50638881_pgfId-1024361]##C129 |[#50638881_pgfId-1024363]##Errata
|[#50638881_pgfId-1024365]##Specify description for "f:param" "disabled"
attribute. |[#50638881_pgfId-1024367]##yes |[#50638881_pgfId-1024370]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=794[Spec
Public:794]_

|[#50638881_pgfId-1024372]##C130 |[#50638881_pgfId-1024374]##Errata
|[#50638881_pgfId-1024376]##Simplify PostRestoreStateEvent delivery
requirements. |[#50638881_pgfId-1024378]##yes
|[#50638881_pgfId-1024381]##
_https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=806[Spec
Public:806]_
|===

[#50638881_pgfId-1024383]##

[#50638881_pgfId-1024384]##

[#50638881_pgfId-1023248]## 

[#50638881_pgfId-1023249]## 

[#50638881_pgfId-1023251]## 

[#50638881_pgfId-1023250]## 

=== [#50638881_pgfId-1021695]##

image:JSF-63.gif[image]

Changes between 1.2 Final and 2.0 Final

[#50638881_pgfId-1020783]##This section gives a change-by-change
accounting of the modifications to the spec since the draft listed in
the title of this section.

==== [#50638881_pgfId-1020790]##link:JSF.htm#50638877_68933[See Request Processing Lifecycle Scenarios]

[#50638881_pgfId-1020791]##Modified to define and explain resource
requests and responses.

==== [#50638881_pgfId-1020795]##link:JSF.htm#50638877_42543[See Standard Request Processing Lifecycle Phases]

[#50638881_pgfId-1020796]##Specify how and when the _currentPhaseId_
property of the current _FacesContext_ must be updated.

==== [#50638881_pgfId-1020800]##link:JSF.htm#50638877_45193[See Restore View]

[#50638881_pgfId-1020801]##Modified to indicate that the
_PostAddToViewEvent_ event must be sent after the view was created. Also
specify that if the VDL is Facelets, the tree must be fully constructed
before exiting Restore View.

[#50638881_pgfId-1020802]##Change how the “binding” attribute is
handled. In the case of a programmatically created view, manually
traverse the tree and send each node the _AfterRestoreViewEvent_ . In
the case of a normally restored tree, the “binding” attribute is handled
by _UIViewRoot.processRestoreState()_ , which is already called from
_StateManager.restoreView()_ .

[#50638881_pgfId-1020803]##Modify the non-faces-request case to include
view parameter processing.

==== [#50638881_pgfId-1020807]##link:JSF.htm#50638877_68096[See Apply Request Values]

[#50638881_pgfId-1020808]##Specified additional behavior to recognize
partial requests and to perform partial processing.

==== [#50638881_pgfId-1020812]##link:JSF.htm#50638877_Apply%20Request%20Values%20Partial%20Processing[See Apply Request Values Partial Processing]

[#50638881_pgfId-1020813]##Specified behavior for partial processing.

==== [#50638881_pgfId-1020817]##link:JSF.htm#50638877_27358[See Process Validations]

[#50638881_pgfId-1020818]##Specified additional behavior to recognize
partial requests and to perform partial processing.

==== [#50638881_pgfId-1020822]##link:JSF.htm#50638877_Partial%20Validations%20Partial%20Processing[See Partial Validations Partial Processing]

[#50638881_pgfId-1020823]##Specified behavior for partial processing.

==== [#50638881_pgfId-1020827]##link:JSF.htm#50638877_44493[See Update Model Values]

[#50638881_pgfId-1020828]##Specified additional behavior to recognize
partial requests and to perform partial processing.

==== [#50638881_pgfId-1020832]##link:JSF.htm#50638877_Update%20Model%20Values%20Partial%20Processing[See Update Model Values Partial Processing]

[#50638881_pgfId-1020833]##Specified behavior for partial processing.

==== [#50638881_pgfId-1020837]##link:JSF.htm#50638877_70838[See Render Response]

[#50638881_pgfId-1020838]##Generalized to remove JSP specific language.

[#50638881_pgfId-1020839]##Added the requirement for (partial requests)
to prevent writing to the response at the start of this phase (to
prevent content from being written outside f:view)

==== [#50638881_pgfId-1020843]##link:JSF.htm#50638877_24181[See Localized Application Messages]

[#50638881_pgfId-1020844]##Added message key for Bean Validation.

==== [#50638881_pgfId-1020848]##link:JSF.htm#50638877_40833[See Resource Handling]

[#50638881_pgfId-1020849]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020853]##link:JSF.htm#50638877_92607[See View Parameters]

[#50638881_pgfId-1020854]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020858]##link:JSF.htm#50638877_13018[See Bookmarkability]

[#50638881_pgfId-1020859]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020863]##link:JSF.htm#50638877_99953[See JSR 303 Bean Validation]

[#50638881_pgfId-1020864]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020868]##link:JSF.htm#50638877_86284[See Ajax]

[#50638881_pgfId-1020869]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020873]##link:JSF.htm#50638877_35970[See Component Behaviors]

[#50638881_pgfId-1020874]##Add non-normative section traversing this
feature.

==== [#50638881_pgfId-1020878]##New link:JSF.htm#50638877_44233[See Resource Handling]

[#50638881_pgfId-1020879]##This section is the starting point for the
specification of the Resource Handler facility, which is also specified
in the JavaDocs and the Standard RenderKit Docs.

==== [#50638881_pgfId-1020883]##New link:JSF.htm#50638877_Rendering%20Resources[See Rendering Resources]

[#50638881_pgfId-1020884]##This section briefly talks about how
resources (such as images, stylesheets and scripts) use the resource
handling mechanism.

==== [#50638881_pgfId-1020888]##New link:JSF.htm#50638877_Relocatable%20Resources[See Relocatable Resources]

[#50638881_pgfId-1020889]##This section outlines the mechanism that
script and stylesheet resources use to render themselves in a different
location (with respect to tag or component placement in the view).

==== [#50638881_pgfId-1020893]##New link:JSF.htm#50638877_Resource%20Rendering%20Using%20Annotations[See Resource Rendering Using Annotations]

[#50638881_pgfId-1020894]##This section describes the use of an
annotation to mark that a component requires a resource.

==== [#50638881_pgfId-1020898]##link:JSF.htm#50638851_85169[See Component Tree Navigation]

[#50638881_pgfId-1020899]##Added descriptions for
UIComponent.getCurrentComponent and
UIComponent.getCurrentCompositeComponent.

[#50638881_pgfId-1020900]##Added descriptions for visitTree().

==== [#50638881_pgfId-1020904]##link:JSF.htm#50638851_Managing%20Component%20Behavior[See Managing Component Behavior]

[#50638881_pgfId-1020905]##Described additional method implementations
of the BehaviorHolder interface.

==== [#50638881_pgfId-1020909]##link:JSF.htm#50638851_84394[See Generic Attributes]

[#50638881_pgfId-1020910]##Described additional responsibilities for Map
get() method if the component instance is a composite component.

==== [#50638881_pgfId-1020914]##link:JSF.htm#50638851_3.1.10.1%20Special%20Attributes[See Special Attributes]

[#50638881_pgfId-1020915]##Describe UIComponent contants that are used
in attribute Map(s).

==== [#50638881_pgfId-1020919]##link:JSF.htm#50638851_3.1.12%20Component%20Specialization%20Methods[See Component Specialization Methods]

[#50638881_pgfId-1020920]##Mentioned the default behavior of
UIComponentBasse encodeChildren if no associated renderer. Mentioned
encodeBegin() must publish PreRenderComponentEvent.

==== [#50638881_pgfId-1020924]##link:JSF.htm#50638851_84171[See Lifecycle Management Methods]

[#50638881_pgfId-1020925]##Added pointers to _pushComponentToEL_ ()
_popComponentFromEL_ () in support of “component” implicit object.

==== [#50638881_pgfId-1020929]##link:JSF.htm#50638851_3.1.14%20Utility%20Methods[See Utility Methods]

[#50638881_pgfId-1020930]##Added UIComponent utility method
getResourceBundleMap().

==== [#50638881_pgfId-1020934]##link:JSF.htm#50638851_3.2.5.1%20Properties[See Properties]

[#50638881_pgfId-1020935]##Mentioned
ResourceDependency/ResourceDependencies lookup for ValueHolder
setConverter method.

==== [#50638881_pgfId-1020939]##link:JSF.htm#50638851_3.2.6.2%20Methods[See Methods]

[#50638881_pgfId-1020940]##Mentioned
ResourceDependency/ResourceDependencies lookup for EditableValueHolder
addValidator method..

==== [#50638881_pgfId-1020944]##link:JSF.htm#50638851_14153[See SystemEventListenerHolder]

[#50638881_pgfId-1020945]##Added section describing this new behavioral
interface.

==== [#50638881_pgfId-1020949]##link:JSF.htm#50638851_3.3.2%20Converter[See Converter]

[#50638881_pgfId-1020950]##Added verbage about Resource annotations
attached to Converters.

==== [#50638881_pgfId-1020954]##link:JSF.htm#50638851_84579[See Overview]

[#50638881_pgfId-1020955]##Updated UML diagram of event package

{empty}[#50638881_pgfId-1020959]##Moved existing event content to be in
new subsection: link:JSF.htm#50638851_93935[See Application Events], and
created a new subsection link:JSF.htm#50638851_52454[See System Events]

==== [#50638881_pgfId-1020966]##link:JSF.htm#50638851_3.4.2.6%20Event%20Broadcasting[See Event Broadcasting]

[#50638881_pgfId-1020967]##Clarification made: throwing an
AbortProcessingException tells an implementation that no further
broadcast of the current event occurs. Does not affect future events.

==== [#50638881_pgfId-1020971]##link:JSF.htm#50638851_3.4.3.1%20Event%20Classes[See Event Classes]

[#50638881_pgfId-1020972]##Added descriptions for
PostConstructApplicationEvent and PreDestroyApplicationEvent.

==== [#50638881_pgfId-1020976]##link:JSF.htm#50638851_98213[See Declarative Listener Registration]

[#50638881_pgfId-1020977]##New section for declarative events.

==== [#50638881_pgfId-1020981]##link:JSF.htm#50638851_3.4.3.4%20Listener%20Registration%20By%20Annotation[See Listener Registration By Annotation]

[#50638881_pgfId-1020982]##Added verbiage about ListenerFor and
ListenersFor annotations.

==== [#50638881_pgfId-1020986]##link:JSF.htm#50638851_3.5.2%20Validator%20Classes[See Validator Classes]

[#50638881_pgfId-1020987]##Added verbage about Resource annotations
attached to Validators.

==== [#50638881_pgfId-1020991]##link:JSF.htm#50638851_52434[See Validator Classes]

[#50638881_pgfId-1020992]##Add “javax.faces.RegularExpressionValidator”
standard validator

==== [#50638881_pgfId-1020996]##link:JSF.htm#50638851_52434[See Validator Classes]

[#50638881_pgfId-1020997]##Added validaor requirements with respect to
dealing with null or empty values.

==== [#50638881_pgfId-1021001]##link:JSF.htm#50638851_63282[See Validation Registration]

[#50638881_pgfId-1021002]##Added default validator registration
requirements.

==== [#50638881_pgfId-1021006]##link:JSF.htm#50638851_46579[See Standard Validator Implementations]

[#50638881_pgfId-1021007]##Added requirements for BeanValidator and
RequiredValidator.

==== [#50638881_pgfId-1021011]##link:JSF.htm#50638851_65936[See Bean Validation Integration]

[#50638881_pgfId-1021012]##Bean Validation integration.

==== [#50638881_pgfId-1021016]##link:JSF.htm#50638851_Component%20Behavior%20Model[See Component Behavior Model]

[#50638881_pgfId-1021017]##Section describes adding behavior to the
component model.

==== [#50638881_pgfId-1021021]##link:JSF.htm#50638853_84800[See Properties]

==== [#50638881_pgfId-1021022]##Specify the _viewMap_ property on UIViewRoot.

==== [#50638881_pgfId-1021026]##link:JSF.htm#50638853_Methods[See Methods]

[#50638881_pgfId-1021027]##Specify new methods on UIViewRoot for
handling resources for the view.

==== [#50638881_pgfId-1021031]##link:JSF.htm#50638853_4.1.17.4%20Events[See Events]

[#50638881_pgfId-1021032]##Added UIViewRoot getPhaseListeners().

==== [#50638881_pgfId-1021036]##link:JSF.htm#50638853_Partial%20Processing[See Partial Processing]

[#50638881_pgfId-1021037]##Specify additional behavior for UIViewRoot
methods to faciliate partial processing.

==== [#50638881_pgfId-1021041]##link:JSF.htm#50638853_4.2.1.2%20Methods[See Methods]

[#50638881_pgfId-1021042]##Specify iterator() method for DataModel.

==== [#50638881_pgfId-1021046]##link:JSF.htm#50638851_96393[See Composite User Interface Components]

[#50638881_pgfId-1021047]##New section specifying composite components.

==== [#50638881_pgfId-1021051]##link:JSF.htm#50638862_82897[See MethodExpression Syntax and Semantics]

[#50638881_pgfId-1021052]##Modify content relating to managed-bean-scope
to include “view” scope.

==== [#50638881_pgfId-1021056]##link:JSF.htm#50638862_32398[See Managed Bean Lifecycle Annotations]

[#50638881_pgfId-1021057]##Modify _@PostConstruct_ to state that an
exception thrown during the @PostConstruct must cause a log message to
be logged.

[#50638881_pgfId-1021058]##Modify content to clarify when _@PreDestroy_
must be called in the case of view scoped managed beans.

==== [#50638881_pgfId-1021062]##link:JSF.htm#50638862_28092[See Faces Implicit Object ELResolver For JSP] and link:JSF.htm#50638862_50118[See Implicit Object ELResolver for Facelets and Programmatic Access]

[#50638881_pgfId-1021066]##Specify how the new implicit object ”
_resource_ “ must be handled by the Implicit Object ELResolver.

[#50638881_pgfId-1021067]##Specify how _viewScope_ , _component_ , and
_cc_ are resolved.

==== [#50638881_pgfId-1021071]##link:JSF.htm#50638862_68347[See ManagedBean ELResolver]

[#50638881_pgfId-1021072]##Modify setValue() to allow for atomic lazy
creation. This eliminates the need to do a get() before doing a set().

==== [#50638881_pgfId-1021075]##link:JSF.htm#50638862_50118[See Implicit Object ELResolver for Facelets and Programmatic Access]

[#50638881_pgfId-1021077]##Add a new implicit object: “resource”. This
allows easily encoding resources into markup using EL expressions

[#50638881_pgfId-1021078]##Corrected behavior of getType with respect to
"requestScope", "sessionScope", or “applicationScope” - should return
null, not Object.class.

==== [#50638881_pgfId-1021082]##link:JSF.htm#50638862_80045[See Resource ELResolver]

==== [#50638881_pgfId-1021083]##This section specifies the behavior of the Resource EL Resolver

==== [#50638881_pgfId-1021087]##link:JSF.htm#50638862_54925[See Composite Component Attributes ELResolver]

[#50638881_pgfId-1021088]##New ELResolver that ensures that #\{cc.attrs}
resolves to a special Map.

==== [#50638881_pgfId-1021092]##link:JSF.htm#50638862_81269[See ScopedAttribute ELResolver]

[#50638881_pgfId-1021093]##Specify that setPropertyResolved(true) is
called in all cases.

==== [#50638881_pgfId-1021097]##link:JSF.htm#50638857_[See Attributes]

[#50638881_pgfId-1021098]##Add new section after 6.1.1 documenting the
new _Map_ returned from _FacesContext.getAttributes()_ .

==== [#50638881_pgfId-1021102]##link:JSF.htm#50638857_6.1.8%20ResponseStream%20and%20ResponseWriter[See ResponseStream and ResponseWriter]

[#50638881_pgfId-1021103]##Add FacesContext enableResponseWriting
method.

==== [#50638881_pgfId-1021107]##link:JSF.htm#50638857_Partial%20Processing%20Constants%20And%20Methods[See Partial Processing Methods]

[#50638881_pgfId-1021108]##Specify the FacesContext contants and methods
that facilitate partial request processing.

==== [#50638881_pgfId-1021112]##link:JSF.htm#50638857_Partial%20View%20Context[See Partial View Context]

[#50638881_pgfId-1021113]##Specify this class is used to facilitate
partial view processing and partial view rendering.

==== [#50638881_pgfId-1021117]##link:JSF.htm#50638857_66290[See Access To The Current FacesContext Instance]

[#50638881_pgfId-1021118]##Specify how this method must behave during
application startup time.Corrected access keyword for
FacesContext.setCurrentInstance() to be _protected_ instead of _public_
.

==== [#50638881_pgfId-1021122]##link:JSF.htm#50638857_59249[See CurrentPhaseId]

[#50638881_pgfId-1021123]##New property to access the current phase.

==== [#50638881_pgfId-1021127]##link:JSF.htm#50638857_91184[See ExceptionHandler]

[#50638881_pgfId-1021128]##New property to access the _ExceptionHandler_
for this request.

==== [#50638881_pgfId-1021132]##link:JSF.htm#50638857_95602[See ExceptionHandlerFactory]

[#50638881_pgfId-1021133]##New factory for _ExceptionHandler_ instances.

==== [#50638881_pgfId-1021137]##link:JSF.htm#50638857_ExternalContextFactory[See ExternalContextFactory]

[#50638881_pgfId-1021138]##New factory for _ExternalContext._

==== [#50638881_pgfId-1021142]##link:JSF.htm#50638861_32155[See ProjectStage Property]

[#50638881_pgfId-1021143]##This section documents the new ProjectStage
property. This is similar in use to the RAILS_ENV environment variable
from the Ruby on Rails framework.

==== [#50638881_pgfId-1021147]##link:JSF.htm#50638861_42183[See System Event Methods]

[#50638881_pgfId-1021148]##New section describing system events.

==== [#50638881_pgfId-1021152]##link:JSF.htm#50638861_53439[See Default NavigationHandler Algorithm]

[#50638881_pgfId-1021153]##Specify how to handle implicit navigation.

[#50638881_pgfId-1021154]##Specify how to handle conditional navigation

[#50638881_pgfId-1021155]##Require that
_context.getFlash().setRedirect(true)_ is called if the navigation is a
redirect.

[#50638881_pgfId-1021156]##Specify that an informative message must be
rendered in the page if there is no outcome match and _ProjectStage_ is
not _Production_ .

[#50638881_pgfId-1021157]##Special handling for view parameters and
redirect.

==== [#50638881_pgfId-1021161]##link:JSF.htm#50638861_26354[See Overview]

[#50638881_pgfId-1021162]##In _createView()_ , if the VDL is Facelets,
make sure the view is fully populated before returning.

==== [#50638881_pgfId-1021166]##link:JSF.htm#50638861_36790[See Default ViewHandler Implementation]

[#50638881_pgfId-1021167]##Move the viewId derivation algorithm to be
inside of the new _ViewHandler.deriveViewId()_ method and specify it to
deal with the new DEFAULT_SUFFIX definition.

[#50638881_pgfId-1021168]##Modify getActionURL() to remove the use of
DEFAULT_SUFFIX and instead take a simpler implementation.

[#50638881_pgfId-1021169]##Refactored VDL specific logic into new
_ViewDeclarationLanguage_ class.

==== [#50638881_pgfId-1021173]##link:JSF.htm#50638861_54292[See ViewDeclarationLanguage]

[#50638881_pgfId-1021174]##New section which coveres how Facelets and
JSP are handled via the ViewDeclarationLanguage class.

==== [#50638881_pgfId-1021178]##link:JSF.htm#50638855_48699[See RenderKit]

[#50638881_pgfId-1021179]##New methods on _RenderKit_ :
_getComponentFamilies()_ and _getRendererTypes()_ .

==== [#50638881_pgfId-1021183]##link:JSF.htm#50638855_8.2%20Renderer[See Renderer]

[#50638881_pgfId-1021184]##Mentioned the ListenerFor annotation.

==== [#50638881_pgfId-1021188]##link:JSF.htm#50638855_BehaviorRenderer[See ClientBehaviorRenderer]

[#50638881_pgfId-1021189]##Renderer for component Behavior.

==== [#50638881_pgfId-1021193]##link:JSF.htm#50638860_91848[See <f:convertDateTime>]

[#50638881_pgfId-1021194]##Extends ConverterELTag, not ConverterTag.

==== [#50638881_pgfId-1021198]##link:JSF.htm#50638860_63143[See <f:convertNumber>]

[#50638881_pgfId-1021199]##Extends ConverterELTag, not ConverterTag

==== [#50638881_pgfId-1021203]##link:JSF.htm#50638860_9.4.14%20%3Cf[See <f:validateDoubleRange>]

[#50638881_pgfId-1021204]##Extends ValidatorELTag, not ValidatorTag

==== [#50638881_pgfId-1021208]##link:JSF.htm#50638860_9.4.15%20%3Cf[See <f:validateRegex>]

[#50638881_pgfId-1021209]##New standard validator

==== [#50638881_pgfId-1021213]##link:JSF.htm#50638860_69048[See <f:validateLongRange>]

[#50638881_pgfId-1021214]##Extends ValidatorELTag, not ValidatorTag

==== [#50638881_pgfId-1021218]##link:JSF.htm#50638860_54501[See <f:view>]

[#50638881_pgfId-1021219]##Extends UIComponentELTag, not
UIComponentBodyTag

==== [#50638881_pgfId-1021223]##link:JSF.htm#50638887_31965[See Facelets and its use in Web Applications]

[#50638881_pgfId-1021227]##New chapter insterted after
link:JSF.htm#50638860_87102[See] , titled, “Integration with Facelets”.
This implies increasing the remaining chapter numbers by one.

==== [#50638881_pgfId-1021231]##link:JSF.htm#50638887_%3Cf[See <f:ajax>]

[#50638881_pgfId-1021232]##Declarative Ajax tag.

==== [#50638881_pgfId-1021235]##link:JSF.htm#50638887_21369[See Override default Ajax action. “button1” is associated with the Ajax “execute=’cancel’” action:]

[#50638881_pgfId-1021237]##Bean Validation tag.

==== [#50638881_pgfId-1021241]##link:JSF.htm#50638887_19779[See <f:validateRequired>]

[#50638881_pgfId-1021242]##Bean Validation tag.

==== [#50638881_pgfId-1021246]##link:JSF.htm#50638850_59981[See Application Configuration Parameters]

[#50638881_pgfId-1021247]##New _javax.faces.PROJECT_STAGE_
ServletContext init param.

[#50638881_pgfId-1021248]##New
_javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL_
ServletContext init param.

[#50638881_pgfId-1021249]##New
_javax.faces.DISABLE_FACES_VDL_VIEWHANDLER_ ServletContext init param.

[#50638881_pgfId-1021250]##Modify _javax.faces.DEFAULT_SUFFIX_ init
param, add _javax.faces.FACELETS_DEFAULT_SUFFIX_ ,
_javax.faces.FACELETS_VIEW_MAPPINGS_ init params.

[#50638881_pgfId-1021251]##New _javax.faces.VALIDATE_EMPTY_FIELDS_
ServletContext init param.

[#50638881_pgfId-1021252]##New _javax.faces.PARTIAL_STATE_SAVING_
ServletContext init param

[#50638881_pgfId-1021253]##New _javax.faces.FULL_STATE_SAVING_VIEW_IDS_
servlet context init param.

[#50638881_pgfId-1021254]##Explicitly ignore “
_/WEB-INF/faces-config.xml_ ” in _javax.faces.CONFIG_FILES_ , if
present.

==== [#50638881_pgfId-1021258]##link:JSF.htm#50638850_57048[See Application Startup Behavior]

[#50638881_pgfId-1021259]##Change rules to support ordering of
configuration resources.

==== [#50638881_pgfId-1021263]##link:JSF.htm#50638850_24946[See Configuration Impact on JSF Runtime]

[#50638881_pgfId-1021264]##Specify requirements for handling
_resource-handler_ elements within the application configuration
resources.

[#50638881_pgfId-1021265]##Specify requirements for handling
_faces-lifecycle-listener_ elements within the application configuration
resources.

[#50638881_pgfId-1021266]##Declare _exception-handler-factory_ .

[#50638881_pgfId-1021267]##Declare _discovery-handler-factory_ .

[#50638881_pgfId-1021268]##Declare _view-declaration-language-factory_ .

==== [#50638881_pgfId-1021272]##link:JSF.htm#50638850_38316[See Delegating Implementation Support]

[#50638881_pgfId-1021273]##List decoratable artifacts.

==== [#50638881_pgfId-1021277]##link:JSF.htm#50638850_91955[See Ordering of Artifacts]

[#50638881_pgfId-1021278]##Define the rules for ordering of
configuratino resources.

==== [#50638881_pgfId-1021281]##link:JSF.htm#50638850_57078[See Annotations that correspond to and may take the place of entries in the Application Configuration Resources]

[#50638881_pgfId-1021283]##New section detailing new annotations.

==== [#50638881_pgfId-1021287]##link:JSF.htm#50638859_12.2%20PhaseEvent[See PhaseEvent]

[#50638881_pgfId-1021288]##Statement should read: encapsulated by
FacesContext...

==== [#50638881_pgfId-1021292]##link:JSF.htm#50638885_74973[See Ajax Integration]

[#50638881_pgfId-1021293]##New chapter describing how Ajax will
integrate with JavaServer Faces.

==== [#50638881_pgfId-1021297]##link:JSF.htm#50638885_Ajax%20JavaScript%20Resource[See JavaScript Resource]

[#50638881_pgfId-1021298]##This section describes the standard Ajax
JavaScript resource that will be used in JavaServer Faces.

==== [#50638881_pgfId-1021302]##link:JSF.htm#50638885_Ajax%20Resource%20Loading[See JavaScript Resource Loading]

[#50638881_pgfId-1021303]##This section describes how the Ajax resource
will leverage the resource loading feature.

==== [#50638881_pgfId-1021307]##link:JSF.htm#50638885_The%20Annotation%20Approach[See The Annotation Approach]

[#50638881_pgfId-1021308]##This section mentions the use of the resource
annotation to specify that a component or renderer requires the Ajax
ressource.

==== [#50638881_pgfId-1021312]##link:JSF.htm#50638885_The%20Resource%20API%20Approach[See The Resource API Approach]

[#50638881_pgfId-1021313]##Component authors can also specify that a
custom component or renderer requires the Ajax resource by using the
resource APIs.

==== [#50638881_pgfId-1021317]##link:JSF.htm#50638885_The%20Page%20Declaration%20Language%20Approach[See The Page D eclaration Language Approach]

[#50638881_pgfId-1021318]##Page authors can make the Ajax resource
available through the standard resource tags.

==== [#50638881_pgfId-1021322]##link:JSF.htm#50638885_JavaScript%20Namespacing[See JavaScript Namespacing]

[#50638881_pgfId-1021323]##This section discusses the JavaScript
namespacing requirements for the Ajax resource to avoid collisions with
other JavaScript libraries.

==== [#50638881_pgfId-1021327]##link:JSF.htm#50638885_Ajax%20JavaScript%20API[See Ajax Interaction]

[#50638881_pgfId-1021328]##This section describes the JavaScript
functions that will be available to allow clients to perform Ajax
interactions with JavaServer Faces.

==== [#50638881_pgfId-1021332]##link:JSF.htm#50638885_Sending%20an%20Ajax%20Request[See Sending an Ajax Request]

[#50638881_pgfId-1021333]##This section describes the process of sending
an Ajax request to the server.

==== [#50638881_pgfId-1021337]##link:JSF.htm#50638885_Ajax%20Request%20Queueing[See Ajax Request Queueing]

[#50638881_pgfId-1021338]##Higher level requirements about queueing Ajax
requests before they are sent.

==== [#50638881_pgfId-1021342]##link:JSF.htm#50638885_Request%20Callback%20Function%20Specifics[See Request Callback Function]

[#50638881_pgfId-1021343]##Describes the functionality when a response
comes back from the server.

==== [#50638881_pgfId-1021347]##link:JSF.htm#50638885_Processing%20The%20Ajax%20Response[See Receiving The Ajax Response]

[#50638881_pgfId-1021348]##Describes the requirements of
javax.faces.Ajax.ajaxResponse - the function that gets called from the
Ajax request callback function.

==== [#50638881_pgfId-1021352]##link:JSF.htm#50638885_Monitoring%20Events%20and%20Trapping%20Errors[See Monitoring Events On The Client]

[#50638881_pgfId-1021353]##Describes the JavaScript functions used to
register event and error callback functions that will be notified when
events and errors occur.

==== [#50638881_pgfId-1021357]##link:JSF.htm#50638885_Monitoring%20Events%20For%20An%20Ajax%20Request[See Monitoring Events For An Ajax Request]

[#50638881_pgfId-1021358]##Details about specifying the “onevent”
attribute.

==== [#50638881_pgfId-1021362]##link:JSF.htm#50638885_Monitoring%20Events%20For%20All%20Ajax%20Requests[See Monitoring Events For All Ajax Requests]

[#50638881_pgfId-1021363]##Specifics about the jsf.ajax.addOnEvent
function.

==== [#50638881_pgfId-1021367]##link:JSF.htm#50638885_Sending%20Events[See Sending Events]

[#50638881_pgfId-1021368]##Details about sending client side events.

==== [#50638881_pgfId-1021372]##link:JSF.htm#50638885_Handling%20Errors%20On%20the%20Client[See Handling Errors On the Client]

[#50638881_pgfId-1021373]##Specifics about the JavaScript functions to
use for handling errors on the client.

==== [#50638881_pgfId-1021377]##link:JSF.htm#50638885_Handling%20Errors%20For%20An%20Ajax%20Request[See Handling Errors For An Ajax Request]

[#50638881_pgfId-1021378]##Details about specifying “onerror” attribute.

==== [#50638881_pgfId-1021382]##link:JSF.htm#50638885_Handling%20Errors%20For%20All%20Ajax%20Requests[See Handling Errors For All Ajax Requests]

[#50638881_pgfId-1021383]##Details about jsf.ajax.addOnError function.

==== [#50638881_pgfId-1021387]##link:JSF.htm#50638885_Signaling%20Errors[See Signaling Errors]

[#50638881_pgfId-1021388]##Specifics about signaling client side errors.

==== [#50638881_pgfId-1021392]##link:JSF.htm#50638885_Handling%20Errors%20On%20The%20Server[See Handling Errors On The Server]

[#50638881_pgfId-1021393]##Specifics about exception handling on the
server for Ajax requests.

==== [#50638881_pgfId-1021397]##link:JSF.htm#50638885_Partial%20View%20Traversal[See Partial View Traversal]

[#50638881_pgfId-1021398]##This section provides a summary of how Faces
can process one or more components in a view - know as partial
processing.

==== [#50638881_pgfId-1021402]##link:JSF.htm#50638885_Partial%20Traversal%20Strategy[See Partial Traversal Strategy]

[#50638881_pgfId-1021403]##This section provides a summary of how
frameworks can plug in strategies for performing partial view processing
and partial view rendering.

==== [#50638881_pgfId-1021407]##link:JSF.htm#50638885_Partial%20View%20Execute[See Partial View Processing]

[#50638881_pgfId-1021408]##This section describes how one or more
components can be processed in the “execute” portion of the request
processing lifecycle.

==== [#50638881_pgfId-1021412]##link:JSF.htm#50638885_Partial%20View%20Render[See Partial View Rendering]

[#50638881_pgfId-1021413]##This section describes how one or more
components can be processed in the “render” portion of the request
processing lifecycle.

==== [#50638881_pgfId-1021417]##link:JSF.htm#50638885_Sending%20The%20Response%20to%20The%20Client[See Sending The Response to The Client]

[#50638881_pgfId-1021418]##Describes the server side responsibilities
for preparing and sending the response markup back to the client.

==== [#50638881_pgfId-1021422]##link:JSF.htm#50638885_Writing%20The%20Partial%20Response[See Writing The Partial Response]

[#50638881_pgfId-1021423]##Describes the PartialResponseWriter
requirements.

==== [#50638881_pgfId-1021427]##link:JSF.htm#50638886_JavaScript%20API[See JavaScript API]

[#50638881_pgfId-1021428]##New Chapter - JavaScript API for JSF 2.0

==== [#50638881_pgfId-1021432]##link:JSF.htm#50638886_Collecting%20and%20Encoding%20View%20State[See Collecting and Encoding View State]

[#50638881_pgfId-1021433]##Describes the JavaScript function that can be
used to return encoded state for a given form.

==== [#50638881_pgfId-1021437]##link:JSF.htm#50638886_14.1.1%20Use%20Case[See Use Case]

[#50638881_pgfId-1021438]##Simple example of using the jsf.getViewState
function.

==== [#50638881_pgfId-1021442]##link:JSF.htm#50638886_Initiating%20an%20Ajax%20Request[See Initiating an Ajax Request]

[#50638881_pgfId-1021443]##Describes the JavaScript function used to
send Ajax requests.

==== [#50638881_pgfId-1021447]##link:JSF.htm#50638886_14.2.1%20Usage[See Usage]

[#50638881_pgfId-1021448]##jsf.ajax.request function syntax and
arguments.

==== [#50638881_pgfId-1021452]##link:JSF.htm#50638886_Default%20Values[See Default Values]

[#50638881_pgfId-1021453]##Default values for the “execute” and “render”
arguments.

==== [#50638881_pgfId-1021457]##link:JSF.htm#50638886_Request%20Sending%20Specifics[See Request Sending Specifics]

[#50638881_pgfId-1021458]##Implementation requirements for the
jsf.ajax.reqeust function.

==== [#50638881_pgfId-1021462]##link:JSF.htm#50638886_14.2.5%20Use%20Case[See Use Case]

[#50638881_pgfId-1021463]##Simple example of the request function.

==== [#50638881_pgfId-1021467]##link:JSF.htm#50638886_Processing%20The%20Ajax%20Response[See Determining An Application’s Project Stage]

[#50638881_pgfId-1021468]##This section summarizes the implementation
requirements for the jsf.ajax.response function.

==== [#50638881_pgfId-1021472]##link:JSF.htm#50638886_Registering%20Callback%20Functions[See Registering Callback Functions]

[#50638881_pgfId-1021473]##This section describes the functions that can
be used to register callback functions that will be notified when events
and errors occur.

==== [#50638881_pgfId-1021477]##link:JSF.htm#50638886_Request/Response%20Event%20Handling[See Request/Response Event Handling]

[#50638881_pgfId-1021478]##Describes the specifics of using the
JavaScript API to register event handling callback functions.

==== [#50638881_pgfId-1021482]##link:JSF.htm#50638886_14.4.1.1Use%20Case[See Use Case]

[#50638881_pgfId-1021483]##Simple example of jsf.ajax.addOnEvent
function.

==== [#50638881_pgfId-1021487]##link:JSF.htm#50638886_Error%20Handling[See Error Handling]

[#50638881_pgfId-1021488]##Describes the specifics of using the
JavaScript API to register error handling callback functions.

==== [#50638881_pgfId-1021492]##link:JSF.htm#50638886_14.4.2.1Use%20Case[See Use Case]

[#50638881_pgfId-1021493]##Simple example of jsf.ajax.addOnError
function.

==== [#50638881_pgfId-1021497]##link:JSF.htm#50638886_Determining%20An%20Application’s%20Project%20Stage[See Determining An Application’s Project Stage]

[#50638881_pgfId-1021498]##Describes the function used to determine an
application’s project stage.

==== [#50638881_pgfId-1021502]##link:JSF.htm#50638886_14.5.1Use%20Case[See Use Case]

[#50638881_pgfId-1021503]##Simple example of jsf.getProjectStage
function.

==== [#50638881_pgfId-1021507]##link:JSF.htm#50638886_64761[See Script Chaining]

[#50638881_pgfId-1021508]##Describes the jsf.util.chain function that
can be used to chain function calls.

==== [#50638881_pgfId-1021511]##Javadoc XML Schema section

[#50638881_pgfId-1021513]##Add the _resource-handler_ element.

[#50638881_pgfId-1021514]##Add the _faces-lifecycle-listener_ element
and its children.

==== [#50638881_pgfId-1021518]##link:JSF.htm#50638878_90193[See XML Schema Definition for Composite Components]

[#50638881_pgfId-1021519]##New section - the layout for the Ajax
response.

==== [#50638881_pgfId-1021520]##Standard HTML RenderKit specification

[#50638881_pgfId-1021521]##component-family: javax.faces.Graphic
renderer-type: javax.faces.Image

[#50638881_pgfId-1021522]##Spec for what to do if “name”, “library” or
“target” attributes are present

[#50638881_pgfId-1021523]##component-family: javax.faces.Output
renderer-type: javax.faces.Body

[#50638881_pgfId-1021524]##This is a new Renderer in the
standard-html-renderkit

[#50638881_pgfId-1021525]##component-family: javax.faces.Output
renderer-type: javax.faces.Head

[#50638881_pgfId-1021526]##This is a new Renderer in the
standard-html-renderkit

[#50638881_pgfId-1021527]##component-family: javax.faces.Output
renderer-type: javax.faces.resource.Script

[#50638881_pgfId-1021528]##This is a new Renderer in the
standard-html-renderkit

[#50638881_pgfId-1021529]##component-family: javax.faces.Output
renderer-type: javax.faces.resource.Stylesheet

[#50638881_pgfId-1021530]##This is a new Renderer in the
standard-html-renderkit

==== [#50638881_pgfId-1021531]##General Changes

[#50638881_pgfId-1021532]##The numbers in the text below refer to issue
numbers in the issue tracker found at
<https://javaserverfaces-spec-public.dev.java.net/servlets/ProjectIssues>.

[#50638881_pgfId-1021533]##100 - New methods on _RenderKit_ :
_getComponentFamilies()_ and _getRendererTypes()_ .

[#50638881_pgfId-1021534]##170 - Allow commandButton to have f:param
children.

[#50638881_pgfId-1021535]##175 - Non-normatively clarify that the value
of the "src" attribute will have the context-root prepended to it if the
value starts with "/".

[#50638881_pgfId-1021536]##199 - Spec updates to clarify commandLink.

[#50638881_pgfId-1021537]##201 - Clean up convertNumber locale attribute
to match with convertDateTime locale attribute.

[#50638881_pgfId-1021538]##226 - Require that SelectOneListBox and all
similar renderers set "" if no request parameter can be found for the
component instance.

[#50638881_pgfId-1021539]##228 - add selectedClass and unselectedClass
to selectManyCheckbox

[#50638881_pgfId-1021540]##232 - Make javax.faces.model.DataModel
implement Iterable.

[#50638881_pgfId-1021541]##259 - For selectOneRadio and
selectManyCheckbox, normatively require the "style" and "border"
elements to end up on the respective attributes on the rendered "table".

[#50638881_pgfId-1021542]##310 - Add context-param for setting the
default timezone of DateTimeConverter instances

[#50638881_pgfId-1021543]##311 - Make the documentation in the spec
prose document and the javadocs for the “first” property of UIData be
consistent. In both cases, the value returned is relative to “zero”, not
“one”.

[#50638881_pgfId-1021544]##317 - Make it so you if you try to do
setValue on a managedBean that is not yet instantiated, it gets
automatically instantiated first.

[#50638881_pgfId-1021545]##331 - add getPhaseListeners() to UIViewRoot.

[#50638881_pgfId-1021546]##361 - Section 3.1.5, fix missed ValueBinding
to ValueExpression change. __

=== [#50638881_pgfId-1020780]##

image:JSF-63.gif[image]

_Changes Between 1.1 and 1.2_

==== [#50638881_pgfId-1020018]##Unified Expression Language (EL)

[#50638881_pgfId-1020019]##Previous versions of the JavaServer Faces
included an innovative, EL tailored to the needs of Faces. The main
emphasis of this version of the Faces spec, and also the focus of the
JSP spec corresponding to it, is to take those innovations and expose
them to JSP page authors by creating a Unified EL that leverages the
combined power of the Faces and JSP ELs. The Faces EL would then be
deprecated, and the deprecated implementation would be written in terms
of the Unified EL to preserve backwards compatability.

===== [#50638881_pgfId-1020021]##[#50638881_16987]##Guide to Deprecated Methods Relating to the Unified EL and their Corresponding Replacements

[#50638881_pgfId-1020022]##The following classes and methods have been
deprecated:

[#50638881_pgfId-1020023]## _javax.faces.el_ . _EvaluationException_

[#50638881_pgfId-1020024]##replaced by: _javax.el.ELException_

[#50638881_pgfId-1020025]## _javax.faces.el_ . _MethodBinding_

[#50638881_pgfId-1020026]##replaced by: _javax.el.MethodExpression_

[#50638881_pgfId-1020027]## _javax.faces.el_ . _MethodNotFoundException_

[#50638881_pgfId-1020028]##replaced by:
_javax.el.MethodNotFoundException_

[#50638881_pgfId-1020029]## _javax.faces.el_ .
_PropertyNotFoundException_

[#50638881_pgfId-1020030]##replaced by:
_javax.el.PropertyNotFoundException_

[#50638881_pgfId-1020031]## _javax.faces.el_ . _PropertyResolver_

[#50638881_pgfId-1020032]##replaced by: _javax.el.ELResolver_

[#50638881_pgfId-1020033]## _javax.faces.el_ .
_ReferenceSyntaxException_

[#50638881_pgfId-1020034]##replaced by: _javax.el.ELException_

[#50638881_pgfId-1020035]## _javax.faces.el_ . _ValueBinding_

[#50638881_pgfId-1020036]##replaced by: _javax.el.ValueExpression_

[#50638881_pgfId-1020037]## _javax.faces.el_ . _VariableResolver_

[#50638881_pgfId-1020038]##replaced by: _javax.el.ELResolver_

[#50638881_pgfId-1020039]##
_javax.faces.application.Application.createComponent(ValueBinding
componentBinding, FacesContext context, String componentType)_

[#50638881_pgfId-1020040]##replaced by:
_javax.faces.application.Application.createComponent(ValueExpression
componentExpression, FacesContext context, String componentType)_

[#50638881_pgfId-1020041]##
_javax.faces.application.Application.createMethodBinding_

[#50638881_pgfId-1020042]##replaced by:
_javax.faces.application.Application.createMethodExpression_

[#50638881_pgfId-1020043]##
_javax.faces.application.Application.createValueBinding_

[#50638881_pgfId-1020044]##replaced by calling:
_javax.faces.application.Application.getExpressionFactory_ then
_ExpressionFactory.createValueExpression_

[#50638881_pgfId-1020045]##see Javadoc for
_javax.faces.application.Application.createValueBinding_

[#50638881_pgfId-1020046]##
_javax.faces.application.Application.getPropertyResolver_

[#50638881_pgfId-1020047]##replaced by:
_javax.faces.application.Application.getELResolver_

[#50638881_pgfId-1020048]##
_javax.faces.application.Application.setPropertyResolver_

[#50638881_pgfId-1020049]##see Javadoc for
_javax.faces.application.Application.setPropertyResolver_

[#50638881_pgfId-1020050]##
_javax.faces.application.Application.getVariableResolver_

[#50638881_pgfId-1020051]##replaced by:
_javax.faces.application.Application.getELResolver_

[#50638881_pgfId-1020052]##
_javax.faces.application.Application.setVariableResolver_

[#50638881_pgfId-1020053]##see Javadoc for
_javax.faces.application.Application.setVariableResolver_

[#50638881_pgfId-1020054]##
_javax.faces.component.ActionSource.getAction_

[#50638881_pgfId-1020055]##replaced by:
_javax.faces.component.ActionSource2.getActionExpression_

[#50638881_pgfId-1020056]##
_javax.faces.component.ActionSource.setAction_

[#50638881_pgfId-1020057]##replaced by:
_javax.faces.component.ActionSource2.setActionExpression_

[#50638881_pgfId-1020058]##
_javax.faces.component.ActionSource.getActionListener_

[#50638881_pgfId-1020059]##replaced by:
_javax.faces.component.ActionSource.getActionListeners_

[#50638881_pgfId-1020060]##see Javadoc for
_javax.faces.component.ActionSource.getActionListener_

[#50638881_pgfId-1020061]##
_javax.faces.component.ActionSource.setActionListener_

[#50638881_pgfId-1020062]##replaced by:
_javax.faces.component.ActionSource.addActionListener_

[#50638881_pgfId-1020063]##
_javax.faces.component.EditableValueHolder.getValidator_

[#50638881_pgfId-1020064]##replaced by:
_javax.faces.component.EditableValueHolder.getValidators_

[#50638881_pgfId-1020065]##see Javadoc for:
_javax.faces.component.EditableValueHolder.getValidator_

[#50638881_pgfId-1020066]##
_javax.faces.component.EditableValueHolder.setValidator_

[#50638881_pgfId-1020067]##replaced by:
_javax.faces.component.EditableValueHolder.addValidator_

[#50638881_pgfId-1020068]##see Javadoc for:
_javax.faces.component.EditableValueHolder.setValidator_

[#50638881_pgfId-1020069]##
_javax.faces.component.EditableValueHolder.getValueChangeListener_

[#50638881_pgfId-1020070]##replaced by:
_javax.faces.component.EditableValueHolder.getValueChangeListeners_

[#50638881_pgfId-1020071]##see Javadoc for:
_javax.faces.component.EditableValueHolder.getValueChangeListener_

[#50638881_pgfId-1020072]##
_javax.faces.component.EditableValueHolder.setValueChangeListener_

[#50638881_pgfId-1020073]##replaced by:
_javax.faces.component.EditableValueHolder.addValueChangeListener_

[#50638881_pgfId-1020074]##see Javadoc for:
_javax.faces.component.EditableValueHolder.setValueChangeListener_

[#50638881_pgfId-1020075]## _javax.faces.component.UICommand.getAction_

[#50638881_pgfId-1020076]##replaced by:
_javax.faces.component.UICommand.getActionExpression_

[#50638881_pgfId-1020077]## _javax.faces.component.UICommand.setAction_

[#50638881_pgfId-1020078]##replaced by:
_javax.faces.component.UICommand.setActionExpression_

[#50638881_pgfId-1020079]##
_javax.faces.component.UICommand.getActionListener_

[#50638881_pgfId-1020080]##replaced by:
_javax.faces.component.UICommand.getActionListeners_

[#50638881_pgfId-1020081]##see Javadoc for:
_javax.faces.component.UICommand.getActionListener_

[#50638881_pgfId-1020082]##
_javax.faces.component.UICommand.setActionListener_

[#50638881_pgfId-1020083]##replaced by:
_javax.faces.component.UICommand.addActionListener_

[#50638881_pgfId-1020084]##see Javadoc for:
_javax.faces.component.UICommand.setActionListener_

[#50638881_pgfId-1020085]##
_javax.faces.component.UIComponentBase.getValueBinding_

[#50638881_pgfId-1020086]##replaced by:
_javax.faces.component.UIComponentBase.getValueExpression_

[#50638881_pgfId-1020087]##
_javax.faces.component.UIComponentBase.setValueBinding_

[#50638881_pgfId-1020088]##replaced by:
_javax.faces.component.UIComponentBase.setValueExpression_

[#50638881_pgfId-1020089]##
_javax.faces.component.UIComponent.getValueBinding_

[#50638881_pgfId-1020090]##replaced by:
_javax.faces.component.UIComponent.getValueExpression_

[#50638881_pgfId-1020091]##
_javax.faces.component.UIComponent.setValueBinding_

[#50638881_pgfId-1020092]##replaced by:
_javax.faces.component.UIComponent.setValueExpression_

[#50638881_pgfId-1020093]##
_javax.faces.component.UIData.setValueBinding_

[#50638881_pgfId-1020094]##replaced by:
_javax.faces.component.UIData.setValueExpression_

[#50638881_pgfId-1020095]##
_javax.faces.component.UIGraphic.getValueBinding_

[#50638881_pgfId-1020096]##replaced by:
_javax.faces.component.UIGraphic.getValueExpression_

[#50638881_pgfId-1020097]##
_javax.faces.component.UIGraphic.setValueBinding_

[#50638881_pgfId-1020098]##replaced by:
_javax.faces.component.UIGraphic.setValueExpression_

[#50638881_pgfId-1020099]## _javax.faces.component.UIInput.getValidator_

[#50638881_pgfId-1020100]##replaced by:
_javax.faces.component.UIInput.getValidators_

[#50638881_pgfId-1020101]##see Javadoc for:
_javax.faces.component.UIInput.getValidator_

[#50638881_pgfId-1020102]## _javax.faces.component.UIInput.setValidator_

[#50638881_pgfId-1020103]##replaced by:
_javax.faces.component.UIInput.addValidator_

[#50638881_pgfId-1020104]##see Javadoc for:
_javax.faces.component.UIInput.setValidator_

[#50638881_pgfId-1020105]##
_javax.faces.component.UIInput.setValueChangeListener_

[#50638881_pgfId-1020106]##replaced by:
_javax.faces.component.UIInput.addValueChangeListener_

[#50638881_pgfId-1020107]##see Javadoc for:
_javax.faces.component.UIInput.setValueChangeListener_

[#50638881_pgfId-1020108]##
_javax.faces.component.UISelectBoolean.getValueBinding_

[#50638881_pgfId-1020109]##replaced by:
_javax.faces.component.UISelectBoolean.getValueExpression_

[#50638881_pgfId-1020110]##
_javax.faces.component.UISelectBoolean.setValueBinding_

[#50638881_pgfId-1020111]##replaced by:
_javax.faces.component.UISelectBoolean.setValueExpression_

[#50638881_pgfId-1020112]##
_javax.faces.component.UISelectMany.getValueBinding_

[#50638881_pgfId-1020113]##replaced by:
_javax.faces.component.UISelectMany.getValueExpression_

[#50638881_pgfId-1020114]##
_javax.faces.component.UISelectMany.setValueBinding_

[#50638881_pgfId-1020115]##replaced by:
_javax.faces.component.UISelectMany.setValueExpression_

[#50638881_pgfId-1020116]##New Methods not replacing a Deprecated
methods:

[#50638881_pgfId-1020117]##
_javax.faces.component.UIViewRoot.getBeforePhaseListener_

[#50638881_pgfId-1020118]##
_javax.faces.component.UIViewRoot.setBeforePhaseListener_

[#50638881_pgfId-1020119]##
_javax.faces.component.UIViewRoot.getAfterPhaseListener_

[#50638881_pgfId-1020120]##
_javax.faces.component.UIViewRoot.setAfterPhaseListener_

[#50638881_pgfId-1020121]##Guide to Deprecated Methods Relating to State
Management and their Corresponding Replacements

[#50638881_pgfId-1020122]##The following classes and methods have been
deprecated:

[#50638881_pgfId-1020123]##
_javax.faces.application.StateManager.SerializedView_

[#50638881_pgfId-1020124]## replaced by _java.lang.Object_ that
implements _java.io.Serializable_

[#50638881_pgfId-1020125]##
_javax.faces.application.StateManager.saveSerializedView_

[#50638881_pgfId-1020126]## replaced by
_javax.faces.application.StateManager.saveView_

[#50638881_pgfId-1020127]##
_javax.faces.application.StateManager.getTreeStructureToSave_

[#50638881_pgfId-1020128]##The separation between tree structure and
component state is now a recommended implementation detail.

[#50638881_pgfId-1020129]##
_javax.faces.application.StateManager.getComponentStateToSave_

[#50638881_pgfId-1020130]##The separation between tree structure and
component state is now a recommended implementation detail.

[#50638881_pgfId-1020131]##
_javax.faces.application.StateManager.writeState_ that takes a
_SerializedView_

[#50638881_pgfId-1020132]## replaced by
_javax.faces.application.StateManager.writeState_ that takes a
_java.lang.Object_ that implements _Serializable_ .

[#50638881_pgfId-1020133]##
_javax.faces.application.StateManager.restoreTreeStructure_

[#50638881_pgfId-1020134]##The separation between tree structure and
component state is now a recommended implementation detail.

[#50638881_pgfId-1020135]##
_javax.faces.application.StateManager.restoreComponentState_

[#50638881_pgfId-1020136]##The separation between tree structure and
component state is now a recommended implementation detail.

[#50638881_pgfId-1020137]##
_javax.faces.render.ResponseStateManager.writeState_ that takes a
_javax.faces.application.StateManager.SerializedView_

[#50638881_pgfId-1020138]##Replaced by
_javax.faces.render.ResponseStateManager.writeState_ that takes a
_java.lang.Object_ that implements _java.io.Serializable._

[#50638881_pgfId-1020139]##
_javax.faces.render.ResponseStateManager.getTreeStructureToRestore_

[#50638881_pgfId-1020140]##The separation between tree structure and
component state is now a recommended implementation detail. Semantically
has been replaced by _javax.faces.render.ResponseStateManager.getState_
.

[#50638881_pgfId-1020141]##
_javax.faces.render.ResponseStateManager.getComponentStateToRestore_

[#50638881_pgfId-1020142]##The separation between tree structure and
component state is now a recommended implementation detail. Semantically
has been replaced by _javax.faces.render.ResponseStateManager.getState_
.

[#50638881_pgfId-1020143]##JavaServer Faces 1.2 Backwards Compatibility

[#50638881_pgfId-1020144]##Faces 1.2 is backwards compatible with Faces
1.1. This means that a web-application that was developed to run with
Faces 1.1 won’t require any modification when run with Faces 1.2 except
in the cases described in the following section.

[#50638881_pgfId-1020145]##Note that Faces is a part of the Java EE
platform as of Faces 1.2. A web application therefore does not need to
bundle a Faces implementation anymore when it runs on a web container
that is Java EE technology compliant. Should a Faces implementation be
bundled with a web-application, it will simply be ignored as the Faces
implementation provided by the platform always takes precedence.

[#50638881_pgfId-1020146]##The JSP aspects of backwards compatability
are described in the JSP specification in the Preface, in the section
titled “Backwards Compatability with JSP 2.0”.

[#50638881_pgfId-1020147]##Breakages in Backwards Compatability

{empty}[#50638881_pgfId-1020148]##In Faces 1.1 you could override
implicit objects in your custom resolvers. For example, for the
following expression: _$\{param[‘x’]}_ you could change the meaning of
_param_ in your custom _VariableResolver._ In Faces 1. _2,_ implicit
objects are always recognized - so _param_ will always mean a map of
parameters. See link:JSF.htm#50638862_57834[See The Managed Bean
Facility]

[#50638881_pgfId-1020152]##In Faces 1.1, any custom resolvers that do
not honor the “decorator” pattern - that is, delegate to their parent
resolver, will still work in Faces 1.2 with the following clarification:
those resolvers would operate independently with regards to other
resolvers in the chain. See link:JSF.htm#50638862_13162[See Faces
ELResolver for JSP Pages].

[#50638881_pgfId-1020156]##In Faces 1.1 it was valid to call
_setVariableResolver()_ or _setPropertyResolver()_ on the _Application_
at any point in the application’s lifetime. This allowed for the
application to be in an indeterminate state. In Faces 1.2, neither of
these methods may be called after the application has served any
requests.

[#50638881_pgfId-1020692]##In Faces 1.1, if a view couldn’t be restored
due to session expiration, we’d create a new one and go to render
response. In 1.2, this is not the case. We now throw a
_ViewExpiredException_ . 1.1-based applications may rely on the old
behavior to forward to a login page when a session expired. 1.2
circumvents this.

==== [#50638881_pgfId-1020157]##General changes

[#50638881_pgfId-1020158]##The numbers in the text below refer to issue
numbers in the issue tracker found at
<https://javaserverfaces-spec-public.dev.java.net/servlets/ProjectIssues>.

[#50638881_pgfId-1020159]##2 - Clarify that for client side state
saving, the state should be encrypted for security.

[#50638881_pgfId-1020160]##3 - Clarify the specification with respect to
constraint violations for tags in the Core Tag Library.

[#50638881_pgfId-1020161]##4 - Added _headerClass_ and _footerClass_
attributes at the “h:column” level. Please see
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation]
for more details.

[#50638881_pgfId-1020165]##5 - Clarified the use of a string literal for
the “action” attribute on ActionSource components.

[#50638881_pgfId-1020166]##6 - Introduced a new optional “label”
attribute for input components that will provide an association between
a component, and the message that the component (indirectly) produced.
Please refer to link:JSF.htm#50638855_61767[See Standard HTML RenderKit
Implementation] and link:JSF.htm#50638877_24181[See Localized
Application Messages] for more details.

[#50638881_pgfId-1020173]##8 - Made UViewRoot a source of PhaseEvent(s)
for all phases of the request processing lifecycle except RestoreView.
Provided additional “before” and “after” phase listener attributes for
the <f:view> tag. Please see link:JSF.htm#50638853_65588[See UIViewRoot]
for more details.

[#50638881_pgfId-1020177]##9 - Clarified the behavior of PhaseListener
implementations in the following way: they must guarantee that if
“beforePhase()” is called, then “afterPhase()” must also be called,
regardless of any thrown exceptions. Please see
link:JSF.htm#50638859_16974[See PhaseListener] for more specifics.

[#50638881_pgfId-1020181]##11 - Provide a unique window identifier (in
addition to the “viewid”) to accomodate applications that have mutiple
instances of the same view, but perhaps in different browser windows or
frames.

[#50638881_pgfId-1020182]##13 - Specified “by type” converter
registration for BigDecimal and BigInteger.

[#50638881_pgfId-1020183]##15 - Enhanced the usage of the “Decorator
Pattern” for ViewHandler, StateManager and ResponseWriter classes by
providing abstract wrapper classes to make it easier to override a
subset of the total methods for those classes. Please see
link:JSF.htm#50638850_38316[See Delegating Implementation Support] for
more details.

[#50638881_pgfId-1020187]##16 - Provided additional I18n attributes “dir
and “lang” for the tags: <h:outputText>, <h:outputFormat>, <h:messages>,
<h:message>. Please see link:JSF.htm#50638855_61767[See Standard HTML
RenderKit Implementation] for descriptions of these components.

[#50638881_pgfId-1020191]##17 - Introduced a new optional “layout”
attribute on the “PanelGroup” component that controls the rendering of
either a “div” or “span” HTML element. Please see
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation]
for more details.

[#50638881_pgfId-1020195]##18 - When a resource lookup is done on the
java.util.Map (loaded from <f:loadBundle>) using a key, and the key is
not found in the Map, return the literal string ???KEY??? where KEY is
the key being looked up in the Map (instead of throwing a
MissingResourceException). Throw a JspException if the named bundle
identified by <f:loadBundle> does not exist. Please see
_link:JSF.htm#50638860_73157[See <f:loadBundle>]_ .

[#50638881_pgfId-1020199]##20 - Specify that the event queue should be
cleared after each phase (except RestoreViewPhase and RenderResponse) if
“responseComplete” or “renderResponse” has been set on the FacesContext.

[#50638881_pgfId-1020200]##21 - Provided an additional “binding”
attribute for the core Converter, Listener and Validator tags that would
be used as a ValueExpression to alternatively create the Converter,
Listener or Validator instance. Please see
link:JSF.htm#50638860_17251[See JSF Core Tag Library] for more details.

[#50638881_pgfId-1020204]##27 - <h:messages> now renders HTML list
elements (“<ul>”,”<li>”) if the “layout” attribute is “list” or the
“layout” attribute is not specified. If the “layout” is “table”, an HTML
“table” element is rendered instead of an outer “span”. Please see
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation]
for more details.

[#50638881_pgfId-1020208]##29 - Allow the use of user-defined “onclick”
Javascript on CommandLink.

[#50638881_pgfId-1020209]##30 - Make the “commandButton” “image”
attribute render the same as the “graphicImage” “img” attribute for
consistency. Please see link:JSF.htm#50638855_61767[See Standard HTML
RenderKit Implementation] for more information.

[#50638881_pgfId-1020213]##35 - Provided a new facet for DataTable
Renderer that allows the rendering of a table “caption” element
immediately following the “table” element. Also provided style sheet
attributes for this new element. Please see
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation]
for a descrption of this component.

[#50638881_pgfId-1020217]##43 - Migrated over to using XML Schema (from
DTD) for configuation file validation. Please see the schema section of
the Javadocs.

[#50638881_pgfId-1020221]##45 - Avoided concurrent read issues by using
a java.util.HashMap instead of java.util.WeakHashMap for a component’s
Property Descriptor Map. This also fixes the performance problem as
identified in the forum. Please refer to the Property Descriptor methods
and the constructor in _javax.faces.component.UIComponentBase._

[#50638881_pgfId-1020222]##47 - Introduced a mechanism to detect if a
request is a postback.

[#50638881_pgfId-1020223]##48 - Specify the algorithm used for client id
generation as well as provide a way to allow the page author to specify
exactly what the client Id should be, and preventing Faces from altering
it.

[#50638881_pgfId-1020224]##50 - Allow an application to specify multiple
render kits by introducing an optional “renderKitId” attribute on
“<f:view>”. It is no longer required to write a custom ViewHandler to
incorporate a different render kit. Please refer to
link:JSF.htm#50638855_88992[See ResponseStateManager] and
link:JSF.htm#50638860_54501[See <f:view>] for more details.

[#50638881_pgfId-1020231]##51 - Clarify the specification with respect
to “Application Startup Behavior”. Allow implementations to check for
the presence of a servlet-class definition in a web application
deployment descriptor as a means to abort the configuration and save
startup time.

[#50638881_pgfId-1020232]##54 - Added new extension elements to the
Faces XML schema. Please see the XML schema section of the Javadocs.

[#50638881_pgfId-1020236]##55 - For postback requests, in the
“RestoreViewPhase”, during _ValueExpression_ examination for each
component in the component tree, specify that calling the _setValue()_
method on each _ValueExpression_ , should be done in a “parent-first”
fashion, calling the _setValue()_ method and then traversing the
children.

[#50638881_pgfId-1020237]##58 - Enabed “protected” access to internal
“DataModel” in UIData.

[#50638881_pgfId-1020238]##59 - Avoid EL expression evaluation for
“value” attribute on “AttributeTag”. “AttributeTag” now passes the
expression to UIComponent for evaluation.

[#50638881_pgfId-1020241]##65 - Added standard converter messages.
Please see link:JSF.htm#50638877_24181[See Localized Application
Messages] for more details.

[#50638881_pgfId-1020243]##66 - Specified that “FormRenderer” must
render the “name” attribute with the same value as the “id” attribute.
Please see link:JSF.htm#50638855_61767[See Standard HTML RenderKit
Implementation] for more details.

[#50638881_pgfId-1020247]##67 - Allow the resetting of an input
component’s value by introducing a _resetValue()_ method on _UIInput._

[#50638881_pgfId-1020248]##68 - Specify that the component tree may be
manipulated throughout the request processing lifecycle, except during
render. Please see link:JSF.htm#50638877_70838[See Render Response] for
more details.

[#50638881_pgfId-1020252]##69 - Permit the passing of _a null_ value to
_SelectItem.setValue()._

[#50638881_pgfId-1020253]##72 - Improve XHTML compliance by rendering
both “lang” and “xml:lang” attributes.

[#50638881_pgfId-1020254]##73 - Added a new FacesException -
“javax.faces.application.ViewExpiredException”. Specified that
implementations must throw this exception when an attempt to restore a
view results in failure on postback. Please see
link:JSF.htm#50638877_45193[See Restore View] for more details.

[#50638881_pgfId-1020258]##74 - Added “disabled” property to
“outputLink” and “commandLink”. Please see
link:JSF.htm#50638855_61767[See Standard HTML RenderKit Implementation]
for more details.

[#50638881_pgfId-1020262]##75 - Added “getRequestContentType” and
“getResponseContentType” to ExternalContext.

[#50638881_pgfId-1020263]##78 - Added a more “user-friendly” default
error message for UIInput “update model”. Please see
link:JSF.htm#50638877_24181[See Localized Application Messages] for more
details.

[#50638881_pgfId-1020267]##80 - Specify that the JSF Core Tag Library
must not contain any tags that cause JavaScript to be rendered to the
client.

[#50638881_pgfId-1020268]##81 - Enable the message displayed for
“required” validation, conversion, and validation to be overridden by
the page author (JSP or non-JSP)

[#50638881_pgfId-1020269]##82 - Added new feature, the ability to
resolve ResourceBundles via the EL without the use of the <f:loadBundle>
tag.

[#50638881_pgfId-1020270]##84 - Added _rendered_ attribute to the core
_f:verbatim_ tag. Please see link:JSF.htm#50638860_17251[See JSF Core
Tag Library] for more details.

[#50638881_pgfId-1020274]##85 - Add new tag:
f:setPropertyActionListener. Useful for pushing values into managed
beans without allowing modification of the value.

[#50638881_pgfId-1020275]##86 - Specified that “OutputLinkRenderer” must
render the “name” attribute with the same value as the “id” attribute.
Please see link:JSF.htm#50638855_61767[See Standard HTML RenderKit
Implementation] for more details.

[#50638881_pgfId-1020279]##87 - Modified specification for the
_setVariableResolver()_ and _setPropertyResolver()_ methods on
_Application_ to state that they may not be called after the application
has served any requests.

[#50638881_pgfId-1020280]##93 - Added “escape” flag indicating the text
of UISelectItem should be escaped when rendering.

[#50638881_pgfId-1020281]##95 - Allow multiple instances of
_FacesServlet_ in a single webapp, mapped with different URI mappings,
to use different implementations of _Lifecycle_ by allowing the
lifecycle-id to be specified as an _init-param_ in addition to the
existing way of specifying it as a _context-param_ .

[#50638881_pgfId-1020282]##98 - Specified that
“SelectManyCheckboxListRenderer: and “RadioRenderer” must render the
“label” element after the “input element for each “SelectItem. Specified
that the “label” element must refer to the “input” element using the
“for” attribute. Please see link:JSF.htm#50638855_61767[See Standard
HTML RenderKit Implementation] for more details.

[#50638881_pgfId-1020286]##99 - Specified Java EE 5 Generics usage where
applicable.

[#50638881_pgfId-1020287]##105 - Specified that for commandButton
rendering, the “image” attribute value must not be escaped. Specified
that for graphicImage rendering, the “src” attribute value must not be
escaped.

[#50638881_pgfId-1020288]##108 - Specified that JSF implementations that
are part of a Java EE technology-compliant implementation are required
to validate the application resource file against the XML schema for
structural correctness. Also specified that validation is recommended,
but not required for JSF implementatons that are not part of a Java EE
technology compliant implementation. Please refer to
link:JSF.htm#50638850_57048[See Application Startup Behavior] for more
details.

[#50638881_pgfId-1020292]##111 - Specified that a component must allow
child components to be added to and removed from the child list of the
current component, even though the child component returns null from
getParent().

[#50638881_pgfId-1020293]##118 - Specified that an implementation of Map
returned from ExternalContext.getSessionMap implement a “clear” method
that calls “removeAttribute” on each attribute in the Servlet or Portlet
session.

[#50638881_pgfId-1020294]##119 - Specified that implementations running
in a JSR-250 compliant container have their managed bean methods
annotated with @PostConstruct be called after the object is
instantiated, and after injection is performed, but before the bean is
placed into scope. Specified that methods annotated with @PreDestroy be
called when the scope for the bean is ending.

[#50638881_pgfId-1020295]##120 - Specified in the renderkit docs that
commandButton rendering can generate javascript for “onclick” attribute.

[#50638881_pgfId-1020296]##122 - Clarified renderkit docs with respect
to what gets rendered for disabled command link attributes.

[#50638881_pgfId-1020297]##123 - Clarified renderkit docs with respect
to dataTable attribute rendering.

[#50638881_pgfId-1020298]##124 - Clarified renderkit docs with repsect
to graphicImage “alt” attribute.

[#50638881_pgfId-1020299]##131 - Specified that a compliant
implementation must allow the registration of a converter for class
java.lang.String and java.lang.String.TYPE that will be used to convert
values for these types.

[#50638881_pgfId-1020300]##133 - Removed the incorrect statement: “"It
is the callers responsibility to ensure that setViewId() is called on
the returned view, passing the same viewId value." pertaining to
ViewHandler.createView()

[#50638881_pgfId-1020301]##134 - Fixed backwards compatability issues.

[#50638881_pgfId-1020302]##135 - Support Java EE 5 enums as valid types/

[#50638881_pgfId-1020303]##138 - Change the required return type for
action methods to be Object instead of String. This allows the usage of
Enums for the return type of action methods, as long as the toString()
method of the enum matches the expected value in the application
configuration resources.

[#50638881_pgfId-1020304]##145 - Define new method on UIComponent,
invokeOnComponent(). This will find a component in the tree by clientId
and invoke a user specified callback on it. Please see
link:JSF.htm#50638851_85169[See Component Tree Navigation] and
link:JSF.htm#50638853_31221[See Methods] [of UIData] for more details.

[#50638881_pgfId-1020311]##jsf-ri 127 - Specify that FacesContext
methods getClientIdsWithMessages( ) and getMessages( ) must be
implemented using order-preserving structures so the items in the
iterator are returned in the order they were added with
addMessage().Spec document changes

[#50638881_pgfId-1020312]##147 - Clarified grammer with respect to
component id.

[#50638881_pgfId-1020313]##151 - Specified standard converter for Enums

[#50638881_pgfId-1020314]##152 - Specified EL coercion usage in API
javadocs UISelectOne/UISelectMany (when items are compared in
validation) and standard html renderkit docs during encoding of select
components.

[#50638881_pgfId-1020315]##154 - Fixed FacesTag “name” attribute
discrepency - made it a String (was ValueExpression).

[#50638881_pgfId-1020316]##155 - Specified “columnClasses”, “rowClasses”
descriptions for panelGrid in renderkit docs.

[#50638881_pgfId-1020317]##160 - Added and specified
ResponseWriter.writeText method that takes a UIComponent argument.

[#50638881_pgfId-1020318]##The VDLDocs for the h: tag library are now a
normative part of the spec.

[#50638881_pgfId-1020319]##Following is a section by section breakdown
of the main changes since the last release of this document. This work
was done mainly to support changes in tree creation and content
interweaving for JSP based faces applications, as well as for fixing the
following issues from the above list: 2 3 4 5 6 8 9 11 13 15 16 17 18 20
21 27 29 30 35 43 45 47 48 50 51 53 54 55 58 59 65 66 67 68 69 72 73 74
75 78 80 81 82 84 85 86 93 95 98 99 105 108 111 118 119 120 122 123 124
131 133 134 135 138 145 147 151 152 154 155 160.

[#50638881_pgfId-1020320]##Preface

[#50638881_pgfId-1020321]##Added new section: Guide to Deprecated
Methods Relating to State Management and their Corresponding
Replacements.

{empty}[#50638881_pgfId-1020325]##link:JSF.htm#50638877_45193[See
Restore View]

[#50638881_pgfId-1020326]##Do per-component actions in a "parent-first"
fashion, calling the setValue() method and *then* traversing the
children.

[#50638881_pgfId-1020327]##Describe the new responsibilities of this
phase with respect to the new StateSaving changes.

[#50638881_pgfId-1020328]##Describe when ViewHandler.initView() is to be
called.

[#50638881_pgfId-1020329]##Describe how the
ViewHandler.calculateRenderKitId() and ResponseStateManager.isPostback()
method are to be used.

[#50638881_pgfId-1020330]##Specify that implementations must throw
_javax.faces.application.ViewExpiredException_ when an attempt to
restore a view results in failure on postback.

==== [#50638881_pgfId-1020334]##link:JSF.htm#50638877_70838[See Render Response]

[#50638881_pgfId-1020335]##Specify that the component tree may be
manipulated throughout the request processing lifecycle, except during
render.

{empty}[#50638881_pgfId-1020339]##link:JSF.htm#50638877_34789[See Create
A New View]

[#50638881_pgfId-1020340]##Document that multiple renderkits are
supported.

{empty}[#50638881_pgfId-1020344]##link:JSF.htm#50638877_24181[See
Localized Application Messages]

[#50638881_pgfId-1020345]##Added updates to standard messages; Also
mentioned new parameter substitution token for the generic input
component attribute "label".

{empty}[#50638881_pgfId-1020349]##link:JSF.htm#50638851_84394[See
Generic Attributes]

[#50638881_pgfId-1020350]##Completely specify how attribute/property
transparency works.

{empty}[#50638881_pgfId-1020354]##link:JSF.htm#50638851_49266[See
Component Specialization Methods]

[#50638881_pgfId-1020355]##Add new method, encodeAll(), which is now the
preferred method for developers to call to render a child or facet().

{empty}[#50638881_pgfId-1020359]##link:JSF.htm#50638853_96109[See
UIForm]

[#50638881_pgfId-1020360]##Document the new _prependId_ property and
_getContainerClientId()_ method.

{empty}[#50638881_pgfId-1020364]##UIData link:JSF.htm#50638853_22236[See
Properties]

[#50638881_pgfId-1020365]##Added _protected_ property for _DataModel_ .

{empty}[#50638881_pgfId-1020369]##UIInput
link:JSF.htm#50638853_33254[See UIInput]

[#50638881_pgfId-1020370]##Document the behavior of the
_requiredMessage_ , _converterMessage_ and _validatorMessage_
properties.

{empty}[#50638881_pgfId-1020374]##UIInput
link:JSF.htm#50638853_81775[See Methods]

[#50638881_pgfId-1020375]##Add mention of resetValue() to the "Methods"
section for UIInput.

{empty}[#50638881_pgfId-1020379]##link:JSF.htm#50638853_65588[See
UIViewRoot]

[#50638881_pgfId-1020380]##Change callsite for saveSerializedView and
writeState().

[#50638881_pgfId-1020381]##Change to clear the event queue after each
phase if skipping to rendering response.

[#50638881_pgfId-1020382]##JSP tag no longer deals with state saving.

[#50638881_pgfId-1020383]##Section 5.1.2 and 5.1.3 “ValueExpression
Syntax” and “ValueExpression Semantics”

[#50638881_pgfId-1020384]##Removed and made reference to EL spec.

{empty}[#50638881_pgfId-1020388]##link:JSF.htm#50638862_82897[See
MethodExpression Syntax and Semantics]

[#50638881_pgfId-1020389]##Make reference to EL spec.

{empty}[#50638881_pgfId-1020392]##link:JSF.htm#50638862_25885[See
Managed Bean Annotations]

[#50638881_pgfId-1020394]##This new section covers the modifications
necessary to allow managed beans to be the target of container managed
dependency injection using the _@Resource_ and _@EJB_ annotations.

[#50638881_pgfId-1020395]##Added section 5.4.1 that specifies how the
_@PostConstruct_ and _@PreDestroy_ annotations must be handled.

{empty}[#50638881_pgfId-1020399]##link:JSF.htm#50638862_46255[See
ExpressionFactory]

[#50638881_pgfId-1020400]##Update signature of createValueExpresion()
and createMethodExpression() to include ELContext as the first argument.

{empty}[#50638881_pgfId-1020404]##link:JSF.htm#50638862_48536[See
ResourceBundle ELResolver for JSP Pages]

[#50638881_pgfId-1020405]##This resolver, when coupled with the
_javax.el.ResourceBundleELResolver_ , allows the resolution of
ResourceBundles and entries therein via the EL. See also
link:JSF.htm#50638862_73834[See el.ResourceBundleELResolver] and
link:JSF.htm#50638862_10282[See ResourceBundle ELResolver for
Programmatic Access].

[#50638881_pgfId-1020415]##link:JSF.htm#50638861_26354[See Overview]
ViewHandler

[#50638881_pgfId-1020416]##Document new methods initView() and
calculateCharacterEncoding();

{empty}[#50638881_pgfId-1020420]##link:JSF.htm#50638861_36790[See
Default ViewHandler Implementation]

[#50638881_pgfId-1020421]##modify createView() to reflect current
reality:

[#50638881_pgfId-1020422]##Do the viewId discovery algorithm formerly in
restoreView().

[#50638881_pgfId-1020423]##Redirect to the context root if no viewId can
be discerned.

[#50638881_pgfId-1020424]##Do the existing processing.

[#50638881_pgfId-1020425]##modify restoreView() to reflect current
reality:

[#50638881_pgfId-1020426]##Do the existing processing.

[#50638881_pgfId-1020427]##Do the viewId discovery algorithm now in
createView().

[#50638881_pgfId-1020428]##If no viewId can be discovered, return null.

[#50638881_pgfId-1020429]##Always call StateManager.restoreView().

[#50638881_pgfId-1020430]##no longer set the character encoding, this
has moved out to the Restore View phase implementation

[#50638881_pgfId-1020431]##change callsite for saveSerializedView() to
be saveView().

[#50638881_pgfId-1020432]##added ViewHandler.calculateRenderKitId
responsibility of returning the request parameter named
ResponseStateManager.RENDER_KIT_ID_PARAM if not null.

{empty}[#50638881_pgfId-1020436]##State Saving
link:JSF.htm#50638861_71617[See Overview]

[#50638881_pgfId-1020437]##Soften the wording about the separation
between tree structure and component state, say it's only a
recommendation to keep these two separate.

{empty}[#50638881_pgfId-1020441]##link:JSF.htm#50638861_53238[See State
Saving Alternatives and Implications]

[#50638881_pgfId-1020442]##Modified client state saving text to add "It
is advisable that this information be encrypted and tamper evident,
since it is being sent down to the client, where it may persist for some
time."

[#50638881_pgfId-1020443]##Modified server state saving text to add
"Implementations that wish to enable their saved state to fail over to a
different container instance must keep this in mind when implementing
their server side state saving strategy. The default implementation
Serializes the view in both the client and server modes. In the server
mode, this serialized view is stored in the session and a unique key to
retrieve the view is sent down to the client. By storing the serialized
view in the session, failover may happen using the usual mechanisms
provided by the container."

[#50638881_pgfId-1020444]##The values of all component attributes and
properties must implement _Serializable_ .

[#50638881_pgfId-1020445]##New section 7.7.6 StateManager in the
"Deprecated APIs" section (7.7)

[#50638881_pgfId-1020446]##New section 7.7.7 ResponseStateManager in the
"Deprecated APIs" section (7.7)

{empty}[#50638881_pgfId-1020450]##link:JSF.htm#50638855_88992[See
ResponseStateManager]

[#50638881_pgfId-1020451]##Describe the non-deprecated methods.

[#50638881_pgfId-1020452]##Added verbiage about ResponseStateManager
implementation's responsibility of writing out render kit identifier.

[#50638881_pgfId-1020453]##Describe the isPostback() method.

{empty}[#50638881_pgfId-1020457]##link:JSF.htm#50638860_51115[See
UIComponent Custom Actions]

[#50638881_pgfId-1020458]##Specify that _id_ is now _rtexprvalue_ _true_
.

{empty}[#50638881_pgfId-1020461]##link:JSF.htm#50638860_13406[See
Interoperability with JSP Template Text and Other Tag Libraries]

[#50638881_pgfId-1020463]##Changes in the current version of the EL
allow Faces applications to use JSTL _<c:forEach>_ tags with Faces
components as long as the _items_ attribute points to a deferred EL
expression (ie, a _#\{}_ expression, as opposed to an immediate _$\{}_
expression).

[#50638881_pgfId-1020464]##Also, remove the requirements that
_<f:verbatim>_ be used, and that components added to the tree
programmatically will only be rendered if they are the children of a
_rendersChildren==true_ component

{empty}[#50638881_pgfId-1020468]##link:JSF.htm#50638860_43229[See
Integration with JSP]

[#50638881_pgfId-1020469]##Changes to account for moving from
_UIComponentTag_ / _UIComponentBodyTag_ to _UIComponentELTag._

{empty}[#50638881_pgfId-1020473]##link:JSF.htm#50638860_32212[See Faces
1.0 and 1.1 Taglib migration story]

[#50638881_pgfId-1020474]##Describe the new _jsp-version_ TLD based
migration story.

{empty}[#50638881_pgfId-1020478]##link:JSF.htm#50638860_17251[See JSF
Core Tag Library]

[#50638881_pgfId-1020479]##For listener/converter/validator tags,
clarified that exceptions would be rethrown as JspException. Also specfy
JspException should be thrown if certain constraints are not met.

[#50638881_pgfId-1020480]##Specify that tags may have non-deferred
expressions as the value of their _id_ attribute.

[#50638881_pgfId-1020481]##Added _binding_ attribute to
listener/converter/validator tags.

[#50638881_pgfId-1020482]##Added _rendered_ attribute to verbatim tag.

[#50638881_pgfId-1020483]##Specify that none of the tags in the JSF Core
Tag Library may cause JavaScript to be rendered to the client.

{empty}[#50638881_pgfId-1020487]##link:JSF.htm#50638860_79967[See
<f:attribute>]

[#50638881_pgfId-1020488]##Specify that the argument value must be
interrogated to see if it isLiteralText(). If so, store in the
attributes set, If not, store in the ValueExpression set.

{empty}[#50638881_pgfId-1020492]##link:JSF.htm#50638860_21180[See
<f:setPropertyActionListener>]

[#50638881_pgfId-1020493]##New Section, document this new tag.

{empty}[#50638881_pgfId-1020497]##link:JSF.htm#50638860_54501[See
<f:view>]

[#50638881_pgfId-1020498]##Added renderKitId attribute description to
f:view;

{empty}[#50638881_pgfId-1020502]##link:JSF.htm#50638860_66883[See
Standard HTML RenderKit Tag Library]

[#50638881_pgfId-1020503]##Specify how to handle action attributes that
are string literals.

[#50638881_pgfId-1020504]##Call out to VDLDocs for parts of the
requirements. VDLDocs are now normative.

{empty}[#50638881_pgfId-1020508]##link:JSF.htm#50638850_28995[See
FacesServlet]

[#50638881_pgfId-1020509]##Describe how the _init-param_ then the
_context-param_ must be consulted for the lifecycleID for this
_FacesServlet_ instance.

{empty}[#50638881_pgfId-1020513]##link:JSF.htm#50638850_60389[See
Deprecated APIs in the webapp package]

[#50638881_pgfId-1020514]##New section describing deprecated APIs.
Previous section at this address moved to next section number.

{empty}[#50638881_pgfId-1020518]##link:JSF.htm#50638850_57048[See
Application Startup Behavior]

[#50638881_pgfId-1020519]##Implementations may check for the presence of
a servlet-class definition of class javax.faces.webapp.FacesServlet in
the web application deployment descriptor as a means to abort the
configuration process and reduce startup time for applications that do
not use JavaServer Faces Technology.

[#50638881_pgfId-1020016]## 

'''''

[.footnoteNumber]# 1.# [#50638877_pgfId-1007457]##Typically, component
selection will be driven by the occurrence of special markup (such as
the existence of a JSP custom tag) in the template text associated with
the component tree.

[.footnoteNumber]# 2.# [#50638877_pgfId-1007461]##For example, this
technique is used when custom tags in JSP pages are utilized as the
rendering technology, as described in link:JSF.htm#50638860_43229[See
Integration with JSP].

[.footnoteNumber]# 3.# [#50638877_pgfId-1007689]##The default
_ViewHandler_ implementation performs a _RequestDispatcher.forward_ call
to the web application resource that will actually perform the
rendering, so it expects the tree identifier to be the context-relative
path (starting with a _/_ character) of the web application resource

[.footnoteNumber]# 4.# [#50638851_pgfId-1022784]##In a JSP environment,
these steps are performed by a custom tag extending ConverterTag.

[.footnoteNumber]# 5.# [#50638857_pgfId-1008327]##Accessing attributes
via this Map will cause the creation of a session associated with this
request, if none currently exists.

[.footnoteNumber]# 6.# [#50638861_pgfId-1016190]##Converters can also be
requested based on the object class of the value to be converted.

[.footnoteNumber]# 7.# [#50638861_pgfId-1019699]##It is an error to
specify more than one <navigation-case>, nested within one or more
<navigation-rule> elements with the same <from-view-id> matching
pattern, that have exactly the same combination of <from-xxx>, unless
each is discriminated by a unique <if> element.

[.footnoteNumber]# 8.# [#50638861_pgfId-1019717]##The presence of the
<if> element in the absense of the <from-outcome> element is
characterized as an alternate, contextual means of obtai

[#50638861_pgfId-1019706]##ning a logical outcome and thus the
navigation case is checked even when the application action returns a a
null (or void) outcome value.

[.footnoteNumber]# 9.# [#50638861_pgfId-1019712]##Note that multiple
conditions can be checked using the built-in operators and grouping
provided by the Expression Language (e.g., and, or, not).

[.footnoteNumber]# 10.# [#50638861_pgfId-1016340]##Or, equivalently,
with no _<from-view-id>_ element at all.

[.footnoteNumber]# 11.# [#50638861_pgfId-1016889]##The implementation
classes for attached object must include a public zero-arguments
constructor.

[.footnoteNumber]# 12.# [#50638861_pgfId-1017184]##The actual _Method_
selected for execution must be selected as if by calling
Class.getMethod() and passing the method name and the parameters
signature specified in the createMethodBinding() call.

[.footnoteNumber]# 13.# [#50638860_pgfId-1032089]##If this extension is
used, it must be declared in the web application deployment descriptor,
as described in the JSP 2.0 (or later) specification.

[.footnoteNumber]# 14.# [#50638860_pgfId-1032117]##This example
illustrates a non-normative convention for naming custom actions based
on a combination of the component name and the renderer type. This
convention is useful, but not required; custom actions may be given any
desired custom action name; however the convention is rigorously
followed in the Standard HTML RenderKit Tag Library.

[.footnoteNumber]# 15.# [#50638860_pgfId-1032169]##Consistent with the
way that namespace prefixes work in XML, the actual prefix used is
totally up to the page author, and has no semantic meaning. However, the
values shown above are the suggested defaults, which are used
consistently in tag library examples throughout this specification.

[.footnoteNumber]# 16.# [#50638860_pgfId-1032255]##If you need multiple
components in a facet, nest them inside a <h:panelGroup> custom action
that is the value of the facet.

[.footnoteNumber]# 17.# [#50638860_pgfId-1032284]##In a JSP 2.0 or later
environment, the same effect can be accomplished by using
<include-prelude> and <include-coda> elements in the <jsp-config>
element in the web application deployment descriptor.

[.footnoteNumber]# 18.# [#50638860_pgfId-1036000]##This component has no
associated Renderer, so the getRendererType() method must return null
instead of a renderer type.

[.footnoteNumber]# 19.# [#50638850_pgfId-1032058]##Identified by XPath
selection expressions.
